<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>其他 | 云原生资料库</title>
    <link>https://lib.jimmysong.io/category/%E5%85%B6%E4%BB%96/</link>
      <atom:link href="https://lib.jimmysong.io/category/%E5%85%B6%E4%BB%96/index.xml" rel="self" type="application/rss+xml" />
    <description>其他</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><lastBuildDate>Mon, 13 Nov 2023 07:00:00 +0800</lastBuildDate>
    <image>
      <url>https://lib.jimmysong.io/media/sharing.png</url>
      <title>其他</title>
      <link>https://lib.jimmysong.io/category/%E5%85%B6%E4%BB%96/</link>
    </image>
    
    <item>
      <title>KubeCon Chicago 主要收获：人工智能（AI）的缓慢崛起，平台工程的主导地位，以及 KubeCon NA 2023 对开发者体验的重新关注</title>
      <link>https://lib.jimmysong.io/blog/kubecon-chicago-key-takeaways/</link>
      <pubDate>Mon, 13 Nov 2023 07:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/blog/kubecon-chicago-key-takeaways/</guid>
      <description>&lt;p&gt;本文译自：&lt;a href=&#34;https://danielbryantuk.medium.com/kubecon-chicago-key-takeaways-3de5ca13b375&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://danielbryantuk.medium.com/kubecon-chicago-key-takeaways-3de5ca13b375&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;摘要：本文讨论了 KubeCon 的主要议题，包括平台工程、Kubernetes 的不断发展、开发者体验的重要性、对应用开发和集成的关注、云原生通信的捆绑问题、安全问题的重要性、对可持续性的关注，以及社区的力量。文章强调了在标准化和创新之间取得平衡的重要性，并预测云原生的未来将看到更多的 AI/LLMs。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;这次 KubeCon NA 对我来说是一次非常不同的体验，因为我不是代表公司或办展位。然而，我仍然度过了一段愉快的时光，与云原生社区的许多人见面真是太棒了。回到芝加哥也很不错，这座城市对我们很好 —— 我几乎忘记了我有多喜欢芝加哥式深盘披萨！&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/kubecon-chicago-key-takeaways/f1_hu4164b9bad2fea2a2013299fb70947f4c_127745_4159c88f1ab0e3f5c8db6a47eb7df806.webp 400w,
               /blog/kubecon-chicago-key-takeaways/f1_hu4164b9bad2fea2a2013299fb70947f4c_127745_c4bf27d2653ae6ecdaad24a3fb149c7a.webp 760w,
               /blog/kubecon-chicago-key-takeaways/f1_hu4164b9bad2fea2a2013299fb70947f4c_127745_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://lib.jimmysong.io/blog/kubecon-chicago-key-takeaways/f1_hu4164b9bad2fea2a2013299fb70947f4c_127745_4159c88f1ab0e3f5c8db6a47eb7df806.webp&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;以下是我从 KubeCon NA 2023 中得出的主要收获：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;云原生社区正在缓慢接受AI/LLM&lt;/li&gt;
&lt;li&gt;DevOps 已经过时：平台工程万物&lt;/li&gt;
&lt;li&gt;山中有金！在平台激战中销售镐和铲子&lt;/li&gt;
&lt;li&gt;Kubernetes 应该保持不完整（并不断发展）&lt;/li&gt;
&lt;li&gt;别忘了开发者体验！&lt;/li&gt;
&lt;li&gt;增加对应用程序开发和集成的关注&lt;/li&gt;
&lt;li&gt;云原生通信：打包获胜？&lt;/li&gt;
&lt;li&gt;安全是大生意&lt;/li&gt;
&lt;li&gt;更加关注可持续性：可观察性、扩展性和 FinOps&lt;/li&gt;
&lt;li&gt;社区，社区，社区&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;背景设定迎来了后期采用者&#34;&gt;背景设定：迎来了后期采用者&lt;/h2&gt;
&lt;p&gt;我从参加 KubeCon 芝加哥得到的总体感觉是，我们已经完全进入了&lt;a href=&#34;https://en.wikipedia.org/wiki/Diffusion_of_innovations&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;创新扩散&lt;/a&gt;的后期采用者阶段。&lt;/p&gt;
&lt;p&gt;当然，像 KubeCon 这样的会议存在一个危险，即陷入（云原生）泡沫，走出会议时很容易认为整个世界都在运行 Kubernetes。这并不是真的，而且“&lt;a href=&#34;https://www.gartner.com/en/newsroom/press-releases/2023-10-30-gartner-says-50-percent-of-critical-enterprise-applications-will-reside-outside-of-centralized-public-cloud-locations-through-2027&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gartner 表示到 2027 年，50% 的关键企业应用将存储在集中的公共云位置之外&lt;/a&gt;”。然而，如果你睁大眼睛看，几乎 50% 的工作负载正在云中运行（或将要运行），这标志着后期采用者的到来。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/kubecon-chicago-key-takeaways/f2_hu91ab04416f541095f56350d945cdf648_193229_5133806e3b1d4d9c646b9f8ead723528.webp 400w,
               /blog/kubecon-chicago-key-takeaways/f2_hu91ab04416f541095f56350d945cdf648_193229_0c718aea026aacb73c27d94929f83495.webp 760w,
               /blog/kubecon-chicago-key-takeaways/f2_hu91ab04416f541095f56350d945cdf648_193229_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://lib.jimmysong.io/blog/kubecon-chicago-key-takeaways/f2_hu91ab04416f541095f56350d945cdf648_193229_5133806e3b1d4d9c646b9f8ead723528.webp&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;我从活动的主题演讲和厂商展厅中感受到了这种转变。更多的强调放在了可靠性和值得信赖性上，而不是创新，产品套件和易于集成而不是“最佳解决方案”，以及伙伴关系和合作而不是个别组织的开创性。&lt;/p&gt;
&lt;p&gt;有了这个背景，让我们更深入地了解这些主要收获！&lt;/p&gt;
&lt;h2 id=&#34;云原生社区正在缓慢接受aillm&#34;&gt;云原生社区正在缓慢接受AI/LLM&lt;/h2&gt;
&lt;p&gt;与同一天举行的 KubeCon NA 同期活动的 &lt;a href=&#34;https://devday.openai.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenAI DevDay&lt;/a&gt; 形成鲜明对比，KubeCon 上几乎没有关于人工智能的内容。如果你还没有观看 &lt;a href=&#34;https://www.youtube.com/watch?v=U9mJuUkhUzk&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenAI DevDay 的主题演讲&lt;/a&gt;，我鼓励你看看。Ed Sim 在他的每周 &lt;a href=&#34;https://www.whatshotit.vc/p/whats-in-enterprise-itvc-367&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;企业IT/VC快讯&lt;/a&gt; 中也提供了一个很好的总结。&lt;/p&gt;
&lt;p&gt;当然，KubeCon 的第一天主题演讲以人工智能为主题，但这似乎有点“外挂”，更侧重于为 AI/LLM 提供基础设施，而不是在开发或运营工作流中使用。在这里我不想过于判断，因为像 KubeCon 这样的活动需要数月的策划，而 AI 的发展是以每天的速度发生的。&lt;/p&gt;
&lt;p&gt;一些厂商的展位专注于“云端的 ChatGPT”，但我与赞助商的大多数交谈都集中在构建平台的现有问题上。如果你对在平台空间中使用 AI 的潜力感兴趣，我建议你在最近的 &lt;a href=&#34;https://www.infoq.com/podcasts/cloud-devops-trends-2023/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;InfoQ 云和 DevOps 趋势报告播客&lt;/a&gt; 中与几位云原生和 DevOps 领导人，包括 Helen Beal、Abby Bangser、Matt Campbell 和 Steef-Jan Wiggers 一起聊一聊。&lt;/p&gt;
&lt;h2 id=&#34;devops-已经过时平台工程万物&#34;&gt;DevOps 已经过时：平台工程万物！&lt;/h2&gt;
&lt;p&gt;我相信我们都看过 Minions/Gru 平台工程和 DevOps 的表情包（如果没有，在我 &lt;a href=&#34;https://blog.getambassador.io/kubecon-eu-cloudnativecon-2023-summary-devex-debugging-and-doubling-down-on-community-82abee5853b3#acc6&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;KubeCon EU 2023 摘要&lt;/a&gt; 中提到过），而在 KubeCon 上每个人都在强调这一点。如果你搜索 &lt;a href=&#34;https://events.linuxfoundation.org/kubecon-cloudnativecon-north-america/program/schedule/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;程序日程&lt;/a&gt;，你会发现至少有两倍于提到 DevOps 的演讲数量的演讲提到了平台工程，而几乎没有一个演讲是以 DevOps 为标题的。&lt;/p&gt;
&lt;p&gt;这是这个领域的自然演变，伴随着这种变化的好与坏。&lt;/p&gt;
&lt;p&gt;“好”的是，我们正在围绕这个主题形成一个社区，并在行业内形成最佳实践。我要向云原生计算基金会（CNCF）TAG App 交付团队致以崇高的赞扬，因为他们发布了他们的“&lt;a href=&#34;https://tag-app-delivery.cncf.io/whitepapers/platform-eng-maturity-model/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;平台工程成熟度模型&lt;/a&gt;”（以及向云原生猫的 Abby Bangser 致以特别的赞扬）&lt;/p&gt;
&lt;p&gt;在 KubeCon EU 2024 中还将举办 &lt;a href=&#34;https://events.linuxfoundation.org/kubecon-cloudnativecon-europe/co-located-events/platform-engineering-day/#call-for-proposals&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;平台工程日同期活动&lt;/a&gt;。自从我整理了一堆关于社区中出现的平台工程思想，并在 KubeCon 2022 上呈现了“&lt;a href=&#34;https://www.youtube.com/watch?v=btUYeOa7JPI&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;从 Kubernetes 到 PaaS 再到…嗯，下一步是什么？&lt;/a&gt;”的想法后，我们走了很长的路。&lt;/p&gt;
&lt;h2 id=&#34;山中有金在平台激战中销售镐和铲子&#34;&gt;山中有金！在平台激战中销售镐和铲子&lt;/h2&gt;
&lt;p&gt;每个人都采用平台工程的坏处是，许多供应商面临“平台洗牌”的危险。当然，许多现有的 CNCF 景观灵感来自的产品在官方成为一个事物之前就帮助人们构建了平台。但是我不确定我在 KubeCon 上看到的一切都被市场营销为与平台工程友好。这意味着最终用户在购买产品时必须更仔细地查看，以确保它们符合他们的需求。&lt;/p&gt;
&lt;p&gt;如果一个工具与现有的云原生堆栈集成不良，没有被构建来解决明确的用例（即“工作要完成的任务”），并且不能以自助服务的方式使用，那么它可能没有考虑到平台工程的概念。&lt;/p&gt;
&lt;p&gt;当然，在任何（平台工程）淘金热中，总是有机会卖镐和铲子。&lt;/p&gt;
&lt;h2 id=&#34;kubernetes-应该保持不完整并不断发展&#34;&gt;Kubernetes 应该保持不完整（并不断发展）&lt;/h2&gt;
&lt;p&gt;我非常喜欢 Tim Hockins 在最后一天的主题演讲，““愿景的愿景 — Kubernetes 在其第二个十年的表现”，他在演讲中谈到了在短期内做出妥协以获得长期愿景的价值。&lt;/p&gt;
&lt;p&gt;社区本可以尝试解决所有云原生挑战，并将所有平台工具集成到 Kubernetes 中。然而，Tim 强调了这在 OpenStack 中已经尝试过了…并且结果存疑。&lt;/p&gt;
&lt;p&gt;这个概念在 Tim Bannister 的一条推文中得到了很好的总结，Tim 在大屏幕上分享了这条推文：“Kubernetes 应该保持不完整。”引用我最喜欢的漫画/电影系列之一，Kubernetes 也许是“&lt;a href=&#34;https://batmanfactor.com/not-the-hero-we-deserve-why-the-quote-is-significant/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gotham 需要的英雄，但现在此刻理应拥有的英雄&lt;/a&gt;”。&lt;/p&gt;
&lt;h2 id=&#34;别忘了开发者体验&#34;&gt;别忘了开发者体验！&lt;/h2&gt;
&lt;p&gt;很高兴在 KubeCon NA 的主题演讲中看到几次提到开发者体验和重要性。KubeCon 历来是一个基础设施和运维焦点的事件，但我们不能忘记我们的主要（平台）客户：开发者。&lt;/p&gt;
&lt;p&gt;如果你不知道你的用户是谁以及他们最大的痛点是什么，你无法成功地定位你的产品。开发者是一群聪明的人，喜欢解决自己的问题，而且往往你的产品将与使用胶带和包线但能够“足够好地”完成工作的现状解决方案正面对决。&lt;/p&gt;
&lt;h2 id=&#34;加大对应用开发和集成的关注&#34;&gt;加大对应用开发和集成的关注&lt;/h2&gt;
&lt;p&gt;长期以来，我一直对 &lt;a href=&#34;https://dapr.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dapr&lt;/a&gt; 社区的工作印象深刻，可以说他们在突显云原生社区内应用开发者需求方面处于领先地位。对于不熟悉 CNCF 项目的人来说，Dapr 提供了用于通信、状态和工作流的集成 API。对于一些拥有一些灰发的人来说，可以将其视为云时代企业中间件（做得很好）。&lt;/p&gt;
&lt;p&gt;即使在云原生空间迅速采用 AI/LLMs，我们仍然需要关注定义正确抽象的问题；否则，我们将能够生成大量难以理解的代码！&lt;/p&gt;
&lt;p&gt;在我看来，Dapr 提供了构建分布式应用所需的几个非常有用的抽象，如发布 - 订阅、状态管理、分布式锁等。&lt;/p&gt;
&lt;p&gt;我参加了几次 Dapr 的讲座并留下了深刻印象。如果我要构建一个全新的云原生应用（甚至是演变中的旧应用），我会首先考虑这个项目：&lt;/p&gt;
&lt;p&gt;开源社区非常强大，Diagrid 的团队提供了几个出色的商业解决方案，减少了管理后端基础设施的摩擦和运营负担。我与 &lt;a href=&#34;https://twitter.com/mfussell&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mark Fussell&lt;/a&gt; 和 &lt;a href=&#34;https://twitter.com/bibryam&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bilgin Ibryam&lt;/a&gt; 进行了几次很好的交流，我鼓励你在 X 上关注他们。我的 InfoQ 朋友 Thomas Betts 还撰写了对最新的 Diagrid 商业发布的摘要：“&lt;a href=&#34;https://www.infoq.com/news/2023/11/diagrid-managed-dapr/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Diagrid 推出 Catalyst，一个无服务器、全托管的 Dapr 产品&lt;/a&gt;。”&lt;/p&gt;
&lt;h2 id=&#34;云原生通信捆绑是否王道&#34;&gt;云原生通信：捆绑是否王道？&lt;/h2&gt;
&lt;p&gt;正如 Netscape 的前首席执行官 Jim Barksdale 曾经著名地说过的，创造利润的方式只有两种：一种是捆绑，另一种是解绑。而在云原生生态系统中，我们看到了很多捆绑！&lt;/p&gt;
&lt;p&gt;这种观察在云原生通信栈领域尤为突出。&lt;/p&gt;
&lt;p&gt;我多次讨论过这一点，包括最近的演讲：“&lt;a href=&#34;https://speakerdeck.com/danielbryantuk/devopscon-the-busy-platform-engineers-guide-to-api-gateways&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;忙碌的平台工程师指南：API 网关&lt;/a&gt;” 。在这个栈中，大多数平台构建者将需要三个组件：API 网关（用于南北流量管理）、服务网格（用于东西流量）和容器本地接口或 CNI（用于所有底层软件定义网络）。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/kubecon-chicago-key-takeaways/f3_hu4874f52d0f216b9017c8c9c34030c728_733513_97f683a665b5d587047105fb7a72c6bc.webp 400w,
               /blog/kubecon-chicago-key-takeaways/f3_hu4874f52d0f216b9017c8c9c34030c728_733513_e2518345718e96ef2aa16e08ffa97e19.webp 760w,
               /blog/kubecon-chicago-key-takeaways/f3_hu4874f52d0f216b9017c8c9c34030c728_733513_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://lib.jimmysong.io/blog/kubecon-chicago-key-takeaways/f3_hu4874f52d0f216b9017c8c9c34030c728_733513_97f683a665b5d587047105fb7a72c6bc.webp&#34;
               width=&#34;760&#34;
               height=&#34;480&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;我会坦言我的偏见——曾在 Ambassador Labs 工作，制造 &lt;a href=&#34;https://www.getambassador.io/products/edge-stack/api-gateway&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Edge Stack&lt;/a&gt;，并且是 &lt;a href=&#34;https://linkerd.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Linkerd&lt;/a&gt; 团队的大支持者——我喜欢选择“最佳解决方案”并进行集成。&lt;/p&gt;
&lt;p&gt;然而，商业趋势正在朝着捆绑方向发展。我看到该领域的各种供应商在其最新产品中上下移动，例如 Isovalent（Cilium CNI 的创建者）通过拥抱服务网格和 API 网关而向上移动。Solo 通过将 CNI（Cilium）纳入其 Istio 服务网格和 API 网关产品中而向下移动。Tetrate、Kong、Tyk、Traefik 等公司也在进行类似的尝试。&lt;/p&gt;
&lt;p&gt;如果你追踪（和关注）这个循环（和资金），明智的做法似乎是倾向于捆绑。&lt;/p&gt;
&lt;p&gt;我相信这种学习不仅适用于云原生通信领域。总的来说，企业正在寻求整合供应商，减少自己动手解决方案的总体拥有成本（TCO），并将云支出承诺转移到云市场内提供的端到端解决方案上。&lt;/p&gt;
&lt;p&gt;在相关的讨论中，由 &lt;a href=&#34;https://twitter.com/danielbryantuk/status/1722034551650648507&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Keith Mattix&lt;/a&gt; 主持的服务网格辩论小组是我在会议上最喜欢的会话之一。与通常的所有人都同意的形式不同，参与者没有保留，导致了一场有趣而富有信息的讨论！&lt;/p&gt;
&lt;h2 id=&#34;安全是大生意&#34;&gt;安全是大生意&lt;/h2&gt;
&lt;p&gt;我将最后的三个要点保持简短，但我想提到展厅里满是安全解决方案，从安全的供应链解决方案到网络入侵检测和权限管理。这个领域有很多兴趣（和资金）。&lt;/p&gt;
&lt;p&gt;演讲还很好地涵盖了这些主题，KubeCon 共同主席 &lt;a href=&#34;https://twitter.com/ffkiv&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Frederick Kautz&lt;/a&gt; 和 CNCF 的成员们强调了安全（以及相关的 CNCF 项目）在主题演讲中的重要性。&lt;/p&gt;
&lt;h2 id=&#34;更加关注可持续性可观测性扩展性和-finops&#34;&gt;更加关注可持续性：可观测性、扩展性和 FinOps&lt;/h2&gt;
&lt;p&gt;关键演讲中突出的另一个话题是可持续性。有一个有趣的小组讨论：“&lt;a href=&#34;https://sched.co/1R4Tl&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云中的环境可持续性并非神话&lt;/a&gt;” ，甚至 AWS 赞助的主题演讲也侧重于这一点。&lt;/p&gt;
&lt;p&gt;这是一个重要的话题，通过可观测性、自动扩展和 FinOps 来探讨理解和监控你的云（碳）足迹的基本驱动因素是很好的。&lt;/p&gt;
&lt;p&gt;对于对 FinOps 这个主题不熟悉的人，我从 Roi Ravhon 那里学到了很多，他在我最近与他录制的 InfoQ 播客中分享了一些内容：“&lt;a href=&#34;https://www.infoq.com/podcasts/finops-cloud-cost-optimization/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Roi Ravhon 谈 FinOps、应用单元经济学和云成本优化&lt;/a&gt;。”&lt;/p&gt;
&lt;h2 id=&#34;社区社区社区&#34;&gt;社区，社区，社区&lt;/h2&gt;
&lt;p&gt;我不能写一篇 KubeCon 总结而不提到社区的力量。在主题演讲中看到了许多成功故事和奖项真是太棒了。&lt;/p&gt;
&lt;p&gt;我参加这些活动的主要原因之一就是与社区的成员见面和交流。走向云原生的道路并不总是容易，我喜欢与同行交流故事。今年我有点懒，照片没拍多少，但我的 devrel 朋友 Marino Wijay 和 Daniel Oh 帮我拍了一些。&lt;/p&gt;
&lt;p&gt;我还有机会与我想见的每个人交流（KubeCon 很忙！），所以如果你想安排一个 Zoom 会话，可以通过社交媒体与我联系。否则，希望我们很快在会议上见面！&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;正如我在文章开头提到的，参加这次 KubeCon 让我感到非常愉快。社区和周围的支持体系显然正在不断发展，现在我们面临的困难任务是在标准化和创新之间取得平衡。&lt;/p&gt;
&lt;p&gt;我相信云原生的未来光明无限。然而，我认为我们将在未来看到更多种类的 AI/LLMs 🙂&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JWT 组件详解</title>
      <link>https://lib.jimmysong.io/blog/jwt-components-explained/</link>
      <pubDate>Mon, 27 Mar 2023 17:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/blog/jwt-components-explained/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;译者注：本文译自 &lt;a href=&#34;https://fusionauth.io/learn/expert-advice/tokens/jwt-components-explained&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Fusion Auth Developer&lt;/a&gt;。JSON Web Token（通常缩写为 JWT）是一种通常与 OAuth2 等标准协议一起使用的令牌。本文解释了 JWT 的组成部分和工作原理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在我们继续之前，重要的是要注意 JWT 通常被错误地称为 &lt;code&gt;JWT Tokens&lt;/code&gt;。在末尾添加 &lt;code&gt;Token&lt;/code&gt; 将会使其变成 &lt;code&gt;JSON Web Token Token&lt;/code&gt;。因此，在本文中，我们省略末尾的 &lt;code&gt;Token&lt;/code&gt; 并简单地称之为 &lt;code&gt;JWT&lt;/code&gt;，因为这是更正确的名称。同样地，由于 JWT 通常用作身份验证和授权过程的一部分，一些人将其称为 &lt;code&gt;Authentication Tokens&lt;/code&gt; 或 &lt;code&gt;JWT Authentication Tokens&lt;/code&gt;。从技术上讲，JWT 只是一个包含 Base64 编码的 JSON 的令牌。它可以用于许多不同的用例，&lt;em&gt;包括&lt;/em&gt;身份验证和授权。因此，在本文中，我们不使用这个术语，而是讨论如何在身份验证过程中使用 JWT。&lt;/p&gt;
&lt;p&gt;让我们开始吧！这是一个新生成的 JWT。为清楚起见添加了换行符，但它们通常不存在。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImY1ODg5MGQxOSJ9.eyJhdWQiO
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;iI4NWEwMzg2Ny1kY2NmLTQ4ODItYWRkZS0xYTc5YWVlYzUwZGYiLCJleHAiOjE2NDQ4ODQ
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;xODUsImlhdCI6MTY0NDg4MDU4NSwiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiIwMDAwMDAwM
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;C0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDEiLCJqdGkiOiIzZGQ2NDM0ZC03OWE5LTR
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kMTUtOThiNS03YjUxZGJiMmNkMzEiLCJhdXRoZW50aWNhdGlvblR5cGUiOiJQQVNTV09SR
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;CIsImVtYWlsIjoiYWRtaW5AZnVzaW9uYXV0aC5pbyIsImVtYWlsX3ZlcmlmaWVkIjp0cnV
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;lLCJhcHBsaWNhdGlvbklkIjoiODVhMDM4NjctZGNjZi00ODgyLWFkZGUtMWE3OWFlZWM1M
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;GRmIiwicm9sZXMiOlsiY2VvIl19.dee-Ke6RzR0G9avaLNRZf1GUCDfe8Zbk9L2c7yaqKME
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这可能看起来像是一堆乱码，但随着您对 JWT 以及它们在 OAuth2 或身份验证过程中的使用方式了解得更多，它开始变得更有意义了。&lt;/p&gt;
&lt;p&gt;有几种类型的 JSON Web 令牌，但我将重点介绍已签名的 JWT，因为它们是最常见的。签名的 JWT 也可以称为 JWS。它由三个部分组成，以句号分隔。&lt;/p&gt;
&lt;p&gt;有一个标头，在上面的 JWT 中以&lt;code&gt;eyJhbGc&lt;/code&gt;开头。然后有一个主体或有效载荷，上面以&lt;code&gt;eyJhdWQ&lt;/code&gt;开头。最后有一个签名，在示例 JWT 中以&lt;code&gt;dee-K&lt;/code&gt;开头。&lt;/p&gt;
&lt;p&gt;JWT 如何工作？让我们拆开这个示例 JWT 并深入了解一下。&lt;/p&gt;
&lt;h2 id=&#34;jwt-标头解释&#34;&gt;JWT 标头解释&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImY1ODg5MGQxOSJ9&lt;/code&gt;是 JWT 的标头。JWT 标头包含有关 JWT 的元数据，包括密钥标识符、用于登录的算法和其他信息。&lt;/p&gt;
&lt;p&gt;如果您通过 base64 解码器运行上述标头：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImY1ODg5MGQxOSJ9&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;base64 -d
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你会看到这个 JSON：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;alg&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;HS256&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;typ&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;JWT&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;kid&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;f58890d19&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;HS256&lt;/code&gt;表示 JWT 是使用对称算法签名的，特别是使用 SHA-256 的 HMAC。&lt;/p&gt;
&lt;p&gt;算法列表和实现支持级别如下。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;“alg” Param Value&lt;/th&gt;
&lt;th&gt;Digital Signature or MAC Algorithm&lt;/th&gt;
&lt;th&gt;Implementation Requirements&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;HS256&lt;/td&gt;
&lt;td&gt;HMAC using SHA-256&lt;/td&gt;
&lt;td&gt;Required&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HS384&lt;/td&gt;
&lt;td&gt;HMAC using SHA-384&lt;/td&gt;
&lt;td&gt;Optional&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HS512&lt;/td&gt;
&lt;td&gt;HMAC using SHA-512&lt;/td&gt;
&lt;td&gt;Optional&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RS256&lt;/td&gt;
&lt;td&gt;RSASSA-PKCS1-v1_5 using SHA-256&lt;/td&gt;
&lt;td&gt;Recommended&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RS384&lt;/td&gt;
&lt;td&gt;RSASSA-PKCS1-v1_5 using SHA-384&lt;/td&gt;
&lt;td&gt;Optional&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RS512&lt;/td&gt;
&lt;td&gt;RSASSA-PKCS1-v1_5 using SHA-512&lt;/td&gt;
&lt;td&gt;Optional&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ES256&lt;/td&gt;
&lt;td&gt;ECDSA using P-256 and SHA-256&lt;/td&gt;
&lt;td&gt;Recommended+&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ES384&lt;/td&gt;
&lt;td&gt;ECDSA using P-384 and SHA-384&lt;/td&gt;
&lt;td&gt;Optional&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ES512&lt;/td&gt;
&lt;td&gt;ECDSA using P-521 and SHA-512&lt;/td&gt;
&lt;td&gt;Optional&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PS256&lt;/td&gt;
&lt;td&gt;RSASSA-PSS using SHA-256 and MGF1 with SHA-256&lt;/td&gt;
&lt;td&gt;Optional&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PS384&lt;/td&gt;
&lt;td&gt;RSASSA-PSS using SHA-384 and MGF1 with SHA-384&lt;/td&gt;
&lt;td&gt;Optional&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PS512&lt;/td&gt;
&lt;td&gt;RSASSA-PSS using SHA-512 and MGF1 with SHA-512&lt;/td&gt;
&lt;td&gt;Optional&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;none&lt;/td&gt;
&lt;td&gt;No digital signature or MAC performed&lt;/td&gt;
&lt;td&gt;Optional&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;此表取自 RFC 7518。由于仅 HS256 需要符合规范，请查阅用于创建 JWT 的软件或库以获取有关受支持算法的详细信息。&lt;/p&gt;
&lt;p&gt;其他元数据也存储在 JWT 的这一部分中。&lt;code&gt;typ&lt;/code&gt;标头指示 JWT 的类型。在本例中，该值为&lt;code&gt;JWT&lt;/code&gt;，但其他值均有效。例如，如果 JWT 符合 RFC 9068，它可能具有&lt;code&gt;at+JWT&lt;/code&gt;指示它是访问令牌的值。&lt;/p&gt;
&lt;p&gt;该&lt;code&gt;kid&lt;/code&gt;值指示用于签署 JWT 的密钥。对于对称密钥，&lt;code&gt;kid&lt;/code&gt;可用于在秘密保险库中查找值。对于非对称签名算法，此值让 JWT 的消费者查找与签署此 JWT 的私钥相对应的正确公钥。正确处理此值对于签名验证和 JWT 负载的完整性至关重要。&lt;/p&gt;
&lt;p&gt;通常情况下，将标头值的大部分处理过程转移到库中。有许多优秀的开源 JWT 处理库。您应该了解这些库的价值，但可能不必实现实际处理。&lt;/p&gt;
&lt;h2 id=&#34;jwt-令牌主体&#34;&gt;JWT 令牌主体&lt;/h2&gt;
&lt;p&gt;有效载荷或主体是使 JWT 变得有趣的地方。此部分包含创建 JWT 以传输的数据。例如，如果 JWT 表示授权访问某些数据或功能的用户，则有效载荷包含用户数据，例如角色或其他授权信息。&lt;/p&gt;
&lt;p&gt;这是来自示例 JWT 的有效负载：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;eyJhdWQiOiI&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;NWEwMzg&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;Ny&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;kY&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;NmLTQ&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;ODItYWRkZS&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;xYTc&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;YWVlYzUwZGYiLCJleHAiOjE&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;NDQ&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;ODQxODUsImlhdCI&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;MTY&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;NDg&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;MDU&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;NSwiaXNzIjoiYWNtZS&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;jb&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;iLCJzdWIiOiIwMDAwMDAwMC&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;wMDAwLTAwMDAtMDAwMC&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;wMDAwMDAwMDAwMDEiLCJqdGkiOiIzZGQ&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;NDM&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;ZC&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;03&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;OWE&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;LTRkMTUtOThiNS&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;03&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;YjUxZGJiMmNkMzEiLCJhdXRoZW&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;aWNhdGlvblR&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;cGUiOiJQQVNTV&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;09&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;SRCIsImVtYWlsIjoiYWRtaW&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;AZnVzaW&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;uYXV&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;aC&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;pbyIsImVtYWlsX&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;ZlcmlmaWVkIjp&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;cnVlLCJhcHBsaWNhdGlvbklkIjoiODVhMDM&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;NjctZGNjZi&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;ODgyLWFkZGUtMWE&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;OWFlZWM&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;MGRmIiwicm&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;sZXMiOlsiY&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;VvIl&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;19&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果您通过 base64 解码器运行示例负载：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;eyJhdWQiOiI4NWEwMzg2Ny1kY2NmLTQ4ODItYWRkZS0xYTc5YWVlYzUwZGYiLCJleHAiOjE2NDQ4ODQxODUsImlhdCI6MTY0NDg4MDU4NSwiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiIwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDEiLCJqdGkiOiIzZGQ2NDM0ZC03OWE5LTRkMTUtOThiNS03YjUxZGJiMmNkMzEiLCJhdXRoZW50aWNhdGlvblR5cGUiOiJQQVNTV09SRCIsImVtYWlsIjoiYWRtaW5AZnVzaW9uYXV0aC5pbyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJhcHBsaWNhdGlvbklkIjoiODVhMDM4NjctZGNjZi00ODgyLWFkZGUtMWE3OWFlZWM1MGRmIiwicm9sZXMiOlsiY2VvIl19&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;base64 -d
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你会看到这个 JSON：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;aud&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;85a03867-dccf-4882-adde-1a79aeec50df&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;exp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1644884185&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;iat&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1644880585&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;iss&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;acme.com&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;sub&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;00000000-0000-0000-0000-000000000001&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;jti&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;3dd6434d-79a9-4d15-98b5-7b51dbb2cd31&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;authenticationType&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;PASSWORD&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;admin@fusionauth.io&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;email_verified&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;applicationId&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;85a03867-dccf-4882-adde-1a79aeec50df&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;roles&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;ceo&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;请注意，创建签名 JWT 的算法可以删除 base64 填充，因此 JWT 末尾可能缺少符号。您可能需要将其添加回去才能解码 JWT 令牌。这取决于内容的长度。您可以&lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc7515#appendix-C&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在此处了解更多信息&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;如上所述，负载是您的应用程序所关心的，所以让我们更仔细地看一下这个 JSON。对象的每个键都称为“声明”（Claim）。&lt;/p&gt;
&lt;p&gt;一些声明是众所周知的，其含义由 IETF 等标准机构规定。您可以在此处查看&lt;a href=&#34;https://www.iana.org/assignments/jwt/jwt.xhtml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;此类声明的示例&lt;/a&gt;。这些包括示例令牌中的&lt;code&gt;iss&lt;/code&gt;和&lt;code&gt;aud&lt;/code&gt;声明。当它们出现在 JWT 的有效负载中时，这两者都具有定义的含义。&lt;/p&gt;
&lt;p&gt;还有其他非标准声明，例如&lt;code&gt;authenticationType&lt;/code&gt;。这些声明可能代表业务领域或自定义数据。例如，&lt;code&gt;authenticationType&lt;/code&gt;是 FusionAuth 使用的专有声明，用于指示身份验证方法，例如密码、刷新令牌或通过无密码链接。&lt;/p&gt;
&lt;p&gt;您可以向 JWT 添加您想要的任何声明，包括对 JWT 的下游消费者有用的数据。从&lt;code&gt;roles&lt;/code&gt;声明中可以看出，声明不必是简单的 JSON 原语。它们可以是任何可以用 JSON 表示的数据结构。&lt;/p&gt;
&lt;h2 id=&#34;声明验证&#34;&gt;声明验证&lt;/h2&gt;
&lt;p&gt;当代码与 JWT 一起出现时，它应该验证某些声明。至少，应检查这些声明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;iss&lt;/code&gt;标识 JWT 的发行者。只要 JWT 的发行者和消费者就有效值达成一致，并且消费者验证声明与已知的良好值相匹配，这个字符串到底是什么并不重要（UUID、域名、URL 或其他内容）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aud&lt;/code&gt;标识令牌的受众，即谁应该使用它。可以是标量或数组值。同样，JWT 的发行者和消费者应该就可接受的特定值达成一致。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nbf&lt;/code&gt; 和 &lt;code&gt;exp&lt;/code&gt;。这些声明确定令牌有效的时间范围。如果您要发行令牌以供将来使用，则该声明可能很有用。应始终设置 &lt;code&gt;exp&lt;/code&gt; 声明，即 JWT 不再有效的时间。与其他声明不同，它们具有定义的值格式：自 unix 纪元以来的秒数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了这些之外，还要验证业务领域特定的声明。例如，使用上述 JWT 的人可以在&lt;code&gt;authenticationType&lt;/code&gt;未知值时拒绝访问。&lt;/p&gt;
&lt;p&gt;避免将未使用的声明放入 JWT。虽然 JWT 的大小没有限制，但通常它们越大，签名和验证它们所需的 CPU 就越多，传输它们所需的时间也就越多。Benchmark 期望 JWT 了解性能特征。&lt;/p&gt;
&lt;h2 id=&#34;声明和安全&#34;&gt;声明和安全&lt;/h2&gt;
&lt;p&gt;拥有令牌的任何人都可以看到已签名 JWT 的声明。&lt;/p&gt;
&lt;p&gt;正如您在上面看到的，要以明文形式查看声明，您只需要一个 base64 解码器，它可以在每个命令行和互联网上的任何地方使用。&lt;/p&gt;
&lt;p&gt;因此，您不应将任何应该保密的内容放入 JWT 中。这包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;私人信息，例如政府 ID&lt;/li&gt;
&lt;li&gt;密码之类的秘密&lt;/li&gt;
&lt;li&gt;任何会泄露信息的东西，比如整数 id&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另一个安全问题与&lt;code&gt;aud&lt;/code&gt;声明的验证有关。由于消费代码已经拥有令牌，验证&lt;code&gt;aud&lt;/code&gt;声明是否多此一举？&lt;code&gt;aud&lt;/code&gt;声明表明谁应该接收这个 JWT，但代码已经有了它。不，总是验证声明。&lt;/p&gt;
&lt;p&gt;为什么？&lt;/p&gt;
&lt;p&gt;想象一下您有两个不同 API 的场景。一个是创建和管理待办事项，另一个是计费 API，用于转账。这两个 API 都期望一些用户具有&lt;code&gt;admin&lt;/code&gt;角色。然而，就可以采取的行动而言，该角色意味着截然不同的事情。&lt;/p&gt;
&lt;p&gt;如果待办事项 API 和计费 API 均未验证是否为它们创建了任何给定的 JWT，则攻击者可以从具有该&lt;code&gt;admin&lt;/code&gt;角色的待办事项 API 中获取 JWT，并将其呈现给计费 API。&lt;/p&gt;
&lt;p&gt;这最多是一个错误，最坏的情况是特权升级，对银行账户产生负面影响。&lt;/p&gt;
&lt;h2 id=&#34;jwt-签名&#34;&gt;&lt;strong&gt;JWT 签名&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;JWT 的签名很关键，因为它保证了负载和标头的完整性。验证签名必须是 JWT 的任何消费者执行的第一步。如果签名不匹配，则不应进行进一步处理。&lt;/p&gt;
&lt;p&gt;虽然您可以阅读&lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc7515#page-15&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;规范的相关部分&lt;/a&gt;以了解签名是如何生成的，但高级概述是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;标头变成了 base64 URL 编码的字符串&lt;/li&gt;
&lt;li&gt;负载被转换为 base64 URL 编码的字符串&lt;/li&gt;
&lt;li&gt;它们由&lt;code&gt;.&lt;/code&gt; 连接&lt;/li&gt;
&lt;li&gt;生成的字符串通过所选的加密算法运行，连同相应的密钥&lt;/li&gt;
&lt;li&gt;签名是 base64 URL 编码的&lt;/li&gt;
&lt;li&gt;编码后的签名以 &lt;code&gt;.&lt;/code&gt; 作为分隔符附加到字符串&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当收到 JWT 时，可以执行相同的操作。如果生成的签名正确，则 JWT 的内容与创建时没有变化。&lt;/p&gt;
&lt;h2 id=&#34;json-web-令牌限制&#34;&gt;&lt;strong&gt;JSON Web 令牌限制&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;在规范中，JSON Web Tokens 的长度没有硬性限制。实际上，考虑一下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你打算在哪里存储 JWT&lt;/li&gt;
&lt;li&gt;大型 JWT 的性能损失是什么&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;存储&#34;&gt;存储&lt;/h2&gt;
&lt;p&gt;JWT 可以在 HTTP 标头中发送，存储在 cookie 中，并放置在表单参数中。在这些场景中，存储决定了 JWT 的最大长度。&lt;/p&gt;
&lt;p&gt;例如，浏览器中 cookie 的典型存储限制通常为 4096 字节，包括名称。HTTP 标头的限制因软件组件而异，但 8192 字节似乎是一个常见值。&lt;/p&gt;
&lt;p&gt;请查阅相关规范或其他资源以了解特定用例的限制，但请放心，JWT 没有固有的大小限制。&lt;/p&gt;
&lt;h2 id=&#34;性能影响&#34;&gt;性能影响&lt;/h2&gt;
&lt;p&gt;由于 JWT 可以包含许多不同类型的用户信息，因此开发人员可能会忍不住在其中放入太多信息。这会降低签名和验证步骤以及传输中的性能。&lt;/p&gt;
&lt;p&gt;对于前者的示例，以下是签署和验证两个不同 JWT 的基准测试结果。每个操作进行了 50,000 次。&lt;/p&gt;
&lt;p&gt;第一个 JWT 的正文长度约为 180 个字符；总编码令牌长度在 300 到 600 之间，具体取决于所使用的签名算法。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;hmac sign
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  1.632396   0.011794   1.644190 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;  1.656177&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;hmac verify
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  2.452983   0.015723   2.468706 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;  2.487930&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;rsa sign
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 28.409793   0.117695  28.527488 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt; 28.697615&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;rsa verify
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  3.086154   0.011869   3.098023 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;  3.109780&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ecc sign
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  4.248960   0.017153   4.266113 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;  4.285231&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ecc verify
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  7.057758   0.027116   7.084874 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;  7.113594&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下一个 JWT 负载大约有 1800 个字符，因此是前一个令牌大小的十倍。这具有 2400 到 2700 个字符的总令牌长度。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;hmac sign
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  3.356960   0.018175   3.375135 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;  3.389963&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;hmac verify
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  4.283810   0.018320   4.302130 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;  4.321095&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;rsa sign
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 32.703723   0.172346  32.876069 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt; 33.072665&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;rsa verify
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  5.300321   0.027455   5.327776 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;  5.358079&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ecc sign
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  6.557596   0.032239   6.589835 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;  6.624320&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ecc verify
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  9.184033   0.035617   9.219650 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;  9.259225&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;您可以看到，对于较长的 JWT，总时间增加了，但通常不是线性的。所用时间的增加范围从 RSA 签名的大约 20% 到 HMAC 签名的大约 100%。&lt;/p&gt;
&lt;p&gt;请注意传输更长的 JWT 所花费的额外时间；这可以用与任何其他 API 或 HTML 内容相同的方式进行测试和优化。&lt;/p&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;
&lt;p&gt;已签名的 JWT 具有标头、正文和签名。每个都在确保 JWT 可用于安全地存储和传输关键信息（无论是否与身份有关）方面发挥着至关重要的身份验证作用。了解所有这三个组件对于正确使用 JWT 也至关重要。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
