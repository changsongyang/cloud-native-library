[{"authors":null,"categories":null,"content":"欢迎来到云原生宝典——你的一站式云原生知识库。\n 开始阅读   ","date":1651536000,"expirydate":-62135596800,"kind":"section","lang":"zh","lastmod":1652173605,"objectID":"b19faf0f20ec6dc5b1b82bcc463e9659","permalink":"https://jimmysong.io/docs/cloud-native/","publishdate":"2022-05-03T00:00:00Z","relpermalink":"/docs/cloud-native/","section":"cloud-native","summary":"一站式云原生知识库","tags":null,"title":"云原生宝典","type":"book"},{"authors":null,"categories":null,"content":"本章将介绍什么是云原生、云原生应用。\n","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"zh","lastmod":1652173605,"objectID":"84f73c250ec51ab0040a2edb5cdec91b","permalink":"https://jimmysong.io/docs/cloud-native/intro/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/docs/cloud-native/intro/","section":"cloud-native","summary":"本章介绍什么是云原生。","tags":null,"title":"关于云原生","type":"book"},{"authors":null,"categories":null,"content":"本章将介绍什么是云原生、云原生应用。\n","date":1651536000,"expirydate":-62135596800,"kind":"section","lang":"zh","lastmod":1652173605,"objectID":"8bcfde77956a598c3ac9b7be1fa96051","permalink":"https://jimmysong.io/docs/cloud-native/kubernetes/","publishdate":"2022-05-03T00:00:00Z","relpermalink":"/docs/cloud-native/kubernetes/","section":"cloud-native","summary":"关于Kubernetes。","tags":null,"title":"Kubernetes","type":"book"},{"authors":null,"categories":null,"content":"本章将介绍什么是云原生、云原生应用。\n","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"zh","lastmod":1652173605,"objectID":"3387e00a683fd66a6132f4c422c9314e","permalink":"https://jimmysong.io/docs/cloud-native/service-mesh/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/docs/cloud-native/service-mesh/","section":"cloud-native","summary":"本章介绍服务网格。","tags":null,"title":"服务网格","type":"book"},{"authors":null,"categories":null,"content":"本章将介绍什么是云原生、云原生应用。\n","date":1651536000,"expirydate":-62135596800,"kind":"section","lang":"zh","lastmod":1652173605,"objectID":"d443b3d261cf296c83fcf85f14315f92","permalink":"https://jimmysong.io/docs/cloud-native/community/","publishdate":"2022-05-03T00:00:00Z","relpermalink":"/docs/cloud-native/community/","section":"cloud-native","summary":"社区","tags":null,"title":"社区","type":"book"},{"authors":null,"categories":null,"content":"","date":1649030400,"expirydate":-62135596800,"kind":"section","lang":"zh","lastmod":1652173605,"objectID":"","permalink":"https://jimmysong.io/docs/book/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/docs/book/","section":"book","summary":"","tags":null,"title":"Books","type":"book"},{"authors":null,"categories":null,"content":"众所周知，Kubernetes 是 Google 于 2014 年 6 月基于其内部使用的 Borg 系统开源出来的容器编排调度引擎。其实从 2000 年开始，Google 就开始基于容器研发三个容器管理系统，分别是 Borg、Omega 和 Kubernetes。这篇由 Google 工程师 Brendan Burns、Brian Grant、David Oppenheimer、Eric Brewer 和 John Wilkes 几人在 2016 年发表的《Borg, Omega, and Kubernetes》论文里，阐述了 Google 从 Borg 到 Kubernetes 这个旅程中所获得知识和经验教训。\nBorg、Omega 和 Kubernetes Google 从 2000 年初就开始使用容器（Linux 容器）系统，Google 开发出来的第一个统一的容器管理系统在内部称之为 “Borg”，用来管理长时间运行的生产服务和批处理服务。由于 Borg 的规模、功能的广泛性和超高的稳定性，一直到现在 Borg 在 Google 内部依然是主要的容器管理系统。\nGoogle 的第二套容器管理系统叫做 Omega，作为 Borg 的延伸，它的出现是出于提升 Borg 生态系统软件工程的愿望。Omega 应用到了很多在 Borg 内已经被认证的成功的模式，但是是从头开始来搭建以期更为一致的构架。由于越来越多的应用被开发并运行在 Borg 上，Google 开发了一个广泛的工具和服务的生态系统。它被应用到了很多在 Borg 内已经被认证的成功的模式，但是是从头开始来搭建以期更为一致的构架。这些系统提供了配置和更新 job 的机制，能够预测资源需求，动态地对在运行中的程序推送配置文件、服务发现、负载均衡、自动扩容、机器生命周期管理、额度管理等。许多 Omega 的创新（包括多个调度器）都被收录进了 Borg。\nGoogle 的第三套容器管理系统就是我们所熟知的 Kubernetes，它是针对在 Google 外部的对 Linux 容器感兴趣的开发者以及 Google 在公有云底层商业增长的考虑而研发的。和 Borg、Omega 完全是谷歌内部系统相比，Kubernetes 是开源的。像 Omega 一样，Kubernetes 在其核心有一个被分享的持久存储，有组件来检测相关 object 的变化。跟 Omega 不同的是，Omega 把存储直接暴露给信任的控制平面的组件，而在 Kubernete 中，提供了完全由特定领域更高层面的版本控制、认证、语义、策略的 REST API 接口，以服务更多的用户。更重要的是，Kubernetes 是由一群底层开发能力更强的开发者开发的，他们主要的设计目标是用更容易的方法去部署和管理复杂的分布式系统，同时仍能从容器提升的效率中受益。\n2014 年 Kubernetes 正式开源，2015 年被作为初创项目贡献给了云原生计算基金会（CNCF），从此开启了 Kubernetes 及云原生化的大潮。\n参考  Borg, Omega, and Kubernetes: Lessons learned from three container-management systems over a decade - queue.acm.org Borg、Omega 和 Kubernetes：谷歌十几年来从这三个容器管理系统中得到的经验教训 - dockone.io  ","date":1651532400,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1652173605,"objectID":"91d878fe08db7eaf59677aac500bc0fe","permalink":"https://jimmysong.io/docs/cloud-native/kubernetes/history/","publishdate":"2022-05-03T00:00:00+01:00","relpermalink":"/docs/cloud-native/kubernetes/history/","section":"cloud-native","summary":"众所周知，Kubernetes 是 Google 于 2014 年 6 月基于其内部使用的","tags":null,"title":"Kubernetes 的历史","type":"book"},{"authors":null,"categories":null,"content":"Service Mesh 又译作 “服务网格”，作为服务间通信的基础设施层。Buoyant 公司的 CEO Willian Morgan 在他的这篇文章 WHAT’S A SERVICE MESH? AND WHY DO I NEED ONE? 中解释了什么是 Service Mesh，为什么云原生应用需要 Service Mesh。\n服务网格是用于处理服务间通信的专用基础设施层。它负责通过包含现代云原生应用程序的复杂服务拓扑来可靠地传递请求。实际上，服务网格通常通过一组轻量级网络代理来实现，这些代理与应用程序代码一起部署，而不需要感知应用程序本身。—— Willian Morgan Buoyant CEO\n服务网格（Service Mesh）这个术语通常用于描述构成这些应用程序的微服务网络以及应用之间的交互。随着规模和复杂性的增长，服务网格越来越难以理解和管理。它的需求包括服务发现、负载均衡、故障恢复、指标收集和监控以及通常更加复杂的运维需求，例如 A/B 测试、金丝雀发布、限流、访问控制和端到端认证等。\n服务网格的特点 服务网格有如下几个特点：\n 应用程序间通讯的中间层 轻量级网络代理 应用程序无感知 解耦应用程序的重试 / 超时、监控、追踪和服务发现  目前两款流行的服务网格开源软件 Linkerd 和 Istio 都可以直接在 Kubernetes 中集成，其中 Linkerd 是 CNCF 成员项目，并在 2021 年 7 月毕业。Istio 在 2018 年 7 月 31 日宣布 1.0，并在 2020 年 7 月将 商标捐献给 Open Usage Commons。\n理解服务网格 如果用一句话来解释什么是服务网格，可以将它比作是应用程序或者说微服务间的 TCP/IP，负责服务之间的网络调用、限流、熔断和监控。对于编写应用程序来说一般无须关心 TCP/IP 这一层（比如通过 HTTP 协议的 RESTful 应用），同样使用服务网格也就无须关系服务之间的那些原来是通过应用程序或者其他框架实现的事情，比如 Spring Cloud、OSS，现在只要交给服务网格就可以了。\nPhil Calçado 在他的这篇博客 Pattern: Service Mesh 中详细解释了服务网格的来龙去脉：\n 从最原始的主机之间直接使用网线相连 网络层的出现 集成到应用程序内部的控制流 分解到应用程序外部的控制流 应用程序的中集成服务发现和断路器 出现了专门用于服务发现和断路器的软件包 / 库，如 Twitter 的 Finagle 和 Facebook 的 Proxygen，这时候还是集成在应用程序内部 出现了专门用于服务发现和断路器的开源软件，如 Netflix OSS、Airbnb 的 synapse 和 nerve 最后作为微服务的中间层服务网格出现  服务网格的架构如下图所示：\n   服务网格架构图  图片来自：Pattern: Service Mesh\n服务网格作为 sidecar 运行，对应用程序来说是透明，所有应用程序间的流量都会通过它，所以对应用程序流量的控制都可以在 serivce mesh 中实现。\n服务网格如何工作？ 下面以 Istio 为例讲解服务网格如何在 Kubernetes 中工作。\n Istio 将服务请求路由到目的地址，根据中的参数判断是到生产环境、测试环境还是 staging 环境中的服务（服务可能同时部署在这三个环境中），是路由到本地环境还是公有云环境？所有的这些路由信息可以动态配置，可以是全局配置也可以为某些服务单独配置。 当 Istio 确认了目的地址后，将流量发送到相应服务发现端点，在 Kubernetes 中是 service，然后 service 会将服务转发给后端的实例。 Istio 根据它观测到最近请求的延迟时间，选择出所有应用程序的实例中响应最快的实例。 Istio 将请求发送给该实例，同时记录响应类型和延迟数据。 如果该实例挂了、不响应了或者进程不工作了，Istio 将把请求发送到其他实例上重试。 如果该实例持续返回 error，Istio 会将该实例从负载均衡池中移除，稍后再周期性得重试。 如果请求的截止时间已过，Istio 主动失败该请求，而不是再次尝试添加负载。 Istio 以 metric 和分布式追踪的形式捕获上述行为的各个方面，这些追踪信息将发送到集中 metric 系统。  为何使用服务网格？ 服务网格并没有给我们带来新功能，它是用于解决其他工具已经解决过的问题，只不过这次是在云原生的 Kubernetes 环境下的实现。\n在传统的 MVC 三层 Web 应用程序架构下，服务之间的通讯并不复杂，在应用程序内部自己管理即可，但是在现今的复杂的大型网站情况下，单体应用被分解为众多的微服务，服务之间的依赖和通讯十分复杂，出现了 Twitter 开发的 Finagle、Netflix 开发的 Hystrix 和 Google 的 Stubby 这样的 “胖客户端” 库，这些就是早期的服务网格，但是它们都近适用于特定的环境和特定的开发语言，并不能作为平台级的服务网格支持。\n在云原生架构下，容器的使用给予了异构应用程序的更多可行性，Kubernetes 增强的应用的横向扩容能力，用户可以快速的编排出复杂环境、复杂依赖关系的应用程序，同时开发者又无须过分关心应用程序的监控、扩展性、服务发现和分布式追踪这些繁琐的事情而专注于程序开发，赋予开发者更多的创造性。\n参考  Istio: A service mesh for AWS ECS - medium.com 初次了解 Istio - istio.io Application Network Functions With ESBs, API Management, and Now.. Service Mesh? - blog.christianposta.com Pattern: Service Mesh - philcalcado.com Envoy 官方文档中文版 - cloudnative.to Istio 官方文档 - istio.io  ","date":1651532400,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1652173605,"objectID":"2910652ff2990412a0ab7789796542e9","permalink":"https://jimmysong.io/docs/cloud-native/service-mesh/what-is-service-mesh/","publishdate":"2022-05-03T00:00:00+01:00","relpermalink":"/docs/cloud-native/service-mesh/what-is-service-mesh/","section":"cloud-native","summary":"Service Mesh 又译作 “服务网格”，作为服务间通信的基础设施层。Buoy","tags":null,"title":"什么是服务网格？","type":"book"},{"authors":null,"categories":null,"content":"云原生（Cloud Native）这个词汇由来已久，以致于何时出现已无据可考。云原生开始大规模出现在受众视线中，与 Pivotal 提出的云原生应用的理念有着莫大的关系。我们现在谈到云原生，更多的指的是一种文化，而不具象为哪些技术体系。\n Pivotal 推出过 Pivotal Cloud Foundry 云原生应用平台和 Spring 开源 Java 开发框架，成为云原生应用架构中先驱者和探路者。Pivotal 是云原生应用平台第一股，2018 年在纽交所上市，2019 年底被 VMWare 以 27 亿美元收购，加入到 VMware 新的产品线 Tanzu。\n Pivotal 最初的定义 早在 2015 年 Pivotal 公司的 Matt Stine 写了一本叫做 迁移到云原生应用架构 的小册子，其中探讨了云原生应用架构的几个主要特征：\n 符合 12 因素应用 面向微服务架构 自服务敏捷架构 基于 API 的协作 抗脆弱性  笔者已于 2017 年翻译了本书，详见 迁移到云原生应用架构。\nCNCF 最初的定义 到了 2015 年 Google 主导成立了云原生计算基金会（CNCF），起初 CNCF 对云原生（Cloud Native）的定义包含以下三个方面：\n 应用容器化 面向微服务架构 应用支持容器的编排调度  重定义 到了 2018 年，随着近几年来云原生生态的不断壮大，所有主流云计算供应商都加入了该基金会，且从 Cloud Native Landscape 中可以看出云原生有意蚕食原先非云原生应用的部分。CNCF 基金会中的会员以及容纳的项目越来越多，该定义已经限制了云原生生态的发展，CNCF 为云原生进行了重新定位。\n以下是 CNCF 对云原生的重新定义（中英对照）：\n Cloud native technologies empower organizations to build and run scalable applications in modern, dynamic environments such as public, private, and hybrid clouds. Containers, service meshes, microservices, immutable infrastructure, and declarative APIs exemplify this approach.\n 云原生技术有利于各组织在公有云、私有云和混合云等新型动态环境中，构建和运行可弹性扩展的应用。云原生的代表技术包括容器、服务网格、微服务、不可变基础设施和声明式 API。\n These techniques enable loosely coupled systems that are resilient, manageable, and observable. Combined with robust automation, they allow engineers to make high-impact changes frequently and predictably with minimal toil.\n 这些技术能够构建容错性好、易于管理和便于观察的松耦合系统。结合可靠的自动化手段，云原生技术使工程师能够轻松地对系统作出频繁和可预测的重大变更。\n The Cloud Native Computing Foundation seeks to drive adoption of this paradigm by fostering and sustaining an ecosystem of open source, vendor-neutral projects. We democratize state-of-the-art patterns to make these innovations accessible for everyone.\n 云原生计算基金会（CNCF）致力于培育和维护一个厂商中立的开源生态系统，来推广云原生技术。我们通过将最前沿的模式民主化，让这些创新为大众所用。\n总结 关于什么是云原生的争论还在进行中，在笔者看来云原生是一种行为方式和设计理念，究其本质，凡是能够提高云上资源利用率和应用交付效率的行为或方式都是云原生的。云计算的发展史就是一部云原生化的历史。Kubernetes 开启了云原生的序幕，服务网格 Istio 的出现，引领了后 Kubernetes 时代的微服务，serverless 的再次兴起，使得云原生从基础设施层不断向应用架构层挺进，我们正处于一个云原生的新时代。\n参考  CNCF Cloud Native Definition v1.0 - github.com 云原生关乎文化，而不是容器 - cloudnative.to  ","date":1651532400,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1652173605,"objectID":"21c2ae08591f7667538b0f4c3296eceb","permalink":"https://jimmysong.io/docs/cloud-native/intro/what-is-cloud-native/","publishdate":"2022-05-03T00:00:00+01:00","relpermalink":"/docs/cloud-native/intro/what-is-cloud-native/","section":"cloud-native","summary":"云原生（Cloud Native）这个词汇由来已久，以致于何时","tags":null,"title":"什么是云原生？","type":"book"},{"authors":null,"categories":null,"content":"CNCF，全称Cloud Native Computing Foundation（云原生计算基金会），成立于 2015 年7月21日（于美国波特兰OSCON 2015上宣布），其最初的口号是坚持和整合开源技术来让编排容器作为微服务架构的一部分，其作为致力于云原生应用推广和普及的一支重要力量，不论您是云原生应用的开发者、管理者还是研究人员都有必要了解。\nCNCF作为一个厂商中立的基金会，致力于Github上的快速成长的开源技术的推广，如Kubernetes、Prometheus、Envoy等，帮助开发人员更快更好的构建出色的产品。CNCF 维护了一个全景图项目，详见 GitHub。\n关于CNCF的使命与组织方式请参考CNCF章程，概括的讲CNCF的使命包括以下三点：\n 容器化包装。 通过中心编排系统的动态资源管理。 面向微服务。  CNCF这个角色的作用是推广技术，形成社区，开源项目管理与推进生态系统健康发展。\n另外CNCF组织由以下部分组成：\n 会员：白金、金牌、银牌、最终用户、学术和非赢利成员，不同级别的会员在治理委员会中的投票权不同。 理事会：负责事务管理 TOC（技术监督委员会）：技术管理 最终用户社区：推动CNCF技术的采纳并选举最终用户技术咨询委员会 最终用户技术咨询委员会：为最终用户会议或向理事会提供咨询 营销委员会：市场推广  CNCF项目成熟度分级与毕业条件 每个CNCF项目都需要有个成熟度等级，申请成为CNCF项目的时候需要确定项目的成熟度级别。\n成熟度级别（Maturity Level）包括以下三种：\n sandbox（初级） incubating（孵化中） graduated（毕业）  是否可以成为CNCF项目需要通过Technical Oversight Committee (技术监督委员会）简称TOC，投票采取fallback策略，即回退策略，先从最高级别（graduated）开始，如果2/3多数投票通过的话则确认为该级别，如果没通过的话，则进行下一低级别的投票，如果一直到inception级别都没得到2/3多数投票通过的话，则拒绝其进入CNCF项目。\n当前所有的CNCF项目可以访问https://www.cncf.io/projects/ 。\n项目所达到相应成熟度需要满足的条件和投票机制见下图：\n   CNCF项目成熟度级别  TOC（技术监督委员会） TOC（Technical Oversight Committee）作为CNCF中的一个重要组织，它的作用是：\n 定义和维护技术视野 审批新项目加入组织，为项目设定概念架构 接受最终用户的反馈并映射到项目中 调整组件间的访问接口，协调组件之间兼容性  TOC成员通过选举产生，见选举时间表。\n参考 CNCF TOC：https://github.com/cncf/toc\nCNCF Ambassador CNCF Ambassador（CNCF 大使），人员名单详见 https://www.cncf.io/people/ambassadors/，笔者很荣幸作为第二位成为 CNCF Ambassador 的中国人。\n如何成为 CNCF Ambassador 可以通过以下方式成为 CNCF Ambassador：\n 成为 CNCF 会员或对成为某个 CNCF 的项目的贡献者 以 contributor、blogger、演讲者等身份参与 CNCF 社区项目 在社区中演讲或撰写博客 主持云原生社区 meetup  参考  AT\u0026amp;T, Box, Cisco, Cloud Foundry Foundation, CoreOS, Cycle Computing, Docker, eBay, Goldman Sachs, Google, Huawei, IBM, Intel, Joyent, Kismatic, Mesosphere, Red Hat, Switch SUPERNAP, Twitter, Univa, VMware and Weaveworks join new effort to build and maintain cloud native distributed systems - cncf.io  ","date":1651532400,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1652173605,"objectID":"8819c80b4f7e7ceb991ed10478045cd3","permalink":"https://jimmysong.io/docs/cloud-native/community/cncf/","publishdate":"2022-05-03T00:00:00+01:00","relpermalink":"/docs/cloud-native/community/cncf/","section":"cloud-native","summary":"CNCF，全称Cloud Native Computing Foundation（云原生计算","tags":null,"title":"云原生计算基金会（CNCF）","type":"book"},{"authors":null,"categories":null,"content":"将应用程序的功能划分为单独的进程运行在同一个最小调度单元中（例如 Kubernetes 中的 Pod）可以被视为 sidecar 模式。如下图所示，sidecar 模式允许您在应用程序旁边添加更多功能，而无需额外第三方组件配置或修改应用程序代码。\n   Sidecar 模式示意图  就像连接了 Sidecar 的三轮摩托车一样，在软件架构中， Sidecar 连接到父应用并且为其添加扩展或者增强功能。Sidecar 应用与主应用程序松散耦合。它可以屏蔽不同编程语言的差异，统一实现微服务的可观察性、监控、日志记录、配置、断路器等功能。\n使用 Sidecar 模式的优势 使用 sidecar 模式部署服务网格时，无需在节点上运行代理，但是集群中将运行多个相同的 sidecar 副本。在 sidecar 部署方式中，每个应用的容器旁都会部署一个伴生容器，这个容器称之为 sidecar 容器。Sidecar 接管进出应用容器的所有流量。在 Kubernetes 的 Pod 中，在原有的应用容器旁边注入一个 Sidecar 容器，两个容器共享存储、网络等资源，可以广义的将这个包含了 sidecar 容器的 Pod 理解为一台主机，两个容器共享主机资源。\n因其独特的部署结构，使得 sidecar 模式具有以下优势：\n 将与应用业务逻辑无关的功能抽象到共同基础设施，降低了微服务代码的复杂度。 因为不再需要编写相同的第三方组件配置文件和代码，所以能够降低微服务架构中的代码重复度。 Sidecar 可独立升级，降低应用程序代码和底层平台的耦合度。  ","date":1651532400,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1652173605,"objectID":"e2a02d5866a50abb27ea0bfb8f8a14a5","permalink":"https://jimmysong.io/docs/cloud-native/kubernetes/sidecar-pattern/","publishdate":"2022-05-03T00:00:00+01:00","relpermalink":"/docs/cloud-native/kubernetes/sidecar-pattern/","section":"cloud-native","summary":"将应用程序的功能划分为单独的进程运行在同一个最小调度单元中（","tags":null,"title":"Sidecar 模式","type":"book"},{"authors":null,"categories":null,"content":"云原生一词已经被过度的采用，很多软件都号称是云原生，很多打着云原生旗号的会议也如雨后春笋般涌现。\n云原生本身甚至不能称为是一种架构，它首先是一种基础设施，运行在其上的应用称作云原生应用，只有符合云原生设计哲学的应用架构才叫云原生应用架构。\n云原生的设计理念 云原生系统的设计理念如下:\n 面向分布式设计（Distribution）：容器、微服务、API 驱动的开发； 面向配置设计（Configuration）：一个镜像，多个环境配置； 面向韧性设计（Resistancy）：故障容忍和自愈； 面向弹性设计（Elasticity）：弹性扩展和对环境变化（负载）做出响应； 面向交付设计（Delivery）：自动拉起，缩短交付时间； 面向性能设计（Performance）：响应式，并发和资源高效利用； 面向自动化设计（Automation）：自动化的 DevOps； 面向诊断性设计（Diagnosability）：集群级别的日志、metric 和追踪； 面向安全性设计（Security）：安全端点、API Gateway、端到端加密；  以上的设计理念很多都是继承自分布式应用的设计理念。虽然有如此多的理念但是我们仍然无法辨认什么样的设施才是云原生基础设施，不过可以先用排除法，我将解释什么不是云原生基础设施。\n什么不是云原生基础设施？ 云原生基础设施不等于在公有云上运行的基础设施。光是租用服务器并不会使您的基础设施云原生化。管理 IaaS 的流程与运维物理数据中心没什么两样，将现有架构迁移到云上也未必能获得回报。\n云原生不是指在容器中运行应用程序。Netflix 率先推出云原生基础设施时，几乎所有应用程序部署在虚拟机中，而不是在容器中。改变应用程序的打包方式并不意味着就会增加自治系统的可扩展性和优势。即使应用程序是通过 CI/CD 渠道自动构建和部署的，也不意味着您就可以从增强 API 驱动部署的基础设施中受益。\n这也并不意味着您只能运行容器编排器（例如 Kubernetes 和 Mesos）。容器编排器提供了云原生基础设施所需的许多平台功能，但并未按预期方式使用这些功能，这意味着您的应用程序会在一组服务器上运行，被动态调度。这是一个非常好的起步，但仍有许多工作要做。\n 调度器与编排器\n术语 “调度器” 和 “编排器” 通常可以互换使用。\n在大多数情况下，编排器负责集群中的所有资源利用（例如：存储，网络和 CPU）。该术语典型地用于描述执行许多任务的产品，如健康检查和云自动化。\n 调度器是编排平台的一个子集，仅负责选择运行在每台服务器上的进程和服务。\n云原生不是微服务或基础设施即代码。微服务意味着更快的开发周期和更小的独特功能，但是单体应用程序可以具有相同的功能，使其能够通过软件有效管理，并且还可以从云原生基础设施中受益。\n基础设施即代码以机器可解析语言或领域特定语言（DSL）定义、自动化您的基础设施。将代码应用于基础架构的传统工具包括配置管理工具（例如 Chef 和 Puppet）。这些工具在自动执行任务和提供一致性方面有很大帮助，但是它们在提供必要的抽象来描述超出单个服务器的基础设施方面存在缺陷。\n配置管理工具一次自动化一台服务器，并依靠人员将服务器提供的功能绑定在一起。这将人类定位为基础设施规模的潜在瓶颈。这些工具也不会使构建完整系统所需的云基础设施（例如存储和网络）的额外部分自动化。\n尽管配置管理工具为操作系统的资源（例如软件包管理器）提供了一些抽象，但它们并没有抽象出足够的底层操作系统来轻松管理它。如果一位工程师想要管理系统中的每个软件包和文件，这将是一个非常艰苦的过程，并且对于每个配置变体都是独一无二的。同样，定义不存在或不正确的资源的配置管理仅消耗系统资源并且不能提供任何价值。\n虽然配置管理工具可以帮助自动化部分基础设施，但它们无法更好地管理应用程序。我们将在后面的章节中通过查看部署，管理，测试和操作基础架构的流程，探讨云原生基础设施的不同之处，但首先，我们将了解哪些应用程序是成功的以及应该何时与原生基础设施一起使用。\n云原生应用程序 就像云改变了业务和基础设施之间的关系一样，云原生应用程序也改变了应用程序和基础设施之间的关系。我们需要了解与传统应用程序相比，云本身有什么不同，因此我们需要了解它们与基础设施的新关系。\n为了写好本书，也为了有一个共享词汇表，我们需要定义 “云原生应用程序” 是什么意思。云原生与 12 因素应用程序不同，即使它们可能共享一些类似的特征。如果你想了解更多细节，请阅读 Kevin Hoffman 撰写的 “超越 12 因素应用程序”（O’Reilly，2012）。\n云原生应用程序被设计为在平台上运行，并设计用于弹性，敏捷性，可操作性和可观察性。弹性包含失败而不是试图阻止它们；它利用了在平台上运行的动态特性。敏捷性允许快速部署和快速迭代。可操作性从应用程序内部控制应用程序生命周期，而不是依赖外部进程和监视器。可观察性提供信息来回答有关应用程序状态的问题。\n 云原生定义\n云原生应用程序的定义仍在发展中。还有像 CNCF 这样的组织可以提供其他的定义。\n 云原生应用程序通过各种方法获取这些特征。它通常取决于应用程序的运行位置以及企业流程和文化。以下是实现云原生应用程序所需特性的常用方法：\n 微服务 健康报告 遥测数据 弹性 声明式的，而不是命令式的  微服务 作为单个实体进行管理和部署的应用程序通常称为单体应用。最初开发应用程序时，单体有很多好处。它们更易于理解，并允许您在不影响其他服务的情况下更改主要功能。\n随着应用程序复杂性的增长，单体应用的益处逐渐减少。它们变得更难理解，而且失去了敏捷性，因为工程师很难推断和修改代码。\n对付复杂性的最好方法之一是将明确定义的功能分成更小的服务，并让每个服务独立迭代。这增加了应用程序的灵活性，允许根据需要更轻松地更改部分应用程序。每个微服务可以由单独的团队进行管理，使用适当的语言编写，并根据需要进行独立扩缩容。\n只要每项服务都遵守强有力的合约，应用程序就可以快速改进和改变。当然，转向微服务架构还有许多其他的考虑因素。其中最不重要的是弹性通信，我们在附录 A 中有讨论。\n我们无法考虑转向微服务的所有考虑因素。拥有微服务并不意味着您拥有云原生基础设施。如果您想阅读更多，我们推荐 Sam Newman 的 Building Microservices（O’Reilly，2015）。虽然微服务是实现您的应用程序灵活性的一种方式，但正如我们之前所说的，它们不是云原生应用程序的必需条件。\n健康报告  停止逆向工程应用程序并开始从内部进行监控。 —— Kelsey Hightower，Monitorama PDX 2016：healthz\n 没有人比开发人员更了解应用程序需要什么才能以健康的状态运行。很长一段时间，基础设施管理员都试图从他们负责运行的应用程序中找出 “健康” 该怎么定义。如果不实际了解应用程序的健康状况，他们尝试在应用程序不健康时进行监控并发出警报，这往往是脆弱和不完整的。\n为了提高云原生应用程序的可操作性，应用程序应该暴露健康检查。开发人员可以将其实施为命令或过程信号，以便应用程序在执行自我检查之后响应，或者更常见的是：通过应用程序提供 Web 服务，返回 HTTP 状态码来检查健康状态。\n Google Borg 示例\nGoogle 的 Borg 报告中列出了一个健康报告的例子：\n几乎每个在 Borg 下运行的任务都包含一个内置的 HTTP 服务器，该服务器发布有关任务运行状况和数千个性能指标（如 RPC 延迟）的信息。Borg 会监控运行状况检查 URL 并重新启动不及时响应或返回 HTTP 错误代码的任务。其他数据由监控工具跟踪，用于仪表板和服务级别目标（SLO）违规警报。\n 将健康责任转移到应用程序中使应用程序更容易管理和自动化。应用程序应该知道它是否正常运行以及它依赖于什么（例如，访问数据库）来提供业务价值。这意味着开发人员需要与产品经理合作来定义应用服务的业务功能并相应地编写测试。\n提供健康检查的应用程序示例包括 Zookeeper 的 ruok 命令和 etcd 的 HTTP / 健康端点。\n应用程序不仅仅有健康或不健康的状态。它们将经历一个启动和关闭过程，在这个过程中它们应该通过健康检查，报告它们的状态。如果应用程序可以让平台准确了解它所处的状态，平台将更容易知道如何操作它。\n一个很好的例子就是当平台需要知道应用程序何时可以接收流量。在应用程序启动时，如果它不能正确处理流量，它就应该表现为未准备好。此额外状态将防止应用程序过早终止，因为如果运行状况检查失败，平台可能会认为应用程序不健康，并且会反复停止或重新启动它。\n应用程序健康只是能够自动化应用程序生命周期的一部分。除了知道应用程序是否健康之外，您还需要知道应用程序是否正在进行哪些工作。这些信息来自遥测数据。\n遥测数据 遥测数据是进行决策所需的信息。确实，遥测数据可能与健康报告重叠，但它们有不同的用途。健康报告通知我们应用程序生命周期状态，而遥测数据通知我们应用程序业务目标。\n您测量的指标有时称为服务级指标（SLI）或关键性能指标（KPI）。这些是特定于应用程序的数据，可以确保应用程序的性能处于服务级别目标（SLO）内。如果您需要更多关于这些术语的信息以及它们与您的应用程序、业务需求的关系，我们推荐你阅读来自 Site Reliability Engineering（O’Reilly）的第 4 章。\n遥测和度量标准用于解决以下问题：\n 应用程序每分钟收到多少请求？ 有没有错误？ 什么是应用程序延迟？ 订购需要多长时间？  通常会将数据刮取或推送到时间序列数据库（例如 Prometheus 或 InfluxDB）进行聚合。遥测数据的唯一要求是它将被收集数据的系统格式化。\n至少，可能最好实施度量标准的 RED 方法，该方法收集应用程序的速率，错误和执行时间。\n请求率\n收到了多少个请求\n错误\n应用程序有多少错误\n时间\n多久才能收到回复\n遥测数据应该用于提醒而非健康监测。在动态的、自我修复的环境中，我们更少关注单个应用程序实例的生命周期，更多关注关于整体应用程序 SLO 的内容。健康报告对于自动应用程序管理仍然很重要，但不应该用于页面工程师。\n如果 1 个实例或 50 个应用程序不健康，只要满足应用程序的业务需求，我们可能不会收到警报。度量标准可让您知道您是否符合您的 SLO，应用程序的使用方式以及对于您的应用程序来说什么是 “正常”。警报有助于您将系统恢复到已知的良好状态。\n 如果它移动，我们跟踪它。有时候我们会画出一些尚未移动的图形，以防万一它决定为它运行。\n——Ian Malpass，衡量所有，衡量一切\n 警报也不应该与日志记录混淆。记录用于调试，开发和观察模式。它暴露了应用程序的内部功能。度量有时可以从日志（例如错误率）计算，但需要额外的聚合服务（例如 ElasticSearch）和处理。\n弹性 一旦你有遥测和监测数据，你需要确保你的应用程序对故障有适应能力。弹性是基础设施的责任，但云原生应用程序也需要承担部分工作。\n基础设施被设计为抵制失败。硬件用于需要多个硬盘驱动器，电源以及全天候监控和部件更换以保持应用程序可用。使用云原生应用程序，应用程序有责任接受失败而不是避免失败。\n 在任何平台上，尤其是在云中，最重要的特性是其可靠性。\n——David Rensin，e ARCHITECT Show：来自 Google 的关于云计算的速成课程\n 设计具有弹性的应用程序可能是整本书本身。我们将在云原生应用程序中考虑弹性的两个主要方面：为失败设计和优雅降级。\n为失败设计 唯一永远不会失败的系统是那些让你活着的系统（例如心脏植入物和刹车系统）。如果您的服务永远不会停止运行，您需要花费太多时间设计它们来抵制故障，并且没有足够的时间增加业务价值。您的 SLO 确定服务需要多长时间。您花费在工程设计上超出 SLO 的正常运行时间的任何资源都将被浪费掉。\n您应该为每项服务测量两个值，即平均无故障时 …","date":1651532400,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1652173605,"objectID":"c620f0b949db9f0203793395c044735f","permalink":"https://jimmysong.io/docs/cloud-native/intro/cloud-native-philosophy/","publishdate":"2022-05-03T00:00:00+01:00","relpermalink":"/docs/cloud-native/intro/cloud-native-philosophy/","section":"cloud-native","summary":"云原生一词已经被过度的采用，很多软件都号称是云原生，很多打着","tags":null,"title":"云原生的设计哲学","type":"book"},{"authors":null,"categories":null,"content":"云原生社区是由 宋净超（Jimmy Song） 于 2020 年 5 月发起的，企业中立的云原生终端用户社区。社区秉持 “共识、共治、共建、共享” 的原则。社区的宗旨是：连接、中立、开源。立足中国，面向世界，企业中立，关注开源，回馈开源。了解更多请访问云原生社区官网：https://cloudnative.to。\n成立背景  Software is eating the world. —— Marc Andreessen\n “软件正在吞噬这个世界” 已被大家多次引用，随着云原生（Cloud Native）的崛起，我们想说的是 “Cloud Native is eating the software”。随着越来越多的企业将服务迁移上云，企业原有的开发模式以及技术架构已无法适应云的应用场景，其正在被重塑，向着云原生的方向演进。\n那么什么是云原生？云原生是一系列架构、研发流程、团队文化的最佳实践组合，以此支撑更快的创新速度、极致的用户体验、稳定可靠的用户服务、高效的研发效率。开源社区与云原生的关系密不可分，正是开源社区尤其是终端用户社区的存在，极大地促进了以容器、服务网格、微服务等为代表的云原生技术的持续演进！\n随着云计算的不断发展，云原生技术在全球范围内变得越来越受关注，同时国内社区同学也展现了对云原生技术热爱。近些年中国已经孕育众多的云原生技术爱好者，也有自发组织的一些相关技术交流和 meetup，同时在云原生领域也涌现了众多优秀的开源项目，在这样的背景下，一个有理想，有组织，有温度的云原生社区应运而生。\n加入社区 加入云原生社区，你将获得：\n 更接近源头的知识资讯 更富有价值的人际网络 更专业个性的咨询解答 更亲近意见领袖的机会 更快速高效的个人成长 更多知识分享曝光机会 更多行业人才挖掘发现  关注云原生社区微信公众号，进入公众号后台，点击 “加入我们”。\n   云原生社区公众号  参考  云原生社区成立 - cloudnative.to  ","date":1651532400,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1652173605,"objectID":"49ec00026a51b8391bcd5be1769b8259","permalink":"https://jimmysong.io/docs/cloud-native/community/cnc/","publishdate":"2022-05-03T00:00:00+01:00","relpermalink":"/docs/cloud-native/community/cnc/","section":"cloud-native","summary":"云原生社区是由 宋净超（Jimmy Song） 于 2020 年 5 月发起的，","tags":null,"title":"云原生社区（中国）","type":"book"},{"authors":null,"categories":null,"content":"Istio 是一个服务网格的开源实现。Istio 支持以下功能。\n流量管理\n利用配置，我们可以控制服务间的流量。设置断路器、超时或重试都可以通过简单的配置改变来完成。\n可观察性\nIstio 通过跟踪、监控和记录让我们更好地了解你的服务，它让我们能够快速发现和修复问题。\n安全性\nIstio 可以在代理层面上管理认证、授权和通信的加密。我们可以通过快速的配置变更在各个服务中执行政策。\nIstio 组件 Istio 服务网格有两个部分：数据平面和控制平面。\n在构建分布式系统时，将组件分离成控制平面和数据平面是一种常见的模式。数据平面的组件在请求路径上，而控制平面的组件则帮助数据平面完成其工作。\nIstio 中的数据平面由 Envoy 代理组成，控制服务之间的通信。网格的控制平面部分负责管理和配置代理。\n   Istio 架构  Envoy（数据平面） Envoy 是一个用 C++ 开发的高性能代理。Istio 服务网格将 Envoy 代理作为一个 sidecar 容器注入到你的应用容器旁边。然后该代理拦截该服务的所有入站和出站流量。注入的代理一起构成了服务网格的数据平面。\nEnvoy 代理也是唯一与流量进行交互的组件。除了前面提到的功能 —— 负载均衡、断路器、故障注入等。Envoy 还支持基于 WebAssembly（WASM）的可插拔扩展模型。这种可扩展性使我们能够执行自定义策略，并为网格中的流量生成遥测数据。\nIstiod（控制平面） Istiod 是控制平面组件，提供服务发现、配置和证书管理功能。Istiod 采用 YAML 编写的高级规则，并将其转换为 Envoy 的可操作配置。然后，它把这个配置传播给网格中的所有 sidecar。\nIstiod 内部的 Pilot 组件抽象出特定平台的服务发现机制（Kubernetes、Consul 或 VM），并将其转换为 sidecar 可以使用的标准格式。\n使用内置的身份和凭证管理，我们可以实现强大的服务间和终端用户认证。通过授权功能，我们可以控制谁可以访问你的服务。\n控制平面的部分以前被称为 Citadel，作为一个证书授权机构，生成证书，允许数据平面中的代理之间进行安全的 mTLS 通信。\n","date":1651507200,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1652173605,"objectID":"c5c85a33c0bc35517abbe1c13d23e566","permalink":"https://jimmysong.io/docs/cloud-native/service-mesh/what-is-istio/","publishdate":"2022-05-03T00:00:00+08:00","relpermalink":"/docs/cloud-native/service-mesh/what-is-istio/","section":"cloud-native","summary":"Istio 是一个服务网格的开源实现。Istio 支持以下功能。 流量管理","tags":null,"title":"什么是 Istio?","type":"book"},{"authors":null,"categories":null,"content":"本文参考的是 OAM 规范中对云原生应用的定义，并做出了引申。\n云原生应用是一个相互关联但又不独立的组件（service、task、worker）的集合，这些组件与配置结合在一起并在适当的运行时实例化后，共同完成统一的功能目的。\n云原生应用模型 下图是 OAM 定义的云原生应用模型示意图，为了便于理解，图中相同颜色的部分为同一类别的对象定义。\n   云原生应用模型  OAM 的规范中定义了以下对象，它们既是 OAM 规范中的基本术语也是云原生应用的基本组成。\n Workload（工作负载）：应用程序的工作负载类型，由平台提供。 Component组件）：定义了一个 Workload 的实例，并以基础设施中立的术语声明其运维特性。 Trait（特征）：用于将运维特性分配给组件实例。 ApplicationScope（应用作用域）：用于将组件分组成具有共同特性的松散耦合的应用。 ApplicationConfiguration（应用配置）：描述 Component 的部署、Trait 和 ApplicationScope。  OAM 规范中提供了一个使用以上对象定义云原生应用的工作流示例。\n关注点分离 下图是不同角色对于该模型的关注点示意图。\n   云原生应用模型中的目标角色  我们可以看到对于一个云原生应用来说，不同的对象是由不同的角色来负责的：\n 基础设施运维：提供不同的 Workload 类型供开发者使用； 应用运维：定义适用于不同 Workload 的运维属性 Trait 和管理 Component 的 ApplicationScope 即作用域； 应用开发者：负责应用组件 Component 的定义； 应用开发者和运维：共同将 Component 与运维属性 Trait 绑定在一起，维护应用程序的生命周期；  基于 OAM 中的对象定义的云原生应用可以充分利用平台能力自由组合，开发者和运维人员的职责可以得到有效分离，组件的复用性得到大幅提高。\n定义标准 CNCF 中的有几个定义标准的「开源项目」，其中有的项目都已经毕业。\n SMI（Service Mesh Interface）：服务网格接口 Cloud Events：Serverless 中的事件标准 TUF：更新框架标准 SPIFFE：身份安全标准  这其中唯独没有应用定义标准，CNCF SIG App delivery 即是要做这个的。当然既然要指定标准，自然要对不同平台和场景的逻辑做出更高级别的抽象（这也意味着你在掌握了底层逻辑的情况下还要学习更多的概念），这样才能屏蔽底层差异。\nOAM 简介 OAM 全称是 Open Application Model，从名称上来看它所定义的就是一种模型，同时也实现了基于 OAM 的我认为这种模型旨在定义了云原生应用的标准。\n 开放（Open）：支持异构的平台、容器运行时、调度系统、云供应商、硬件配置等，总之与底层无关 应用（Application）：云原生应用 模型（Model）：定义标准，以使其与底层平台无关  既然要制定标准，自然要对不同平台和场景的逻辑做出更高级别的抽象（这也意味着你在掌握了底层逻辑的情况下还要学习更多的概念），这样才能屏蔽底层差异。本文将默认底层平台为 Kubernetes。\n 是从管理大量 CRD 中汲取的经验。 业务和研发的沟通成本，比如 YAML 配置中很多字段是开发人员不关心的。  设计原则 OAM 规范的设计遵循了以下原则：\n 关注点分离：根据功能和行为来定义模型，以此划分不同角色的职责， 平台中立：OAM 的实现不绑定到特定平台； 优雅：尽量减少设计复杂性； 复用性：可移植性好，同一个应用程序可以在不同的平台上不加改动地执行； 不作为编程模型：OAM 提供的是应用程序模型，描述了应用程序的组成和组件的拓扑结构，而不关注应用程序的具体实现。  下图是 OAM 规范示意图。\n   OAM 规范示意图  OAM 工作原理 OAM 的工作原理如下图所示（图片引用自孙健波在《OAM: 云原生时代的应用模型与 下一代 DevOps 技术》中的分享）。\n   OAM 的原理  OAM Spec 定义了云原生应用的规范（使用一些 CRD 定义）， KubeVela 可以看做是 OAM 规范的解析器，将应用定义翻译为 Kubernetes 中的资源对象。可以将上图分为三个层次：\n 汇编层：即人工或者使用工具来根据 OAM 规范定义汇编出一个云原生应用的定义，其中包含了该应用的工作负载和运维能力配置。 转义层：汇编好的文件将打包为 YAML 文件，由 KubeVela 或其他 OAM 的实现将其转义为 Kubernetes 或其他云服务（例如 Istio）上可运行的资源对象。 执行层：执行经过转义好的云平台上的资源对象并执行资源配置。  参考  The Open Application Model specification - github.com  ","date":1651532400,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1652173605,"objectID":"7e9b638a19f6edc05d4848e665905f5a","permalink":"https://jimmysong.io/docs/cloud-native/intro/define-cloud-native-app/","publishdate":"2022-05-03T00:00:00+01:00","relpermalink":"/docs/cloud-native/intro/define-cloud-native-app/","section":"cloud-native","summary":"本文参考的是 OAM 规范中对云原生应用的定义，并做出了引申。 云原生","tags":null,"title":"什么是云原生应用？","type":"book"},{"authors":null,"categories":null,"content":"Kubernetes 一词来自希腊语，意思是 “飞行员” 或 “舵手”。这个名字很贴切，Kubernetes 可以帮助你在波涛汹涌的容器海洋中航行。\nKubernetes 是做什么的？什么是 Docker？什么是容器编排？Kubernetes 是如何工作和扩展的？你可能还有很多其他的问题，本文将一一为你解答。\n这篇文章适合初学者，尤其是那些工作忙碌，没有办法抽出太多时间来了解 Kubernetes 和云原生的开发者们，希望本文可以帮助你进入 Kubernetes 的世界。\n简而言之，Kubernetes 提供了一个平台或工具来帮助你快速协调或扩展容器化应用，特别是在 Docker 容器。让我们深入了解一下这些概念。\n容器和容器化 那么什么是容器呢？\n要讨论容器化首先要谈到虚拟机 (VM)，顾名思义，虚拟机就是可以远程连接的虚拟服务器，比如 AWS 的 EC2 或阿里云的 ECS。\n接下来，假如你要在虚拟机上运行一个网络应用 —— 包括一个 MySQL 数据库、一个 Vue 前端和一些 Java 库，在 Ubuntu 操作系统 (OS) 上运行。你不用熟悉其中的每一个技术 —— 你只要记住，一个应用程序由各种组件、服务和库组成，它们运行在操作系统上。\n现在，将应用程序打包成一个虚拟机镜像，这个镜像中包括了 Ubuntu 操作系统。这使得虚拟机变得非常笨重 —— 通常有几个 G 的大小。\n虚拟机镜像包含了整个操作系统及所有的库，对应用程序来说，这个镜像过于臃肿，其中大部分组件并没有被应用程序直接调用。如果你需要重新创建、备份或扩展这个应用程序，就需要复制整个环境（虚拟机镜像），在新环境中启动应用通常需要几十秒甚至几分钟时间。如果你想单独升级应用中的某个组件，比如说 Vue 应用，就需要重建整个虚拟机镜像。另外，如果你的两个应用依赖同一个底层镜像，升级底层镜像会同时影响这两个应用，而有时候，你只需要升级其中一个应用的依赖而已。这就是所谓的 “依赖陷阱”。\n解决这个问题的办法就是容器。容器是继虚拟机之后更高层次的抽象，在这层抽象中，整个应用程序的每个组件被单独打包成一个个独立的单元，这个单元就是所谓的容器。通过这种方式，可以将代码和应用服务从底层架构中分离出来，实现了完全的可移植性（在任何操作系统或环境上运行应用的能力）。所以在上面的例子中，Ubuntu 操作系统就是一个单元（容器）。MySQL 数据库是另一个容器，Vue 环境和随之而来的库也是一个容器。\n但是，MySQL 数据库是如何自己 “运行” 的？数据库本身肯定也要在操作系统上运行吧？没错！\n更高层次的容器，比如 MySQL 容器，实际上会包含必要的库来与底层的操作系统容器通信和集成。所以你可以把容器看成是整个应用堆栈中的一层，每层都依赖于下层的单元。而这就类似于船舶或港口中集装箱的堆叠方式，每个容器的稳定性都依赖于下面的容器的支持。所以应用容器的核心是一个受控的执行环境。它们允许你从头开始定义整个环境，从操作系统开始，到你要使用的各个版本的库，再到你要添加的代码版本。\n与容器相关的一个重要概念是微服务。将应用程序的各个组件拆分并打包成独立的服务，这样每个组件都可以很容易地被替换、升级、调试。上面的例子中，我们会为 Vue 前端创建一个微服务，为 MySQL 数据库创建另一个微服务，为 Java 中间件部分创建另一个微服务，以此类推。很明显，微服务与容器化是相辅相成的。\n从 Docker 开始 现在你已经对容器有一定了解了吧？Docker 是最常用的容器化工具，也是最流行的容器运行时。\nDocker 开源于 2013 年。用于打包和创建容器，管理基于容器的应用。所有 Linux 发行版、Windows 和 macOS 都支持 Docker。\n还有其他的容器化工具，如 CoreOS rkt、Mesos Containerizer 和 LXC。但是目前，绝大多数的容器化应用都是在 Docker 上运行的。\n再到 Kubernetes 首先，简单介绍一下历史。Kubernetes 是 Google 基于其内部容器调度平台 Borg 的经验开发的。2014 年开源，并作为 CNCF（云原生计算基金会）的核心发起项目。\n那么 Kubernetes 又跟容器是什么关系呢？让我们再回到上面的例子。假设我们的应用爆火，每天的注册用户越来越多。\n现在，我们需要增加后端资源，使浏览我们网站的用户在浏览页面时加载时间不会过长或者超时。最简单的方式就是增加容器的数量，然后使用负载均衡器将传入的负载（以用户请求的形式）分配给容器。\n这样做虽然行之有效，但也只能在用户规模有限的情况下使用。当用户请求达到几十万或几百万时，这种方法也是不可扩展的。你需要管理几十个也许是几百个负载均衡器，这本身就是另一个令人头疼的问题。如果我们想对网站或应用进行任何升级，也会遇到问题，因为负载均衡不会考虑到应用升级的问题。我们需要单独配置每个负载均衡器，然后升级该均衡器所服务的容器。想象一下，当你有 20 个负载均衡器和每周 5 或 6 个小的更新时，你将不得不进行大量的手工劳动。\n我们需要的是一种可以一次性将变更传递给所有受控容器的方法，同时也需要一种可以轻松地调度可用容器的方法，这个过程还必须要是自动化的，这正是 Kubernetes 所做的事情。\n接下来，我们将探讨 Kubernetes 究竟是如何工作的，它的各种组件和服务，以及更多关于如何使用 Kubernetes 来编排、管理和监控容器化环境。为了简单起见，假设我们使用的是 Docker 容器，尽管如前所述，Kubernetes 除了支持 Docker 之外，还支持其他几种容器平台。\nKubernetes 架构和组件 首先，最重要的是你需要认识到 Kubernetes 利用了 “期望状态” 原则。就是说，你定义了组件的期望状态，而 Kubernetes 要将它们始终调整到这个状态。\n例如，你想让你的 Web 服务器始终运行在 4 个容器中，以达到负载均衡的目的，你的数据库复制到 3 个不同的容器中，以达到冗余的目的。这就是你想要的状态。如果这 7 个容器中的任何一个出现故障，Kubernetes 引擎会检测到这一点，并自动创建出一个新的容器，以确保维持所需的状态。\n现在我们来定义一些 Kubernetes 的重要组件。\n当你第一次设置 Kubernetes 时，你会创建一个集群。所有其他组件都是集群的一部分。你也可以创建多个虚拟集群，称为命名空间 (namespace)，它们是同一个物理集群的一部分。这与你可以在同一物理服务器上创建多个虚拟机的方式非常相似。如果你不需要，也没有明确定义的命名空间，那么你的集群将在始终存在的默认命名空间中创建。\nKubernetes 运行在节点 (node) 上，节点是集群中的单个机器。如果你有自己的硬件，节点可能对应于物理机器，但更可能对应于在云中运行的虚拟机。节点是部署你的应用或服务的地方，是 Kubernetes 工作的地方。有 2 种类型的节点 ——master 节点和 worker 节点，所以说 Kubernetes 是主从结构的。\n主节点是一个控制其他所有节点的特殊节点。一方面，它和集群中的任何其他节点一样，这意味着它只是另一台机器或虚拟机。另一方面，它运行着控制集群其他部分的软件。它向集群中的所有其他节点发送消息，将工作分配给它们，工作节点向主节点上的 API Server 汇报。\nMaster 节点本身也包含一个名为 API Server 的组件。这个 API 是节点与控制平面通信的唯一端点。API Server 至关重要，因为这是 worker 节点和 master 节点就 pod、deployment 和所有其他 Kubernetes API 对象的状态进行通信的点。\nWorker 节点是 Kubernetes 中真正干活的节点。当你在应用中部署容器或 pod（稍后定义）时，其实是在将它们部署到 worker 节点上运行。Worker 节点托管和运行一个或多个容器的资源。\nKubernetes 中的逻辑而非物理的工作单位称为 pod。一个 pod 类似于 Docker 中的容器。记得我们在前面讲到，容器可以让你创建独立、隔离的工作单元，可以独立运行。但是要创建复杂的应用程序，比如 Web 服务器，你经常需要结合多个容器，然后在一个 pod 中一起运行和管理。这就是 pod 的设计目的 —— 一个 pod 允许你把多个容器，并指定它们如何组合在一起来创建应用程序。而这也进一步明确了 Docker 和 Kubernetes 之间的关系 —— 一个 Kubernetes pod 通常包含一个或多个 Docker 容器，所有的容器都作为一个单元来管理。\nKubernetes 中的 service 是一组逻辑上的 pod。把一个 service 看成是一个 pod 的逻辑分组，它提供了一个单一的 IP 地址和 DNS 名称，你可以通过它访问服务内的所有 pod。有了服务，就可以非常容易地设置和管理负载均衡，当你需要扩展 Kubernetes pod 时，这对你有很大的帮助，我们很快就会看到。\nReplicationController 或 ReplicaSet 是 Kubernetes 的另一个关键功能。它是负责实际管理 pod 生命周期的组件 —— 当收到指令时或 pod 离线或意外停止时启动 pod，也会在收到指示时杀死 pod，也许是因为用户负载减少。所以换句话说，ReplicationController 有助于实现我们所期望的指定运行的 pod 数量的状态。\n什么是 Kubectl？ kubectl 是一个命令行工具，用于与 Kubernetes 集群和其中的 pod 通信。使用它你可以查看集群的状态，列出集群中的所有 pod，进入 pod 中执行命令等。你还可以使用 YAML 文件定义资源对象，然后使用 kubectl 将其应用到集群中。\nKubernetes 中的自动扩展 请记住，我们使用 Kubernetes 而不是直接使用 Docker 的原因之一，是因为 Kubernetes 能够自动扩展应用实例的数量以满足工作负载的需求。\n自动缩放是通过集群设置来实现的，当服务需求增加时，增加节点数量，当需求减少时，则减少节点数量。但也要记住，节点是 “物理” 结构 —— 我们把 “物理” 放在引号里，因为要记住，很多时候，它们实际上是虚拟机。\n无论如何，节点是物理机器的事实意味着我们的云平台必须允许 Kubernetes 引擎创建新机器。各种云提供商对 Kubernetes 支持基本都满足这一点。\n我们再继续说一些概念，这次是和网络有关的。\n什么是 kubernetes Ingress 和 Egress？ 外部用户或应用程序与 Kubernetes pod 交互，就像 pod 是一个真正的服务器一样。我们需要设置安全规则允许哪些流量可以进入和离开 “服务器”，就像我们为托管应用程序的服务器定义安全规则一样。\n进入 Kubernetes pod 的流量称为 Ingress，而从 pod 到集群外的出站流量称为 egress。我们创建入口策略和出口策略的目的是限制不需要的流量进入和流出服务。而这些策略也是定义 pod 使用的端口来接受传入和传输传出数据 / 流量的地方。\n什么是 Ingress Controller？ 但是在定义入口和出口策略之前，你必须首先启动被称为 Ingress Controller（入口控制器）的组件；这个在集群中默认不启动。有不同类型的入口控制器，Kubernetes 项目默认只支持 Google Cloud 和开箱即用的 Nginx 入口控制器。通常云供应商都会提供自己的入口控制器。\n什么是 Replica 和 ReplicaSet？ 为了保证应用程序的弹性，需要在不同节点上创建多个 pod 的副本。这些被称为 Replica。假设你所需的状态策略是 “ …","date":1651532400,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1652173605,"objectID":"fbb27bd25b642943d027ad60fa222197","permalink":"https://jimmysong.io/docs/cloud-native/intro/quick-start/","publishdate":"2022-05-03T00:00:00+01:00","relpermalink":"/docs/cloud-native/intro/quick-start/","section":"cloud-native","summary":"Kubernetes 一词来自希腊语，意思是 “飞行员” 或 “舵手”。这个名字很贴切","tags":null,"title":"云原生快速入门","type":"book"},{"authors":null,"categories":null,"content":"你可能参加过各种云原生、服务网格相关的 meetup，在社区里看到很多人在分享和讨论 Istio，但是对于自己是否真的需要 Istio 感到踌躇，甚至因为它的复杂性而对服务网格的前景感到怀疑。那么，在你继阅读 Istio SIG 后续文章之前，请先仔细阅读本文，审视一下自己公司的现状，看看你是否有必要使用服务网格，处于 Istio 应用的哪个阶段。\n本文不是对应用服务网格的指导，而是根据社区里经常遇到的问题而整理。在使用 Istio 之前，请先考虑下以下因素：\n 你的团队里有多少人？ 你的团队是否有使用 Kubernetes、Istio 的经验？ 你有多少微服务？ 这些微服务使用什么语言？ 你的运维、SRE 团队是否可以支持服务网格管理？ 你有采用开源项目的经验吗？ 你的服务都运行在哪些平台上？ 你的应用已经容器化并使用 Kubernetes 管理了吗？ 你的服务有多少是部署在虚拟机、有多少是部署到 Kubernetes 集群上，比例如何？ 你的团队有制定转移到云原生架构的计划吗？ 你想使用 Istio 的什么功能？ Istio 的稳定性是否能够满足你的需求？ 你是否可以忍受 Istio 带来的性能损耗？  Istio 作为目前最流行的 Service Mesh 技术之一，拥有活跃的社区和众多的落地案例。但如果你真的想在你的生产环境大规模落地 Isito，这看似壮观美好的冰山下，却是暗流涌动，潜藏着无数凶险。\n使用 Istio 无法做到完全对应用透明 服务通信和治理相关的功能迁移到 Sidecar 进程中后， 应用中的 SDK 通常需要作出一些对应的改变。\n比如 SDK 需要关闭一些功能，例如重试。一个典型的场景是，SDK 重试 m 次，Sidecar 重试 n 次，这会导致 m * n 的重试风暴，从而引发风险。\n此外，诸如 trace header 的透传，也需要 SDK 进行升级改造。如果你的 SDK 中还有其它特殊逻辑和功能，这些可能都需要小心处理才能和 Isito Sidecar 完美配合。\nIstio 对非 Kubernetes 环境的支持有限 在业务迁移至 Istio 的同时，可能并没有同步迁移至 Kubernetes，而还运行在原有 PAAS 系统之上。 这会带来一系列挑战：\n 原有 PAAS 可能没有容器网络，Istio 的服务发现和流量劫持都可能要根据旧有基础设施进行适配才能正常工作 如果旧有的 PAAS 单个实例不能很好的管理多个容器（类比 Kubernetes 的 Pod 和 Container 概念），大量 Istio Sidecar 的部署和运维将是一个很大的挑战 缺少 Kubernetes webhook 机制，Sidecar 的注入也可能变得不那么透明，而需要耦合在业务的部署逻辑中  只有 HTTP 协议是一等公民 Istio 原生对 HTTP 协议提供了完善的全功能支持，但在真实的业务场景中，私有化协议却非常普遍，而 Istio 却并未提供原生支持。\n这导致使用私有协议的一些服务可能只能被迫使用 TCP 协议来进行基本的请求路由，这会导致很多功能的缺失，这其中包括 Istio 非常强大的基于内容的消息路由，如基于 header、 path 等进行权重路由。\n扩展 Istio 的成本并不低 虽然 Istio 的总体架构是基于高度可扩展而设计，但由于整个 Istio 系统较为复杂，如果你对 Istio 进行过真实的扩展，就会发现成本不低。\n以扩展 Istio 支持某一种私有协议为例，首先你需要在 Istio 的 api 代码库中进行协议扩展，其次你需要修改 Istio 代码库来实现新的协议处理和下发，然后你还需要修改 xds 代码库的协议，最后你还要在 Envoy 中实现相应的 Filter 来完成协议的解析和路由等功能。\n在这个过程中，你还可能面临上述数个复杂代码库的编译等工程挑战（如果你的研发环境不能很好的使用 Docker 或者无法访问部分国外网络的情况下）。\n即使做完了所有的这些工作，你也可能面临这些工作无法合并回社区的情况，社区对私有协议的扩展支持度不高，这会导致你的代码和社区割裂，为后续的升级更新带来隐患。\nIstio 在集群规模较大时的性能问题 Istio 默认的工作模式下，每个 Sidecar 都会收到全集群所有服务的信息。如果你部署过 Istio 官方的 Bookinfo 示例应用，并使用 Envoy 的 config dump 接口进行观察，你会发现，仅仅几个服务，Envoy 所收到的配置信息就有将近 20w 行。\n可以想象，在稍大一些的集群规模，Envoy 的内存开销、Istio 的 CPU 开销、XDS 的下发时效性等问题，一定会变得尤为突出。\nIstio 这么做一是考虑这样可以开箱即用，用户不用进行过多的配置，另外在一些场景，可能也无法梳理出准确的服务之间的调用关系，因此直接给每个 Sidecar 下发了全量的服务配置，即使这个 Sidecar 只会访问其中很小一部分服务。\n当然这个问题也有解法，你可以通过 Sidecar CRD 来显示定义服务调用关系，使 Envoy 只得到他需要的服务信息，从而大幅降低 Envoy 的资源开销，但前提是在你的业务线中能梳理出这些调用关系。\nXDS 分发没有分级发布机制 当你对一个服务的策略配置进行变更的时候，XDS 不具备分级发布的能力，所有访问这个服务的 Envoy 都会立即收到变更后的最新配置。这在一些对变更敏感的严苛生产环境，可能是有很高风险甚至不被允许的。\n如果你的生产环境严格要求任何变更都必须有分级发布流程，那你可能需要考虑自己实现一套这样的机制。\nIstio 组件故障时是否有退路？ 以 Istio 为代表的 Sidecar 架构的特殊性在于，Sidecar 直接承接了业务流量，而不像一些其他的基础设施那样，只是整个系统的旁路组件（比如 Kubernetes）。\n因此在 Isito 落地初期，你必须考虑，如果 Sidecar 进程挂掉，服务怎么办？是否有退路？是否能 fallback 到直连模式？\n在 Istio 落地过程中，是否能无损 fallback，通常决定了核心业务能否接入 Service Mesh。\nIsito 技术架构的成熟度还没有达到预期 虽然 Istio 1.0 版本已经发布了很久，但是如果你关注社区每个版本的迭代，就会发现，Istio 目前架构依然处于不太稳定的状态，尤其是 1.5 版本前后的几个大版本，先后经历了去除 Mixer 组件、合并为单体架构、仅支持高版本 Kubernetes 等等重大变动，这对于已经在生产环境中使用了 Istio 的用户非常不友好，因为升级会面临各种不兼容性问题。\n好在社区也已经意识到这一问题，2021 年社区也成立了专门的小组，重点改善 Istio 的兼容性和用户体验。\nIstio 缺乏成熟的产品生态 Istio 作为一套技术方案，却并不是一套产品方案。\n如果你在生产环境中使用，你可能还需要解决可视化界面、权限和账号系统对接、结合公司已有技术组件和产品生态等问题，仅仅通过命令行来使用，可能并不能满足你的组织对权限、审计、易用性的要求。\n而 Isito 自带的 Kiali 功能还十分简陋，远远没有达到能在生产环境使用的程度，因此你可能需要研发基于 Isito 的上层产品。\nIstio 目前解决的问题域还很有限 Istio 目前主要解决的是分布式系统之间服务调用的问题，但还有一些分布式系统的复杂语义和功能并未纳入到 Istio 的 Sidecar 运行时之中，比如消息发布和订阅、状态管理、资源绑定等等。\n云原生应用将会朝着多 Sidecar 运行时或将更多分布式能力纳入单 Sidecar 运行时的方向继续发展，以使服务本身变得更为轻量，让应用和基础架构彻底解耦。\n如果你的生产环境中，业务系统对接了非常多和复杂的分布式系系统中间件，Istio 目前可能并不能完全解决你的应用的云原生化诉求。\n写在最后 看到这里，你是否感到有些沮丧，而对 Isito 失去信心？\n别担心，上面列举的这些问题，实际上并不影响 Isito 依然是目前最为流行和成功的 Service Mesh 技术选型之一。Istio 频繁的变动，一定程度上也说明它拥有一个活跃的社区，我们应当对一个新的事物报以信心，Isito 的社区也在不断听取来自终端用户的声音，朝着大家期待的方向演进。\n同时，如果你的生产环境中的服务规模并不是很大，服务已经托管于 Kubernetes 之上，也只使用那些 Istio 原生提供的能力，那么 Istio 依然是一个值得尝试的开箱即用方案。\n但如果你的生产环境比较复杂，技术债务较重，专有功能和策略需求较多，亦或者服务规模庞大，那么在开始使用 Istio 之前，你需要仔细权衡上述这些要素，以评估在你的系统之中引入 Istio 可能带来的复杂度和潜在成本。\n参考  在生产环境使用 Istio 前的若干考虑要素 - cloudnative.to  ","date":1651507200,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1652173605,"objectID":"761cdd41579eb5a0fe1426586988a8eb","permalink":"https://jimmysong.io/docs/cloud-native/service-mesh/do-you-need-a-service-mesh/","publishdate":"2022-05-03T00:00:00+08:00","relpermalink":"/docs/cloud-native/service-mesh/do-you-need-a-service-mesh/","section":"cloud-native","summary":"你可能参加过各种云原生、服务网格相关的 meetup，在社区里","tags":null,"title":"你是否需要 Istio？","type":"book"},{"authors":null,"categories":null,"content":"IT 行业正在向微服务架构和云原生解决方案发展。由于使用不同的技术开发了成百上千的微服务，这些系统可能变得复杂，难以调试。\n作为一个应用开发者，你考虑的是业务逻辑——购买产品或生成发票。然而，任何像这样的业务逻辑都会导致不同服务之间的多个服务调用。每个服务可能都有它的超时、重试逻辑和其他可能需要调整或微调的网络特定代码。\n如果在任何时候最初的请求失败了，就很难通过多个服务来追踪，准确地指出失败发生的地方，了解请求为什么失败。是网络不可靠吗？是否需要调整重试或超时？或者是业务逻辑问题或错误？\n服务可能使用不一致的跟踪和记录机制，使这种调试的复杂性增加。这些问题使你很难确定问题发生在哪里，以及如何解决。如果你是一个应用程序开发人员，而调试网络问题不属于你的核心技能，那就更是如此。\n将网络问题从应用程序堆栈中抽离出来，由另一个组件来处理网络部分，让调试网络问题变得更容易。这就是 Envoy 所做的事情。\n在每个服务实例旁边都有一个 Envoy 实例在运行。这种类型的部署也被称为 Sidecar 部署。Envoy 的另一种模式是边缘代理，用于构建 API 网关。\nEnvoy 和应用程序形成一个原子实体，但仍然是独立的进程。应用程序处理业务逻辑，而 Envoy 则处理网络问题。\n在发生故障的情况下，分离关注点可以更容易确定故障是来自应用程序还是网络。\n为了帮助网络调试，Envoy 提供了以下高级功能。\n进程外架构 Envoy 是一个独立的进程，旨在与每个应用程序一起运行 —— 也就是我们前面提到的 Sidecar 部署模式。集中配置的 Envoy 的集合形成了一个透明的服务网格。\n路由和其他网络功能的责任被推给了 Envoy。应用程序向一个虚拟地址（localhost）而不是真实地址（如公共 IP 地址或主机名）发送请求，不知道网络拓扑结构。应用程序不再承担路由的责任，因为该任务被委托给一个外部进程。\n与其让应用程序管理其网络配置，不如在 Envoy 层面上独立于应用程序管理网络配置。在一个组织中，这可以使应用程序开发人员解放出来，专注于应用程序的业务逻辑。\nEnvoy 适用于任何编程语言。你可以用 Go、Java、C++ 或其他任何语言编写你的应用程序，而 Envoy 可以在它们之间架起桥梁。Envoy 的行为是相同的，无论应用程序的编程语言或它们运行的操作系统是什么。\nEnvoy 还可以在整个基础设施中透明地进行部署和升级。这与为每个单独的应用程序部署库升级相比，后者可能是非常痛苦和耗时的。\n进程外架构是有益的，因为它使我们在不同的编程语言 / 应用堆栈中保持一致，我们可以免费获得独立的应用生命周期和所有的 Envoy 网络功能，而不必在每个应用中单独解决这些问题。\nL3/L4 过滤器结构 Envoy 是一个 L3/L4 网络代理，根据 IP 地址和 TCP 或 UDP 端口进行决策。它具有一个可插拔的过滤器链，可以编写你的过滤器来执行不同的 TCP/UDP 任务。\n过滤器链（Filter Chain） 的想法借鉴了 Linux shell，即一个操作的输出被输送到另一个操作中。例如：\nls -l | grep \u0026#34;Envoy*.cc\u0026#34; | wc -l Envoy 可以通过堆叠所需的过滤器来构建逻辑和行为，形成一个过滤器链。许多过滤器已经存在，并支持诸如原始 TCP 代理、UDP 代理、HTTP 代理、TLS 客户端认证等任务。Envoy 也是可扩展的，我们可以编写我们的过滤器。\nL7 过滤器结构 Envoy 支持一个额外的 HTTP L7 过滤器层。我们可以在 HTTP 连接管理子系统中插入 HTTP 过滤器，执行不同的任务，如缓冲、速率限制、路由 / 转发等。\n一流的 HTTP/2 支持 Envoy 同时支持 HTTP/1.1 和 HTTP/2，并且可以作为一个透明的 HTTP/1.1 到 HTTP/2 的双向代理进行操作。这意味着任何 HTTP/1.1 和 HTTP/2 客户端和目标服务器的组合都可以被桥接起来。即使你的传统应用没有通过 HTTP/2 进行通信，如果你把它们部署在 Envoy 代理旁边，它们最终也会通过 HTTP/2 进行通信。\n推荐在所有的服务间配置的 Envoy 使用 HTTP/2，以创建一个持久连接的网格，请求和响应可以在上面复用。\nHTTP 路由 当以 HTTP 模式操作并使用 REST 时，Envoy 支持路由子系统，能够根据路径、权限、内容类型和运行时间值来路由和重定向请求。在将 Envoy 作为构建 API 网关的前台 / 边缘代理时，这一功能非常有用，在构建服务网格（sidecar 部署模式）时，也可以利用这一功能。\ngRPC 准备就绪 Envoy 支持作为 gRPC 请求和响应的路由和负载均衡底层所需的所有 HTTP/2 功能。\n gRPC 是一个开源的远程过程调用（RPC）系统，它使用 HTTP/2 进行传输，并将协议缓冲区作为接口描述语言（IDL），它提供的功能包括认证、双向流和流量控制、阻塞 / 非阻塞绑定，以及取消和超时。\n 服务发现和动态配置 我们可以使用静态配置文件来配置 Envoy，这些文件描述了服务间通信方式。\n对于静态配置 Envoy 不现实的高级场景，Envoy 支持动态配置，在运行时自动重新加载配置。一组名为 xDS 的发现服务可以用来通过网络动态配置 Envoy，并为 Envoy 提供关于主机、集群 HTTP 路由、监听套接字和加密信息。\n健康检查 负载均衡器有一个特点，那就是只将流量路由到健康和可用的上游服务。Envoy 支持健康检查子系统，对上游服务集群进行主动健康检查。然后，Envoy 使用服务发现和健康检查信息的组合来确定健康的负载均衡目标。Envoy 还可以通过异常点检测子系统支持被动健康检查。\n高级负载均衡 Envoy 支持自动重试、断路、全局速率限制（使用外部速率限制服务）、影子请求（或流量镜像）、异常点检测和请求对冲。\n前端 / 边缘代理支持 Envoy 的特点使其非常适合作为边缘代理运行。这些功能包括 TLS 终端、HTTP/1.1、HTTP/2 和 HTTP/3 支持，以及 HTTP L7 路由。\nTLS 终止 应用程序和代理的解耦使网格部署模型中所有服务之间的 TLS 终止（双向 TLS）成为可能。\n一流的可观察性 为了便于观察，Envoy 会生成日志、指标和追踪。Envoy 目前支持 statsd（和兼容的提供者）作为所有子系统的统计。得益于可扩展性，我们也可以在需要时插入不同的统计提供商。\nHTTP/3（Alpha） Envoy 1.19.0 支持 HTTP/3 的上行和下行，并在 HTTP/1.1、HTTP/2 和 HTTP/3 之间进行双向转义。\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1652173605,"objectID":"55b0d5f9d597c5b97998b100344c7df1","permalink":"https://jimmysong.io/docs/cloud-native/service-mesh/what-is-envoy/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/docs/cloud-native/service-mesh/what-is-envoy/","section":"cloud-native","summary":"IT 行业正在向微服务架构和云原生解决方案发展。由于使用不同的技","tags":null,"title":"什么是 Envoy？","type":"book"},{"authors":null,"categories":null,"content":"我们在前面看到了通过客户端库来治理服务的架构图，那是我们在改造成服务网格架构前使用微服务架构通常的形式，下图是使用服务网格架构的最终形式。\n   服务网格架构示意图  当然在达到这一最终形态之前我们需要将架构一步步演进，下面给出的是参考的演进路线。\nIngress 或边缘代理 如果你使用的是 Kubernetes 做容器编排调度，那么在进化到服务网格架构之前，通常会使用 Ingress Controller，做集群内外流量的反向代理，如使用 Traefik 或 Nginx Ingress Controller。\n   Ingress 或边缘代理架构示意图  这样只要利用 Kubernetes 的原有能力，当你的应用微服务化并容器化需要开放外部访问且只需要 L7 代理的话这种改造十分简单，但问题是无法管理服务间流量。\n路由器网格 Ingress 或者边缘代理可以处理进出集群的流量，为了应对集群内的服务间流量管理，我们可以在集群内加一个 Router 层，即路由器层，让集群内所有服务间的流量都通过该路由器。\n   路由器网格架构示意图  这个架构无需对原有的单体应用和新的微服务应用做什么改造，可以很轻易的迁移进来，但是当服务多了管理起来就很麻烦。\nProxy per Node 这种架构是在每个节点上都部署一个代理，如果使用 Kubernetes 来部署的话就是使用 DaemonSet 对象，Linkerd 第一代就是使用这种方式部署的，一代的 Linkerd 使用 Scala 开发，基于 JVM 比较消耗资源，二代的 Linkerd 使用 Go 开发。\n   Proxy per node 架构示意图  这种架构有个好处是每个节点只需要部署一个代理即可，比起在每个应用中都注入一个 sidecar 的方式更节省资源，而且更适合基于物理机 / 虚拟机的大型单体应用，但是也有一些副作用，比如粒度还是不够细，如果一个节点出问题，该节点上的所有服务就都会无法访问，对于服务来说不是完全透明的。\nSidecar 代理 / Fabric 模型 这个一般不会成为典型部署类型，当企业的服务网格架构演进到这一步时通常只会持续很短时间，然后就会增加控制平面。跟前几个阶段最大的不同就是，应用程序和代理被放在了同一个部署单元里，可以对应用程序的流量做更细粒度的控制。\n   Sidecar代理/Fabric模型示意图  这已经是最接近服务网格架构的一种形态了，唯一缺的就是控制平面了。所有的 sidecar 都支持热加载，配置的变更可以很容易的在流量控制中反应出来，但是如何操作这么多 sidecar 就需要一个统一的控制平面了。\nSidecar 代理 / 控制平面 下面的示意图是目前大多数服务网格的架构图，也可以说是整个服务网格架构演进的最终形态。\n   Sidecar 代理/控制平面架构示意图  这种架构将代理作为整个服务网格中的一部分，使用 Kubernetes 部署的话，可以通过以 sidecar 的形式注入，减轻了部署的负担，可以对每个服务的做细粒度权限与流量控制。但有一点不好就是为每个服务都注入一个代理会占用很多资源，因此要想方设法降低每个代理的资源消耗。\n多集群部署和扩展 以上都是单个服务网格集群的架构，所有的服务都位于同一个集群中，服务网格管理进出集群和集群内部的流量，当我们需要管理多个集群或者是引入外部的服务时就需要网格扩展和多集群配置。\n","date":1651507200,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1652173605,"objectID":"579d7786227e696ddb06b66890480223","permalink":"https://jimmysong.io/docs/cloud-native/service-mesh/service-mesh-patterns/","publishdate":"2022-05-03T00:00:00+08:00","relpermalink":"/docs/cloud-native/service-mesh/service-mesh-patterns/","section":"cloud-native","summary":"我们在前面看到了通过客户端库来治理服务的架构图，那是我们在改","tags":null,"title":"服务网格的部署模式","type":"book"},{"authors":null,"categories":null,"content":"在这一节中，我们将解释 Envoy 的基本构建模块。\nEnvoy 配置的根被称为引导配置。它包含了一些字段，我们可以在这里提供静态或动态的资源和高级别的 Envoy 配置（例如，Envoy 实例名称、运行时配置、启用管理界面等等）。\n为了开始学习，我们将主要关注静态资源，在课程的后面，我们将介绍如何配置动态资源。\nEnvoy 输出许多统计数据，这取决于启用的组件和它们的配置。我们会在整个课程中提到不同的统计信息，在课程后面的专门模块中，我们会更多地讨论统计信息。\n下图显示了通过这些概念的请求流。\n   Envoy 构建块  这一切都从监听器开始。Envoy 暴露的监听器是命名的网络位置，可以是一个 IP 地址和一个端口，也可以是一个 Unix 域套接字路径。Envoy 通过监听器接收连接和请求。考虑一下下面的 Envoy 配置。\nstatic_resources:listeners:- name:listener_0address:socket_address:address:0.0.0.0port_value:10000filter_chains:[{}]通过上面的 Envoy 配置，我们在 0.0.0.0 地址的 10000 端口上声明了一个名为 listener_0 的监听器。这意味着 Envoy 正在监听 0.0.0.0:10000 的传入请求。\n每个监听器都有不同的部分需要配置。然而，唯一需要的设置是地址。上述配置是有效的，你可以用它来运行 Envoy—— 尽管它没有用，因为所有的连接都会被关闭。\n我们让 filter_chains 字段为空，因为在接收数据包后不需要额外的操作。\n为了进入下一个构件（路由），我们需要创建一个或多个网络过滤器链（filter_chains），至少要有一个过滤器。\n网络过滤器通常对数据包的有效载荷进行操作，查看有效载荷并对其进行解析。例如，Postgres 网络过滤器解析数据包的主体，检查数据库操作的种类或其携带的结果。\nEnvoy 定义了三类过滤器：监听器过滤器、网络过滤器和 HTTP 过滤器。监听器过滤器在收到数据包后立即启动，通常对数据包的头信息进行操作。监听器过滤器包括代理监听器过滤器（提取 PROXY 协议头），或 TLS 检查器监听器过滤器（检查流量是否为 TLS，如果是，则从 TLS 握手中提取数据）。\n每个通过监听器进来的请求可以流经多个过滤器。我们还可以写一个配置，根据传入的请求或连接属性选择不同的过滤器链。\n   过滤器链  一个特殊的、内置的网络过滤器被称为 HTTP 连接管理器过滤器（HTTP Connection Manager Filter）或 HCM。HCM 过滤器能够将原始字节转换为 HTTP 级别的消息。它可以处理访问日志，生成请求 ID，操作头信息，管理路由表，并收集统计数据。我们将在以后的课程中对 HCM 进行更详细的介绍。\n就像我们可以为每个监听器定义多个网络过滤器（其中一个是 HCM）一样，Envoy 也支持在 HCM 过滤器中定义多个 HTTP 级过滤器。我们可以在名为 http_filters 的字段下定义这些 HTTP 过滤器。\n   HCM 过滤器  HTTP 过滤器链中的最后一个过滤器必须是路由器过滤器（envoy.filters.HTTP.router）。路由器过滤器负责执行路由任务。这最终把我们带到了第二个构件 —— 路由。\n我们在 HCM 过滤器的 route_config 字段下定义路由配置。在路由配置中，我们可以通过查看元数据（URI、Header 等）来匹配传入的请求，并在此基础上，定义流量的发送位置。\n路由配置中的顶级元素是虚拟主机。每个虚拟主机都有一个名字，在发布统计数据时使用（不用于路由），还有一组被路由到它的域。\n让我们考虑下面的路由配置和域的集合。\nroute_config:name:my_route_configvirtual_hosts:- name:tetrate_hostsdomains:[\u0026#34;tetrate.io\u0026#34;]routes:...- name:test_hostsdomains:[\u0026#34;test.tetrate.io\u0026#34;,\u0026#34;qa.tetrate.io\u0026#34;]routes:...如果传入请求的目的地是 tetrate.io（即 Host/Authority 标头被设置为其中一个值），则 tetrate_hosts  虚拟主机中定义的路由将得到处理。\n同样，如果 Host/Authority 标头包含 test.tetrate.io 或 qa.tetrate.io，test_hosts 虚拟主机下的路由将被处理。使用这种设计，我们可以用一个监听器（0.0.0.0:10000）来处理多个顶级域。\n如果你在数组中指定多个域，搜索顺序如下：\n 精确的域名（例如：tetrate.io）。 后缀域名通配符（如 *.tetrate.io）。 前缀域名通配符（例如：tetrate.*）。 匹配任何域的特殊通配符（*）。  在 Envoy 匹配域名后，是时候处理所选虚拟主机中的 routes 字段了。这是我们指定如何匹配一个请求，以及接下来如何处理该请求（例如，重定向、转发、重写、发送直接响应等）的地方。\n我们来看看一个例子。\nstatic_resources:listeners:- name:listener_0address:socket_address:address:0.0.0.0port_value:10000filter_chains:- filters:- name:envoy.filters.network.http_connection_managertyped_config:\u0026#34;@type\u0026#34;: type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManagerstat_prefix:hello_world_servicehttp_filters:- name:envoy.filters.http.routerroute_config:name:my_first_routevirtual_hosts:- name:direct_response_servicedomains:[\u0026#34;*\u0026#34;]routes:- match:prefix:\u0026#34;/\u0026#34;direct_response:status:200body:inline_string:\u0026#34;yay\u0026#34;配置的顶部部分与我们之前看到的一样。我们已经添加了 HCM 过滤器、统计前缀（hello_world_service）、单个 HTTP 过滤器（路由器）和路由配置。\n在虚拟主机内，我们要匹配任何域名。在 routes 下，我们匹配前缀（/），然后我们可以发送一个响应。\n当涉及到匹配请求时，我们有多种选择。\n   路由匹配 描述 示例     prefix 前缀必须与:path 头的开头相符。 /hello 与 hello.com/hello、hello.com/helloworld 和 hello.com/hello/v1 匹配。   path 路径必须与:path 头完全匹配。 /hello 匹配 hello.com/hello，但不匹配 hello.com/helloworld 或 hello.com/hello/v1   safe_regex 所提供的正则表达式必须与:path 头匹配。 /\\{3} 匹配任何以 / 开头的三位数。例如，与 hello.com/123 匹配，但不能匹配 hello.com/hello 或 hello.com/54321。   connect_matcher 匹配器只匹配 CONNECT 请求。     一旦 Envoy 将请求与路由相匹配，我们就可以对其进行路由、重定向或返回一个直接响应。在这个例子中，我们通过 direct_response 配置字段使用直接响应。\n你可以把上述配置保存到 envoy-direct-response.yaml 中。\n我们将使用一个名为 func-e 的命令行工具。func-e 允许我们选择和使用不同的 Envoy 版本。\n我们可以通过运行以下命令下载 func-e CLI。\ncurl https://func-e.io/install.sh | sudo bash -s -- -b /usr/local/bin 现在我们用我们创建的配置运行 Envoy。\nfunc-e run -c envoy-direct-response.yaml 一旦 Envoy 启动，我们就可以向 localhost:10000 发送一个请求，以获得我们配置的直接响应。\n$ curl localhost:10000 yay 同样，如果我们添加一个不同的主机头（例如 -H \u0026#34;Host: hello.com\u0026#34;）将得到相同的响应，因为 hello.com 主机与虚拟主机中定义的域相匹配。\n在大多数情况下，从配置中直接发送响应是一个很好的功能，但我们会有一组端点或主机，我们将流量路由到这些端点或主机。在 Envoy 中做到这一点的方法是通过定义集群。\n集群（Cluster）是一组接受流量的上游类似主机。这可以是你的服务所监听的主机或 IP 地址的列表。\n例如，假设我们的 hello world 服务是在 127.0.0.0:8000 上监听。然后，我们可以用一个单一的端点创建一个集群，像这样。\nclusters:- name:hello_world_serviceload_assignment:cluster_name:hello_world_serviceendpoints:- lb_endpoints:- endpoint:address:socket_address:address:127.0.0.1port_value:8000集群的定义与监听器的定义在同一级别，使用 clusters 字段。我们在路由配置中引用集群时，以及在导出统计数据时，都会使用集群。该名称在所有集群中必须是唯一的。\n在 load_assignment 字段下，我们可以定义要进行负载均衡的端点列表，以及负载均衡策略设置。\nEnvoy 支持多种负载均衡算法（round-robin、Maglev、least-request、random），这些算法是由静态引导配置、DNS、动态 xDS（CDS 和 EDS 服务）以及主动 / 被动健康检查共同配置的。如果我们没有通过 lb_policy 字段明确地设置负载均衡算法，它默认为 round-robin。\nendpoints 字段定义了一组属于特定地域的端点。使用可选的 locality 字段，我们可以指定上游主机的运行位置，然后在负载均衡过程中使用（即，将请求代理到离调用者更近的端点）。\n添加新的端点指示负载均衡器在一个以上的接收者之间分配流量。通常情况下，负载均衡器对所有端点一视同仁，但集群定义允许在端点内建立一个层次结构。\n例如，端点可以有一个 权重（weight） 属性，这将指示负载均衡器与其他端点相比，向这些端点发送更多 / 更少的流量。\n另一种层次结构类型是基于地域性的（locality），通常用于定义故障转移架构。这种层次结构允许我们定义地理上比较接近的 “首选” 端点，以及在 “首选” 端点变得不健康的情况下应该使用的 “备份” 端点。\n由于我们只有一个端点，所以我们还没有设置 locality。在 lb_endpoints 字段下，可以定义 Envoy 可以路由流量的实际端点。\n我们可以在 Cluster 中配置以下可选功能：\n 主动健康检查（health_checks） 断路器 (circuit_breakers) 异常点检测（outlier_detection） 在处理上游的 HTTP 请求时有额外的协议选项 一组可选的网络过滤器，应用于所有出站连接等  和监 …","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1652173605,"objectID":"bfa76d57862601aed97f20a4c2061aa6","permalink":"https://jimmysong.io/docs/cloud-native/service-mesh/envoy-building-blocks/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/docs/cloud-native/service-mesh/envoy-building-blocks/","section":"cloud-native","summary":"在这一节中，我们将解释 Envoy 的基本构建模块。 Envoy 配置的根被称为引导","tags":null,"title":"Envoy 的构建模块","type":"book"},{"authors":null,"categories":null,"content":"HCM 是一个网络级的过滤器，将原始字节转译成 HTTP 级别的消息和事件（例如，收到的 Header，收到的 Body 数据等）。\nHCM 过滤器还处理标准的 HTTP 功能。它支持访问记录、请求 ID 生成和跟踪、Header 操作、路由表管理和统计等功能。\n从协议的角度来看，HCM 原生支持 HTTP/1.1、WebSockets、HTTP/2 和 HTTP/3（仍在 Alpha 阶段）。\nEnvoy 代理被设计成一个 HTTP/2 复用代理，这体现在描述 Envoy 组件的术语中。\nHTTP/2 术语\n在 HTTP/2 中，流是已建立的连接中的字节的双向流动。每个流可以携带一个或多个消息（message）。消息是一个完整的帧（frame）序列，映射到一个 HTTP 请求或响应消息。最后，帧是 HTTP/2 中最小的通信单位。每个帧都包含一个帧头（frame header），它至少可以识别该帧所属的流。帧可以携带有关 HTTP Header、消息有效载荷等信息。\n无论流来自哪个连接（HTTP/1.1、HTTP/2 或 HTTP/3），Envoy 都使用一个叫做 编解码 API（codec API） 的功能，将不同的线程协议翻译成流、请求、响应等协议无关模型。协议无关的模型意味着大多数 Envoy 代码不需要理解每个协议的具体内容。\nHTTP 过滤器 在 HCM 中，Envoy 支持一系列的 HTTP 过滤器。与监听器级别的过滤器不同，这些过滤器对 HTTP 级别的消息进行操作，而不知道底层协议（HTTP/1.1、HTTP/2 等）或复用能力。\n有三种类型的 HTTP 过滤器。\n 解码器（Decoder）：当 HCM 对请求流的部分进行解码时调用。 编码器（Encoder）：当 HCM 对响应流的部分进行编码时调用。 解码器 / 编码器（Decoder/Encoder）：在两个路径上调用，解码和编码  下图解释了 Envoy 如何在请求和响应路径上调用不同的过滤器类型。\n   请求响应路径及 HTTP 过滤器  像网络过滤器一样，单个的 HTTP 过滤器可以停止或继续执行后续的过滤器，并在单个请求流的范围内相互分享状态。\n数据共享 在高层次上，我们可以把过滤器之间的数据共享分成静态和动态。\n静态包含 Envoy 加载配置时的任何不可变的数据集，它被分成三个部分。\n1. 元数据\nEnvoy 的配置，如监听器、路由或集群，都包含一个metadata数据字段，存储键 / 值对。元数据允许我们存储特定过滤器的配置。这些值不能改变，并在所有请求 / 连接中共享。例如，元数据值在集群中使用子集选择器时被使用。\n2. 类型化的元数据\n类型化元数据不需要为每个流或请求将元数据转换为类型化的类对象，而是允许过滤器为特定的键注册一个一次性的转换逻辑。来自 xDS 的元数据在配置加载时被转换为类对象，过滤器可以在运行时请求类型化的版本，而不需要每次都转换。\n3. HTTP 每路过滤器配置\n与适用于所有虚拟主机的全局配置相比，我们还可以指定每个虚拟主机或路由的配置。每个路由的配置被嵌入到路由表中，可以在 typed_per_filter_config 字段下指定。\n另一种分享数据的方式是使用动态状态。动态状态会在每个连接或 HTTP 流中产生，并且它可以被产生它的过滤器改变。名为 StreamInfo 的对象提供了一种从 map 上存储和检索类型对象的方法。\n过滤器顺序 指定 HTTP 过滤器的顺序很重要。考虑一下下面的 HTTP 过滤器链。\nhttp_filters:- filter_1- filter_2- filter_3一般来说，链中的最后一个过滤器通常是路由器过滤器。假设所有的过滤器都是解码器 / 编码器过滤器，HCM 在请求路径上调用它们的顺序是filter_1、filter_2、filter_3。\n在响应路径上，Envoy 只调用编码器过滤器，但顺序相反。由于这三个过滤器都是解码器 / 编码器过滤器，所以在响应路径上的顺序是 filter_3、filter_2、filter_1。\n内置 HTTP 过滤器 Envoy 已经内置了几个 HTTP 过滤器，如 CORS、CSRF、健康检查、JWT 认证等。你可以在这里找到 HTTP 过滤器的完整列表。\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1652173605,"objectID":"d2d810acd877d87bd0fe44a9214acf4d","permalink":"https://jimmysong.io/docs/cloud-native/service-mesh/http-conneciton-manager/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/docs/cloud-native/service-mesh/http-conneciton-manager/","section":"cloud-native","summary":"HCM 是一个网络级的过滤器，将原始字节转译成 HTTP 级别的消息和事件（","tags":null,"title":"HTTP 连接管理器介绍","type":"book"},{"authors":null,"categories":null,"content":"关于本书 本书的主题包括：\n 服务网格概念解析 控制平面和数据平面的原理 Istio 架构详解 基于 Istio 的自定义扩展 迁移到 Istio 服务网格 构建云原生应用网络  如何阅读本书 本书基于 Istio 1.11+ 版本编写，您可以通过以下地址参与到本书的编写或阅读本书：\n 自行构建 在线浏览（推荐）  书中部分内容来自 Tetrate 出品的 Istio 基础教程，请访问 Tetrate 学院，解锁全部教程及测试，获得 Tetrate 认证的 Istio 认证。\n致谢 感谢 ServiceMesher 及云原生社区先后负责翻译了 Envoy 及 Istio 官方文档，为本书的成书提供了大量参考资料。\n许可证 本书所有内容支持使用署名 - 非商业性使用 - 相同方式共享 4.0 (CC BY-NC-SA 4.0) 协议共享。\n参与本书 请参考 Istio 文档样式指南。\n","date":1649030400,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1652173605,"objectID":"cdeb6daaa562734b2afb9bbddb006311","permalink":"https://jimmysong.io/docs/book/istio-handbook/","publishdate":"2022-04-04T00:00:00Z","relpermalink":"/docs/book/istio-handbook/","section":"book","summary":"云原生应用网络构建指南","tags":["handbook"],"title":"Istio服务网格🔥","type":"publication"},{"authors":null,"categories":null,"content":"本书译自 The Developer Advocacy Handbook，副标题「开发者布道师的自我修养」为译者自拟。\n 作者：Christian Heilmann 译者：宋净超（Jimmy Song） 开始阅读 下载电子书  译者序 随着开源软件的流行，企业的开发者布道（Developer Advocacy）的需求不断增长，开发者布道师（Developer Advocate）的职业前景也越来越广阔。这本书将揭开大众口中的“布道师”的神秘面纱，让你了解这一角色的工作内容；对于各位布道师来说，这本书也将成为你整个布道生涯的得力助手，指导你布道的方方面面。\n作者 Christian Heilmann 是一个德国人，从事开发者布道工作已有十余年，译者本身也有多年从事开发者布道工作的经验。目前在中文互联网上，对“布道师”这一角色还存在很多猜疑和误解，相信这本书可以化解开发者对布道师这一角色的疑虑。虽然书中提到的一些技术在中国可能并不适用，但是中国也有同类出色的替代品，我相信人情总是相通的，技术只是手段而已。\n由于笔者完全凭个人兴趣，利用业余时间翻译此书，翻译过程中难免遗漏和错误，欢迎提交 Issue 评论和 PR 修改。如果你有关于开发者布道、开源、云原生及开源相关的问题，欢迎与我交流。\n许可证 本书所有内容支持使用署名 - 非商业性使用 - 相同方式共享 4.0 (CC BY-NC-SA 4.0) 协议共享。\n","date":1648080000,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1652173605,"objectID":"6e2457fbeab76e72de47a3f208acdd81","permalink":"https://jimmysong.io/docs/book/developer-advocacy-handbook/","publishdate":"2022-03-24T00:00:00Z","relpermalink":"/docs/book/developer-advocacy-handbook/","section":"book","summary":"开发者布道师的自我修养","tags":["ebook","translation"],"title":"开发者布道手册","type":"publication"},{"authors":null,"categories":null,"content":"本书译自美国国家标准标准与技术研究院（NIST）Special Publication 800-204C。\n关于本书 作者：Ramaswamy Chandramouli\n审阅\n 计算机安全司信息技术实验室 美国商务部 Gina M. Raimondo，秘书 国家标准和技术研究所 James K. Olthoff，履行负责标准和技术的商务部副部长兼国家标准和技术研究所所长的非专属职能和职责  原出版物可在：https://doi.org/10.6028/NIST.SP.800-204C 免费获取，中文版请在此阅读。\n","date":1647216000,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1652173605,"objectID":"77e3afee877672a563686411fc92a285","permalink":"https://jimmysong.io/docs/book/service-mesh-devsecops/","publishdate":"2022-03-14T00:00:00Z","relpermalink":"/docs/book/service-mesh-devsecops/","section":"book","summary":"NIST特别发布","tags":["ebook","translation"],"title":"利用服务网格实施微服务的DevSecOps","type":"publication"},{"authors":null,"categories":null,"content":"Envoy 基础教程，本手册梳理了 Envoy 基础知识，适用于初学者，帮你快速掌握 Envoy 代理。\n关于本书 Envoy 是一个开源的边缘和服务代理，专为云原生应用而设计。Envoy 与每个应用程序一起运行，通过提供网络相关的功能，如重试、超时、流量路由和镜像、TLS 终止等，以一种平台无关的方式抽象出网络。由于所有的网络流量都流经 Envoy 代理，因此很容易观察到流量和问题区域，调整性能，并准确定位延迟来源。\n本书为 Tetrate 出品的《Envoy 基础教程》的文字内容，其配套的 8 节实验及 19 个测试，请访问 Tetrate 学院。\n如何阅读本书 您可以使用以下方式阅读：\n 在线阅读（建议） 下载 PDF  注：PDF 非实时编译，内容可能落后于在线版本，建议在线阅读。\n关于作者 宋净超（Jimmy Song），CNCF Ambassador，云原生社区创始人，个人网站 jimmysong.io。\n许可证 您可以使用署名 - 非商业性使用 - 相同方式共享 4.0 (CC BY-NC-SA 4.0) 协议共享。\n","date":1647043200,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1652173605,"objectID":"4a01e92eddc6da383ffd966fd08ce545","permalink":"https://jimmysong.io/docs/book/envoy-handbook/","publishdate":"2022-03-12T00:00:00Z","relpermalink":"/docs/book/envoy-handbook/","section":"book","summary":"从零开始学习Envoy网络代理","tags":["handbook"],"title":"Envoy基础教程🔥","type":"publication"},{"authors":null,"categories":null,"content":"本书起始于2017年3月，记录了本人从零开始学习和使用Kubernetes的心路历程，着重于经验分享和总结，同时也会有相关的概念解析，希望能够帮助大家少踩坑，少走弯路，还会指引大家关注Kubernetes生态周边，如微服务构建、DevOps、大数据应用、服务网格（Service Mesh）、云原生等领域。\n开始之前 在阅读本书之前希望您掌握以下知识和准备以下环境：\n Linux 操作系统原理 Linux 常用命令 Docker 容器原理及基本操作 一台可以上网的电脑，Mac/Windows/Linux 皆可 安装 Docker  本书主题 本书的主题不局限于Kubernetes，还包括以下几大主题：\n 云原生开源组件 云原生应用与微服务架构 基于Kubernetes的Service Mesh架构 Kubernetes与微服务结合实践  起初写作本书时，安装的所有组件、所用示例和操作等皆基于 Kubernetes 1.6+ 版本，同时我们也将密切关注Kubernetes的版本更新，随着它的版本更新升级，本书中的Kubernetes版本和示例也将随之更新。\n使用方式 您可以通过以下方式使用本书：\n GitHub GitBook 在线浏览 下载本书的发行版 按照说明自行编译成离线版本 Fork 一份添加你自己的笔记自行维护，有余力者可以一起参与进来  注意：本书中的 Service Mesh 相关内容已不再维护，请转至 istio-handbook 浏览。\n快速开始 如果您想要学习Kubernetes和云原生应用架构但是又不想自己从头开始搭建和配置一个集群，那么可以直接使用kubernetes-vagrant-centos-cluster项目直接在本地部署一个3节点的分布式集群及其他如Heapster、EFK、Istio等可选组件，或者使用更加轻量级的cloud-native-sandbox在个人电脑上使用Docker运行单节点的Kubernetes、Istio等组件。\n贡献与致谢 感谢大家对本书做出的贡献！\n 查看贡献者列表 查看如何贡献 查看文档的组织结构与使用方法  ","date":1646784000,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1652173605,"objectID":"28cfdf5e03d31fe45dbec103a514ab86","permalink":"https://jimmysong.io/docs/book/kubernetes-handbook/","publishdate":"2022-03-09T00:00:00Z","relpermalink":"/docs/book/kubernetes-handbook/","section":"book","summary":"云原生应用架构实战手册","tags":["handbook"],"title":"Kubernetes中文指南🔥","type":"publication"},{"authors":null,"categories":null,"content":"本报告译自 O’Reilly 出品的 The Future of Observablity with OpeTelemetry，作者 Ted Young，译者 Jimmy Song。\n关于本书 本书内容包括：\n OpenTelemetry 如何满足库作者、应用程序拥有者、运维和响应者的需求 应用程序的不同角色如何围绕 OpenTelemetry 来协同和独立工作 关于在组织中采用和管理 OpenTelemetry 的实用建议  如何阅读本书 您可以使用以下方式阅读：\n 在线阅读 下载 PDF  关于作者 Ted Young 是 OpenTelemetry 项目的联合创始人之一。在过去的二十年里，他设计并建立了各种大规模的分布式系统，包括可视化 FX 管道和容器调度系统。他目前在 Lightstep 公司担任开发者教育总监，住在俄勒冈州波特兰的一个小农场里。\n许可证 您可以使用署名 - 非商业性使用 - 相同方式共享 4.0 (CC BY-NC-SA 4.0) 协议共享。\n","date":1644105600,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1652173605,"objectID":"3d78837fcc0503a24f74c332111a3100","permalink":"https://jimmysong.io/docs/book/opentelemetry-obervability/","publishdate":"2022-02-06T00:00:00Z","relpermalink":"/docs/book/opentelemetry-obervability/","section":"book","summary":"利用格式化数据从根本上改变可观察性实践","tags":["ebook","translation"],"title":"OpenTelemetry可观察性指南","type":"publication"},{"authors":null,"categories":null,"content":"近日美国国家安全局（NSA）和网络安全与基础设施安全署（CISA）发布了一份网络安全技术报告 Kubernetes Hardening Guidance（查看英文原版 PDF）。\nJimmy 翻译的《Kubernetes 加固指南》（或译作《Kubernetes 强化指南》）中文版，点击在线阅读，如您发现错误，欢迎在 GitHub 上提交勘误。\n","date":1628380800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1652173605,"objectID":"ff33cba030ab96ff0c0640954bf14026","permalink":"https://jimmysong.io/docs/book/kubernetes-hardening-guidance/","publishdate":"2021-08-08T00:00:00Z","relpermalink":"/docs/book/kubernetes-hardening-guidance/","section":"book","summary":"NSA 和 CISA 联合出品","tags":["ebook","translation"],"title":"Kubernetes加固指南","type":"publication"},{"authors":null,"categories":null,"content":"2021 年 3 月，《Quarkus 实战——专为 Kubernetes 而优化的 Java 解决方案》，已经由机械工业出版社出版上市，可点击查看详情购买，下面是本书封面及封底。\n   译者序 Quarkus 是一款有别于传统 Java 架构的新技术框架，它是建立在我们熟知的技术栈上，使用了诸多成熟的技术，如 JPA，JAX-RS、Eclipse Vert.x、Eclipse MicroProfile 和 CDI 等，并将之和 Kubernetes 紧密融合在一起。用户可以借助 Kubernetes 的高效的调度运维能力，最大限度地节约资源。\n云原生的星星之火，自社区 Kubernetes 爆红之后，变成燎原之势。云原生相关的技术如雨后春笋般涌出。刘岩，宋净超和我都是云原生社区的成员，也钟爱布道各种相关技术，是这一领域的狂热爱好者。我们共同的爱好之一，就是时刻关注有好的国外技术或者成熟技术的优秀书籍发布。\n在这一过程中，我们机缘巧合地发现了这本书，恰好这本书在国内还没有进行翻译，满怀热情的我们就此踏上了研究 Quarkus 之旅。\n这本采用十分简单的抛出问题，提出解决方案，和引发讨论的方式，将 Quarkus 的技术点描绘的细致透彻。通过本书，用户可以自学相关内容，借助 Quarkus，提高 Java 相关研发的工作效率，让你在快节奏的微服务构建和基于云的应用程序开发领域立于不败之地。\n在整个翻译过程中，我们得到华章出版社和李忠明编辑的全力帮助，在此表示衷心感谢。\n最后，感谢大家有缘阅读到此书，希望我们三人的绵薄之力可以帮助到崇尚云原生技术的你，在 Quarkus 的技术道路上，能够享受到和我们一样的欣喜。\n译者：张晓宇、刘岩、宋净超\n","date":1617148800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1652173605,"objectID":"c8dd8e154fb2f6ff5a1da83d9217e955","permalink":"https://jimmysong.io/docs/book/quarkus-cookbook/","publishdate":"2021-03-31T00:00:00Z","relpermalink":"/docs/book/quarkus-cookbook/","section":"book","summary":"专为 Kubernetes 而优化的 Java 解决方案","tags":["printed"],"title":"Quarkus实战","type":"publication"},{"authors":null,"categories":null,"content":"   当我们在讨论云原生时究竟在讨论什么？这些年来我一直在思索这个问题，大家的观点可能不尽相同。三年前从我翻译了第一本云原生领域书籍开始，陆续参与翻译和创作了一系列云原生作品，同时通过对云原生领域的开源项目、社区、基金会、应用云化过程的参与和观察，我得出了下面的结论：云原生是一种行为方式和设计理念，究其本质，凡是能够提高云上资源利用率和应用交付效率的行为或方式都是云原生的。云计算的发展史就是一部云原生化的历史。云原生是云计算适应社会分工的必然结果，将系统资源、底层基础设施和应用编排交由云平台管理，让开发者专注于业务逻辑，这不正是云计算长久以来孜孜以求的吗？云原生应用追求的是快速构建高容错性、弹性的分布式应用，追求的极致的研发效率和友好的上线与运维体验，随云云原生的理念应运而生，它们天生适合部署在云上，可以最大限度利用云计算带来的红利。\n在此之前我曾翻译过几本云原生主题的图书，其中《Cloud Native Go》的作者 Kevin Hoffman，《云原生 Java》的作者 Josh Long，他们都是来自 Pivotal 或曾在 Pivotal 工作多年，当看到此书时，我惊奇的发现，作者 Cornelia Davis 同样来自这家公司，Pivotal 真可谓是云原生的黄埔军校，此书的内容跟以往的云原生书籍有所不同，对于模式的梳理标新立异，因此我立马联系了电子工业出版社的张春雨编辑，经他了解到张若飞正在翻译此书，此前我已与他合作翻译了《云原生 Java》，本书算是我跟他的第二次合作，他翻译图书时的精准和高效着实让我佩服，我们各自翻译了本书一半的内容。 人人都在讨论云原生，但是究竟如何实现却莫衷一是。本书列举了构建云原生应用的 12 种模式，主要关注的是云原生应用的数据、服务与交互，即应用层面的设计模式，这些模式穿插于本书的第二部分各个章节中，基本覆盖了云原生应用的各个方面，并将理论结合实践，带领读者使用 Java 来实现一个云原生应用。\n同时还要感谢云原生社区的成员及志愿者们，对于云原生在中国的发展做出的贡献，你们的鼓励和支持是在云原生领域不断努力和探索的动力。本书在翻译过程中难免有一些纰漏，还望读者指正。\n","date":1596931200,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1652173605,"objectID":"89c91f15f5e3f5c3fb85d7856f0fa83d","permalink":"https://jimmysong.io/docs/book/cloud-native-patterns/","publishdate":"2020-08-09T00:00:00Z","relpermalink":"/docs/book/cloud-native-patterns/","section":"book","summary":"张若飞、宋净超 译","tags":["printed"],"title":"云原生模式","type":"publication"},{"authors":null,"categories":null,"content":"Serverless（无服务器架构）是指服务端逻辑由开发者实现，应用运行在无状态的计算容器中，由事件触发，完全被第三方管理，其业务层面的状态则存储在数据库或其他介质中。\nServerless 是云原生技术发展的高级阶段，可以使开发者更聚焦在业务逻辑，而减少对基础架构的关注。\n关于本书 本书是本人学习和实践 Serverless 过程中所整理的资料，目前主要关注的 Serverless 开源项目是 Knative。\n使用方式 您可以通过以下方式使用本书：\n 在线浏览  ","date":1571616000,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1652173605,"objectID":"fc81e90d61dedf88880100181148ebb8","permalink":"https://jimmysong.io/docs/book/serverless-handbook/","publishdate":"2019-10-21T00:00:00Z","relpermalink":"/docs/book/serverless-handbook/","section":"book","summary":"无服务器架构实践手册","tags":["handbook"],"title":"Serverless实战","type":"publication"},{"authors":null,"categories":null,"content":"本书为 Cloud Native Infrastructure 中文版，作者 Justin Garrison 和 Kris Nova ，英文版发行于 2017 年 11 月，已可以在网上免费获得，本书是关于创建和管理基础架构，以适用于云原生应用全生命周期管理的模式和实践。\n阅读完这本书后，您将会有如下收获：\n 理解为什么说云原生基础架构是高效运行云原生应用所必须的 根据准则来决定您的业务何时以及是否应该采用云原生 了解部署和管理基础架构和应用程序的模式 设计测试以证明您的基础架构可以按预期工作，即使在各种边缘情况下也是如此 了解如何以策略即代码的方式保护基础架构  使用方式 您可以通过以下方式使用本书：\n GitHub 在线阅读 英文原版  许可证 本书英文版版权属于 O’Reilly，中文版版权归属于机械工业出版，基于署名-非商业性使用-相同方式共享 4.0（CC BY-NC-SA 4.0）分享，本书为本人自行翻译，目的在于学习和巩固云原生知识，如有需要请购买纸质书。\n","date":1571616000,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1652173605,"objectID":"ab6cb03678341ec789ecf55430a12ff9","permalink":"https://jimmysong.io/docs/book/cloud-native-infrastructure/","publishdate":"2019-10-21T00:00:00Z","relpermalink":"/docs/book/cloud-native-infrastructure/","section":"book","summary":"专为 Kubernetes 而优化的 Java 解决方案","tags":["ebook","translation"],"title":"云原生基础架构","type":"publication"},{"authors":null,"categories":null,"content":"Google 有许多通用工程实践，几乎涵盖所有语言和项目。此文档为长期积累的最佳实践，是集体经验的结晶。我们尽可能地将其公之于众，您的组织和开源项目也会从中受益。\n当前包含以下文档：\nGoogle 代码审查指南，实则两套指南：\n 代码审查者指南 代码开发者指南  译者序 此仓库翻译自 google/eng-practices，目前为止的主要内容为 Google 总结的如何进行 Code Review（代码审查） 指南，根据原 Github 仓库的标题判断以后会追加更多 Google 工程实践的内容。\n 本文档的 Github 地址，点击页面底部的 Edit this page 链接可以编辑页面。 其他语言的版本。 感谢 Ta-Ching Chen 的审阅。 译者：Jimmy Song 本网站使用 Hugo 构建。 本网站使用 hugo-book 主题。  许可证 本项目中的文档适用于 CC-By 3.0 许可证，该许可证鼓励您共享这些文档。\n","date":1569801600,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1652173605,"objectID":"415ed3757cbd85008bb45b82a1580dd7","permalink":"https://jimmysong.io/docs/book/google-engineering-practices/","publishdate":"2019-09-30T00:00:00Z","relpermalink":"/docs/book/google-engineering-practices/","section":"book","summary":"谷歌代码审查实践指南","tags":["ebook","translation"],"title":"谷歌工程实践","type":"publication"},{"authors":null,"categories":null,"content":"   这本书的第一作者是张亮，现就职于京东金融，为了丰富全书的内容，张亮要求了圈内的好友吴晟、敖小剑和我，共同创作了这本宏大命题的《未来架构》，下面引述的他介绍的成书原由。\n成书缘由 身处互联网行业的我们一向处在变革的最前端，受到世界浪潮的洗礼，不停歇地追赶着这一波又一波的技术潮流，才不会落在时代脚步之后。特别是近几年来，互联网架构不断演化，经历了从集中式架构到分布式架构，再到云原生架构的过程。云原生因能解决传统应用升级缓慢、架构臃肿、不能快速迭代等问题而逐渐成为这个时代舞台的主角。\n身处在这个变化浪潮中，我看着它改变着互联网架构的航行方向，并给越来越多的公司和个人带来新的思想和发展，也用我这些年走过的路、积累的经验、沉淀的眼界去学习它、读懂它，并让它融入我的知识体系网，来更新大脑里那张探索不断、充满指南针意义的架构地图。\n2017、2018年，我与这些变化同进同退，让Elastic-Job、Sharding-Sphere成为业界里大家认可的项目、让所负责的开源项目开始走向国际化、也认识了更多的良师益友……这种种的经历和发展，触动我开始将所闻、所见、所知、所感的珠玑落到了笔尖，串联成了这本书：《未来架构——从服务化到云原生》。\n这本书里有你想认识的分布式、服务化、服务网格、容器、编排治理、云原生、云数据库……\n这本书里既有我多年深思熟虑的见解和沉淀良久的经验，也有我弃笔又拾笔的挣扎，因为我需要让书的内容对读者负责……\n这本书里更有这些资深大咖的精彩章节叙述：Apache孵化器项目SkyWalking创始人\u0026amp;APM专家吴晟、CNCF Ambassador\u0026amp;云原生布道师\u0026amp;云原生社区创始人宋净超、Service Mesh布道师敖小剑。\n目录  第1章 云原生 第2章 远程通信 第3章 配置 第4章 服务治理 第5章 观察分布式服务 第6章 侵入式服务治理方案 第7章 云原生生态的基石Kubernetes 第8章 跨语言服务治理方案Service Mesh 第9章 云原生数据架构 第10章 分布式数据库中间件生态圈ShardingSphere  寄托期翼 书的封页是张亮老师选择的老特拉福德球场前矗立的曼联Holy Trinity雕像作为背景图。\n1958年2月6日，曼联队在南斯拉夫参加欧冠杯获得半决赛权后，回程途中遭遇慕尼黑空难，曼联战队瞬间消失在夜空。为了曼联的复兴，幸存下来的曼联队的主帅马特·巴斯比强忍悲痛，用血泪和汗水重建曼联。1968年5月29日，在慕尼黑空难整整10年后，巴斯比带领他的新战队终于捧起了欧洲冠军杯，告慰了那些故去的亡魂！这座Holy Trinity雕像变成了永恒的纪念！\n信仰、永不言弃、坚持不懈、创造奇迹、浴火重生…，是我从这座雕塑中感受到的力量。每个人的一生一定都会经历高峰和低谷，见过山川和沙漠，也希望这本书不仅仅能为大家带来互联网架构的干货知识，也能寄托我对大家的祝福：希望在这十万长征路上正在不懈拼搏的你，能够拥有自己的信仰和希望，即使要途径无数沙漠和海洋，也能在经历千帆后柳暗花明！\n","date":1554076800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1652173605,"objectID":"3fcfce4a4eaa9356b969ffe6d6a97952","permalink":"https://jimmysong.io/docs/book/future-architecture/","publishdate":"2019-04-01T00:00:00Z","relpermalink":"/docs/book/future-architecture/","section":"book","summary":"张亮、吴晟、敖小剑、宋净超 著","tags":["printed"],"title":"未来架构——从服务化到云原生","type":"publication"},{"authors":null,"categories":null,"content":"   Cloud Native Python 介绍 随着当今商业的迅速发展，企业为了支撑自身的迅速扩张，仅仅通过自有的基础设施是远远不够的。因此，他们一直在追求利用云的弹性来构建支持高度可扩展应用程序的平台。\n这本书能够帮助您一站式的了解使用Python构建云原生应用架构的所有信息。本书中我们首先向您介绍云原生应用架构和他们能够帮助您解决哪些问题。然后您将了解到如何使用REST API和Python构建微服务，通过事件驱动的方式构建Web层。接下来，您将了解到如何与数据服务进行交互，并使用React构建Web视图，之后我们将详细介绍应用程序的安全性和性能。然后，您还将了解到如何Docker容器化您的服务。最后，您将学习如何在AWS和Azure平台上部署您的应用程序。在您部署了应用程序后，我们将围绕关于应用程序故障排查的一系列概念和技术来结束这本书。\n本书中涵盖哪些内容  第1章 介绍云原生应用架构和微服务，讨论云原生架构的基本概念和构建应用程序开发环境。 第2章 使用Python构建微服务，构建自己的微服务知识体系并根据您的用例进行扩展。 第3章 使用Python构建Web应用程序，构建一个初始的Web应用程序并与微服务集成。 第4章 与数据服务交互，教您如何将应用程序迁移到不同的数据库服务。 第5章 使用React构建Web视图。 第6章 使用Flux创建可扩展UI，帮助您理解如何使用Flux创建可扩展的应用程序。 第7章 事件溯源和CQRS，讨论如何以事件形式存储合约（transaction）。 第8章 保护Web应用程序，让您的应用程序免于受到外部威胁。 第9章 持续交付，应用程序频繁发布的相关知识。 第10章 Docker容器化您的服务，讨论容器服务和在Docker中运行应用程序。 第11章 将应用程序部署到AWS平台上，教您如何在AWS上构建基础设施并建立应用程序的生产环境。 第12章 将应用程序部署到Azure平台上，讨论如何在Azure上构建基础设施并建立应用程序的生产环境。 第13章 监控云应用，了解不同的基础设施和应用的监控工具。  使用本书您需要哪些工具和环境 您需要在系统上安装Python。一个文本编辑器，最好是Vim、Sublime或者Notepad++。在有一个章节中您需要下载POSTMAN，这是一个功能强大的API测试套件，可以作为作为Chrome扩展插件来安装。您可以从这里下载。\n除此之外，如果您还有如下网站的账号那就更好了：\n Jenkins Docker Amazon Web Services Terraform  目标读者 本书适用于具有Python基础知识、熟悉命令行和基于HTTP的应用程序基本原理的开发人员。对于那些想要了解如何构建、测试和扩展Python开发的应用程序的人员来说本书是个理想选择。不需要有使用Python构建微服务的经验。\n","date":1530403200,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1652173605,"objectID":"ee1ffade370d7cff3745bdfe71a1a446","permalink":"https://jimmysong.io/docs/book/cloud-native-python/","publishdate":"2018-07-01T00:00:00Z","relpermalink":"/docs/book/cloud-native-python/","section":"book","summary":"构建应对海量用户数据的高可扩展Web应用","tags":["printed"],"title":"Python云原生","type":"publication"},{"authors":null,"categories":null,"content":"   这是我翻译的第三本云原生相关技术书籍，前两本分别是：\n Cloud Native Go 中文版 Cloud Native Python 中文版     照片拍摄于 2018 年 11 月 3 日，北京\n本书介绍 传统企业与如亚马逊、Netflix和Etsy这类企业之间的区别是什么？这些公司有完善云原生开发方法，这些方法使得他们能够保持优势并领先于竞争对手。本实践指南向Java/JVM开发人员展示如何使用Spring Boot、Spring Cloud和Cloud Foundry更快更好得构建软件。\n很多组织都已踏足云计算、测试驱动开发、微服务与持续集成和交付领域。本书作者Josh Long和Kenny Bastani将带您深入研究这些工具和方法，并帮助您将传统应用程序转变为真正的云原生应用程序。\n本书中包含以下四大部分：\n 基础知识：了解云原生思维背后的动机；配置和测试Spring Boot应用程序；将您的传统应用程序迁移至云端 微服务：使用Spring构建HTTP和RESTful服务；在分布式系统中路由请求；建立更接近数据的边缘服务 数据整合：使用Spring Data管理数据，并将分布式服务与Spring支持的事件驱动的，以消息传递为中心的架构集成 生产：让您的系统可观测；使用服务代理来连接有状态的服务；了解持续交付背后的重要思想  如果您正在构建云原生应用程序，这本书将是使用Java生态系统的基本指南。本书中包含了所有内容——构建弹性服务、管理数据流（通过REST和异步事件）、测试、部署和可观察性的关键任务。\n——Daniel Bryant，SpectoLabs的软件开发者和CTO\n我预测无论是刚开始云原生之旅还是已经接近云原生的目标，所有参与其中的人都将从这本云原生Java的洞察和经验中受益。\n——Dava Syer博士，Spring框架的贡献者，Spring Boot和Spring Cloud的贡献者和联合创始人\n作者信息 Josh Long是一名Spring布道师，同时也是InfoQ.com的Java queue编辑，以及包括Spring Recipes第二版（Apress出版社出版）在内的多本书籍的主要作者。Josh在许多国际行业会议上发表过演讲，包括TheServiceSide Java Symposium、SpringOne、OSCON、JavaZone、Devoxx、Java2Days等。当他没在编写SpringSource的代码的时候，不是泡在Java用户组就是在咖啡店里喝咖啡。Josh喜欢能够推动技术发展的解决方案。他的兴趣包括可扩展性、BPM、网格计算、移动计算和所谓的“智能”系统等。您可以在http://blog.springsource.org或http://joshlong.com上浏览他的博客。\nKenny Bastani是Pivotal的Spring布道师。作为一名开源贡献者和博客作者，Kenny关注图数据库、微服务等，并喜欢吸引一群充满热情的软件开发人员。Kenny还是OSCON、SpringOne Platform和GOTO等行业会议的常客。他维护了一个关于软件架构的个人博客，并提供用于构建事件驱动的微服务和无服务器架构的教程和开源参考示例。\n目录 序言（James Watters） xvii\n序言（Rod Johnson） xix\n前言 xxi\n第Ⅰ部分　基础知识\n 第1 章　云原生应用程序 3 第2 章　训练营：Spring Boot 和Cloud Foundry 21 第3 章　符合十二要素程序风格的配置 67 第４章　测试 85 第5 章　迁移遗留的应用程序 115  第Ⅱ部分　Web 服务\n 第6 章　REST API 137 第7 章　路由 179 第8 章　边缘服务 197  第Ⅲ部分　数据整合\n 第9 章　数据管理 251 第10 章　消息系统 303 第11 章　批处理和任务 325 第12 章　数据集成 363  第IV 部分　生产\n 第13 章　可观测的系统 411 第14 章　服务代理 469 第15 章　持续交付 497  第V 部分 附录\n附录A 在Java EE 中使用Spring Boot 527\n","date":1530403200,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1652173605,"objectID":"5e4ce4787f40566e2879959ee0cdac40","permalink":"https://jimmysong.io/docs/book/cloud-native-java/","publishdate":"2018-07-01T00:00:00Z","relpermalink":"/docs/book/cloud-native-java/","section":"book","summary":"张若飞、宋净超 译","tags":["printed"],"title":"云原生Java","type":"publication"},{"authors":null,"categories":null,"content":"此书是 Kubernetes Handbook 的前传，本书中主要介绍 Docker 1.13 新特性和帮助大家了解 Docker 集群的管理和使用。\n GitHub 在线访问地址  容器是微服务的最佳载体，Kubernetes 是微服务的最佳运行平台，Istio 是 Kubernetes 上最佳的 service mesh。\n2017年4月 Docker 项目改名为 moby，10月的 DockerCon 在哥本哈根 Docker 公司宣布拥抱 Kubernetes，对于容器编排领域 Kubernetes 已经成为事实上的王者。\n关于 本书中引用了一些公开的分享与链接并加以整理。\n本书作于2017年初，现已停止更新。\n","date":1507680000,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1652173605,"objectID":"cc08d3e8dc3067f862ae62792c803e47","permalink":"https://jimmysong.io/docs/book/docker-handbook/","publishdate":"2017-10-11T00:00:00Z","relpermalink":"/docs/book/docker-handbook/","section":"book","summary":"Docker容器化实战手册","tags":["handbook"],"title":"Docker指南","type":"publication"},{"authors":null,"categories":null,"content":"本手册将指导你如何使用Hugo构建静态网站用于个人博客或者项目展示。\n手把手教你如何从0开始构建一个静态网站，这不需要有太多的编程和开发经验和时间投入，也基本不需要多少成本（除了个性化域名），使用GitHub和Hugo模板即可快速构建和上线一个网站。\n 在线浏览 Github地址  目标读者 本文档适用于以下用户：\n 对网站构建不太了解，没有web开发经验的用户 希望快速构建一个网站，个性化需求不多，不想花费太多精力打理，更新不多的用户 希望学习网站构建、网站模板、web开发的用户 对Go语言感兴趣，希望从事开源项目的用户👏  贡献者 感谢此书的贡献者。\n","date":1507593600,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1652173605,"objectID":"1f2a1c51e7fa860e7a702c6589f0a744","permalink":"https://jimmysong.io/docs/book/hugo-handbook/","publishdate":"2017-10-10T00:00:00Z","relpermalink":"/docs/book/hugo-handbook/","section":"book","summary":"静态网站构建指南","tags":["handbook"],"title":"Hugo实战手册","type":"publication"},{"authors":null,"categories":null,"content":"    本书作者：Kevin Hoffman \u0026amp; Dan Nemeth 译者：宋净超、吴迎松、徐蓓、马超译 出版社：电子工业出版社 全名：Cloud Native Go - 基于Go和React的web云原生应用构建指南  本书已由电子工业出版社出版，可以在京东上购买。\n   照片拍摄于 2017 年 9 月 12 日，北京\n简介 Cloud Native Go向开发人员展示如何构建大规模云应用程序，在满足当今客户的强大需求的同时还可以动态扩展来处理几乎任何规模的数据量、流量或用户。\nKevin Hoffman和Dan Nemeth详细描述了现代云原生应用程序，阐明了与快速、可靠的云原生开发相关的因素、规则和习惯。他们还介绍了Go这种“简单优雅”的高性能语言，它特别适合于云开发。\n在本书中你将使用Go语言创建微服务，使用ReactJS和Flux添加前端Web组件，并掌握基于Go的高级云原生技术。Hoffman和Nemeth展示了如何使用Wercker、Docker和Dockerhub等工具构建持续交付管道; 自动推送应用程序到平台上; 并系统地监控生产中的应用程序性能。\n 学习“云之道”：为什么开发好的云软件基本上是关于心态和规则 了解为什么使用Go语言是云本地微服务开发的理想选择 规划支持持续交付和部署的云应用程序 设计服务生态系统，然后以test-first的方式构建它们 将正在进行的工作推送到云 使用事件源和CQRS模式来响应大规模和高吞吐量 安全的基于云的Web应用程序：做与不做的选择 使用第三方消息传递供应商创建响应式云应用程序 使用React和Flux构建大规模，云友好的GUI 监控云中的动态扩展，故障转移和容错  章节简介如下图。\n   关于作者 Kevin Hoffman通过现代化和以多种不同语言构建云原生服务的方式帮助企业将其应用程序引入云端。他10岁时开始编程，在重新组装的CommodoreVIC-20上自习BASIC。从那时起，他已经沉迷于构建软件，并花了很多时间学习语言、框架和模式。他已经构建了从遥控摄影无人机、仿生性安全系统、超低延迟金融应用程序到移动应用程序等一系列软件。他在构建需要与Pivotal Cloud Foundry配合使用的自定义组件时爱上了Go语言。\nKevin 是流行的幻想书系列（The Sigilord Chronicles ）的作者，他热切地期待着最终能够将自己对构建软件的热爱与对构建幻想世界的热爱结合起来。\nDan Nemeth目前在Pivotal担任咨询解决方案架构师，负责支持Pivotal Cloud Foundry。他从Commodore 64开始就一直在开发软件，从1995年起开始专业编码，使用ANSIC编写了用于本地ISP的CGI脚本。从那时起，他职业生涯的大部分时间里是作为独立顾问为从金融到制药行业提供解决方案，并使用当时流行的各种语言和框架。Dan最近接受了Go作为自己的归宿，并热情地将它用于所有的项目。\n如果你发现Dan没在电脑前，他很可能就是在靠近安纳波利斯的水域玩帆船或飞钓。\n目录  第1章 云之道 第2章 开始 第3章 Go入门 第4章 持续交付 第5章 在Go中构建微服务 第6章 运用后端服务 第7章 构建数据服务 第8章 事件溯源和CQRS 第9章 使用Go构建web应用程序 第10章 云安全 第11章 使用WebSockets 第12章 使用React构建Web视图 第13章 使用Flux构建可扩展的UI 第14章 创建完整应用World of FluxCraft 第15章 结论 附录A 云应用的故障排查 索引  ","date":1501545600,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1652173605,"objectID":"0e73bfe8c6dd89864805484bce53c620","permalink":"https://jimmysong.io/docs/book/cloud-native-go/","publishdate":"2017-08-01T00:00:00Z","relpermalink":"/docs/book/cloud-native-go/","section":"book","summary":"宋净超、吴迎松、徐蓓、马超译","tags":["printed"],"title":"Cloud Native Go","type":"publication"},{"authors":null,"categories":null,"content":"本书是 Migrating to Cloud Native Application Architectures 的中文版，本书英文版发布于 2015 年 2 月，中文版由 Jimmy Song 翻译，发布于 2017 年 7 月。\n GitHub Gitbook 阅读  译者序 云时代的云原生应用大势已来，将传统的单体架构应用迁移到云原生架构，你准备好了吗？\n俗话说“意识决定行动”，在迁移到云原生应用之前，我们大家需要先对 Cloud Native（云原生）的概念、组织形式并对实现它的技术有一个大概的了解，这样才能指导我们的云原生架构实践。\nPivotal 是云原生应用的提出者，并推出了 Pivotal Cloud Foundry 云原生应用平台和 Spring 开源 Java 开发框架，成为云原生应用架构中先驱者和探路者。\n原书作于2015年，其中的示例主要针对 Java 应用，实际上也适用于任何应用类型，云原生应用架构适用于异构语言的程序开发，不仅仅是针对 Java 语言的程序开发。截止到本人翻译本书时，云原生应用生态系统已经初具规模，CNCF 成员不断发展壮大，基于 Cloud Native 的创业公司不断涌现，kubernetes 引领容器编排潮流，和 Service Mesh 技术（如 Linkerd 和 Istio） 的出现，Go 语言的兴起（参考另一本书 Cloud Native Go）等为我们将应用迁移到云原生架构的提供了更多的方案选择。\n简介 当前很多企业正在采用云原生应用架构，这可以帮助其IT转型，成为市场竞争中真正敏捷的力量。 O’Reilly 的报告中定义了云原生应用架构的特性，如微服务和十二因素应用程序。\n本书中作者Matt Stine还探究了将传统的单体应用和面向服务架构（SOA）应用迁移到云原生架构所需的文化、组织和技术变革。本书中还有一个迁移手册，其中包含将单体应用程序分解为微服务，实施容错模式和执行云原生服务的自动测试的方法。\n本书中讨论的应用架构包括：\n 十二因素应用程序：云原生应用架构模式的集合 微服务：独立部署的服务，每个服务只做一件事情 自助服务的敏捷基础设施：快速，可重复和一致地提供应用环境和后台服务的平台 基于API的协作：发布和版本化的API，允许在云原生应用架构中的服务之间进行交互 抗压性：根据压力变强的系统  关于作者 Matt Stine，Pivotal的技术产品经理，拥有15年企业IT和众多业务领域的经验。Matt 强调精益/敏捷方法、DevOps、架构模式和编程范例，他正在探究使用技术组合帮助企业IT部门能够像初创公司一样工作。\n","date":1499731200,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1652173605,"objectID":"486df942c684c0eed9030caa9246ec19","permalink":"https://jimmysong.io/docs/book/migrating-to-cloud-native-application-architectures/","publishdate":"2017-07-11T00:00:00Z","relpermalink":"/docs/book/migrating-to-cloud-native-application-architectures/","section":"book","summary":"第一本介绍云原生的出版物","tags":["ebook","translation"],"title":"迁移到云原生应用架构","type":"publication"},{"authors":null,"categories":null,"content":"认证及培训 随着云原生生态的不断发展壮大，业界缺乏相应的人才储备及知识积累，各种认证及培训则如雨后春笋般出现。\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1652173605,"objectID":"3164ebfa52c4544d747b1c96a39de4d3","permalink":"https://jimmysong.io/docs/cloud-native/intro/certification/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/docs/cloud-native/intro/certification/","section":"cloud-native","summary":"认证及培训 随着云原生生态的不断发展壮大，业界缺乏相应的人才储","tags":null,"title":"","type":"cloud-native"}]