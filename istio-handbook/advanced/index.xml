<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>高级功能 | 云原生资料库</title>
    <link>https://jimmysong.io/docs/istio-handbook/advanced/</link>
      <atom:link href="https://jimmysong.io/docs/istio-handbook/advanced/index.xml" rel="self" type="application/rss+xml" />
    <description>高级功能</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><lastBuildDate>Wed, 18 May 2022 00:00:00 +0800</lastBuildDate>
    <image>
      <url>https://jimmysong.io/docs/media/logo.svg</url>
      <title>高级功能</title>
      <link>https://jimmysong.io/docs/istio-handbook/advanced/</link>
    </image>
    
    <item>
      <title>多集群部署</title>
      <link>https://jimmysong.io/docs/istio-handbook/advanced/multicluster-deployment/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0800</pubDate>
      <guid>https://jimmysong.io/docs/istio-handbook/advanced/multicluster-deployment/</guid>
      <description>&lt;p&gt;多集群部署（两个或更多的集群）为我们提供了更大程度的隔离和可用性，但我们付出的代价是增加了复杂性。如果场景要求高可用性（HA），我们将不得不在多个区域和地区部署集群。&lt;/p&gt;
&lt;p&gt;我们需要做出的下一个决定是，决定我们是否要在一个网络内运行集群，或者是否要使用多个网络。&lt;/p&gt;
&lt;p&gt;下图显示了一个多集群方案（集群 A、B 和 C），跨两个网络部署。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-多集群服务网格&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/008i3skNly1gt2l4i9ldbj30zk0k00uv.jpg&#34; alt=&#34;多集群服务网格&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      多集群服务网格
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;网络部署模式&#34;&gt;网络部署模式&lt;/h2&gt;
&lt;p&gt;当涉及到多个网络时，集群内部运行的工作负载必须使用 Istio 网关才能到达其他集群的工作负载。使用多个网络可以实现更好的容错和网络地址的扩展。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-多网络服务网格&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/008i3skNly1gt2l9omy7vj30zk0k03zq.jpg&#34; alt=&#34;多网络服务网格&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      多网络服务网格
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;控制平面部署模型&#34;&gt;控制平面部署模型&lt;/h2&gt;
&lt;p&gt;Istio 服务网格使用控制平面来配置网格内工作负载之间的所有通信。工作负载所连接的控制平面取决于其配置。&lt;/p&gt;
&lt;p&gt;在最简单的情况下，我们有一个服务网格，在一个集群中只有一个控制平面。这就是我们在本课程中一直使用的配置。&lt;/p&gt;
&lt;p&gt;共享控制平面模型涉及多个集群，控制平面只在一个集群中运行。该集群被称为主集群，而部署中的其他集群被称为远程集群。这些集群没有自己的控制平面，相反，它们从主集群共享控制平面。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-共享的控制平面&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/008i3skNly1gt2lehzmbzj30zk0k00u7.jpg&#34; alt=&#34;共享的控制平面&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      共享的控制平面
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;另一种部署模式是，我们把所有的集群都视为由外部控制平面控制的远程集群。这使我们在控制平面和数据平面之间有了完全的分离。一个典型的外部控制平面的例子是当一个云供应商在管理它。&lt;/p&gt;
&lt;p&gt;为了实现高可用性，我们应该在多个集群、区域或地区部署多个控制平面实例，如下图所示。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-多个控制平面&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/008i3skNly1gt2lfmz9d9j30zk0k0tb7.jpg&#34; alt=&#34;多个控制平面&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      多个控制平面
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;这种模式提供了更好的可用性和配置隔离。如果其中一个控制平面变得不可用，那么停电就只限于这一个控制平面。为了改善这一点，你可以实施故障转移，并配置工作负载实例，在发生故障时连接到另一个控制平面。&lt;/p&gt;
&lt;p&gt;为了达到最高的可用性，我们可以在每个集群内部署一个控制平面。&lt;/p&gt;
&lt;h2 id=&#34;网格部署模型&#34;&gt;网格部署模型&lt;/h2&gt;
&lt;p&gt;到目前为止，我们所看的所有图表和场景都是使用单一的网格。在单网格模型中，所有的服务都在一个网格中，不管它们跨越多少集群和网络。&lt;/p&gt;
&lt;p&gt;将多个网格联合起来的部署模型被称为多网格部署。在这种模式下，服务可以跨网格边界进行通信。该模型为我们提供了一个更清晰的组织边界，更强的隔离性，并允许我们重复使用服务名称和命名空间。&lt;/p&gt;
&lt;p&gt;当联合两个网格时，每个网格可以暴露一组服务和身份，所有参与的网格都可以识别这些身份。为了实现跨网格的服务通信，我们必须在两个网格之间实现信任。信任可以通过向网格导入信任包和为这些身份配置本地策略来建立。&lt;/p&gt;
&lt;h2 id=&#34;租户模式&#34;&gt;租户模式&lt;/h2&gt;
&lt;p&gt;租户是一组共享工作负载的共同访问权和权限的用户。租户之间的隔离是通过网络配置和策略完成的。Istio 支持命名空间和集群租户。请注意，我们在这里谈论的租户是软多租户，而不是硬租户。当多个租户共享同一个 Istio 控制平面时，没有保证对诸如噪音邻居问题的保护。&lt;/p&gt;
&lt;p&gt;在一个网格中，Istio 使用命名空间作为租户的单位。如果使用 Kubernetes，我们可以为每个命名空间的工作负载部署授予权限。默认情况下，来自不同命名空间的服务可以通过完全限定名相互通信。&lt;/p&gt;
&lt;p&gt;在安全模块中，我们已经学会了如何使用授权策略来提高隔离度，并限制只对适当的调用者进行访问。&lt;/p&gt;
&lt;p&gt;在多集群部署模型中，每个集群中共享相同名称的命名空间被认为是同一个命名空间。集群 A 中 &lt;code&gt;default&lt;/code&gt; 命名空间的 Customers 服务与集群 B 中 &lt;code&gt;default&lt;/code&gt; 命名空间中的 Customers 服务指的是同一个服务。当流量被发送到 Customers 服务时，负载均衡在两个服务的合并端点上进行，如下图所示。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-多集群共享命名空间&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/008i3skNly1gt2lnhq0qfj30zk0k0wgp.jpg&#34; alt=&#34;多集群共享命名空间&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      多集群共享命名空间
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;为了在 Istio 中配置集群租约，我们需要将每个集群配置为一个独立的服务网格。网格可以由不同的团队控制和操作，我们可以将网格连接到一起，形成一个多网格部署。如果我们使用与之前相同的例子，在集群 A 的 &lt;code&gt;default&lt;/code&gt; 命名空间中运行的服务 Customers 与集群 B 的 &lt;code&gt;default&lt;/code&gt; 命名空间中的服务 Customers 所指的不是同一个服务。&lt;/p&gt;
&lt;p&gt;租户的另一个重要功能是隔离不同租户的配置。目前，Istio 并没有解决这个问题，不过，它通过在命名空间级别上的范围配置来尝试解决这个问题。&lt;/p&gt;
&lt;h2 id=&#34;最佳多集群部署&#34;&gt;最佳多集群部署&lt;/h2&gt;
&lt;p&gt;最佳的多集群部署拓扑结构是每个集群都有自己的控制平面。对于正常的服务网格部署规模，建议你使用多网格部署，并有一个单独的系统在外部协调网格。一般建议总是在集群间使用入口网关，即使它们在同一个网络中。直接的 pod 到 pod 的连接需要在多个集群之间填充终端数据，这可能会使事情变得缓慢和复杂。一个更简单的解决方案是让流量通过跨集群的入口来流动。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>虚拟机负载</title>
      <link>https://jimmysong.io/docs/istio-handbook/advanced/vm/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0800</pubDate>
      <guid>https://jimmysong.io/docs/istio-handbook/advanced/vm/</guid>
      <description>&lt;p&gt;如果我们有在虚拟机上运行的工作负载，我们可以将它们连接到 Istio 服务网格，使其成为网格的一部分。&lt;/p&gt;
&lt;p&gt;带有虚拟机的 Istio 服务网格有两种架构：单网络架构和多网络架构。&lt;/p&gt;
&lt;h2 id=&#34;单网络架构&#34;&gt;单网络架构&lt;/h2&gt;
&lt;p&gt;在这种情况下，有一个单一的网络。Kubernetes 集群和在虚拟机上运行的工作负载都在同一个网络中，它们可以直接相互通信。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-单网络架构&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/008i3skNly1gtd5xr6iczj60vr0j70uc02.jpg&#34; alt=&#34;单网络架构&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      单网络架构
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;单网络架构&lt;/p&gt;
&lt;p&gt;控制面的流量（配置更新、证书签署）是通过 Gateway 发送的。&lt;/p&gt;
&lt;p&gt;虚拟机被配置了网关地址，所以它们在启动时可以连接到控制平面。&lt;/p&gt;
&lt;h2 id=&#34;多网络架构&#34;&gt;多网络架构&lt;/h2&gt;
&lt;p&gt;多网络架构横跨多个网络。Kubernetes 集群在一个网络内，而虚拟机则在另一个网络内。这使得 Kubernetes 集群中的 Pod 和虚拟机上的工作负载无法直接相互通信。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-多网络架构&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/008i3skNly1gtd62xkbgij60vr0j7jt702.jpg&#34; alt=&#34;多网络架构&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      多网络架构
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;多网络架构&lt;/p&gt;
&lt;p&gt;所有的流量，控制面和 pod 到工作服的流量都流经网关，网关作为两个网络之间的桥梁。&lt;/p&gt;
&lt;h2 id=&#34;istio-中如何表示虚拟机工作负载&#34;&gt;Istio 中如何表示虚拟机工作负载？&lt;/h2&gt;
&lt;p&gt;在 Istio 服务网格中，有两种方式来表示虚拟机工作负载。&lt;/p&gt;
&lt;p&gt;工作负载组（&lt;code&gt;WorkloadGroup&lt;/code&gt; 资源）类似于 Kubernetes 中的部署（Deployment），它代表了共享共同属性的虚拟机工作负载的逻辑组。&lt;/p&gt;
&lt;p&gt;描述虚拟机工作负载的第二种方法是使用工作负载条目（&lt;code&gt;WorkloadEntry&lt;/code&gt; 资源）。工作负载条目类似于 Pod，它代表了一个虚拟机工作负载的单一实例。&lt;/p&gt;
&lt;p&gt;请注意，创建上述资源将不会提供或运行任何虚拟机工作负载实例。这些资源只是用来参考或指向虚拟机工作负载的。Istio 使用它们来了解如何适当地配置网格，将哪些服务添加到内部服务注册表中，等等。&lt;/p&gt;
&lt;p&gt;为了将虚拟机添加到网格中，我们需要创建一个工作负载组，作为模板。然后，当我们配置并将虚拟机添加到网格中时，控制平面会自动创建一个相应的 WorkloadEntry。&lt;/p&gt;
&lt;p&gt;我们已经提到，WorkloadEntry 的作用类似于 Pod。在添加虚拟机时，会创建 WorkloadEntry 资源，而当虚拟机的工作负载从网格中移除时，该资源会被自动删除。&lt;/p&gt;
&lt;p&gt;除了 WorkloadEntry 资源外，我们还需要创建一个 Kubernetes 服务。创建一个 Kubernetes 服务给了我们一个稳定的主机名和 IP 地址，以便使用选择器字段访问虚拟机工作负载和 pod。这也使我们能够通过 DestinationRule 和 VirtualService 资源使用 Istio 的路由功能。&lt;/p&gt;
&lt;ul class=&#34;cta-group&#34;&gt;
  
  &lt;li&gt;
    &lt;a href=&#34;../../troubleshooting/&#34;  class=&#34;btn btn-primary px-3 py-3&#34;&gt;下一章&lt;/a&gt;
  &lt;/li&gt;
  
  
&lt;/ul&gt;

</description>
    </item>
    
  </channel>
</rss>
