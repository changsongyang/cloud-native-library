<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>云原生资料库</title>
    <link>https://jimmysong.io/docs/</link>
      <atom:link href="https://jimmysong.io/docs/index.xml" rel="self" type="application/rss+xml" />
    <description>云原生资料库</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><lastBuildDate>Tue, 17 May 2022 11:12:00 +0800</lastBuildDate>
    <image>
      <url>https://jimmysong.io/docs/media/logo_hu217dae2ad2bcd8acb156327d70759d70_15430_300x300_fit_lanczos_3.png</url>
      <title>云原生资料库</title>
      <link>https://jimmysong.io/docs/</link>
    </image>
    
    <item>
      <title>Kubernetes 的历史</title>
      <link>https://jimmysong.io/docs/cloud-native/kubernetes/history/</link>
      <pubDate>Tue, 03 May 2022 00:00:00 +0100</pubDate>
      <guid>https://jimmysong.io/docs/cloud-native/kubernetes/history/</guid>
      <description>&lt;p&gt;众所周知，&lt;a href=&#34;http://kubernetes.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes&lt;/a&gt; 是 Google 于 2014 年 6 月基于其内部使用的 &lt;a href=&#34;https://research.google.com/pubs/pub43438.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Borg&lt;/a&gt; 系统开源出来的容器编排调度引擎。其实从 2000 年开始，Google 就开始基于容器研发三个容器管理系统，分别是 Borg、Omega 和 Kubernetes。这篇由 Google 工程师 Brendan Burns、Brian Grant、David Oppenheimer、Eric Brewer 和 John Wilkes 几人在 2016 年发表的&lt;a href=&#34;https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/44843.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Borg, Omega, and Kubernetes》&lt;/a&gt;论文里，阐述了 Google 从 Borg 到 Kubernetes 这个旅程中所获得知识和经验教训。&lt;/p&gt;
&lt;h2 id=&#34;borgomega-和-kubernetes&#34;&gt;Borg、Omega 和 Kubernetes&lt;/h2&gt;
&lt;p&gt;Google 从 2000 年初就开始使用容器（Linux 容器）系统，Google 开发出来的第一个统一的容器管理系统在内部称之为 “Borg”，用来管理长时间运行的生产服务和批处理服务。由于 Borg 的规模、功能的广泛性和超高的稳定性，一直到现在 Borg 在 Google 内部依然是主要的容器管理系统。&lt;/p&gt;
&lt;p&gt;Google 的第二套容器管理系统叫做 Omega，作为 Borg 的延伸，它的出现是出于提升 Borg 生态系统软件工程的愿望。Omega 应用到了很多在 Borg 内已经被认证的成功的模式，但是是从头开始来搭建以期更为一致的构架。由于越来越多的应用被开发并运行在 Borg 上，Google 开发了一个广泛的工具和服务的生态系统。它被应用到了很多在 Borg 内已经被认证的成功的模式，但是是从头开始来搭建以期更为一致的构架。这些系统提供了配置和更新 job 的机制，能够预测资源需求，动态地对在运行中的程序推送配置文件、服务发现、负载均衡、自动扩容、机器生命周期管理、额度管理等。许多 Omega 的创新（包括多个调度器）都被收录进了 Borg。&lt;/p&gt;
&lt;p&gt;Google 的第三套容器管理系统就是我们所熟知的 Kubernetes，它是针对在 Google 外部的对 Linux 容器感兴趣的开发者以及 Google 在公有云底层商业增长的考虑而研发的。和 Borg、Omega 完全是谷歌内部系统相比，Kubernetes 是开源的。像 Omega 一样，Kubernetes 在其核心有一个被分享的持久存储，有组件来检测相关 object 的变化。跟 Omega 不同的是，Omega 把存储直接暴露给信任的控制平面的组件，而在 Kubernete 中，提供了完全由特定领域更高层面的版本控制、认证、语义、策略的 REST API 接口，以服务更多的用户。更重要的是，Kubernetes 是由一群底层开发能力更强的开发者开发的，他们主要的设计目标是用更容易的方法去部署和管理复杂的分布式系统，同时仍能从容器提升的效率中受益。&lt;/p&gt;
&lt;p&gt;2014 年 Kubernetes 正式开源，2015 年被作为初创项目贡献给了云原生计算基金会（CNCF），从此开启了 Kubernetes 及云原生化的大潮。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://queue.acm.org/detail.cfm?id=2898444&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Borg, Omega, and Kubernetes: Lessons learned from three container-management systems over a decade - queue.acm.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dockone.io/article/1153&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Borg、Omega 和 Kubernetes：谷歌十几年来从这三个容器管理系统中得到的经验教训 - dockone.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>什么是服务网格？</title>
      <link>https://jimmysong.io/docs/cloud-native/service-mesh/what-is-service-mesh/</link>
      <pubDate>Tue, 03 May 2022 00:00:00 +0100</pubDate>
      <guid>https://jimmysong.io/docs/cloud-native/service-mesh/what-is-service-mesh/</guid>
      <description>&lt;p&gt;Service Mesh 又译作 “服务网格”，作为服务间通信的基础设施层。Buoyant 公司的 CEO Willian Morgan 在他的这篇文章 &lt;a href=&#34;https://buoyant.io/what-is-a-service-mesh/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WHAT’S A SERVICE MESH? AND WHY DO I NEED ONE?&lt;/a&gt; 中解释了什么是 Service Mesh，为什么云原生应用需要 Service Mesh。&lt;/p&gt;
&lt;p&gt;服务网格是用于处理服务间通信的专用基础设施层。它负责通过包含现代云原生应用程序的复杂服务拓扑来可靠地传递请求。实际上，服务网格通常通过一组轻量级网络代理来实现，这些代理与应用程序代码一起部署，而不需要感知应用程序本身。—— &lt;a href=&#34;https://twitter.com/wm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Willian Morgan&lt;/a&gt; Buoyant CEO&lt;/p&gt;
&lt;p&gt;服务网格（Service Mesh）这个术语通常用于描述构成这些应用程序的微服务网络以及应用之间的交互。随着规模和复杂性的增长，服务网格越来越难以理解和管理。它的需求包括服务发现、负载均衡、故障恢复、指标收集和监控以及通常更加复杂的运维需求，例如 A/B 测试、金丝雀发布、限流、访问控制和端到端认证等。&lt;/p&gt;
&lt;h2 id=&#34;服务网格的特点&#34;&gt;服务网格的特点&lt;/h2&gt;
&lt;p&gt;服务网格有如下几个特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用程序间通讯的中间层&lt;/li&gt;
&lt;li&gt;轻量级网络代理&lt;/li&gt;
&lt;li&gt;应用程序无感知&lt;/li&gt;
&lt;li&gt;解耦应用程序的重试 / 超时、监控、追踪和服务发现&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;目前两款流行的服务网格开源软件 &lt;a href=&#34;https://linkerd.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Linkerd&lt;/a&gt; 和 &lt;a href=&#34;https://istio.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;/a&gt; 都可以直接在 Kubernetes 中集成，其中 Linkerd 是 CNCF 成员项目，并在 2021 年 7 月毕业。Istio 在 2018 年 7 月 31 日宣布 1.0，并在 2020 年 7 月将 &lt;a href=&#34;https://istio.io/latest/blog/2020/open-usage/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;商标捐献&lt;/a&gt;给 &lt;a href=&#34;https://openusage.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Open Usage Commons&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;理解服务网格&#34;&gt;理解服务网格&lt;/h2&gt;
&lt;p&gt;如果用一句话来解释什么是服务网格，可以将它比作是应用程序或者说微服务间的 TCP/IP，负责服务之间的网络调用、限流、熔断和监控。对于编写应用程序来说一般无须关心 TCP/IP 这一层（比如通过 HTTP 协议的 RESTful 应用），同样使用服务网格也就无须关系服务之间的那些原来是通过应用程序或者其他框架实现的事情，比如 Spring Cloud、OSS，现在只要交给服务网格就可以了。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://philcalcado.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Phil Calçado&lt;/a&gt; 在他的这篇博客 &lt;a href=&#34;http://philcalcado.com/2017/08/03/pattern_service_mesh.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pattern: Service Mesh&lt;/a&gt; 中详细解释了服务网格的来龙去脉：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从最原始的主机之间直接使用网线相连&lt;/li&gt;
&lt;li&gt;网络层的出现&lt;/li&gt;
&lt;li&gt;集成到应用程序内部的控制流&lt;/li&gt;
&lt;li&gt;分解到应用程序外部的控制流&lt;/li&gt;
&lt;li&gt;应用程序的中集成服务发现和断路器&lt;/li&gt;
&lt;li&gt;出现了专门用于服务发现和断路器的软件包 / 库，如 &lt;a href=&#34;https://finagle.github.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Twitter 的 Finagle&lt;/a&gt; 和 &lt;a href=&#34;https://code.fb.com/networking-traffic/introducing-proxygen-facebook-s-c-http-framework/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Facebook 的 Proxygen&lt;/a&gt;，这时候还是集成在应用程序内部&lt;/li&gt;
&lt;li&gt;出现了专门用于服务发现和断路器的开源软件，如 &lt;a href=&#34;https://netflix.github.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Netflix OSS&lt;/a&gt;、Airbnb 的 &lt;a href=&#34;https://github.com/airbnb/synapse&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;synapse&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/airbnb/nerve&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;nerve&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;最后作为微服务的中间层服务网格出现&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;服务网格的架构如下图所示：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-服务网格架构图&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/e6c9d24ely1h1vepo7kzfj20id0bpgmm.jpg&#34; alt=&#34;Service Mesh 架构图&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      服务网格架构图
    &lt;/figcaption&gt;&lt;/figure&gt;
图片来自：&lt;a href=&#34;http://philcalcado.com/2017/08/03/pattern_service_mesh.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pattern: Service Mesh&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;服务网格作为 sidecar 运行，对应用程序来说是透明，所有应用程序间的流量都会通过它，所以对应用程序流量的控制都可以在 serivce mesh 中实现。&lt;/p&gt;
&lt;h2 id=&#34;服务网格如何工作&#34;&gt;服务网格如何工作？&lt;/h2&gt;
&lt;p&gt;下面以 Istio 为例讲解服务网格如何在 Kubernetes 中工作。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Istio 将服务请求路由到目的地址，根据中的参数判断是到生产环境、测试环境还是 staging 环境中的服务（服务可能同时部署在这三个环境中），是路由到本地环境还是公有云环境？所有的这些路由信息可以动态配置，可以是全局配置也可以为某些服务单独配置。&lt;/li&gt;
&lt;li&gt;当 Istio 确认了目的地址后，将流量发送到相应服务发现端点，在 Kubernetes 中是 service，然后 service 会将服务转发给后端的实例。&lt;/li&gt;
&lt;li&gt;Istio 根据它观测到最近请求的延迟时间，选择出所有应用程序的实例中响应最快的实例。&lt;/li&gt;
&lt;li&gt;Istio 将请求发送给该实例，同时记录响应类型和延迟数据。&lt;/li&gt;
&lt;li&gt;如果该实例挂了、不响应了或者进程不工作了，Istio 将把请求发送到其他实例上重试。&lt;/li&gt;
&lt;li&gt;如果该实例持续返回 error，Istio 会将该实例从负载均衡池中移除，稍后再周期性得重试。&lt;/li&gt;
&lt;li&gt;如果请求的截止时间已过，Istio 主动失败该请求，而不是再次尝试添加负载。&lt;/li&gt;
&lt;li&gt;Istio 以 metric 和分布式追踪的形式捕获上述行为的各个方面，这些追踪信息将发送到集中 metric 系统。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;为何使用服务网格&#34;&gt;为何使用服务网格？&lt;/h2&gt;
&lt;p&gt;服务网格并没有给我们带来新功能，它是用于解决其他工具已经解决过的问题，只不过这次是在云原生的 Kubernetes 环境下的实现。&lt;/p&gt;
&lt;p&gt;在传统的 MVC 三层 Web 应用程序架构下，服务之间的通讯并不复杂，在应用程序内部自己管理即可，但是在现今的复杂的大型网站情况下，单体应用被分解为众多的微服务，服务之间的依赖和通讯十分复杂，出现了 Twitter 开发的 &lt;a href=&#34;https://twitter.github.io/finagle/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Finagle&lt;/a&gt;、Netflix 开发的 &lt;a href=&#34;https://github.com/Netflix/Hystrix&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hystrix&lt;/a&gt; 和 Google 的 Stubby 这样的 “胖客户端” 库，这些就是早期的服务网格，但是它们都近适用于特定的环境和特定的开发语言，并不能作为平台级的服务网格支持。&lt;/p&gt;
&lt;p&gt;在云原生架构下，容器的使用给予了异构应用程序的更多可行性，Kubernetes 增强的应用的横向扩容能力，用户可以快速的编排出复杂环境、复杂依赖关系的应用程序，同时开发者又无须过分关心应用程序的监控、扩展性、服务发现和分布式追踪这些繁琐的事情而专注于程序开发，赋予开发者更多的创造性。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/attest-engineering/Istio-a-service-mesh-for-aws-ecs-937f201f847a&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio: A service mesh for AWS ECS - medium.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/news/releases/0.x/announcing-0.1/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;初次了解 Istio - istio.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.christianposta.com/microservices/application-network-functions-with-esbs-api-management-and-now-service-mesh/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Application Network Functions With ESBs, API Management, and Now.. Service Mesh? - blog.christianposta.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://philcalcado.com/2017/08/03/pattern_service_mesh.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pattern: Service Mesh - philcalcado.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloudnative.to/envoy/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy 官方文档中文版 - cloudnative.to&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 官方文档 - istio.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>什么是云原生？</title>
      <link>https://jimmysong.io/docs/cloud-native/intro/what-is-cloud-native/</link>
      <pubDate>Tue, 03 May 2022 00:00:00 +0100</pubDate>
      <guid>https://jimmysong.io/docs/cloud-native/intro/what-is-cloud-native/</guid>
      <description>&lt;p&gt;云原生（Cloud Native）这个词汇由来已久，以致于何时出现已无据可考。云原生开始大规模出现在受众视线中，与 Pivotal 提出的云原生应用的理念有着莫大的关系。我们现在谈到云原生，更多的指的是&lt;a href=&#34;https://cloudnative.to/blog/cloud-native-culture-not-container/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;一种文化&lt;/a&gt;，而不具象为哪些技术体系。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Pivotal 推出过 Pivotal Cloud Foundry 云原生应用平台和 &lt;a href=&#34;https://spring.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring&lt;/a&gt; 开源 Java 开发框架，成为云原生应用架构中先驱者和探路者。Pivotal 是云原生应用平台第一股，2018 年在纽交所上市，2019 年底被 VMWare 以 27 亿美元收购，加入到 VMware 新的产品线 &lt;a href=&#34;https://tanzu.vmware.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tanzu&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;pivotal-最初的定义&#34;&gt;Pivotal 最初的定义&lt;/h2&gt;
&lt;p&gt;早在 2015 年 Pivotal 公司的 Matt Stine 写了一本叫做 &lt;a href=&#34;https://jimmysong.io/migrating-to-cloud-native-application-architectures/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;迁移到云原生应用架构&lt;/a&gt; 的小册子，其中探讨了云原生应用架构的几个主要特征：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;符合 12 因素应用&lt;/li&gt;
&lt;li&gt;面向微服务架构&lt;/li&gt;
&lt;li&gt;自服务敏捷架构&lt;/li&gt;
&lt;li&gt;基于 API 的协作&lt;/li&gt;
&lt;li&gt;抗脆弱性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;笔者已于 2017 年翻译了本书，详见 &lt;a href=&#34;https://jimmysong.io/migrating-to-cloud-native-application-architectures/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;迁移到云原生应用架构&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;cncf-最初的定义&#34;&gt;CNCF 最初的定义&lt;/h2&gt;
&lt;p&gt;到了 2015 年 Google 主导成立了云原生计算基金会（CNCF），起初 CNCF 对云原生（Cloud Native）的定义包含以下三个方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用容器化&lt;/li&gt;
&lt;li&gt;面向微服务架构&lt;/li&gt;
&lt;li&gt;应用支持容器的编排调度&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;重定义&#34;&gt;重定义&lt;/h2&gt;
&lt;p&gt;到了 2018 年，随着近几年来云原生生态的不断壮大，所有主流云计算供应商都加入了该基金会，且从 &lt;a href=&#34;https://i.cncf.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cloud Native Landscape&lt;/a&gt; 中可以看出云原生有意蚕食原先非云原生应用的部分。CNCF 基金会中的会员以及容纳的项目越来越多，该定义已经限制了云原生生态的发展，CNCF 为云原生进行了重新定位。&lt;/p&gt;
&lt;p&gt;以下是 CNCF 对云原生的&lt;a href=&#34;https://github.com/cncf/toc/blob/main/DEFINITION.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;重新定义&lt;/a&gt;（中英对照）：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Cloud native technologies empower organizations to build and run scalable applications in modern, dynamic environments such as public, private, and hybrid clouds. Containers, service meshes, microservices, immutable infrastructure, and declarative APIs exemplify this approach.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;云原生技术有利于各组织在公有云、私有云和混合云等新型动态环境中，构建和运行可弹性扩展的应用。云原生的代表技术包括容器、服务网格、微服务、不可变基础设施和声明式 API。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;These techniques enable loosely coupled systems that are resilient, manageable, and observable. Combined with robust automation, they allow engineers to make high-impact changes frequently and predictably with minimal toil.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这些技术能够构建容错性好、易于管理和便于观察的松耦合系统。结合可靠的自动化手段，云原生技术使工程师能够轻松地对系统作出频繁和可预测的重大变更。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Cloud Native Computing Foundation seeks to drive adoption of this paradigm by fostering and sustaining an ecosystem of open source, vendor-neutral projects. We democratize state-of-the-art patterns to make these innovations accessible for everyone.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;云原生计算基金会（CNCF）致力于培育和维护一个厂商中立的开源生态系统，来推广云原生技术。我们通过将最前沿的模式民主化，让这些创新为大众所用。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;关于什么是云原生的争论还在进行中，在笔者看来云原生是一种行为方式和设计理念，究其本质，凡是能够提高云上资源利用率和应用交付效率的行为或方式都是云原生的。云计算的发展史就是一部云原生化的历史。Kubernetes 开启了云原生的序幕，服务网格 Istio 的出现，引领了后 Kubernetes 时代的微服务，serverless 的再次兴起，使得云原生从基础设施层不断向应用架构层挺进，我们正处于一个云原生的新时代。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cncf/toc/blob/master/DEFINITION.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNCF Cloud Native Definition v1.0 - github.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloudnative.to/blog/cloud-native-culture-not-container/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云原生关乎文化，而不是容器 - cloudnative.to&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>云原生计算基金会（CNCF）</title>
      <link>https://jimmysong.io/docs/cloud-native/community/cncf/</link>
      <pubDate>Tue, 03 May 2022 00:00:00 +0100</pubDate>
      <guid>https://jimmysong.io/docs/cloud-native/community/cncf/</guid>
      <description>&lt;p&gt;CNCF，全称Cloud Native Computing Foundation（云原生计算基金会），成立于 2015 年7月21日（&lt;a href=&#34;https://www.cncf.io/announcement/2015/06/21/new-cloud-native-computing-foundation-to-drive-alignment-among-container-technologies/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;于美国波特兰OSCON 2015上宣布&lt;/a&gt;），其最初的口号是&lt;strong&gt;坚持和整合开源技术来让编排容器作为微服务架构的一部分&lt;/strong&gt;，其作为致力于云原生应用推广和普及的一支重要力量，不论您是云原生应用的开发者、管理者还是研究人员都有必要了解。&lt;/p&gt;
&lt;p&gt;CNCF作为一个厂商中立的基金会，致力于Github上的快速成长的开源技术的推广，如Kubernetes、Prometheus、Envoy等，帮助开发人员更快更好的构建出色的产品。CNCF 维护了一个全景图项目，详见 &lt;a href=&#34;https://github.com/cncf/landscape&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;关于CNCF的使命与组织方式请参考&lt;a href=&#34;https://www.cncf.io/about/charter/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNCF章程&lt;/a&gt;，概括的讲CNCF的使命包括以下三点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;容器化包装。&lt;/li&gt;
&lt;li&gt;通过中心编排系统的动态资源管理。&lt;/li&gt;
&lt;li&gt;面向微服务。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CNCF这个角色的作用是推广技术，形成社区，开源项目管理与推进生态系统健康发展。&lt;/p&gt;
&lt;p&gt;另外CNCF组织由以下部分组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;会员&lt;/strong&gt;：白金、金牌、银牌、最终用户、学术和非赢利成员，不同级别的会员在治理委员会中的投票权不同。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;理事会&lt;/strong&gt;：负责事务管理&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TOC（技术监督委员会）&lt;/strong&gt;：技术管理&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最终用户社区&lt;/strong&gt;：推动CNCF技术的采纳并选举最终用户技术咨询委员会&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最终用户技术咨询委员会&lt;/strong&gt;：为最终用户会议或向理事会提供咨询&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;营销委员会&lt;/strong&gt;：市场推广&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cncf项目成熟度分级与毕业条件&#34;&gt;CNCF项目成熟度分级与毕业条件&lt;/h2&gt;
&lt;p&gt;每个CNCF项目都需要有个成熟度等级，申请成为CNCF项目的时候需要确定项目的成熟度级别。&lt;/p&gt;
&lt;p&gt;成熟度级别（Maturity Level）包括以下三种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sandbox（初级）&lt;/li&gt;
&lt;li&gt;incubating（孵化中）&lt;/li&gt;
&lt;li&gt;graduated（毕业）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;是否可以成为CNCF项目需要通过Technical Oversight Committee (技术监督委员会）简称&lt;a href=&#34;https://github.com/cncf/toc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TOC&lt;/a&gt;，投票采取fallback策略，即&lt;strong&gt;回退策略&lt;/strong&gt;，先从最高级别（graduated）开始，如果2/3多数投票通过的话则确认为该级别，如果没通过的话，则进行下一低级别的投票，如果一直到inception级别都没得到2/3多数投票通过的话，则拒绝其进入CNCF项目。&lt;/p&gt;
&lt;p&gt;当前所有的CNCF项目可以访问&lt;a href=&#34;https://www.cncf.io/projects/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.cncf.io/projects/&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;项目所达到相应成熟度需要满足的条件和投票机制见下图：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-cncf项目成熟度级别&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jimmysong.io/kubernetes-handbook/images/cncf-graduation-criteria-v2.jpg&#34; alt=&#34;CNCF项目成熟度级别&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      CNCF项目成熟度级别
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;toc技术监督委员会&#34;&gt;TOC（技术监督委员会）&lt;/h2&gt;
&lt;p&gt;TOC（Technical Oversight Committee）作为CNCF中的一个重要组织，它的作用是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义和维护技术视野&lt;/li&gt;
&lt;li&gt;审批新项目加入组织，为项目设定概念架构&lt;/li&gt;
&lt;li&gt;接受最终用户的反馈并映射到项目中&lt;/li&gt;
&lt;li&gt;调整组件间的访问接口，协调组件之间兼容性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TOC成员通过选举产生，见&lt;a href=&#34;https://github.com/cncf/toc/blob/master/process/election-schedule.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;选举时间表&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;参考 CNCF TOC：&lt;a href=&#34;https://github.com/cncf/toc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/cncf/toc&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;cncf-ambassador&#34;&gt;CNCF Ambassador&lt;/h2&gt;
&lt;p&gt;CNCF Ambassador（CNCF 大使），人员名单详见 &lt;a href=&#34;https://www.cncf.io/people/ambassadors/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.cncf.io/people/ambassadors/&lt;/a&gt;，笔者很荣幸作为第二位成为 CNCF Ambassador 的中国人。&lt;/p&gt;
&lt;h3 id=&#34;如何成为-cncf-ambassador&#34;&gt;如何成为 CNCF Ambassador&lt;/h3&gt;
&lt;p&gt;可以通过以下方式成为 CNCF Ambassador：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;成为 CNCF 会员或对成为某个 CNCF 的项目的贡献者&lt;/li&gt;
&lt;li&gt;以 contributor、blogger、演讲者等身份参与 CNCF 社区项目&lt;/li&gt;
&lt;li&gt;在社区中演讲或撰写博客&lt;/li&gt;
&lt;li&gt;主持云原生社区 meetup&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cncf.io/announcement/2015/06/21/new-cloud-native-computing-foundation-to-drive-alignment-among-container-technologies/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AT&amp;amp;T, Box, Cisco, Cloud Foundry Foundation, CoreOS, Cycle Computing, Docker, eBay, Goldman Sachs, Google, Huawei, IBM, Intel, Joyent, Kismatic, Mesosphere, Red Hat, Switch SUPERNAP, Twitter, Univa, VMware and Weaveworks join new effort to build and maintain cloud native distributed systems - cncf.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>前言</title>
      <link>https://jimmysong.io/docs/opentelemetry-obervability/foreword/</link>
      <pubDate>Sat, 05 Feb 2022 00:00:00 +0800</pubDate>
      <guid>https://jimmysong.io/docs/opentelemetry-obervability/foreword/</guid>
      <description>&lt;p&gt;软件开发的模式又一次改变了。开源软件和公有云供应商已经从根本上改变了我们构建和部署软件的方式。有了开源软件，我们的应用不再需要从头开始编码。而通过使用公有云供应商，我们不再需要配置服务器或连接网络设备。所有这些都意味着，你可以在短短几天甚至几小时内从头开始构建和部署一个应用程序。&lt;/p&gt;
&lt;p&gt;但是，仅仅因为部署新的应用程序很容易，并不意味着操作和维护它们也变得更容易。随着应用程序变得更加复杂，更加异质，最重要的是，更加分布式，看清大局，以及准确地指出问题发生的地方，变得更加困难。&lt;/p&gt;
&lt;p&gt;但有些事情并没有改变：作为开发者和运维，我们仍然需要能够从用户的角度理解应用程序的性能，我们仍然需要对用户的事务有一个端到端的看法。我们也仍然需要衡量和说明在处理这些事务的过程中资源是如何被消耗的。也就是说，我们仍然需要可观测性。&lt;/p&gt;
&lt;p&gt;但是，尽管对可观测性的需求没有改变，我们实施可观测性解决方案的方式必须改变。本报告详细介绍了关于可观测性的传统思维方式对现代应用的不足：继续将可观测性作为一系列工具（尤其是作为 &amp;ldquo;三大支柱&amp;rdquo;）来实施，几乎不可能以可靠的方式运行现代应用。&lt;/p&gt;
&lt;p&gt;OpenTelemetry 通过提供一种综合的方法来收集有关应用程序行为和性能的数据，包括指标、日志和跟踪，来解决这些挑战。正如本报告所解释的，OpenTelemetry 是一种生成和收集这些数据的新方法，这种方法是为使用开源组件构建的云原生应用而设计的。&lt;/p&gt;
&lt;p&gt;事实上，OpenTelemetry 是专门为这些开源组件设计的。与供应商特定的仪表不同，OpenTelemetry 可以直接嵌入到开放源代码中。这意味着开源库的作者可以利用他们的专业知识来添加高质量的仪表，而不需要在他们的项目中增加任何解决方案或供应商特定的代码。&lt;/p&gt;
&lt;p&gt;OpenTelemetry 对应用程序所有者也有好处。在过去，遥测的产生方式与它的评估、存储和分析方式相联系。这意味着，选择使用哪种可观测性解决方案必须在开发过程的早期完成，并且在之后很难改变。OpenTelemetry（就像它的前身 OpenTracing 和 OpenCensus 一样）将你的应用程序产生遥测的方式与遥测的分析方式相分离。&lt;/p&gt;
&lt;p&gt;因此，当我们采用新技术时，我们往往没有考虑到该技术将如何被使用，特别是它将如何被不同角色的人使用。本报告描述了 OpenTelemetry 如何满足库作者、应用程序拥有者、运维和响应者的需求，以及它如何使这些角色中的每个人都能独立工作 —— 即自动做出关键决定并进行有效协作。&lt;/p&gt;
&lt;p&gt;也许最重要的是，OpenTelemetry 为应用程序所有者和操作者提供了灵活性，使他们能够选择最适合其应用程序和组织需求的可观测性解决方案，包括需要多种工具的情况。它还包括这些需求随时间变化的情况，以及需要新的工具来满足这些需求的情况，因为随着技术的成熟和组织的发展，可能会出现这种情况。&lt;/p&gt;
&lt;p&gt;虽然用户不需要致力于可观测性解决方案，但他们确实需要投资于生成遥测数据的一致方式。本报告展示了 OpenTelemetry 是如何被设计成范围狭窄、可扩展，而且最重要的是稳定的：如果你被要求进行这种投资，这正是你所期望的。&lt;/p&gt;
&lt;p&gt;与以往任何时候相比，可观测性都不能成为事后的想法。没有一个有效的可观测性解决方案的风险，也就是说，无法了解你的应用程序中正在发生的事情的风险是非常高的，而对可观测性采取错误的方法的成本会造成你的组织多年来一直在偿还的债务。无论是长时间停机，还是开发团队被无休止的供应商迁移所困扰，你的组织的成功都取决于像 OpenTelemetry 这样的集成和开放的方法。&lt;/p&gt;
&lt;p&gt;本报告提供了关于在你的组织中采用和管理 OpenTelemetry 的实用建议。它将使你开始走向成功的可观测性实践的道路，并释放出云原生和开源技术的许多真正的好处：你不仅能够快速建立和部署应用程序，而且能够可靠和自信地运行它们。&lt;/p&gt;
&lt;p&gt;—— Daniel “Spoons” Spoonhower Lightstep&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sidecar 模式</title>
      <link>https://jimmysong.io/docs/cloud-native/kubernetes/sidecar-pattern/</link>
      <pubDate>Tue, 03 May 2022 00:00:00 +0100</pubDate>
      <guid>https://jimmysong.io/docs/cloud-native/kubernetes/sidecar-pattern/</guid>
      <description>&lt;p&gt;将应用程序的功能划分为单独的进程运行在同一个最小调度单元中（例如 Kubernetes 中的 Pod）可以被视为 &lt;strong&gt;sidecar 模式&lt;/strong&gt;。如下图所示，sidecar 模式允许您在应用程序旁边添加更多功能，而无需额外第三方组件配置或修改应用程序代码。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-sidecar-模式示意图&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jimmysong.io/kubernetes-handbook/images/sidecar-pattern.jpg&#34; alt=&#34;Sidecar 模式示意图&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Sidecar 模式示意图
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;就像连接了 Sidecar 的三轮摩托车一样，在软件架构中， Sidecar 连接到父应用并且为其添加扩展或者增强功能。Sidecar 应用与主应用程序松散耦合。它可以屏蔽不同编程语言的差异，统一实现微服务的可观察性、监控、日志记录、配置、断路器等功能。&lt;/p&gt;
&lt;h3 id=&#34;使用-sidecar-模式的优势&#34;&gt;使用 Sidecar 模式的优势&lt;/h3&gt;
&lt;p&gt;使用 sidecar 模式部署服务网格时，无需在节点上运行代理，但是集群中将运行多个相同的 sidecar 副本。在 sidecar 部署方式中，每个应用的容器旁都会部署一个伴生容器，这个容器称之为 sidecar 容器。Sidecar 接管进出应用容器的所有流量。在 Kubernetes 的 Pod 中，在原有的应用容器旁边注入一个 Sidecar 容器，两个容器共享存储、网络等资源，可以广义的将这个包含了 sidecar 容器的 Pod 理解为一台主机，两个容器共享主机资源。&lt;/p&gt;
&lt;p&gt;因其独特的部署结构，使得 sidecar 模式具有以下优势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将与应用业务逻辑无关的功能抽象到共同基础设施，降低了微服务代码的复杂度。&lt;/li&gt;
&lt;li&gt;因为不再需要编写相同的第三方组件配置文件和代码，所以能够降低微服务架构中的代码重复度。&lt;/li&gt;
&lt;li&gt;Sidecar 可独立升级，降低应用程序代码和底层平台的耦合度。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>云原生的设计哲学</title>
      <link>https://jimmysong.io/docs/cloud-native/intro/cloud-native-philosophy/</link>
      <pubDate>Tue, 03 May 2022 00:00:00 +0100</pubDate>
      <guid>https://jimmysong.io/docs/cloud-native/intro/cloud-native-philosophy/</guid>
      <description>&lt;p&gt;云原生一词已经被过度的采用，很多软件都号称是云原生，很多打着云原生旗号的会议也如雨后春笋般涌现。&lt;/p&gt;
&lt;p&gt;云原生本身甚至不能称为是一种架构，它首先是一种基础设施，运行在其上的应用称作云原生应用，只有符合云原生设计哲学的应用架构才叫云原生应用架构。&lt;/p&gt;
&lt;h2 id=&#34;云原生的设计理念&#34;&gt;云原生的设计理念&lt;/h2&gt;
&lt;p&gt;云原生系统的设计理念如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;面向分布式设计（Distribution）：容器、微服务、API 驱动的开发；&lt;/li&gt;
&lt;li&gt;面向配置设计（Configuration）：一个镜像，多个环境配置；&lt;/li&gt;
&lt;li&gt;面向韧性设计（Resistancy）：故障容忍和自愈；&lt;/li&gt;
&lt;li&gt;面向弹性设计（Elasticity）：弹性扩展和对环境变化（负载）做出响应；&lt;/li&gt;
&lt;li&gt;面向交付设计（Delivery）：自动拉起，缩短交付时间；&lt;/li&gt;
&lt;li&gt;面向性能设计（Performance）：响应式，并发和资源高效利用；&lt;/li&gt;
&lt;li&gt;面向自动化设计（Automation）：自动化的 DevOps；&lt;/li&gt;
&lt;li&gt;面向诊断性设计（Diagnosability）：集群级别的日志、metric 和追踪；&lt;/li&gt;
&lt;li&gt;面向安全性设计（Security）：安全端点、API Gateway、端到端加密；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上的设计理念很多都是继承自分布式应用的设计理念。虽然有如此多的理念但是我们仍然无法辨认什么样的设施才是云原生基础设施，不过可以先用排除法，我将解释什么不是云原生基础设施。&lt;/p&gt;
&lt;h2 id=&#34;什么不是云原生基础设施&#34;&gt;什么不是云原生基础设施？&lt;/h2&gt;
&lt;p&gt;云原生基础设施不等于在公有云上运行的基础设施。光是租用服务器并不会使您的基础设施云原生化。管理 IaaS 的流程与运维物理数据中心没什么两样，将现有架构迁移到云上也未必能获得回报。&lt;/p&gt;
&lt;p&gt;云原生不是指在容器中运行应用程序。Netflix 率先推出云原生基础设施时，几乎所有应用程序部署在虚拟机中，而不是在容器中。改变应用程序的打包方式并不意味着就会增加自治系统的可扩展性和优势。即使应用程序是通过 CI/CD 渠道自动构建和部署的，也不意味着您就可以从增强 API 驱动部署的基础设施中受益。&lt;/p&gt;
&lt;p&gt;这也并不意味着您只能运行容器编排器（例如 Kubernetes 和 Mesos）。容器编排器提供了云原生基础设施所需的许多平台功能，但并未按预期方式使用这些功能，这意味着您的应用程序会在一组服务器上运行，被动态调度。这是一个非常好的起步，但仍有许多工作要做。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;调度器与编排器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;术语 “调度器” 和 “编排器” 通常可以互换使用。&lt;/p&gt;
&lt;p&gt;在大多数情况下，编排器负责集群中的所有资源利用（例如：存储，网络和 CPU）。该术语典型地用于描述执行许多任务的产品，如健康检查和云自动化。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;调度器是编排平台的一个子集，仅负责选择运行在每台服务器上的进程和服务。&lt;/p&gt;
&lt;p&gt;云原生不是微服务或基础设施即代码。微服务意味着更快的开发周期和更小的独特功能，但是单体应用程序可以具有相同的功能，使其能够通过软件有效管理，并且还可以从云原生基础设施中受益。&lt;/p&gt;
&lt;p&gt;基础设施即代码以机器可解析语言或领域特定语言（DSL）定义、自动化您的基础设施。将代码应用于基础架构的传统工具包括配置管理工具（例如 Chef 和 Puppet）。这些工具在自动执行任务和提供一致性方面有很大帮助，但是它们在提供必要的抽象来描述超出单个服务器的基础设施方面存在缺陷。&lt;/p&gt;
&lt;p&gt;配置管理工具一次自动化一台服务器，并依靠人员将服务器提供的功能绑定在一起。这将人类定位为基础设施规模的潜在瓶颈。这些工具也不会使构建完整系统所需的云基础设施（例如存储和网络）的额外部分自动化。&lt;/p&gt;
&lt;p&gt;尽管配置管理工具为操作系统的资源（例如软件包管理器）提供了一些抽象，但它们并没有抽象出足够的底层操作系统来轻松管理它。如果一位工程师想要管理系统中的每个软件包和文件，这将是一个非常艰苦的过程，并且对于每个配置变体都是独一无二的。同样，定义不存在或不正确的资源的配置管理仅消耗系统资源并且不能提供任何价值。&lt;/p&gt;
&lt;p&gt;虽然配置管理工具可以帮助自动化部分基础设施，但它们无法更好地管理应用程序。我们将在后面的章节中通过查看部署，管理，测试和操作基础架构的流程，探讨云原生基础设施的不同之处，但首先，我们将了解哪些应用程序是成功的以及应该何时与原生基础设施一起使用。&lt;/p&gt;
&lt;h2 id=&#34;云原生应用程序&#34;&gt;云原生应用程序&lt;/h2&gt;
&lt;p&gt;就像云改变了业务和基础设施之间的关系一样，云原生应用程序也改变了应用程序和基础设施之间的关系。我们需要了解与传统应用程序相比，云本身有什么不同，因此我们需要了解它们与基础设施的新关系。&lt;/p&gt;
&lt;p&gt;为了写好本书，也为了有一个共享词汇表，我们需要定义 “云原生应用程序” 是什么意思。云原生与 12 因素应用程序不同，即使它们可能共享一些类似的特征。如果你想了解更多细节，请阅读 Kevin Hoffman 撰写的 “超越 12 因素应用程序”（O&amp;rsquo;Reilly，2012）。&lt;/p&gt;
&lt;p&gt;云原生应用程序被设计为在平台上运行，并设计用于弹性，敏捷性，可操作性和可观察性。弹性包含失败而不是试图阻止它们；它利用了在平台上运行的动态特性。敏捷性允许快速部署和快速迭代。可操作性从应用程序内部控制应用程序生命周期，而不是依赖外部进程和监视器。可观察性提供信息来回答有关应用程序状态的问题。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;云原生定义&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;云原生应用程序的定义仍在发展中。还有像 CNCF 这样的组织可以提供其他的定义。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;云原生应用程序通过各种方法获取这些特征。它通常取决于应用程序的运行位置以及企业流程和文化。以下是实现云原生应用程序所需特性的常用方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;微服务&lt;/li&gt;
&lt;li&gt;健康报告&lt;/li&gt;
&lt;li&gt;遥测数据&lt;/li&gt;
&lt;li&gt;弹性&lt;/li&gt;
&lt;li&gt;声明式的，而不是命令式的&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;微服务&#34;&gt;微服务&lt;/h3&gt;
&lt;p&gt;作为单个实体进行管理和部署的应用程序通常称为单体应用。最初开发应用程序时，单体有很多好处。它们更易于理解，并允许您在不影响其他服务的情况下更改主要功能。&lt;/p&gt;
&lt;p&gt;随着应用程序复杂性的增长，单体应用的益处逐渐减少。它们变得更难理解，而且失去了敏捷性，因为工程师很难推断和修改代码。&lt;/p&gt;
&lt;p&gt;对付复杂性的最好方法之一是将明确定义的功能分成更小的服务，并让每个服务独立迭代。这增加了应用程序的灵活性，允许根据需要更轻松地更改部分应用程序。每个微服务可以由单独的团队进行管理，使用适当的语言编写，并根据需要进行独立扩缩容。&lt;/p&gt;
&lt;p&gt;只要每项服务都遵守强有力的合约，应用程序就可以快速改进和改变。当然，转向微服务架构还有许多其他的考虑因素。其中最不重要的是弹性通信，我们在附录 A 中有讨论。&lt;/p&gt;
&lt;p&gt;我们无法考虑转向微服务的所有考虑因素。拥有微服务并不意味着您拥有云原生基础设施。如果您想阅读更多，我们推荐 Sam Newman 的 Building Microservices（O&amp;rsquo;Reilly，2015）。虽然微服务是实现您的应用程序灵活性的一种方式，但正如我们之前所说的，它们不是云原生应用程序的必需条件。&lt;/p&gt;
&lt;h3 id=&#34;健康报告&#34;&gt;健康报告&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;停止逆向工程应用程序并开始从内部进行监控。 —— Kelsey Hightower，Monitorama PDX 2016：healthz&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;没有人比开发人员更了解应用程序需要什么才能以健康的状态运行。很长一段时间，基础设施管理员都试图从他们负责运行的应用程序中找出 “健康” 该怎么定义。如果不实际了解应用程序的健康状况，他们尝试在应用程序不健康时进行监控并发出警报，这往往是脆弱和不完整的。&lt;/p&gt;
&lt;p&gt;为了提高云原生应用程序的可操作性，应用程序应该暴露健康检查。开发人员可以将其实施为命令或过程信号，以便应用程序在执行自我检查之后响应，或者更常见的是：通过应用程序提供 Web 服务，返回 HTTP 状态码来检查健康状态。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Google Borg 示例&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Google 的 Borg 报告中列出了一个健康报告的例子：&lt;/p&gt;
&lt;p&gt;几乎每个在 Borg 下运行的任务都包含一个内置的 HTTP 服务器，该服务器发布有关任务运行状况和数千个性能指标（如 RPC 延迟）的信息。Borg 会监控运行状况检查 URL 并重新启动不及时响应或返回 HTTP 错误代码的任务。其他数据由监控工具跟踪，用于仪表板和服务级别目标（SLO）违规警报。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;将健康责任转移到应用程序中使应用程序更容易管理和自动化。应用程序应该知道它是否正常运行以及它依赖于什么（例如，访问数据库）来提供业务价值。这意味着开发人员需要与产品经理合作来定义应用服务的业务功能并相应地编写测试。&lt;/p&gt;
&lt;p&gt;提供健康检查的应用程序示例包括 Zookeeper 的 ruok 命令和 etcd 的 HTTP / 健康端点。&lt;/p&gt;
&lt;p&gt;应用程序不仅仅有健康或不健康的状态。它们将经历一个启动和关闭过程，在这个过程中它们应该通过健康检查，报告它们的状态。如果应用程序可以让平台准确了解它所处的状态，平台将更容易知道如何操作它。&lt;/p&gt;
&lt;p&gt;一个很好的例子就是当平台需要知道应用程序何时可以接收流量。在应用程序启动时，如果它不能正确处理流量，它就应该表现为未准备好。此额外状态将防止应用程序过早终止，因为如果运行状况检查失败，平台可能会认为应用程序不健康，并且会反复停止或重新启动它。&lt;/p&gt;
&lt;p&gt;应用程序健康只是能够自动化应用程序生命周期的一部分。除了知道应用程序是否健康之外，您还需要知道应用程序是否正在进行哪些工作。这些信息来自遥测数据。&lt;/p&gt;
&lt;h3 id=&#34;遥测数据&#34;&gt;遥测数据&lt;/h3&gt;
&lt;p&gt;遥测数据是进行决策所需的信息。确实，遥测数据可能与健康报告重叠，但它们有不同的用途。健康报告通知我们应用程序生命周期状态，而遥测数据通知我们应用程序业务目标。&lt;/p&gt;
&lt;p&gt;您测量的指标有时称为服务级指标（SLI）或关键性能指标（KPI）。这些是特定于应用程序的数据，可以确保应用程序的性能处于服务级别目标（SLO）内。如果您需要更多关于这些术语的信息以及它们与您的应用程序、业务需求的关系，我们推荐你阅读来自 Site Reliability Engineering（O&amp;rsquo;Reilly）的第 4 章。&lt;/p&gt;
&lt;p&gt;遥测和度量标准用于解决以下问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用程序每分钟收到多少请求？&lt;/li&gt;
&lt;li&gt;有没有错误？&lt;/li&gt;
&lt;li&gt;什么是应用程序延迟？&lt;/li&gt;
&lt;li&gt;订购需要多长时间？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通常会将数据刮取或推送到时间序列数据库（例如 Prometheus 或 InfluxDB）进行聚合。遥测数据的唯一要求是它将被收集数据的系统格式化。&lt;/p&gt;
&lt;p&gt;至少，可能最好实施度量标准的 RED 方法，该方法收集应用程序的速率，错误和执行时间。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;请求率&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;收到了多少个请求&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;错误&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;应用程序有多少错误&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;时间&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;多久才能收到回复&lt;/p&gt;
&lt;p&gt;遥测数据应该用于提醒而非健康监测。在动态的、自我修复的环境中，我们更少关注单个应用程序实例的生命周期，更多关注关于整体应用程序 SLO 的内容。健康报告对于自动应用程序管理仍然很重要，但不应该用于页面工程师。&lt;/p&gt;
&lt;p&gt;如果 1 个实例或 50 个应用程序不健康，只要满足应用程序的业务需求，我们可能不会收到警报。度量标准可让您知道您是否符合您的 SLO，应用程序的使用方式以及对于您的应用程序来说什么是 “正常”。警报有助于您将系统恢复到已知的良好状态。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果它移动，我们跟踪它。有时候我们会画出一些尚未移动的图形，以防万一它决定为它运行。&lt;/p&gt;
&lt;p&gt;——Ian Malpass，衡量所有，衡量一切&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;警报也不应该与日志记录混淆。记录用于调试，开发和观察模式。它暴露了应用程序的内部功能。度量有时可以从日志（例如错误率）计算，但需要额外的聚合服务（例如 ElasticSearch）和处理。&lt;/p&gt;
&lt;h3 id=&#34;弹性&#34;&gt;弹性&lt;/h3&gt;
&lt;p&gt;一旦你有遥测和监测数据，你需要确保你的应用程序对故障有适应能力。弹性是基础设施的责任，但云原生应用程序也需要承担部分工作。&lt;/p&gt;
&lt;p&gt;基础设施被设计为抵制失败。硬件用于需要多个硬盘驱动器，电源以及全天候监控和部件更换以保持应用程序可用。使用云原生应用程序，应用程序有责任接受失败而不是避免失败。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在任何平台上，尤其是在云中，最重要的特性是其可靠性。&lt;/p&gt;
&lt;p&gt;——David Rensin，e ARCHITECT Show：来自 Google 的关于云计算的速成课程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;设计具有弹性的应用程序可能是整本书本身。我们将在云原生应用程序中考虑弹性的两个主要方面：为失败设计和优雅降级。&lt;/p&gt;
&lt;h4 id=&#34;为失败设计&#34;&gt;为失败设计&lt;/h4&gt;
&lt;p&gt;唯一永远不会失败的系统是那些让你活着的系统（例如心脏植入物和刹车系统）。如果您的服务永远不会停止运行，您需要花费太多时间设计它们来抵制故障，并且没有足够的时间增加业务价值。您的 SLO 确定服务需要多长时间。您花费在工程设计上超出 SLO 的正常运行时间的任何资源都将被浪费掉。&lt;/p&gt;
&lt;p&gt;您应该为每项服务测量两个值，即平均无故障时间（MTBF）和平均恢复时间（MTTR）。监控和指标可以让您检测您是否符合您的 SLO，但运行应用程序的平台是保持高 MTBF 和低 MTTR 的关键。&lt;/p&gt;
&lt;p&gt;在任何复杂的系统中，都会有失败。您可以管理硬件中的某些故障（例如，RAID 和冗余电源），以及某些基础设施中的故障（例如负载平衡器）。但是因为应用程序知道他们什么时候健康，所以他们也应该尽可能地管理自己的失败。&lt;/p&gt;
&lt;p&gt;设计一个以失败期望为目标的应用程序将比假定可用性的应用程序更具防御性。当故障不可避免时，将会有额外的检查，故障模式和日志内置到应用程序中。&lt;/p&gt;
&lt;p&gt;知道应用程序可能失败的每种方式是不可能的。假设任何事情都可能并且可能会失败，这是一种云原生应用程序的模式。&lt;/p&gt;
&lt;p&gt;您的应用程序的最佳状态是健康状态。第二好的状态是失败状态。其他一切都是非二进制的，难以监控和排除故障。 Honeycomb 首席执行官 CharityMajors 在她的文章 “Ops：现在每个人都在工作” 中指出：“分布式系统永远不会起作用；它们处于部分退化服务的持续状态。接受失败，设计弹性，保护和缩小关键路径。”&lt;/p&gt;
&lt;p&gt;无论发生什么故障，云原生应用程序都应该是可适应的。他们期望失败，所以他们在检测到时进行调整。&lt;/p&gt;
&lt;p&gt;有些故障不能也不应该被设计到应用程序中（例如，网络分区和可用区故障）。该平台应自主处理未集成到应用程序中的故障域。&lt;/p&gt;
&lt;h4 id=&#34;优雅降级&#34;&gt;优雅降级&lt;/h4&gt;
&lt;p&gt;云原生应用程序需要有一种方法来处理过载，无论它是应用程序还是负载下的相关服务。处理负载的一种方式是优雅降级。 “站点可靠性工程” 一书中描述了应用程序的优雅降级，因为它提供的响应在负载过重的情况下 “不如正常响应准确或含有较少数据的响应，但计算更容易”。&lt;/p&gt;
&lt;p&gt;减少应用程序负载的某些方面由基础设施处理。智能负载平衡和动态扩展可以提供帮助，但是在某些时候，您的应用程序可能承受的负载比它可以处理的负载更多。云原生应用程序需要知道这种必然性并作出相应的反应。&lt;/p&gt;
&lt;p&gt;优雅降级的重点是允许应用程序始终返回请求的答案。如果应用程序没有足够的本地计算资源，并且依赖服务没有及时返回信息，则这是正确的。依赖于一个或多个其他服务的服务应该可用于应答请求，即使依赖于服务不是。当服务退化时，返回部分答案或使用本地缓存中的旧信息进行答案是可能的解决方案。&lt;/p&gt;
&lt;p&gt;尽管优雅的降级和失败处理都应该在应用程序中实现，但平台的多个层面应该提供帮助。如果采用微服务，则网络基础设施成为需要在提供应用弹性方面发挥积极作用的关键组件。有关构建弹性网络层的更多信息，请参阅附录 A。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;可用性数学&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;云原生应用程序需要在基础设施之上建立一个平台，以使基础设施更具弹性。如果您希望将现有应用程序 “提升并转移” 到云中，则应检查云提供商的服务级别协议（SLA），并考虑在使用多个服务时会发生什么情况。&lt;/p&gt;
&lt;p&gt;让我们拿运行我们的应用程序的云来进行假设。&lt;/p&gt;
&lt;p&gt;计算基础设施的典型可用性是每月 99.95％的正常运行时间。这意味着您的实例每天可能会缩短到 43.2 秒，并且仍在您的云服务提供商的 SLA 中。&lt;/p&gt;
&lt;p&gt;另外，实例的本地存储（例如 EBS 卷）也具有 99.95％的可用性正常运行时间。如果幸运的话，他们都会同时出现故障，但最糟糕的情况是他们可能会在不同的时间停机，让您的实例只有 99.9％的可用性。&lt;/p&gt;
&lt;p&gt;您的应用程序可能还需要一个数据库，而不是自己安装一个计算可能的停机时间为 1 分 26 秒（99.9％可用性）的情况下，选择可靠性为 99.95％的更可靠的托管数据库。这使您的应用程序的可靠性达到 99.85％，或者每天可能发生 2 分钟和 9 秒的宕机时间。&lt;/p&gt;
&lt;p&gt;将可用性乘到一起可以快速了解为什么应以不同方式处理云。真正不好的部分是，如果云提供商不符合其 SLA，它将退还其账单中一定比例的退款。&lt;/p&gt;
&lt;p&gt;虽然您不必为停机支付费用，但我们并不知道世界上存在云计算信用的单一业务。如果您的应用程序的可用性不足以超过您收到的信用额度，那么您应该真正考虑是否应该运行这个应用程序。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;声明式非反应式&#34;&gt;声明式，非反应式&lt;/h3&gt;
&lt;p&gt;因为云原生应用程序被设计为在云环境中运行，所以它们与基础设施以及相关依赖应用程序的交互方式不同于传统应用程序。在云原生应用程序中，与任何事物的通信都需要通过网络来进行。很多时候，网络通信是通过 RESTful HTTP 调用完成的，但是也可以通过其他接口实现，比如远程过程调用 (RPC)。&lt;/p&gt;
&lt;p&gt;传统的应用程序会通过向消息队列发送消息、在共享存储上写入文件或触发本地 shell 脚本来执行自动化任务。通信方法基于发生的事件作出反应（例如，如果用户单击提交，运行提交脚本）并且通常需要存在于同一物理或虚拟服务器上的信息。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Serverless&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;无服务器平台是云原生化的，并被设计为对事件做出反应。他们在云中工作得很好的原因是他们通过 HTTP API 进行通信，（这些 API）是单一用途的函数，并且在它们的调用中是声明性的。该平台还使它们可伸缩并可从云内访问。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;传统应用程序中的反应式通信通常是构建弹性的一种尝试。如果应用程序（以反应式的方式）在磁盘上或消息队列中写入了一个文件，然后应用程序死亡，那么该消息或文件的结果仍然可以完成。&lt;/p&gt;
&lt;p&gt;这里并不是说不应该使用像消息队列这样的技术，而是说在动态且经常出现故障的系统中，不能将它们作为惟一的弹性层来依赖。从根本上说，在云原生环境之中，应用程序之间的通信方法应该有所变化 - 这不仅是因为还存在其他方法来构建通信弹性（请参阅附录 A），而且还因为如果要让传统的通信方法在云中实现复制，我们往往需要做更多工作。&lt;/p&gt;
&lt;p&gt;当应用程序可以信任通信的弹性时，它们应该放弃反应式并使用声明式。声明式通信信任网络会将消息送达。它也相信应用程序将返回成功或错误。这并不是说让应用程序观察变化不重要。Kubernetes 的控制器对 API 服务器做的就是这个。但是，一旦发现变更，他们就会声明一个新的状态，并相信 API 服务器和 kubelets 会做必要的事情。&lt;/p&gt;
&lt;p&gt;声明式通信模型由于多种原因而变得更加健壮。最重要的是，它规范了通信模型，并且它将（如何从某种状态到达期望状态的）功能实现从应用程序转移到远程 API 或服务端点。这有助于简化应用程序，并使它们彼此的行为更具可预测性。&lt;/p&gt;
&lt;h3 id=&#34;云原生应用程序如何影响基础设施&#34;&gt;云原生应用程序如何影响基础设施？&lt;/h3&gt;
&lt;p&gt;希望你可以知道云原生应用程序与传统应用程序不同。云原生应用程序不能直接在 PaaS 上运行或与服务器的操作系统紧密耦合。它们期望在一个拥有大多数自治系统的动态环境中运行。&lt;/p&gt;
&lt;p&gt;云原生基础设施在提供自主应用管理的 IaaS 之上创建了一个平台。该平台建立在动态创建的基础设施之上，以抽象出单个服务器并促进动态资源分配调度。&lt;/p&gt;
&lt;p&gt;自动化与自治不一样。自动化使人类对他们所采取的行动产生更大的影响。&lt;/p&gt;
&lt;p&gt;云原生是关于不需要人类做出决定的自治系统。它仍然使用自动化，但只有在决定了所需的操作之后。只有在系统不能自动确定正确的事情时才应该通知人。&lt;/p&gt;
&lt;p&gt;具有这些特征的应用程序需要一个能够实际监控，收集度量标准并在发生故障时做出反应的平台。云原生应用程序不依赖于人员设置 ping 检查或创建 Syslog 规则。他们需要从选择基本操作系统或软件包管理器的过程中提取自助服务资源，并依靠服务发现和强大的网络通信来提供丰富的功能体验。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.heptio.com/i-still-remember-the-first-time-i-logged-into-a-production-server-over-ssh-and-telling-myself-i-53ab1d1e7f46&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;“Cloud Native Infrastructure”, a Free O’Reilly eBook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>云原生社区（中国）</title>
      <link>https://jimmysong.io/docs/cloud-native/community/cnc/</link>
      <pubDate>Tue, 03 May 2022 00:00:00 +0100</pubDate>
      <guid>https://jimmysong.io/docs/cloud-native/community/cnc/</guid>
      <description>&lt;p&gt;云原生社区是由 &lt;a href=&#34;https://jimmysong.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;宋净超（Jimmy Song）&lt;/a&gt; 于 2020 年 5 月发起的，企业中立的云原生终端用户社区。社区秉持 “共识、共治、共建、共享” 的原则。社区的宗旨是：连接、中立、开源。立足中国，面向世界，企业中立，关注开源，回馈开源。了解更多请访问云原生社区官网：&lt;a href=&#34;https://cloudnative.to&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://cloudnative.to&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;成立背景&#34;&gt;成立背景&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Software is eating the world. —— Marc Andreessen&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;“软件正在吞噬这个世界” 已被大家多次引用，随着云原生（Cloud Native）的崛起，我们想说的是 “Cloud Native is eating the software”。随着越来越多的企业将服务迁移上云，企业原有的开发模式以及技术架构已无法适应云的应用场景，其正在被重塑，向着云原生的方向演进。&lt;/p&gt;
&lt;p&gt;那么什么是云原生？云原生是一系列架构、研发流程、团队文化的最佳实践组合，以此支撑更快的创新速度、极致的用户体验、稳定可靠的用户服务、高效的研发效率。开源社区与云原生的关系密不可分，正是开源社区尤其是终端用户社区的存在，极大地促进了以容器、服务网格、微服务等为代表的云原生技术的持续演进！&lt;/p&gt;
&lt;p&gt;随着云计算的不断发展，云原生技术在全球范围内变得越来越受关注，同时国内社区同学也展现了对云原生技术热爱。近些年中国已经孕育众多的云原生技术爱好者，也有自发组织的一些相关技术交流和 meetup，同时在云原生领域也涌现了众多优秀的开源项目，在这样的背景下，一个有理想，有组织，有温度的云原生社区应运而生。&lt;/p&gt;
&lt;h2 id=&#34;加入社区&#34;&gt;加入社区&lt;/h2&gt;
&lt;p&gt;加入云原生社区，你将获得：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更接近源头的知识资讯&lt;/li&gt;
&lt;li&gt;更富有价值的人际网络&lt;/li&gt;
&lt;li&gt;更专业个性的咨询解答&lt;/li&gt;
&lt;li&gt;更亲近意见领袖的机会&lt;/li&gt;
&lt;li&gt;更快速高效的个人成长&lt;/li&gt;
&lt;li&gt;更多知识分享曝光机会&lt;/li&gt;
&lt;li&gt;更多行业人才挖掘发现&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关注云原生社区微信公众号，进入公众号后台，点击 “加入我们”。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-云原生社区公众号&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jimmysong.io/kubernetes-handbook/images/cloud-native-wechat.jpg&#34; alt=&#34;云原生社区公众号二维码&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      云原生社区公众号
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cloudnative.to/blog/cnc-announcement/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云原生社区成立 - cloudnative.to&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>什么是 Istio?</title>
      <link>https://jimmysong.io/docs/cloud-native/service-mesh/what-is-istio/</link>
      <pubDate>Tue, 03 May 2022 00:00:00 +0800</pubDate>
      <guid>https://jimmysong.io/docs/cloud-native/service-mesh/what-is-istio/</guid>
      <description>&lt;p&gt;Istio 是一个服务网格的开源实现。Istio 支持以下功能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;流量管理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;利用配置，我们可以控制服务间的流量。设置断路器、超时或重试都可以通过简单的配置改变来完成。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可观察性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Istio 通过跟踪、监控和记录让我们更好地了解你的服务，它让我们能够快速发现和修复问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;安全性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Istio 可以在代理层面上管理认证、授权和通信的加密。我们可以通过快速的配置变更在各个服务中执行政策。&lt;/p&gt;
&lt;h2 id=&#34;istio-组件&#34;&gt;Istio 组件&lt;/h2&gt;
&lt;p&gt;Istio 服务网格有两个部分：数据平面和控制平面。&lt;/p&gt;
&lt;p&gt;在构建分布式系统时，将组件分离成控制平面和数据平面是一种常见的模式。数据平面的组件在请求路径上，而控制平面的组件则帮助数据平面完成其工作。&lt;/p&gt;
&lt;p&gt;Istio 中的数据平面由 Envoy 代理组成，控制服务之间的通信。网格的控制平面部分负责管理和配置代理。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-istio-架构&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jimmysong.io/istio-handbook/images/008i3skNly1gtbszxamwcj60zk0k0mzk02.jpg&#34; alt=&#34;Istio 架构&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Istio 架构
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;envoy数据平面&#34;&gt;Envoy（数据平面）&lt;/h3&gt;
&lt;p&gt;Envoy 是一个用 C++ 开发的高性能代理。Istio 服务网格将 Envoy 代理作为一个 sidecar 容器注入到你的应用容器旁边。然后该代理拦截该服务的所有入站和出站流量。注入的代理一起构成了服务网格的数据平面。&lt;/p&gt;
&lt;p&gt;Envoy 代理也是唯一与流量进行交互的组件。除了前面提到的功能 —— 负载均衡、断路器、故障注入等。Envoy 还支持基于 WebAssembly（WASM）的可插拔扩展模型。这种可扩展性使我们能够执行自定义策略，并为网格中的流量生成遥测数据。&lt;/p&gt;
&lt;h3 id=&#34;istiod控制平面&#34;&gt;Istiod（控制平面）&lt;/h3&gt;
&lt;p&gt;Istiod 是控制平面组件，提供服务发现、配置和证书管理功能。Istiod 采用 YAML 编写的高级规则，并将其转换为 Envoy 的可操作配置。然后，它把这个配置传播给网格中的所有 sidecar。&lt;/p&gt;
&lt;p&gt;Istiod 内部的 Pilot 组件抽象出特定平台的服务发现机制（Kubernetes、Consul 或 VM），并将其转换为 sidecar 可以使用的标准格式。&lt;/p&gt;
&lt;p&gt;使用内置的身份和凭证管理，我们可以实现强大的服务间和终端用户认证。通过授权功能，我们可以控制谁可以访问你的服务。&lt;/p&gt;
&lt;p&gt;控制平面的部分以前被称为 Citadel，作为一个证书授权机构，生成证书，允许数据平面中的代理之间进行安全的 mTLS 通信。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>第 1 章：可观测性的历史</title>
      <link>https://jimmysong.io/docs/opentelemetry-obervability/history/</link>
      <pubDate>Sat, 05 Feb 2022 00:00:00 +0800</pubDate>
      <guid>https://jimmysong.io/docs/opentelemetry-obervability/history/</guid>
      <description>&lt;p&gt;可观测性行业正处在巨变中。&lt;/p&gt;
&lt;p&gt;传统上，我们观察系统时使用的是一套筒仓式的、独立的工具，其中大部分包含结构不良（或完全非结构化）的数据。这些独立的工具也是垂直整合的。工具、协议和数据格式都属于一个特定的后端或服务，不能互换。这意味着更换或采用新的工具需要耗费时间来更换整个工具链，而不仅仅是更换后端。&lt;/p&gt;
&lt;p&gt;这种孤立的技术格局通常被称为可观测性的 &amp;ldquo;三大支柱&amp;rdquo;：日志、度量和（几乎没有）追踪（见图 1-1）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;日志&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;记录构成事务的各个事件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;度量&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;记录构成一个事务的事件的集合。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;追踪&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;测量操作的延迟和识别事务中的性能瓶颈，或者类似的东西。传统上，许多组织并不使用分布式追踪，许多开发人员也不熟悉它。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-1-1可观测性的-三大支柱&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f1-1.png&#34; alt=&#34;图 1-1：可观测性的 &amp;amp;ldquo;三大支柱&amp;amp;rdquo;。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 1-1：可观测性的 &amp;ldquo;三大支柱&amp;rdquo;。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;我们用这种方法工作了很久，以致于我们不常质疑它。但正如我们将看到的，&amp;ldquo;三大支柱&amp;rdquo; 并不是一种正确的结构化的可观测性方法。事实上，这个术语只是描述了某些技术碰巧被实现的方式，它掩盖了关于如何实际使用我们的工具的几个基本事实。&lt;/p&gt;
&lt;h2 id=&#34;什么是事务和资源&#34;&gt;什么是事务和资源？&lt;/h2&gt;
&lt;p&gt;在我们深入探讨不同可观测性范式的利弊之前，重要的是要定义我们所观察的是什么。我们最感兴趣的分布式系统是基于互联网的服务。这些系统可以被分解成两个基本组成部分：&lt;strong&gt;事务&lt;/strong&gt;和&lt;strong&gt;资源&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;事务（transaction）&lt;strong&gt;代表了分布式系统需要执行的所有动作，以便服务能够做一些有用的事情。加载一个网页，购买一个装满物品的购物车，订购一个共享汽车：这些都是事务的例子。重要的是要理解，事务&lt;/strong&gt;不仅仅是&lt;/strong&gt;数据库事务。对每个服务的每个请求都是事务的一部分。&lt;/p&gt;
&lt;p&gt;例如，一个事务可能从一个浏览器客户端向一个网络代理发出 HTTP 请求开始。代理首先向认证系统发出请求以验证用户，然后将请求转发给前端应用服务器。应用服务器向各种数据库和后端系统发出若干请求。例如，一个消息系统：Kafka 或 AMQP，被用来排队等待异步处理的额外工作。所有这些工作都必须正确完成，以便向急切等待的用户提供结果。如果任何部分失败或耗时过长，其结果就是糟糕的体验，所以我们需要全面理解事务。&lt;/p&gt;
&lt;p&gt;一路下来，所有这些事务都在消耗&lt;strong&gt;资源（resource）&lt;/strong&gt;。网络服务只能处理这么多的并发请求，然后它们的性能就会下降并开始失效。这些服务可以扩大规模，但它们与可能调用锁的数据库互动，造成瓶颈。数据库读取记录的请求可能会阻碍更新该记录的请求，反之亦然。此外，所有这些资源都是要花钱的，在每个月的月底，你的基础设施供应商会给你发账单。你消耗的越多，你的账单就越长。&lt;/p&gt;
&lt;p&gt;如何解决某个问题或提高服务质量？要么是开发人员修改事务，要么是运维人员修改可用资源。就这样了。这就是它的全部内容。当然，魔鬼就在细节中。&lt;/p&gt;
&lt;p&gt;第四章将详细介绍可观测性工具表示事务和资源的理想方式。但是，让我们回到描述迄今为止我们一直在做的非理想的方式。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;不是所有事情都是事务&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;请注意，除了跨事务之外，还有其他的计算模型。例如，桌面和移动应用程序通常是基于&lt;strong&gt;反应器（reactor）&lt;strong&gt;模型，用户在很长一段时间内连续互动。照片编辑和视频游戏就是很好的例子，这些应用有很长的用户会话，很难描述为离散的事务。在这些情况下，基于事件的可观测性工具，如&lt;/strong&gt;真实用户监控&lt;/strong&gt;（RUM），可以增强分布式追踪，以更好地描述这些长期运行的用户会话。&lt;/p&gt;
&lt;p&gt;也就是说，几乎所有基于互联网的服务都是建立在事务模式上的。由于这些是我们关注的服务，观察事务是我们在本书中描述的内容。附录 B 中对 RUM 进行了更详细的描述。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;可观测性的三大支柱&#34;&gt;可观测性的三大支柱&lt;/h2&gt;
&lt;p&gt;考虑到事务和资源，让我们来看看三大支柱模式。将这种关注点的分离标记为 &amp;ldquo;三大支柱&amp;rdquo;，听起来是有意的，甚至是明智的。支柱听起来很严肃，就像古代雅典的帕特农神庙。但这种安排实际上是一个意外。计算机的可观测性由多个孤立的、垂直整合的工具链组成，其真正的原因只是一个平庸的故事。&lt;/p&gt;
&lt;p&gt;这里有一个例子。假设有一个人想了解他们的程序正在执行的事务。所以他建立了一个日志工具：一个用于记录包含时间戳的消息的接口，一个用于将这些消息发送到某个地方的协议，以及一个用于存储和检索这些消息的数据系统。这足够简单。&lt;/p&gt;
&lt;p&gt;另一个人想监测在任何特定时刻使用的所有资源；他想捕捉指标。那么，他不会为此使用日志系统，对吗？他想追踪一个数值是如何随时间变化的，并跨越一组有限的维度。很明显，一大堆非结构化的日志信息与这个问题没有什么关系。因此，一个新的、完全独立的系统被创造出来，解决了生成、传输和存储度量的具体问题。&lt;/p&gt;
&lt;p&gt;另一个人想要识别性能瓶颈。同样，日志系统的非结构化性质使它变得无关紧要。识别性能瓶颈，比如一连串可以并行运行的操作，需要我们知道事务中每个操作的持续时间以及这些操作是如何联系在一起的。因此，我们建立了一个完全独立的追踪系统。由于新的追踪系统并不打算取代现有的日志系统，所以追踪系统被大量抽样，以限制在生产中运行第三个可观测系统的成本。&lt;/p&gt;
&lt;p&gt;这种零敲碎打的可观测性方法是人类工程的一个完全自然和可理解的过程。然而，它有其局限性，不幸的是，这些局限性往往与我们在现实世界中使用（和管理）这些系统的方式相悖。&lt;/p&gt;
&lt;h2 id=&#34;实际上我们如何观察系统&#34;&gt;实际上我们如何观察系统？&lt;/h2&gt;
&lt;p&gt;让我们来看看运维人员在调查问题时所经历的实际的、不加修饰的过程。&lt;/p&gt;
&lt;p&gt;调查包括两个步骤：注意到有事情发生，然后确定是什么原因导致了它的发生。&lt;/p&gt;
&lt;p&gt;当我们执行这些任务时，我们使用可观测性工具。但是，重要的是，我们并不是孤立地使用每一个工具。我们把它们全部放在一起使用。而在整个过程中，这些工具的孤立性给操作者带来了巨大的认知负担。&lt;/p&gt;
&lt;p&gt;通常情况下，当有人注意到一个重要的指标**变得歪七扭八时，**调查就开始了。在这种情况下，&amp;ldquo;毛刺&amp;rdquo; 是一个重要的术语，因为运维人员在这一点上所掌握的唯一信息是仪表盘上一条小线的形状，以及他们自己对该线的形状是否看起来 &amp;ldquo;正确&amp;rdquo; 的内部评估（图 1-2）。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-1-2传统上寻找不同数据集之间的关联性是一种可怕的经历&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f1-2.png&#34; alt=&#34;图 1-2：传统上，寻找不同数据集之间的关联性是一种可怕的经历。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 1-2：传统上，寻找不同数据集之间的关联性是一种可怕的经历。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;在确定了线的形状开始看起来 &amp;ldquo;不对劲&amp;rdquo; 的那一点后，运维人员将眯起眼睛，试图找到仪表板上同时出现 &amp;ldquo;毛刺&amp;rdquo; 的其他线。然而，由于这些指标是完全相互独立的，运维人员必须在他们的大脑中进行比较，而不需要计算机的帮助。&lt;/p&gt;
&lt;p&gt;不用说，盯着图表，希望找到一个有用的关联，需要时间和脑力，更不用说会导致眼睛疲劳。&lt;/p&gt;
&lt;p&gt;就个人而言，我会用一把尺子或一张纸，只看什么东西排成一排。在 &amp;ldquo;现代&amp;rdquo; 仪表盘中，标尺现在是作为用户界面的一部分而绘制的线。但这只是一个粗略的解决方案。识别相关性的真正工作仍然必须发生在操作者的头脑中，同样没有计算机的帮助。&lt;/p&gt;
&lt;p&gt;在对问题有了初步的、粗略的猜测后，运维人员通常开始调查他们认为可能与问题有关的事务（日志）和资源（机器、进程、配置文件）（图 1-3）。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-1-3找到与异常情况相关的日志也是一种可怕的经历&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f1-3.png&#34; alt=&#34;图 1-3：找到与异常情况相关的日志也是一种可怕的经历。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 1-3：找到与异常情况相关的日志也是一种可怕的经历。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;在这里，计算机也没有真正的帮助。日志存储在一个完全独立的系统中，不能与任何指标仪表板自动关联。配置文件和其他服务的具体信息通常&lt;strong&gt;不在任何系统&lt;/strong&gt;中，运维人员必须通过 SSH 或其他方式访问运行中的机器来查看它们。&lt;/p&gt;
&lt;p&gt;因此，运维人员再次被留下寻找相关性的工作，这次是在指标和相关日志之间。识别这些日志可能很困难；通常必须查阅源代码才能了解可能存在的日志。&lt;/p&gt;
&lt;p&gt;当找到一个（可能是，希望是）相关的日志，下一步通常是确定导致这个日志产生的事件链。这意味着要找到同一事务中的其他日志。&lt;/p&gt;
&lt;p&gt;缺乏关联性给操作者带来了巨大的负担。非结构化和半结构化的日志系统没有自动索引和按事务过滤日志的机制。尽管这是迄今为止运维人员最常见的日志工作流程，但他们不得不执行一系列特别的查询和过滤，将可用的日志筛选成一个子集，希望能代表事务的近似情况。为了成功，他们必须依靠应用程序开发人员来添加各种请求 ID 和记录，以便日后找到并拼接起来。&lt;/p&gt;
&lt;p&gt;在一个小系统中，这种重建事务的过程是乏味的，但却是可能的。但是一旦系统发展到包括许多横向扩展的服务，重建事务所需的时间就开始严重限制了调查的范围。图 1-4 显示了一个涉及许多服务的复杂事务。你将如何收集所有的日志？&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-1-4在传统的日志记录中找到构成一个特定事务的确切日志需要花费大量的精力如果系统变得足够大这几乎成为不可能&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f1-4.png&#34; alt=&#34;图 1-4：在传统的日志记录中，找到构成一个特定事务的确切日志需要花费大量的精力。如果系统变得足够大，这几乎成为不可能。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 1-4：在传统的日志记录中，找到构成一个特定事务的确切日志需要花费大量的精力。如果系统变得足够大，这几乎成为不可能。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分布式追踪&lt;/strong&gt;是一个好的答案。它实际上拥有自动重建一个事务所需的所有 ID 和索引工具。不幸的是，追踪系统经常被看作是用于进行延迟分析的利基工具。因此，发送给它们的日志数据相对较少。而且，由于它们专注于延迟分析，追踪系统经常被大量采样，使得它们与这类调查无关。&lt;/p&gt;
&lt;h2 id=&#34;不是三根柱子而是一股绳子&#34;&gt;不是三根柱子，而是一股绳子&lt;/h2&gt;
&lt;p&gt;不用说，这是一个无奈之举。上述工作流程确实代表了一种可怕的状态。但是，由于我们已经在这种技术体制下生活了这么久，我们往往没有认识到，与它可以做到的相比，它实际上是多么低效。&lt;/p&gt;
&lt;p&gt;今天，为了了解系统是如何变化的，运维人员必须首先收集大量的数据。然后，他们必须根据仪表盘显示和日志扫描等视觉反馈，用他们的头脑来识别这些数据的相关性。这是一种紧张的脑力劳动。如果一个计算机程序能够自动扫描和关联这些数据，那么这些脑力劳动就是不必要的。如果运维人员能够专注于调查他们的系统是&lt;strong&gt;如何&lt;/strong&gt;变化的，而不需要首先确定&lt;strong&gt;什么&lt;/strong&gt;在变化，那么他们将节省大量宝贵的时间。&lt;/p&gt;
&lt;p&gt;在编写一个能够准确执行这种变化分析的计算机程序之前，所有这些数据点都需要被连接起来。日志需要被连接在一起，以便识别事务。衡量标准需要与日志联系在一起，这样产生的统计数据就可以与它们所测量的事务联系起来。每个数据点都需要与底层系统资源 —— 软件、基础设施和配置细节相关联，以便所有事件都能与整个系统的拓扑结构相关联。&lt;/p&gt;
&lt;p&gt;最终的结果是一个单一的、可遍历的图，包含了描述分布式系统状态所需的所有数据，这种类型的数据结构将给分析工具一个完整的系统视图。与其说是不相连的数据的 &amp;ldquo;三根支柱&amp;rdquo;，不如说是相互连接的数据的一股绳子。&lt;/p&gt;
&lt;p&gt;OpenTelemetry 因此诞生。如图 1-5 所示，OpenTelemetry 是一个新的遥测系统，它以一种综合的方式生成追踪、日志和指标。所有这些连接的数据点以相同的协议一起传输，然后可以输入计算机程序，以确定整个数据集的相关性。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-1-5opentelemetry-将所有这些孤立的信息作为一个单一的高度结构化的数据流连接起来&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f1-5.png&#34; alt=&#34;图 1-5：OpenTelemetry 将所有这些孤立的信息，作为一个单一的、高度结构化的数据流连接起来。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 1-5：OpenTelemetry 将所有这些孤立的信息，作为一个单一的、高度结构化的数据流连接起来。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;这种统一的数据是什么样子的？在下一章，我们将把这三个支柱放在一边，从头开始建立一个新的模型。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>什么是云原生应用？</title>
      <link>https://jimmysong.io/docs/cloud-native/intro/define-cloud-native-app/</link>
      <pubDate>Tue, 03 May 2022 00:00:00 +0100</pubDate>
      <guid>https://jimmysong.io/docs/cloud-native/intro/define-cloud-native-app/</guid>
      <description>&lt;p&gt;本文参考的是 &lt;a href=&#34;https://github.com/oam-dev/spec&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OAM 规范&lt;/a&gt;中对云原生应用的定义，并做出了引申。&lt;/p&gt;
&lt;p&gt;云原生应用是一个相互关联但又不独立的组件（service、task、worker）的集合，这些组件与配置结合在一起并在适当的运行时实例化后，共同完成统一的功能目的。&lt;/p&gt;
&lt;h2 id=&#34;云原生应用模型&#34;&gt;云原生应用模型&lt;/h2&gt;
&lt;p&gt;下图是 OAM 定义的云原生应用模型示意图，为了便于理解，图中相同颜色的部分为同一类别的对象定义。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-云原生应用模型&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jimmysong.io/kubernetes-handbook/images/cloud-native-app-model.png&#34; alt=&#34;云原生应用模型&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      云原生应用模型
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;OAM 的规范中定义了以下对象，它们既是 OAM 规范中的基本术语也是云原生应用的基本组成。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Workload（工作负载）&lt;/strong&gt;：应用程序的工作负载类型，由平台提供。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Component组件）&lt;/strong&gt;：定义了一个 &lt;code&gt;Workload&lt;/code&gt; 的实例，并以基础设施中立的术语声明其运维特性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Trait（特征）&lt;/strong&gt;：用于将运维特性分配给组件实例。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ApplicationScope（应用作用域）&lt;/strong&gt;：用于将组件分组成具有共同特性的松散耦合的应用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ApplicationConfiguration（应用配置）&lt;/strong&gt;：描述 &lt;code&gt;Component&lt;/code&gt; 的部署、&lt;code&gt;Trait&lt;/code&gt; 和 &lt;code&gt;ApplicationScope&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OAM 规范中提供了一个使用以上对象定义云原生应用的&lt;a href=&#34;https://github.com/oam-dev/spec/blob/master/examples/workflow.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;工作流示例&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;关注点分离&#34;&gt;关注点分离&lt;/h2&gt;
&lt;p&gt;下图是不同角色对于该模型的关注点示意图。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-云原生应用模型中的目标角色&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jimmysong.io/kubernetes-handbook/images/roles.png&#34; alt=&#34;云原生应用模型中的目标角色&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      云原生应用模型中的目标角色
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;我们可以看到对于一个云原生应用来说，不同的对象是由不同的角色来负责的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基础设施运维：提供不同的 &lt;code&gt;Workload&lt;/code&gt; 类型供开发者使用；&lt;/li&gt;
&lt;li&gt;应用运维：定义适用于不同 &lt;code&gt;Workload&lt;/code&gt; 的运维属性 &lt;code&gt;Trait&lt;/code&gt; 和管理 &lt;code&gt;Component&lt;/code&gt; 的 &lt;code&gt;ApplicationScope&lt;/code&gt; 即作用域；&lt;/li&gt;
&lt;li&gt;应用开发者：负责应用组件 &lt;code&gt;Component&lt;/code&gt; 的定义；&lt;/li&gt;
&lt;li&gt;应用开发者和运维：共同将 &lt;code&gt;Component&lt;/code&gt; 与运维属性 &lt;code&gt;Trait&lt;/code&gt; 绑定在一起，维护应用程序的生命周期；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基于 OAM 中的对象定义的云原生应用可以充分利用平台能力自由组合，开发者和运维人员的职责可以得到有效分离，组件的复用性得到大幅提高。&lt;/p&gt;
&lt;h2 id=&#34;定义标准&#34;&gt;定义标准&lt;/h2&gt;
&lt;p&gt;CNCF 中的有几个定义标准的「开源项目」，其中有的项目都已经毕业。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/servicemeshinterface/smi-spec&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SMI（Service Mesh Interface）&lt;/a&gt;：服务网格接口&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cloudevents/spec&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cloud Events&lt;/a&gt;：Serverless 中的事件标准&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/theupdateframework/specification&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TUF&lt;/a&gt;：更新框架标准&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spiffe/spiffe&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIFFE&lt;/a&gt;：身份安全标准&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这其中唯独没有应用定义标准，&lt;a href=&#34;https://github.com/cncf/sig-app-delivery&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNCF SIG App delivery&lt;/a&gt; 即是要做这个的。当然既然要指定标准，自然要对不同平台和场景的逻辑做出更高级别的抽象（这也意味着你在掌握了底层逻辑的情况下还要学习更多的概念），这样才能屏蔽底层差异。&lt;/p&gt;
&lt;h2 id=&#34;oam-简介&#34;&gt;OAM 简介&lt;/h2&gt;
&lt;p&gt;OAM 全称是 Open Application Model，从名称上来看它所定义的就是一种模型，同时也实现了基于 OAM 的我认为这种模型旨在定义了云原生应用的标准。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开放（Open）：支持异构的平台、容器运行时、调度系统、云供应商、硬件配置等，总之与底层无关&lt;/li&gt;
&lt;li&gt;应用（Application）：云原生应用&lt;/li&gt;
&lt;li&gt;模型（Model）：定义标准，以使其与底层平台无关&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;既然要制定标准，自然要对不同平台和场景的逻辑做出更高级别的抽象（这也意味着你在掌握了底层逻辑的情况下还要学习更多的概念），这样才能屏蔽底层差异。本文将默认底层平台为 Kubernetes。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;是从管理大量 &lt;a href=&#34;https://jimmysong.io/kubernetes-handbook/GLOSSARY.html#crd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CRD&lt;/a&gt; 中汲取的经验。&lt;/li&gt;
&lt;li&gt;业务和研发的沟通成本，比如 YAML 配置中很多字段是开发人员不关心的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;设计原则&#34;&gt;设计原则&lt;/h2&gt;
&lt;p&gt;OAM 规范的设计遵循了以下&lt;a href=&#34;https://github.com/oam-dev/spec/blob/master/9.design_principles.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;原则&lt;/a&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关注点分离：根据功能和行为来定义模型，以此划分不同角色的职责，&lt;/li&gt;
&lt;li&gt;平台中立：OAM 的实现不绑定到特定平台；&lt;/li&gt;
&lt;li&gt;优雅：尽量减少设计复杂性；&lt;/li&gt;
&lt;li&gt;复用性：可移植性好，同一个应用程序可以在不同的平台上不加改动地执行；&lt;/li&gt;
&lt;li&gt;不作为编程模型：OAM 提供的是应用程序模型，描述了应用程序的组成和组件的拓扑结构，而不关注应用程序的具体实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下图是 OAM 规范示意图。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-oam-规范示意图&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jimmysong.io/kubernetes-handbook/images/oam-spec.png&#34; alt=&#34;OAM 规范示意图&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      OAM 规范示意图
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;oam-工作原理&#34;&gt;OAM 工作原理&lt;/h2&gt;
&lt;p&gt;OAM 的工作原理如下图所示（图片引用自孙健波在《OAM: 云原生时代的应用模型与 下一代 DevOps 技术》中的分享）。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-oam-的原理&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jimmysong.io/kubernetes-handbook/images/oam-principle.jpg&#34; alt=&#34;OAM 的原理&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      OAM 的原理
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;OAM Spec 定义了云原生应用的规范（使用一些 &lt;a href=&#34;https://jimmysong.io/kubernetes-handbook/GLOSSARY.html#crd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CRD&lt;/a&gt; 定义）， &lt;a href=&#34;https://kubevela.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;KubeVela&lt;/a&gt; 可以看做是 OAM 规范的解析器，将应用定义翻译为 Kubernetes 中的资源对象。可以将上图分为三个层次：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;汇编层&lt;/strong&gt;：即人工或者使用工具来根据 OAM 规范定义汇编出一个云原生应用的定义，其中包含了该应用的工作负载和运维能力配置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;转义层&lt;/strong&gt;：汇编好的文件将打包为 YAML 文件，由 &lt;a href=&#34;https://kubevela.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;KubeVela&lt;/a&gt; 或其他 OAM 的实现将其转义为 Kubernetes 或其他云服务（例如 Istio）上可运行的资源对象。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;执行层&lt;/strong&gt;：执行经过转义好的云平台上的资源对象并执行资源配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/oam-dev/spec&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Open Application Model specification - github.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>云原生快速入门</title>
      <link>https://jimmysong.io/docs/cloud-native/intro/quick-start/</link>
      <pubDate>Tue, 03 May 2022 00:00:00 +0100</pubDate>
      <guid>https://jimmysong.io/docs/cloud-native/intro/quick-start/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes&lt;/a&gt; 一词来自希腊语，意思是 “飞行员” 或 “舵手”。这个名字很贴切，Kubernetes 可以帮助你在波涛汹涌的容器海洋中航行。&lt;/p&gt;
&lt;p&gt;Kubernetes 是做什么的？什么是 Docker？什么是容器编排？Kubernetes 是如何工作和扩展的？你可能还有很多其他的问题，本文将一一为你解答。&lt;/p&gt;
&lt;p&gt;这篇文章适合初学者，尤其是那些工作忙碌，没有办法抽出太多时间来了解 Kubernetes 和云原生的开发者们，希望本文可以帮助你进入 Kubernetes 的世界。&lt;/p&gt;
&lt;p&gt;简而言之，Kubernetes 提供了一个平台或工具来帮助你快速协调或扩展容器化应用，特别是在 &lt;a href=&#34;https://docker.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Docker&lt;/a&gt; 容器。让我们深入了解一下这些概念。&lt;/p&gt;
&lt;h2 id=&#34;容器和容器化&#34;&gt;容器和容器化&lt;/h2&gt;
&lt;p&gt;那么什么是容器呢？&lt;/p&gt;
&lt;p&gt;要讨论容器化首先要谈到虚拟机 (VM)，顾名思义，虚拟机就是可以远程连接的虚拟服务器，比如 AWS 的 EC2 或阿里云的 ECS。&lt;/p&gt;
&lt;p&gt;接下来，假如你要在虚拟机上运行一个网络应用 —— 包括一个 MySQL 数据库、一个 Vue 前端和一些 Java 库，在 Ubuntu 操作系统 (OS) 上运行。你不用熟悉其中的每一个技术 —— 你只要记住，一个应用程序由各种组件、服务和库组成，它们运行在操作系统上。&lt;/p&gt;
&lt;p&gt;现在，将应用程序打包成一个虚拟机镜像，这个镜像中包括了 Ubuntu 操作系统。这使得虚拟机变得非常笨重 —— 通常有几个 G 的大小。&lt;/p&gt;
&lt;p&gt;虚拟机镜像包含了整个操作系统及所有的库，对应用程序来说，这个镜像过于臃肿，其中大部分组件并没有被应用程序直接调用。如果你需要重新创建、备份或扩展这个应用程序，就需要复制整个环境（虚拟机镜像），在新环境中启动应用通常需要几十秒甚至几分钟时间。如果你想单独升级应用中的某个组件，比如说 Vue 应用，就需要重建整个虚拟机镜像。另外，如果你的两个应用依赖同一个底层镜像，升级底层镜像会同时影响这两个应用，而有时候，你只需要升级其中一个应用的依赖而已。这就是所谓的 “依赖陷阱”。&lt;/p&gt;
&lt;p&gt;解决这个问题的办法就是容器。容器是继虚拟机之后更高层次的抽象，在这层抽象中，整个应用程序的每个组件被单独打包成一个个独立的单元，这个单元就是所谓的容器。通过这种方式，可以将代码和应用服务从底层架构中分离出来，实现了完全的可移植性（在任何操作系统或环境上运行应用的能力）。所以在上面的例子中，Ubuntu 操作系统就是一个单元（容器）。MySQL 数据库是另一个容器，Vue 环境和随之而来的库也是一个容器。&lt;/p&gt;
&lt;p&gt;但是，MySQL 数据库是如何自己 “运行” 的？数据库本身肯定也要在操作系统上运行吧？没错！&lt;/p&gt;
&lt;p&gt;更高层次的容器，比如 MySQL 容器，实际上会包含必要的库来与底层的操作系统容器通信和集成。所以你可以把容器看成是整个应用堆栈中的一层，每层都依赖于下层的单元。而这就类似于船舶或港口中集装箱的堆叠方式，每个容器的稳定性都依赖于下面的容器的支持。所以应用容器的核心是一个受控的执行环境。它们允许你从头开始定义整个环境，从操作系统开始，到你要使用的各个版本的库，再到你要添加的代码版本。&lt;/p&gt;
&lt;p&gt;与容器相关的一个重要概念是&lt;strong&gt;微服务&lt;/strong&gt;。将应用程序的各个组件拆分并打包成独立的服务，这样每个组件都可以很容易地被替换、升级、调试。上面的例子中，我们会为 Vue 前端创建一个微服务，为 MySQL 数据库创建另一个微服务，为 Java 中间件部分创建另一个微服务，以此类推。很明显，微服务与容器化是相辅相成的。&lt;/p&gt;
&lt;h2 id=&#34;从-docker-开始&#34;&gt;从 Docker 开始&lt;/h2&gt;
&lt;p&gt;现在你已经对容器有一定了解了吧？Docker 是最常用的容器化工具，也是最流行的容器运行时。&lt;/p&gt;
&lt;p&gt;Docker 开源于 2013 年。用于打包和创建容器，管理基于容器的应用。所有 Linux 发行版、Windows 和 macOS 都支持 Docker。&lt;/p&gt;
&lt;p&gt;还有其他的容器化工具，如 &lt;a href=&#34;https://coreos.com/rkt/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CoreOS rkt&lt;/a&gt;、&lt;a href=&#34;https://mesos.apache.org/documentation/latest/mesos-containerizer/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mesos Containerizer&lt;/a&gt; 和 &lt;a href=&#34;https://linuxcontainers.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LXC&lt;/a&gt;。但是目前，绝大多数的容器化应用都是在 Docker 上运行的。&lt;/p&gt;
&lt;h2 id=&#34;再到-kubernetes&#34;&gt;再到 Kubernetes&lt;/h2&gt;
&lt;p&gt;首先，简单介绍一下历史。Kubernetes 是 Google 基于其内部容器调度平台 Borg 的经验开发的。2014 年开源，并作为 CNCF（云原生计算基金会）的核心发起项目。&lt;/p&gt;
&lt;p&gt;那么 Kubernetes 又跟容器是什么关系呢？让我们再回到上面的例子。假设我们的应用爆火，每天的注册用户越来越多。&lt;/p&gt;
&lt;p&gt;现在，我们需要增加后端资源，使浏览我们网站的用户在浏览页面时加载时间不会过长或者超时。最简单的方式就是增加容器的数量，然后使用负载均衡器将传入的负载（以用户请求的形式）分配给容器。&lt;/p&gt;
&lt;p&gt;这样做虽然行之有效，但也只能在用户规模有限的情况下使用。当用户请求达到几十万或几百万时，这种方法也是不可扩展的。你需要管理几十个也许是几百个负载均衡器，这本身就是另一个令人头疼的问题。如果我们想对网站或应用进行任何升级，也会遇到问题，因为负载均衡不会考虑到应用升级的问题。我们需要单独配置每个负载均衡器，然后升级该均衡器所服务的容器。想象一下，当你有 20 个负载均衡器和每周 5 或 6 个小的更新时，你将不得不进行大量的手工劳动。&lt;/p&gt;
&lt;p&gt;我们需要的是一种可以一次性将变更传递给所有受控容器的方法，同时也需要一种可以轻松地调度可用容器的方法，这个过程还必须要是自动化的，这正是 Kubernetes 所做的事情。&lt;/p&gt;
&lt;p&gt;接下来，我们将探讨 Kubernetes 究竟是如何工作的，它的各种组件和服务，以及更多关于如何使用 Kubernetes 来编排、管理和监控容器化环境。为了简单起见，假设我们使用的是 Docker 容器，尽管如前所述，Kubernetes 除了支持 Docker 之外，还支持其他几种容器平台。&lt;/p&gt;
&lt;h2 id=&#34;kubernetes-架构和组件&#34;&gt;Kubernetes 架构和组件&lt;/h2&gt;
&lt;p&gt;首先，最重要的是你需要认识到 Kubernetes 利用了 “期望状态” 原则。就是说，你定义了组件的期望状态，而 Kubernetes 要将它们始终调整到这个状态。&lt;/p&gt;
&lt;p&gt;例如，你想让你的 Web 服务器始终运行在 4 个容器中，以达到负载均衡的目的，你的数据库复制到 3 个不同的容器中，以达到冗余的目的。这就是你想要的状态。如果这 7 个容器中的任何一个出现故障，Kubernetes 引擎会检测到这一点，并自动创建出一个新的容器，以确保维持所需的状态。&lt;/p&gt;
&lt;p&gt;现在我们来定义一些 Kubernetes 的重要组件。&lt;/p&gt;
&lt;p&gt;当你第一次设置 Kubernetes 时，你会创建一个集群。所有其他组件都是集群的一部分。你也可以创建多个虚拟集群，称为命名空间 (namespace)，它们是同一个物理集群的一部分。这与你可以在同一物理服务器上创建多个虚拟机的方式非常相似。如果你不需要，也没有明确定义的命名空间，那么你的集群将在始终存在的默认命名空间中创建。&lt;/p&gt;
&lt;p&gt;Kubernetes 运行在节点 (node) 上，节点是集群中的单个机器。如果你有自己的硬件，节点可能对应于物理机器，但更可能对应于在云中运行的虚拟机。节点是部署你的应用或服务的地方，是 Kubernetes 工作的地方。有 2 种类型的节点 ——master 节点和 worker 节点，所以说 Kubernetes 是主从结构的。&lt;/p&gt;
&lt;p&gt;主节点是一个控制其他所有节点的特殊节点。一方面，它和集群中的任何其他节点一样，这意味着它只是另一台机器或虚拟机。另一方面，它运行着控制集群其他部分的软件。它向集群中的所有其他节点发送消息，将工作分配给它们，工作节点向主节点上的 API Server 汇报。&lt;/p&gt;
&lt;p&gt;Master 节点本身也包含一个名为 API Server 的组件。这个 API 是节点与控制平面通信的唯一端点。API Server 至关重要，因为这是 worker 节点和 master 节点就 pod、deployment 和所有其他 Kubernetes API 对象的状态进行通信的点。&lt;/p&gt;
&lt;p&gt;Worker 节点是 Kubernetes 中真正干活的节点。当你在应用中部署容器或 pod（稍后定义）时，其实是在将它们部署到 worker 节点上运行。Worker 节点托管和运行一个或多个容器的资源。&lt;/p&gt;
&lt;p&gt;Kubernetes 中的逻辑而非物理的工作单位称为 pod。一个 pod 类似于 Docker 中的容器。记得我们在前面讲到，容器可以让你创建独立、隔离的工作单元，可以独立运行。但是要创建复杂的应用程序，比如 Web 服务器，你经常需要结合多个容器，然后在一个 pod 中一起运行和管理。这就是 pod 的设计目的 —— 一个 pod 允许你把多个容器，并指定它们如何组合在一起来创建应用程序。而这也进一步明确了 Docker 和 Kubernetes 之间的关系 —— 一个 Kubernetes pod 通常包含一个或多个 Docker 容器，所有的容器都作为一个单元来管理。&lt;/p&gt;
&lt;p&gt;Kubernetes 中的 service 是一组逻辑上的 pod。把一个 service 看成是一个 pod 的逻辑分组，它提供了一个单一的 IP 地址和 DNS 名称，你可以通过它访问服务内的所有 pod。有了服务，就可以非常容易地设置和管理负载均衡，当你需要扩展 Kubernetes pod 时，这对你有很大的帮助，我们很快就会看到。&lt;/p&gt;
&lt;p&gt;ReplicationController 或 ReplicaSet 是 Kubernetes 的另一个关键功能。它是负责实际管理 pod 生命周期的组件 —— 当收到指令时或 pod 离线或意外停止时启动 pod，也会在收到指示时杀死 pod，也许是因为用户负载减少。所以换句话说，ReplicationController 有助于实现我们所期望的指定运行的 pod 数量的状态。&lt;/p&gt;
&lt;h2 id=&#34;什么是-kubectl&#34;&gt;什么是 Kubectl？&lt;/h2&gt;
&lt;p&gt;kubectl 是一个命令行工具，用于与 Kubernetes 集群和其中的 pod 通信。使用它你可以查看集群的状态，列出集群中的所有 pod，进入 pod 中执行命令等。你还可以使用 YAML 文件定义资源对象，然后使用 kubectl 将其应用到集群中。&lt;/p&gt;
&lt;h2 id=&#34;kubernetes-中的自动扩展&#34;&gt;Kubernetes 中的自动扩展&lt;/h2&gt;
&lt;p&gt;请记住，我们使用 Kubernetes 而不是直接使用 Docker 的原因之一，是因为 Kubernetes 能够自动扩展应用实例的数量以满足工作负载的需求。&lt;/p&gt;
&lt;p&gt;自动缩放是通过集群设置来实现的，当服务需求增加时，增加节点数量，当需求减少时，则减少节点数量。但也要记住，节点是 “物理” 结构 —— 我们把 “物理” 放在引号里，因为要记住，很多时候，它们实际上是虚拟机。&lt;/p&gt;
&lt;p&gt;无论如何，节点是物理机器的事实意味着我们的云平台必须允许 Kubernetes 引擎创建新机器。各种云提供商对 Kubernetes 支持基本都满足这一点。&lt;/p&gt;
&lt;p&gt;我们再继续说一些概念，这次是和网络有关的。&lt;/p&gt;
&lt;h2 id=&#34;什么是-kubernetes-ingress-和-egress&#34;&gt;什么是 kubernetes Ingress 和 Egress？&lt;/h2&gt;
&lt;p&gt;外部用户或应用程序与 Kubernetes pod 交互，就像 pod 是一个真正的服务器一样。我们需要设置安全规则允许哪些流量可以进入和离开 “服务器”，就像我们为托管应用程序的服务器定义安全规则一样。&lt;/p&gt;
&lt;p&gt;进入 Kubernetes pod 的流量称为 Ingress，而从 pod 到集群外的出站流量称为 egress。我们创建入口策略和出口策略的目的是限制不需要的流量进入和流出服务。而这些策略也是定义 pod 使用的端口来接受传入和传输传出数据 / 流量的地方。&lt;/p&gt;
&lt;h2 id=&#34;什么是-ingress-controller&#34;&gt;什么是 Ingress Controller？&lt;/h2&gt;
&lt;p&gt;但是在定义入口和出口策略之前，你必须首先启动被称为 Ingress Controller（入口控制器）的组件；这个在集群中默认不启动。有不同类型的入口控制器，Kubernetes 项目默认只支持 Google Cloud 和开箱即用的 Nginx 入口控制器。通常云供应商都会提供自己的入口控制器。&lt;/p&gt;
&lt;h2 id=&#34;什么是-replica-和-replicaset&#34;&gt;什么是 Replica 和 ReplicaSet？&lt;/h2&gt;
&lt;p&gt;为了保证应用程序的弹性，需要在不同节点上创建多个 pod 的副本。这些被称为 Replica。假设你所需的状态策略是 “让名为 webserver-1 的 pod 始终维持在 3 个副本”，这意味着 ReplicationController 或 ReplicaSet 将监控活动副本的数量，如果其中有任何一个 replica 因任何原因不可用（例如节点的故障），那么 Deployment Controller 将自动创建一个新的系统（定义如下）。&lt;/p&gt;
&lt;p&gt;所需状态是在 deployment 中定义的。 Master 节点的中有一个子系统叫做 Deployment Controller，负责实际执行并使当前状态不断趋向于所需状态。&lt;/p&gt;
&lt;p&gt;因此，举例来说，如果你目前有 2 个 pod 的副本，而你所希望的状态应该有 3 个，那么 Replication Controller 或 ReplicaSet 会自动检测到这个要求，并指示 Deployment Controller 根据预定义的设置部署一个新的 pod。&lt;/p&gt;
&lt;h2 id=&#34;什么是服务网格&#34;&gt;什么是服务网格？&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://jimmysong.io/blog/what-is-a-service-mesh/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;服务网格 (Service Mesh)&lt;/a&gt; 用于管理服务之间的网络流量，是云原生的网络基础设施层，也是 &lt;a href=&#34;https://jimmysong.io/blog/post-kubernetes-era/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes 次世代的云原生应用&lt;/a&gt; 的重要组成部分。&lt;/p&gt;
&lt;p&gt;服务网格利用容器之间的网络设置来控制或改变应用程序中不同组件之间的交互。下面，我们用一个例子来说明。假设你想测试 Nginx 的新版本，检查它是否与你的 Web 应用兼容。你用新的 Nginx 版本创建了一个新的容器 (Container2)，并从当前容器 (Container1) 中复制了当前的 Nginx webserver 配置。但你不想影响组成 web 应用的其他微服务（假设每个容器对应一个单独的微服务）—— 就是 MySQL 数据库、Node.js 前端、负载均衡器等。&lt;/p&gt;
&lt;p&gt;所以使用服务网格，你可以立即只把 webserver 微服务改成 Container2（新 Nginx 版本的那个）进行测试。如果确定它不能工作，比如因为它导致网站出现一些兼容性问题，那么你就调用服务网格来快速切换回原来的 Container1。而这一切都不需要对其他容器进行任何配置变更 —— 这些变更对其他容器是完全透明的。&lt;/p&gt;
&lt;p&gt;如果没有服务网格，对容器来说这项工作将十分繁琐，因为这涉及到逐一更改所有其他容器上的配置，将它们所包含的服务从 Container1 指向 Container2，然后在测试失败后，将它们全部改回来。&lt;/p&gt;
&lt;p&gt;在前面这部分 Kubernetes 指南中，我们介绍了一些与 Kubernetes 网络相关的概念。Kubernetes 中的网络可能很棘手，很难理解，如果你刚刚开始，你可能需要一些实践来理解这里。关于服务网格的更多内容请参考 &lt;a href=&#34;https://jimmysong.io/istio-handbook/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Istio 服务网格》&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;在下一部分中，我们将展开更多关于 Kubernetes 的话题：如何开始学习 Kubernetes，如何在本地安装和测试 Kubernetes，以及 Kubernetes 的一些优秀的监控工具。&lt;/p&gt;
&lt;h2 id=&#34;如何学习-kubernetes&#34;&gt;如何学习 Kubernetes？&lt;/h2&gt;
&lt;p&gt;自学 Kubernetes 知识基本上有三种不同的途径，我们在这里只提供了一个指导大纲。&lt;/p&gt;
&lt;h3 id=&#34;一从零开始学习和安装-kubernetes&#34;&gt;一、从零开始学习和安装 Kubernetes&lt;/h3&gt;
&lt;p&gt;要想真正掌握 Kubernetes，最好的办法莫过于自己从头开始安装 Kubernetes。不过要注意的是，从零开始安装 Kubernetes 并不是一件容易的事情。安装 Kubernetes 并不是简单的 “下载文件 -&amp;gt; 点击安装” 式的操作，Kubernetes 由多个组件组成，这些组件必须单独安装和配置。而在此之前，你也需要相当的技术储备来做安装前的准备，比如熟悉 Linux 操作系统。如果你决定使用这种方式学习的话，推荐你阅读 &lt;a href=&#34;https://github.com/rootsongjc/kubernetes-handbook&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes Handbook——Kubernetes 中文指南 / 云原生架构实践手册&lt;/a&gt;。此外，请记住，尽管 Kubernetes 作为一个开源解决方案在技术上是免费的，但它确实有一些隐藏的成本，只不过对初学者来说可能并不明显。&lt;/p&gt;
&lt;h3 id=&#34;二kubernetes-自托管解决方案&#34;&gt;二、Kubernetes 自托管解决方案&lt;/h3&gt;
&lt;p&gt;这些解决方案样是一些工具和实用程序，大大简化了在本地计算机上安装和配置小型 Kubernetes 集群的任务。它们是学习 Kubernetes 的好方法，同时对于新手来说也不会太难，又足够小巧可以到安装在个人电脑上。最流行的自托管 Kubernetes 工具和环境是 &lt;a href=&#34;https://github.com/kubernetes/minikube&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Minikube&lt;/a&gt;、&lt;a href=&#34;https://github.com/ubuntu/microk8s&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MicroK8s&lt;/a&gt;、&lt;a href=&#34;https://docs.docker.com/docker-for-windows/kubernetes/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Docker Desktop&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/kubernetes-sigs/kind&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kind&lt;/a&gt;。这些解决方案往往有一些限制，例如，Minikube 只允许创建一个节点。尽管有这些缺点，但这些工具还是非常值得推荐，因为它们将易学性和成本效益结合起来，对于刚开始使用 Kubernetes 的初学者来说，是一个很好的选择。&lt;/p&gt;
&lt;h3 id=&#34;三云托管的解决方案&#34;&gt;三、云托管的解决方案&lt;/h3&gt;
&lt;p&gt;如今各大云供应商都提供了定制化的 Kubernetes 解决方案来。你也可以通过线上教学平台如 &lt;a href=&#34;https://katacoda.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Katacoda&lt;/a&gt; 上的免费课程来学习 Kubernetes，它们都是云托管的，你不需要自己安装，只不过你需要云供应商的集群需要付费。&lt;/p&gt;
&lt;h2 id=&#34;本地测试和调试-kubernetes&#34;&gt;本地测试和调试 Kubernetes&lt;/h2&gt;
&lt;p&gt;作为本地安装 Kubernetes 的一部分，你很可能还需要一些测试和调试能力，以确保一切都在顺利运行，特别是定义入口和出口策略等棘手的任务。此外，还有 Kubernetes 附加组件的生态系统，你可能想使用这些组件来扩展 Kubernetes 集群的功能。添加所有这些都需要进行更多的测试，以确保它们能与你的 Kubernetes 集群完美的集成。&lt;/p&gt;
&lt;p&gt;用于在本地开发和调试 Kubernetes 服务的工具有：&lt;a href=&#34;https://github.com/microsoft/mindaro&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Microsoft Bridge to Kubernetes&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/telepresenceio/telepresence&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;telepresence&lt;/a&gt;。这些工具可以让你在本地运行单个服务，同时将该服务连接到远程 Kubernetes 集群。这样你就可以让自己的本地机器作为 Kubernetes 集群中的一部分来运行 —— 这对于在本地而不是在生产集群上开发服务非常有用。&lt;/p&gt;
&lt;p&gt;Kubernetes 项目也了解到了 Kubernetes 安装对端到端 (E2E) 测试的需求。为此，项目核心团队一直在确保在最近的版本中更恰当地支持 E2E 测试。这包括诸如允许测试重用和纳入更多附加组件和驱动程序的测试等。&lt;/p&gt;
&lt;h2 id=&#34;kubernetes-监控工具&#34;&gt;Kubernetes 监控工具&lt;/h2&gt;
&lt;p&gt;Kubernetes 提供了应用程序在集群的每个层次上的资源使用情况的详细信息 —— 容器、pod、服务。这些详细信息使你能够评估应用程序的性能，确定哪些瓶颈可以解决以提高整体性能。&lt;/p&gt;
&lt;p&gt;毕竟，监控可以帮助你了解应用和集群运行情况的详细信息，这对于学习 Kubernetes 是十分有帮助的。&lt;/p&gt;
&lt;p&gt;Kubernetes 包含两个内置度量收集工具用于监控：资源管道和全度量管道。资源管道是一个较低级和较有限的工具，主要集中在与各种控制器相关的指标上。全指标管道，顾名思义，从几乎所有集群组件中获取并显示更丰富的指标。&lt;/p&gt;
&lt;p&gt;还有一些第三方工具可以安装并集成到 Kubernetes 集群中。对于 Kubernetes 来说，最普遍使用的两个工具是 Prometheus 和 Grafana。&lt;/p&gt;
&lt;h3 id=&#34;prometheus-监控&#34;&gt;Prometheus 监控&lt;/h3&gt;
&lt;p&gt;Prometheus 是一个功能丰富的开源监控和警报工具。Prometheus 包含一个内部数据存储用来收集指标，如生成的时间序列数据。Prometheus 还拥有众多插件，允许它将数据暴露给各种外部解决方案，并从其他数据源导入数据，包括所有主要公有云监控解决方案。&lt;/p&gt;
&lt;h3 id=&#34;grafana-仪表盘&#34;&gt;Grafana 仪表盘&lt;/h3&gt;
&lt;p&gt;Grafana 是一个优秀的仪表盘、分析和数据可视化工具。它没有 Prometheus 的全功能数据收集能力，但 Prometheus 又没有 Grafana 的数据呈现界面。事实上，他们最好是结合在一起使用 ——Prometheus 负责数据收集和汇总，Grafana 负责数据展示。它们共同创造了一个强大的组合，涵盖了数据收集、基本警报和可视化。&lt;/p&gt;
&lt;h3 id=&#34;高级警报&#34;&gt;高级警报&lt;/h3&gt;
&lt;p&gt;对于高级警报，你可以添加 &lt;a href=&#34;https://www.nagios.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Nagios&lt;/a&gt; 或 &lt;a href=&#34;https://github.com/prometheus/alertmanager&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Prometheus Alertmanager&lt;/a&gt; 等工具。这些警报工具通常有大量的集成。你可以为自定义值班团队，然后定义你想要监控的参数，例如 “当任何 pod 不可用时” 或 “当任何节点无法访问时”、“当容量达到 90%” 等，然后通过电子邮件、短信、手机应用提醒、电话呼叫等方式向值班人员发送自定义通知。你还可以创建升级策略，比如，如果一个被定义为 “危急” 的警报在 10 分钟内没有值班人员确认，那么就将警报升级（发送警报）到该人员的经理。&lt;/p&gt;
&lt;p&gt;现在，你应该已经对 Docker 和 Kubernetes 有了大体的认识。了解了 Kubernetes 的作用，知道它是如何进行容器化应用部署和管理的。&lt;/p&gt;
&lt;p&gt;调试和监控技术不仅仅是运维需要，你也可以把它当作学习方式。有什么比边做边学更好呢？&lt;/p&gt;
&lt;p&gt;请记住，如果你的应用规模太小，而且预计用户需求不会有太大变化或重大波动（比如一个只在公司内部使用的应用），那么 Kubernetes 对你来说可能没有必要，这种情况下，直接使用 Docker 就足够了。&lt;/p&gt;
&lt;h2 id=&#34;更多&#34;&gt;更多&lt;/h2&gt;
&lt;p&gt;云原生领域的开源项目众多（见 &lt;a href=&#34;https://jimmysong.io/awesome-cloud-native&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Awesome Cloud Native / 云原生开源项目大全&lt;/a&gt;），其中有大量的优秀项目可供我们学习。此外，Kubernetes 开源已经多年时间，网上有大量的学习资料，业界出版过很多&lt;a href=&#34;https://jimmysong.io/cloud-native/note/books/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;书籍&lt;/a&gt;，建议大家通过阅读&lt;a href=&#34;https://kubernetes.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;官方文档&lt;/a&gt;和实践来学习，也可以参考我编写的 &lt;a href=&#34;https://jimmysong.io/kubernetes-handbook&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes Handbook——Kubernetes 中文指南 / 云原生架构实践手册&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;推荐大家加入笔者发起创办的&lt;a href=&#34;https://cloudnative.to/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云原生社区&lt;/a&gt;，这是一个立足中国，放眼世界的云原生终端用户社区，致力于云原生技术的传播和应用。云原生社区主办的&lt;a href=&#34;https://github.com/cloudnativeto/academy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云原生学院&lt;/a&gt;定期邀请云原生和开源领域的大咖进行直播分享，成员自发组织了多个 SIG（特别兴趣小组）进行讨论学习。欢迎加入我们，共同学习和交流云原生技术。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>你是否需要 Istio？</title>
      <link>https://jimmysong.io/docs/cloud-native/service-mesh/do-you-need-a-service-mesh/</link>
      <pubDate>Tue, 03 May 2022 00:00:00 +0800</pubDate>
      <guid>https://jimmysong.io/docs/cloud-native/service-mesh/do-you-need-a-service-mesh/</guid>
      <description>&lt;p&gt;你可能参加过各种云原生、服务网格相关的 meetup，在社区里看到很多人在分享和讨论 Istio，但是对于自己是否真的需要 Istio 感到踌躇，甚至因为它的复杂性而对服务网格的前景感到怀疑。那么，在你继阅读 Istio SIG 后续文章之前，请先仔细阅读本文，审视一下自己公司的现状，看看你是否有必要使用服务网格，处于 Istio 应用的哪个阶段。&lt;/p&gt;
&lt;p&gt;本文不是对应用服务网格的指导，而是根据社区里经常遇到的问题而整理。在使用 Istio 之前，请先考虑下以下因素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你的团队里有多少人？&lt;/li&gt;
&lt;li&gt;你的团队是否有使用 Kubernetes、Istio 的经验？&lt;/li&gt;
&lt;li&gt;你有多少微服务？&lt;/li&gt;
&lt;li&gt;这些微服务使用什么语言？&lt;/li&gt;
&lt;li&gt;你的运维、SRE 团队是否可以支持服务网格管理？&lt;/li&gt;
&lt;li&gt;你有采用开源项目的经验吗？&lt;/li&gt;
&lt;li&gt;你的服务都运行在哪些平台上？&lt;/li&gt;
&lt;li&gt;你的应用已经容器化并使用 Kubernetes 管理了吗？&lt;/li&gt;
&lt;li&gt;你的服务有多少是部署在虚拟机、有多少是部署到 Kubernetes 集群上，比例如何？&lt;/li&gt;
&lt;li&gt;你的团队有制定转移到云原生架构的计划吗？&lt;/li&gt;
&lt;li&gt;你想使用 Istio 的什么功能？&lt;/li&gt;
&lt;li&gt;Istio 的稳定性是否能够满足你的需求？&lt;/li&gt;
&lt;li&gt;你是否可以忍受 Istio 带来的性能损耗？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Istio 作为目前最流行的 Service Mesh 技术之一，拥有活跃的社区和众多的落地案例。但如果你真的想在你的生产环境大规模落地 Isito，这看似壮观美好的冰山下，却是暗流涌动，潜藏着无数凶险。&lt;/p&gt;
&lt;h2 id=&#34;使用-istio-无法做到完全对应用透明&#34;&gt;使用 Istio 无法做到完全对应用透明&lt;/h2&gt;
&lt;p&gt;服务通信和治理相关的功能迁移到 Sidecar 进程中后， 应用中的 SDK 通常需要作出一些对应的改变。&lt;/p&gt;
&lt;p&gt;比如 SDK 需要关闭一些功能，例如重试。一个典型的场景是，SDK 重试 m 次，Sidecar 重试 n 次，这会导致 m * n 的重试风暴，从而引发风险。&lt;/p&gt;
&lt;p&gt;此外，诸如 trace header 的透传，也需要 SDK 进行升级改造。如果你的 SDK 中还有其它特殊逻辑和功能，这些可能都需要小心处理才能和 Isito Sidecar 完美配合。&lt;/p&gt;
&lt;h2 id=&#34;istio-对非-kubernetes-环境的支持有限&#34;&gt;Istio 对非 Kubernetes 环境的支持有限&lt;/h2&gt;
&lt;p&gt;在业务迁移至 Istio 的同时，可能并没有同步迁移至 Kubernetes，而还运行在原有 PAAS 系统之上。 这会带来一系列挑战：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原有 PAAS 可能没有容器网络，Istio 的服务发现和流量劫持都可能要根据旧有基础设施进行适配才能正常工作&lt;/li&gt;
&lt;li&gt;如果旧有的 PAAS 单个实例不能很好的管理多个容器（类比 Kubernetes 的 Pod 和 Container 概念），大量 Istio Sidecar 的部署和运维将是一个很大的挑战&lt;/li&gt;
&lt;li&gt;缺少 Kubernetes webhook 机制，Sidecar 的注入也可能变得不那么透明，而需要耦合在业务的部署逻辑中&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;只有-http-协议是一等公民&#34;&gt;只有 HTTP 协议是一等公民&lt;/h2&gt;
&lt;p&gt;Istio 原生对 HTTP 协议提供了完善的全功能支持，但在真实的业务场景中，私有化协议却非常普遍，而 Istio 却并未提供原生支持。&lt;/p&gt;
&lt;p&gt;这导致使用私有协议的一些服务可能只能被迫使用 TCP 协议来进行基本的请求路由，这会导致很多功能的缺失，这其中包括 Istio 非常强大的基于内容的消息路由，如基于 header、 path 等进行权重路由。&lt;/p&gt;
&lt;h2 id=&#34;扩展-istio-的成本并不低&#34;&gt;扩展 Istio 的成本并不低&lt;/h2&gt;
&lt;p&gt;虽然 Istio 的总体架构是基于高度可扩展而设计，但由于整个 Istio 系统较为复杂，如果你对 Istio 进行过真实的扩展，就会发现成本不低。&lt;/p&gt;
&lt;p&gt;以扩展 Istio 支持某一种私有协议为例，首先你需要在 Istio 的 api 代码库中进行协议扩展，其次你需要修改 Istio 代码库来实现新的协议处理和下发，然后你还需要修改 xds 代码库的协议，最后你还要在 Envoy 中实现相应的 Filter 来完成协议的解析和路由等功能。&lt;/p&gt;
&lt;p&gt;在这个过程中，你还可能面临上述数个复杂代码库的编译等工程挑战（如果你的研发环境不能很好的使用 Docker 或者无法访问部分国外网络的情况下）。&lt;/p&gt;
&lt;p&gt;即使做完了所有的这些工作，你也可能面临这些工作无法合并回社区的情况，社区对私有协议的扩展支持度不高，这会导致你的代码和社区割裂，为后续的升级更新带来隐患。&lt;/p&gt;
&lt;h2 id=&#34;istio-在集群规模较大时的性能问题&#34;&gt;Istio 在集群规模较大时的性能问题&lt;/h2&gt;
&lt;p&gt;Istio 默认的工作模式下，每个 Sidecar 都会收到全集群所有服务的信息。如果你部署过 Istio 官方的 Bookinfo 示例应用，并使用 Envoy 的 config dump 接口进行观察，你会发现，仅仅几个服务，Envoy 所收到的配置信息就有将近 20w 行。&lt;/p&gt;
&lt;p&gt;可以想象，在稍大一些的集群规模，Envoy 的内存开销、Istio 的 CPU 开销、XDS 的下发时效性等问题，一定会变得尤为突出。&lt;/p&gt;
&lt;p&gt;Istio 这么做一是考虑这样可以开箱即用，用户不用进行过多的配置，另外在一些场景，可能也无法梳理出准确的服务之间的调用关系，因此直接给每个 Sidecar 下发了全量的服务配置，即使这个 Sidecar 只会访问其中很小一部分服务。&lt;/p&gt;
&lt;p&gt;当然这个问题也有解法，你可以通过 Sidecar CRD 来显示定义服务调用关系，使 Envoy 只得到他需要的服务信息，从而大幅降低 Envoy 的资源开销，但前提是在你的业务线中能梳理出这些调用关系。&lt;/p&gt;
&lt;h2 id=&#34;xds-分发没有分级发布机制&#34;&gt;XDS 分发没有分级发布机制&lt;/h2&gt;
&lt;p&gt;当你对一个服务的策略配置进行变更的时候，XDS 不具备分级发布的能力，所有访问这个服务的 Envoy 都会立即收到变更后的最新配置。这在一些对变更敏感的严苛生产环境，可能是有很高风险甚至不被允许的。&lt;/p&gt;
&lt;p&gt;如果你的生产环境严格要求任何变更都必须有分级发布流程，那你可能需要考虑自己实现一套这样的机制。&lt;/p&gt;
&lt;h2 id=&#34;istio-组件故障时是否有退路&#34;&gt;Istio 组件故障时是否有退路？&lt;/h2&gt;
&lt;p&gt;以 Istio 为代表的 Sidecar 架构的特殊性在于，Sidecar 直接承接了业务流量，而不像一些其他的基础设施那样，只是整个系统的旁路组件（比如 Kubernetes）。&lt;/p&gt;
&lt;p&gt;因此在 Isito 落地初期，你必须考虑，如果 Sidecar 进程挂掉，服务怎么办？是否有退路？是否能 fallback 到直连模式？&lt;/p&gt;
&lt;p&gt;在 Istio 落地过程中，是否能无损 fallback，通常决定了核心业务能否接入 Service Mesh。&lt;/p&gt;
&lt;h2 id=&#34;isito-技术架构的成熟度还没有达到预期&#34;&gt;Isito 技术架构的成熟度还没有达到预期&lt;/h2&gt;
&lt;p&gt;虽然 Istio 1.0 版本已经发布了很久，但是如果你关注社区每个版本的迭代，就会发现，Istio 目前架构依然处于不太稳定的状态，尤其是 1.5 版本前后的几个大版本，先后经历了去除 Mixer 组件、合并为单体架构、仅支持高版本 Kubernetes 等等重大变动，这对于已经在生产环境中使用了 Istio 的用户非常不友好，因为升级会面临各种不兼容性问题。&lt;/p&gt;
&lt;p&gt;好在社区也已经意识到这一问题，2021 年社区也成立了专门的小组，重点改善 Istio 的兼容性和用户体验。&lt;/p&gt;
&lt;h2 id=&#34;istio-缺乏成熟的产品生态&#34;&gt;Istio 缺乏成熟的产品生态&lt;/h2&gt;
&lt;p&gt;Istio 作为一套技术方案，却并不是一套产品方案。&lt;/p&gt;
&lt;p&gt;如果你在生产环境中使用，你可能还需要解决可视化界面、权限和账号系统对接、结合公司已有技术组件和产品生态等问题，仅仅通过命令行来使用，可能并不能满足你的组织对权限、审计、易用性的要求。&lt;/p&gt;
&lt;p&gt;而 Isito 自带的 Kiali 功能还十分简陋，远远没有达到能在生产环境使用的程度，因此你可能需要研发基于 Isito 的上层产品。&lt;/p&gt;
&lt;h2 id=&#34;istio-目前解决的问题域还很有限&#34;&gt;Istio 目前解决的问题域还很有限&lt;/h2&gt;
&lt;p&gt;Istio 目前主要解决的是分布式系统之间服务调用的问题，但还有一些分布式系统的复杂语义和功能并未纳入到 Istio 的 Sidecar 运行时之中，比如消息发布和订阅、状态管理、资源绑定等等。&lt;/p&gt;
&lt;p&gt;云原生应用将会朝着多 Sidecar 运行时或将更多分布式能力纳入单 Sidecar 运行时的方向继续发展，以使服务本身变得更为轻量，让应用和基础架构彻底解耦。&lt;/p&gt;
&lt;p&gt;如果你的生产环境中，业务系统对接了非常多和复杂的分布式系系统中间件，Istio 目前可能并不能完全解决你的应用的云原生化诉求。&lt;/p&gt;
&lt;h2 id=&#34;写在最后&#34;&gt;写在最后&lt;/h2&gt;
&lt;p&gt;看到这里，你是否感到有些沮丧，而对 Isito 失去信心？&lt;/p&gt;
&lt;p&gt;别担心，上面列举的这些问题，实际上并不影响 Isito 依然是目前最为流行和成功的 Service Mesh 技术选型之一。Istio 频繁的变动，一定程度上也说明它拥有一个活跃的社区，我们应当对一个新的事物报以信心，Isito 的社区也在不断听取来自终端用户的声音，朝着大家期待的方向演进。&lt;/p&gt;
&lt;p&gt;同时，如果你的生产环境中的服务规模并不是很大，服务已经托管于 Kubernetes 之上，也只使用那些 Istio 原生提供的能力，那么 Istio 依然是一个值得尝试的开箱即用方案。&lt;/p&gt;
&lt;p&gt;但如果你的生产环境比较复杂，技术债务较重，专有功能和策略需求较多，亦或者服务规模庞大，那么在开始使用 Istio 之前，你需要仔细权衡上述这些要素，以评估在你的系统之中引入 Istio 可能带来的复杂度和潜在成本。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cloudnative.to/blog/the-facts-of-using-istio/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在生产环境使用 Istio 前的若干考虑要素 - cloudnative.to&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>第 2 章：结构化数据的价值</title>
      <link>https://jimmysong.io/docs/opentelemetry-obervability/the-value-of-structured-data/</link>
      <pubDate>Sat, 05 Feb 2022 00:00:00 +0800</pubDate>
      <guid>https://jimmysong.io/docs/opentelemetry-obervability/the-value-of-structured-data/</guid>
      <description>&lt;p&gt;眯着眼睛看图表并不是寻找相关性的最佳方式。目前在运维人员头脑中进行的大量工作实际上是可以自动化的。这使运维人员可以在识别问题、提出假设和验证根本原因之间迅速行动。&lt;/p&gt;
&lt;p&gt;为了建立更好的工具，我们需要更好的数据。遥测必须具备以下两个要求以支持高质量的自动分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有的数据点都必须用适当的索引连接在一个图上。&lt;/li&gt;
&lt;li&gt;所有代表常见操作的数据点必须有明确的键和值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在这一章中，我们将从一个基本的构件开始浏览现代遥测数据模型：属性。&lt;/p&gt;
&lt;h2 id=&#34;属性定义键和值&#34;&gt;属性：定义键和值&lt;/h2&gt;
&lt;p&gt;最基本的数据结构是&lt;strong&gt;属性（attribute）&lt;/strong&gt;，定义为一个键和一个值。OpenTelemetry 的每个数据结构都包含一个属性列表。分布式系统的每个组件（HTTP 请求、SQL 客户端、无服务器函数、Kubernetes Pod）在 OpenTelemetry 规范中都被定义为一组特定的属性。这些定义被称为 OpenTelemetry &lt;strong&gt;语义约定&lt;/strong&gt;。表 2-1 显示了 HTTP 约定的部分列表。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;http.method&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;HTTP 请求类型&lt;/td&gt;
&lt;td&gt;GET; POST; HEAD&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;http.target&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;在 HTTP 请求行中传递的完整的请求目标或等价物&lt;/td&gt;
&lt;td&gt;/path/12314/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;http.host&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;HTTP &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc7230#section-5.4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;host header&lt;/a&gt; 的值。当标头为空或不存在时，这个属性应该是相同的。&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.example.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;www.example.org&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;http.scheme&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;识别所使用协议的 URI 方案&lt;/td&gt;
&lt;td&gt;http; https&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;http.status_code&lt;/td&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;HTTP 请求状态码&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;表 2-1：HTTP 规范的部分列表&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有了这样一个标准模式，分析工具就可以对它们所监测的系统进行详细的表述，同时进行细微的分析，而在使用定义不明确或不一致的数据时，是不可能做到的。&lt;/p&gt;
&lt;h2 id=&#34;事件一切的基础&#34;&gt;事件：一切的基础&lt;/h2&gt;
&lt;p&gt;OpenTelemetry 中最基本的对象是&lt;strong&gt;事件（event）&lt;/strong&gt;。事件只是一个时间戳和一组属性。使用一组属性而不是简单的消息 / 报文，可以使分析工具正确地索引事件，并使它们可以被搜索到。&lt;/p&gt;
&lt;p&gt;有些属性对事件来说是独一无二的。时间戳、消息和异常细节都是特定事件的属性的例子。&lt;/p&gt;
&lt;p&gt;然而，大多数属性对单个事件来说&lt;strong&gt;并不&lt;/strong&gt;独特。相反，它们是一组事件所共有的。例如，&lt;code&gt;http.target&lt;/code&gt; 属性与作为 HTTP 请求的一部分而记录的每个事件有关。如果在每个事件上反复记录这些属性，效率会很低。相反，我们把这些属性拉出到围绕事件的封装中，在那里它们可以被写入一次。我们把这些封装称为&lt;strong&gt;上下文（context）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;有两种类型的上下文：静态和动态（如图 2-1 所示）。&lt;strong&gt;静态上下文&lt;/strong&gt;定义了一个事件发生的物理位置。在 OpenTelemetry 中，这些静态属性被称为&lt;strong&gt;资源&lt;/strong&gt;。一旦程序启动，这些资源属性的值通常不会改变。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-2-1虽然事件有一些特定的事件属性但大多数属性属于事件发生的上下文之一&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f2-1.png&#34; alt=&#34;图 2-1：虽然事件有一些特定的事件属性，但大多数属性属于事件发生的上下文之一。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 2-1：虽然事件有一些特定的事件属性，但大多数属性属于事件发生的上下文之一。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;动态上下文&lt;/strong&gt;定义了事件所参与的活动操作。这个操作层面的上下文被称为&lt;strong&gt;跨度（span）&lt;/strong&gt;。每次操作执行时，这些属性的值都会改变。&lt;/p&gt;
&lt;p&gt;不是所有的事件都有两种类型的上下文。只有资源的自由浮动事件，如程序启动时发出的事件，被称为&lt;strong&gt;日志（log）&lt;/strong&gt;。作为分布式事务的一部分而发生的事件被称为&lt;strong&gt;跨度事件（span event）&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;资源观察服务和机器&#34;&gt;资源：观察服务和机器&lt;/h2&gt;
&lt;p&gt;资源（静态上下文）描述了一个程序正在消费的物理和虚拟信息结构。服务、容器、部署和区域都是资源。图 2-2 显示了一个典型的购物车结账事务中所涉及的资源。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-2-2一个事务被视为一组资源&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f2-2.png&#34; alt=&#34;图 2-2：一个事务，被视为一组资源。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 2-2：一个事务，被视为一组资源。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;系统运行中的大多数问题都源于资源争夺，许多并发的事务试图在同一时间利用相同的资源。通过将事件放在它们所使用的资源的上下文中，就有可能自动检测出许多类型的资源争夺。&lt;/p&gt;
&lt;p&gt;像事件一样，资源可以被定义为一组属性。表 2-2 显示了一个服务资源的例子。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;表 2-2：服务资源的例子&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;service.name&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;服务的逻辑名称&lt;/td&gt;
&lt;td&gt;shopping cart&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;service.instance.id&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;服务实例的 ID&lt;/td&gt;
&lt;td&gt;627cc493- f310-47de-96bd-71410b7dec09&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;service.version&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;服务 API 或者实现的版本号&lt;/td&gt;
&lt;td&gt;2.0.0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;除了识别机器所需的基本信息，配置设置也可以作为资源被记录下来。要访问一台正在运行的机器来了解它是如何配置的，这个负担太让人害怕了。相反，在配置文件中发现的任何重要信息也应该表示为一种资源。&lt;/p&gt;
&lt;h2 id=&#34;跨度观察事务&#34;&gt;跨度：观察事务&lt;/h2&gt;
&lt;p&gt;跨度（动态上下文）描述计算机操作。跨度有一个操作名称，一个开始时间，一个持续时间，以及一组属性。&lt;/p&gt;
&lt;p&gt;标准操作是使用语义约定来描述的，比如上面描述的 HTTP 约定。但也有一些特定的应用属性，如 &lt;code&gt;ProjectID&lt;/code&gt; 和 &lt;code&gt;AccountID&lt;/code&gt;，可以由应用开发者添加。&lt;/p&gt;
&lt;p&gt;跨度也是我们描述因果关系的方式。为了正确记录整个事务，我们需要知道哪些操作是由其他哪些操作触发的。为了做到这一点，我们需要给跨度增加三个属性：&lt;code&gt;TraceID&lt;/code&gt;、&lt;code&gt;SpanID&lt;/code&gt; 和 &lt;code&gt;ParentID&lt;/code&gt;，如表 2-3 所示。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;表 2-3：跨度的三个额外属性&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;traceid&lt;/td&gt;
&lt;td&gt;16 字节数组&lt;/td&gt;
&lt;td&gt;识别整个事务&lt;/td&gt;
&lt;td&gt;4bf92f3577b34da6a3ce929d0e0e4736&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;spanid&lt;/td&gt;
&lt;td&gt;8 字节数组&lt;/td&gt;
&lt;td&gt;识别当前操作&lt;/td&gt;
&lt;td&gt;00f067aa0ba902b7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;parentid&lt;/td&gt;
&lt;td&gt;8 字节数组&lt;/td&gt;
&lt;td&gt;识别父操作&lt;/td&gt;
&lt;td&gt;53ce929d0e0e4736&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;这三个属性是 OpenTelemetry 的基础。通过添加这些属性，我们所有的事件现在可以被组织成一个图，代表它们的因果关系。这个图现在可以以各种方式进行索引，我们稍后会讨论这个问题。&lt;/p&gt;
&lt;h2 id=&#34;追踪看似日志胜过日志&#34;&gt;追踪：看似日志，胜过日志&lt;/h2&gt;
&lt;p&gt;我们现在已经从简单的事件变成了组织成与资源相关的操作图的事件。这种类型的图被称为&lt;strong&gt;追踪（trace）&lt;/strong&gt;。图 2-3 显示了一种常见的可视化追踪方式，重点是识别操作的延迟。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-2-3当日志被组织成一个图形时它们就变成了追踪&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f2-3.png&#34; alt=&#34;图 2-3：当日志被组织成一个图形时，它们就变成了追踪。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 2-3：当日志被组织成一个图形时，它们就变成了追踪。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;从本质上讲，追踪只是用更好的索引来记录日志。当你把适当的上下文添加到适当的结构化的日志中时，可以得到追踪的定义。&lt;/p&gt;
&lt;p&gt;想想你花了多少时间和精力通过搜索和过滤来收集这些日志；那是收集数据的时间，而不是分析数据的时间。而且，你要翻阅的日志越多，执行并发事务数量不断增加的机器堆积，就越难收集到真正相关的那一小部分日志。&lt;/p&gt;
&lt;p&gt;然而，如果你有一个 TraceID，收集这些日志只是一个简单的查询。通过 TraceID 索引，你的存储工具可以自动为你做这项工作；找到一个日志，你就有了该事务中的所有日志，不需要额外的工作。&lt;/p&gt;
&lt;p&gt;既然如此，为什么你还会要那些没有 &amp;ldquo;追踪&amp;quot;ID 的 &amp;ldquo;日志&amp;rdquo;？我们已经习惯了传统的日志管理迫使我们做大量的工作来连接这些点。但这些工作实际上是不必要的；它是我们数据中缺乏结构的副产品。&lt;/p&gt;
&lt;p&gt;分布式追踪不仅仅是一个测量延迟的工具；它是一个定义上下文和因果关系的数据结构。它是把所有东西联系在一起的胶水。正如我们将看到的，这种胶水包括最后一个支柱 —— 指标。&lt;/p&gt;
&lt;h2 id=&#34;指标观察事件的总体情况&#34;&gt;指标：观察事件的总体情况&lt;/h2&gt;
&lt;p&gt;现在我们已经确定了什么是事件，让我们来谈谈事件的聚合。在一个活跃的系统中，同样的事件会不断发生，我们以聚合的方式查看它们的属性来寻找模式。属性的值可能出现得太频繁，或者不够频繁，在这种情况下，我们要计算这些值出现的频率。或者该值可能超过某个阈值，在这种情况下，我们想衡量该值是如何随时间变化的。或者我们可能想以直方图的形式来观察数值的分布。&lt;/p&gt;
&lt;p&gt;这些聚合事件被称为&lt;strong&gt;度量&lt;/strong&gt;。就像普通的事件一样，度量有一组属性和一组语义上的便利条件来描述普通概念。表 2-4 显示了一些系统内存的例子属性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;表 2-4：系统内存的属性&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性&lt;/th&gt;
&lt;th&gt;值类型&lt;/th&gt;
&lt;th&gt;属性值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;system.memory.usage&lt;/td&gt;
&lt;td&gt;int64&lt;/td&gt;
&lt;td&gt;used, free, cached, other&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;system.memory.utilization&lt;/td&gt;
&lt;td&gt;double&lt;/td&gt;
&lt;td&gt;used, free, cached, other&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;与事件相关的指标统一的系统&#34;&gt;与事件相关的指标：统一的系统&lt;/h2&gt;
&lt;p&gt;传统上，我们认为指标是与日志完全分开的。但实际上它们是紧密相连的。例如，假设一个 API 有一个衡量每分钟错误数量的指标。那是一个统计数字。然而，每一个错误都是由一个特定的事务行为产生的，使用特定的资源。这些细节在我们每次递增该计数器时都会出现，我们想知道这些细节。&lt;/p&gt;
&lt;p&gt;当运维人员被提醒发现错误突然激增时，他们会想到的第一个问题自然是：&amp;ldquo;是什么导致了这个激增？&amp;rdquo; 看一下例子的追踪可以回答这个问题。在失败的事务中较早发生的事件（或未能发生的事件）可能是错误的来源。&lt;/p&gt;
&lt;p&gt;在 OpenTelemetry 中，当指标事件在跨度的范围内发生时，这些追踪的样本会自动与指标相关联，作为&lt;strong&gt;追踪的范例（trace examplar）&lt;/strong&gt;。这意味着不需要猜测或寻找日志。OpenTelemetry 明确地将追踪和度量联系在一起。一个建立在 OpenTelemetry 上的分析工具可以让你从仪表盘上直接看到追踪，只需一次点击。如果有一个模式 —— 例如，一个特定的属性值与导致一个特定错误的追踪密切相关 —— 这个模式可以被自动识别。&lt;/p&gt;
&lt;h2 id=&#34;自动分析和编织&#34;&gt;自动分析和编织&lt;/h2&gt;
&lt;p&gt;事件、资源、跨度、指标和追踪：这些都被 OpenTelemetry 连接在一个图中，并且它们都被发送到同一个数据库，作为一个整体进行分析。这就是下一代的可观测性工具。&lt;/p&gt;
&lt;p&gt;现代可观测性将建立在使用结构的数据上，这些结构允许分析工具在所有类型的事件和总量之间进行关联，这些关联将对我们如何实践可观测性产生深远影响。&lt;/p&gt;
&lt;p&gt;向全面观察我们的系统过渡将有许多好处。但我相信，这些新工具提供的主要省时功能将是各种形式的&lt;strong&gt;自动关联检测&lt;/strong&gt;。在寻找根本原因时，注意到相关关系可以产生大量的洞察力。如图 2-4 所示，相关性往往是产生根本原因假设的关键因素，然后可以进一步调查。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-2-4可能提供关键洞察力指向根本原因的关联实例&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f2-4.png&#34; alt=&#34;图 2-4：可能提供关键洞察力、指向根本原因的关联实例。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 2-4：可能提供关键洞察力、指向根本原因的关联实例。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;平均表现是什么样子的？异常值是什么样子的？哪些趋势在一起变化，它们的共同点是什么？相关性可能发生在许多地方：跨度中的属性之间、追踪中的跨度之间、追踪和资源之间、指标内部，以及所有这些地方都有。当所有这些数据被连接到一个图中时，这些相关性就可以被发现了。&lt;/p&gt;
&lt;p&gt;这就是为什么统一的数据编织是如此关键。任何自动匹配的分析的价值完全取决于被分析的数据的结构和质量。机器遍历数据的图表；它们不会进行逻辑的飞跃。准确的统计分析需要一个有意设计的遥测系统来支持它。&lt;/p&gt;
&lt;h2 id=&#34;重点自动分析为您节省时间&#34;&gt;重点：自动分析为您节省时间&lt;/h2&gt;
&lt;p&gt;为什么我们关心相关性分析的自动化？因为时间和复杂性对我们不利。随着系统规模的扩大，它们最终变得太复杂了，任何操作者都无法完全掌握系统的情况，而且在建立一个假设时，永远没有足够的时间来调查每一个可能的联系。&lt;/p&gt;
&lt;p&gt;问题是，选择调查什么需要直觉，而直觉往往需要对组成分布式系统的每个组件有深刻的了解。随着企业系统的增长和工程人员的相应增加，任何一个工程师对每个系统深入了解的部分自然会缩减到整个系统的一小部分。直觉并不能很好地扩展。&lt;/p&gt;
&lt;p&gt;直觉也极易被误导；问题经常出现在意想不到的地方。根据定义，可以预见的问题几乎不会经常发生。剩下的就是所有未曾预料到的问题了，这些问题已经超出了我们的直觉。&lt;/p&gt;
&lt;p&gt;这就是自动关联检测的作用。有了正确的数据，机器可以更有效地检测出相关的关联。这使得运维人员能够快速行动，反复测试各种假设，直到他们知道足够的信息来制定解决方案。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>什么是 Envoy？</title>
      <link>https://jimmysong.io/docs/cloud-native/service-mesh/what-is-envoy/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://jimmysong.io/docs/cloud-native/service-mesh/what-is-envoy/</guid>
      <description>&lt;p&gt;IT 行业正在向微服务架构和云原生解决方案发展。由于使用不同的技术开发了成百上千的微服务，这些系统可能变得复杂，难以调试。&lt;/p&gt;
&lt;p&gt;作为一个应用开发者，你考虑的是业务逻辑——购买产品或生成发票。然而，任何像这样的业务逻辑都会导致不同服务之间的多个服务调用。每个服务可能都有它的超时、重试逻辑和其他可能需要调整或微调的网络特定代码。&lt;/p&gt;
&lt;p&gt;如果在任何时候最初的请求失败了，就很难通过多个服务来追踪，准确地指出失败发生的地方，了解请求为什么失败。是网络不可靠吗？是否需要调整重试或超时？或者是业务逻辑问题或错误？&lt;/p&gt;
&lt;p&gt;服务可能使用不一致的跟踪和记录机制，使这种调试的复杂性增加。这些问题使你很难确定问题发生在哪里，以及如何解决。如果你是一个应用程序开发人员，而调试网络问题不属于你的核心技能，那就更是如此。&lt;/p&gt;
&lt;p&gt;将网络问题从应用程序堆栈中抽离出来，由另一个组件来处理网络部分，让调试网络问题变得更容易。这就是 Envoy 所做的事情。&lt;/p&gt;
&lt;p&gt;在每个服务实例旁边都有一个 Envoy 实例在运行。这种类型的部署也被称为 &lt;strong&gt;Sidecar 部署&lt;/strong&gt;。Envoy 的另一种模式是&lt;strong&gt;边缘代理&lt;/strong&gt;，用于构建 API 网关。&lt;/p&gt;
&lt;p&gt;Envoy 和应用程序形成一个原子实体，但仍然是独立的进程。应用程序处理业务逻辑，而 Envoy 则处理网络问题。&lt;/p&gt;
&lt;p&gt;在发生故障的情况下，分离关注点可以更容易确定故障是来自应用程序还是网络。&lt;/p&gt;
&lt;p&gt;为了帮助网络调试，Envoy 提供了以下高级功能。&lt;/p&gt;
&lt;h2 id=&#34;进程外架构&#34;&gt;进程外架构&lt;/h2&gt;
&lt;p&gt;Envoy 是一个独立的进程，旨在与每个应用程序一起运行 —— 也就是我们前面提到的 Sidecar 部署模式。集中配置的 Envoy 的集合形成了一个透明的服务网格。&lt;/p&gt;
&lt;p&gt;路由和其他网络功能的责任被推给了 Envoy。应用程序向一个虚拟地址（localhost）而不是真实地址（如公共 IP 地址或主机名）发送请求，不知道网络拓扑结构。应用程序不再承担路由的责任，因为该任务被委托给一个外部进程。&lt;/p&gt;
&lt;p&gt;与其让应用程序管理其网络配置，不如在 Envoy 层面上独立于应用程序管理网络配置。在一个组织中，这可以使应用程序开发人员解放出来，专注于应用程序的业务逻辑。&lt;/p&gt;
&lt;p&gt;Envoy 适用于任何编程语言。你可以用 Go、Java、C++ 或其他任何语言编写你的应用程序，而 Envoy 可以在它们之间架起桥梁。Envoy 的行为是相同的，无论应用程序的编程语言或它们运行的操作系统是什么。&lt;/p&gt;
&lt;p&gt;Envoy 还可以在整个基础设施中透明地进行部署和升级。这与为每个单独的应用程序部署库升级相比，后者可能是非常痛苦和耗时的。&lt;/p&gt;
&lt;p&gt;进程外架构是有益的，因为它使我们在不同的编程语言 / 应用堆栈中保持一致，我们可以免费获得独立的应用生命周期和所有的 Envoy 网络功能，而不必在每个应用中单独解决这些问题。&lt;/p&gt;
&lt;h2 id=&#34;l3l4-过滤器结构&#34;&gt;L3/L4 过滤器结构&lt;/h2&gt;
&lt;p&gt;Envoy 是一个 L3/L4 网络代理，根据 IP 地址和 TCP 或 UDP 端口进行决策。它具有一个可插拔的过滤器链，可以编写你的过滤器来执行不同的 TCP/UDP 任务。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;过滤器链（Filter Chain）&lt;/strong&gt; 的想法借鉴了 Linux shell，即一个操作的输出被输送到另一个操作中。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ls -l &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep &lt;span class=&#34;s2&#34;&gt;&amp;#34;Envoy*.cc&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; wc -l
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Envoy 可以通过堆叠所需的过滤器来构建逻辑和行为，形成一个过滤器链。许多过滤器已经存在，并支持诸如原始 TCP 代理、UDP 代理、HTTP 代理、TLS 客户端认证等任务。Envoy 也是可扩展的，我们可以编写我们的过滤器。&lt;/p&gt;
&lt;h2 id=&#34;l7-过滤器结构&#34;&gt;L7 过滤器结构&lt;/h2&gt;
&lt;p&gt;Envoy 支持一个额外的 HTTP L7 过滤器层。我们可以在 HTTP 连接管理子系统中插入 HTTP 过滤器，执行不同的任务，如缓冲、速率限制、路由 / 转发等。&lt;/p&gt;
&lt;h2 id=&#34;一流的-http2-支持&#34;&gt;一流的 HTTP/2 支持&lt;/h2&gt;
&lt;p&gt;Envoy 同时支持 HTTP/1.1 和 HTTP/2，并且可以作为一个透明的 HTTP/1.1 到 HTTP/2 的双向代理进行操作。这意味着任何 HTTP/1.1 和 HTTP/2 客户端和目标服务器的组合都可以被桥接起来。即使你的传统应用没有通过 HTTP/2 进行通信，如果你把它们部署在 Envoy 代理旁边，它们最终也会通过 HTTP/2 进行通信。&lt;/p&gt;
&lt;p&gt;推荐在所有的服务间配置的 Envoy 使用 HTTP/2，以创建一个持久连接的网格，请求和响应可以在上面复用。&lt;/p&gt;
&lt;h2 id=&#34;http-路由&#34;&gt;HTTP 路由&lt;/h2&gt;
&lt;p&gt;当以 HTTP 模式操作并使用 REST 时，Envoy 支持路由子系统，能够根据路径、权限、内容类型和运行时间值来路由和重定向请求。在将 Envoy 作为构建 API 网关的前台 / 边缘代理时，这一功能非常有用，在构建服务网格（sidecar 部署模式）时，也可以利用这一功能。&lt;/p&gt;
&lt;h2 id=&#34;grpc-准备就绪&#34;&gt;gRPC 准备就绪&lt;/h2&gt;
&lt;p&gt;Envoy 支持作为 gRPC 请求和响应的路由和负载均衡底层所需的所有 HTTP/2 功能。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;gRPC 是一个开源的远程过程调用（RPC）系统，它使用 HTTP/2 进行传输，并将协议缓冲区作为接口描述语言（IDL），它提供的功能包括认证、双向流和流量控制、阻塞 / 非阻塞绑定，以及取消和超时。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;服务发现和动态配置&#34;&gt;服务发现和动态配置&lt;/h2&gt;
&lt;p&gt;我们可以使用静态配置文件来配置 Envoy，这些文件描述了服务间通信方式。&lt;/p&gt;
&lt;p&gt;对于静态配置 Envoy 不现实的高级场景，Envoy 支持动态配置，在运行时自动重新加载配置。一组名为 xDS 的发现服务可以用来通过网络动态配置 Envoy，并为 Envoy 提供关于主机、集群 HTTP 路由、监听套接字和加密信息。&lt;/p&gt;
&lt;h2 id=&#34;健康检查&#34;&gt;健康检查&lt;/h2&gt;
&lt;p&gt;负载均衡器有一个特点，那就是只将流量路由到健康和可用的上游服务。Envoy 支持健康检查子系统，对上游服务集群进行主动健康检查。然后，Envoy 使用服务发现和健康检查信息的组合来确定健康的负载均衡目标。Envoy 还可以通过异常点检测子系统支持被动健康检查。&lt;/p&gt;
&lt;h2 id=&#34;高级负载均衡&#34;&gt;高级负载均衡&lt;/h2&gt;
&lt;p&gt;Envoy 支持自动重试、断路、全局速率限制（使用外部速率限制服务）、影子请求（或流量镜像）、异常点检测和请求对冲。&lt;/p&gt;
&lt;h2 id=&#34;前端--边缘代理支持&#34;&gt;前端 / 边缘代理支持&lt;/h2&gt;
&lt;p&gt;Envoy 的特点使其非常适合作为边缘代理运行。这些功能包括 TLS 终端、HTTP/1.1、HTTP/2 和 HTTP/3 支持，以及 HTTP L7 路由。&lt;/p&gt;
&lt;h2 id=&#34;tls-终止&#34;&gt;TLS 终止&lt;/h2&gt;
&lt;p&gt;应用程序和代理的解耦使网格部署模型中所有服务之间的 TLS 终止（双向 TLS）成为可能。&lt;/p&gt;
&lt;h2 id=&#34;一流的可观察性&#34;&gt;一流的可观察性&lt;/h2&gt;
&lt;p&gt;为了便于观察，Envoy 会生成日志、指标和追踪。Envoy 目前支持 statsd（和兼容的提供者）作为所有子系统的统计。得益于可扩展性，我们也可以在需要时插入不同的统计提供商。&lt;/p&gt;
&lt;h2 id=&#34;http3alpha&#34;&gt;HTTP/3（Alpha）&lt;/h2&gt;
&lt;p&gt;Envoy 1.19.0 支持 HTTP/3 的上行和下行，并在 HTTP/1.1、HTTP/2 和 HTTP/3 之间进行双向转义。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>服务网格的部署模式</title>
      <link>https://jimmysong.io/docs/cloud-native/service-mesh/service-mesh-patterns/</link>
      <pubDate>Tue, 03 May 2022 00:00:00 +0800</pubDate>
      <guid>https://jimmysong.io/docs/cloud-native/service-mesh/service-mesh-patterns/</guid>
      <description>&lt;p&gt;我们在前面看到了通过&lt;strong&gt;客户端库&lt;/strong&gt;来治理服务的架构图，那是我们在改造成服务网格架构前使用微服务架构通常的形式，下图是使用服务网格架构的最终形式。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-服务网格架构示意图&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jimmysong.io/istio-handbook/images/006tNbRwly1fubs6ts3sgj30vo0osdnj.jpg&#34; alt=&#34;服务网格架构示意图&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      服务网格架构示意图
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;当然在达到这一最终形态之前我们需要将架构一步步演进，下面给出的是参考的演进路线。&lt;/p&gt;
&lt;h2 id=&#34;ingress-或边缘代理&#34;&gt;Ingress 或边缘代理&lt;/h2&gt;
&lt;p&gt;如果你使用的是 Kubernetes 做容器编排调度，那么在进化到服务网格架构之前，通常会使用 Ingress Controller，做集群内外流量的反向代理，如使用 Traefik 或 Nginx Ingress Controller。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-ingress-或边缘代理架构示意图&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jimmysong.io/istio-handbook/images/006tNbRwly1fubsk4v16hj30vo0bq75z.jpg&#34; alt=&#34;Ingress 或边缘代理架构示意图&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Ingress 或边缘代理架构示意图
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;这样只要利用 Kubernetes 的原有能力，当你的应用微服务化并容器化需要开放外部访问且只需要 L7 代理的话这种改造十分简单，但问题是无法管理服务间流量。&lt;/p&gt;
&lt;h2 id=&#34;路由器网格&#34;&gt;路由器网格&lt;/h2&gt;
&lt;p&gt;Ingress 或者边缘代理可以处理进出集群的流量，为了应对集群内的服务间流量管理，我们可以在集群内加一个 &lt;code&gt;Router&lt;/code&gt; 层，即路由器层，让集群内所有服务间的流量都通过该路由器。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-路由器网格架构示意图&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jimmysong.io/istio-handbook/images/006tNbRwly1fubsxrph3dj30vq0duq53.jpg&#34; alt=&#34;路由器网格架构示意图&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      路由器网格架构示意图
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;这个架构无需对原有的单体应用和新的微服务应用做什么改造，可以很轻易的迁移进来，但是当服务多了管理起来就很麻烦。&lt;/p&gt;
&lt;h2 id=&#34;proxy-per-node&#34;&gt;Proxy per Node&lt;/h2&gt;
&lt;p&gt;这种架构是在每个节点上都部署一个代理，如果使用 Kubernetes 来部署的话就是使用 &lt;code&gt;DaemonSet&lt;/code&gt; 对象，Linkerd 第一代就是使用这种方式部署的，一代的 Linkerd 使用 Scala 开发，基于 JVM 比较消耗资源，二代的 Linkerd 使用 Go 开发。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-proxy-per-node-架构示意图&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jimmysong.io/istio-handbook/images/006tNbRwly1fubt5a97h7j30vq0bcq5p.jpg&#34; alt=&#34;Proxy per node 架构示意图&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Proxy per node 架构示意图
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;这种架构有个好处是每个节点只需要部署一个代理即可，比起在每个应用中都注入一个 sidecar 的方式更节省资源，而且更适合基于物理机 / 虚拟机的大型单体应用，但是也有一些副作用，比如粒度还是不够细，如果一个节点出问题，该节点上的所有服务就都会无法访问，对于服务来说不是完全透明的。&lt;/p&gt;
&lt;h2 id=&#34;sidecar-代理--fabric-模型&#34;&gt;Sidecar 代理 / Fabric 模型&lt;/h2&gt;
&lt;p&gt;这个一般不会成为典型部署类型，当企业的服务网格架构演进到这一步时通常只会持续很短时间，然后就会增加控制平面。跟前几个阶段最大的不同就是，应用程序和代理被放在了同一个部署单元里，可以对应用程序的流量做更细粒度的控制。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-sidecar代理fabric模型示意图&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jimmysong.io/istio-handbook/images/006tNbRwly1fubvi0dnhlj30vo0ekwhx.jpg&#34; alt=&#34;Sidecar代理/Fabric模型示意图&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Sidecar代理/Fabric模型示意图
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;这已经是最接近服务网格架构的一种形态了，唯一缺的就是控制平面了。所有的 sidecar 都支持热加载，配置的变更可以很容易的在流量控制中反应出来，但是如何操作这么多 sidecar 就需要一个统一的控制平面了。&lt;/p&gt;
&lt;h2 id=&#34;sidecar-代理--控制平面&#34;&gt;Sidecar 代理 / 控制平面&lt;/h2&gt;
&lt;p&gt;下面的示意图是目前大多数服务网格的架构图，也可以说是整个服务网格架构演进的最终形态。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-sidecar-代理控制平面架构示意图&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jimmysong.io/istio-handbook/images/006tNbRwly1fubvr83wvgj30vq0mmdip.jpg&#34; alt=&#34;Sidecar 代理/控制平面架构示意图&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Sidecar 代理/控制平面架构示意图
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;这种架构将代理作为整个服务网格中的一部分，使用 Kubernetes 部署的话，可以通过以 sidecar 的形式注入，减轻了部署的负担，可以对每个服务的做细粒度权限与流量控制。但有一点不好就是为每个服务都注入一个代理会占用很多资源，因此要想方设法降低每个代理的资源消耗。&lt;/p&gt;
&lt;h2 id=&#34;多集群部署和扩展&#34;&gt;多集群部署和扩展&lt;/h2&gt;
&lt;p&gt;以上都是单个服务网格集群的架构，所有的服务都位于同一个集群中，服务网格管理进出集群和集群内部的流量，当我们需要管理多个集群或者是引入外部的服务时就需要网格扩展和多集群配置。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>第 3 章：自动分析的局限性</title>
      <link>https://jimmysong.io/docs/opentelemetry-obervability/the-limitations-of-automated-analysis/</link>
      <pubDate>Sat, 05 Feb 2022 00:00:00 +0800</pubDate>
      <guid>https://jimmysong.io/docs/opentelemetry-obervability/the-limitations-of-automated-analysis/</guid>
      <description>&lt;p&gt;自动化开始听起来很神奇，但我们要面对现实：计算机分析不能每天告诉你系统有什么问题或为你修复它。它只能为你节省时间。&lt;/p&gt;
&lt;p&gt;至此，我想停止夸赞，我必须承认自动化的一些局限性。我这样做是因为围绕结合人工智能和可观测性会有相当多的炒作。这种炒作导致了惊人的论断，大意是：&amp;ldquo;人工智能异常检测和根源分析可以完全诊断问题！&amp;rdquo; 和 &amp;ldquo;人工智能操作将完全管理你的系统！&amp;rdquo;&lt;/p&gt;
&lt;h2 id=&#34;谨防炒作&#34;&gt;谨防炒作&lt;/h2&gt;
&lt;p&gt;为了摆脱此类炒作，我想明确的是，这类梦幻般的营销主张&lt;strong&gt;并不是&lt;/strong&gt;我所宣称的现代可观测性将提供的。事实上，我预测许多与人工智能问题解决有关的主张大多是夸大其词。&lt;/p&gt;
&lt;p&gt;为什么人工智能不能解决我们的问题？一般来说，机器无法识别软件中的 &amp;ldquo;问题&amp;rdquo;，因为定义什么是 &amp;ldquo;问题&amp;rdquo; 需要一种主观的分析方式。而我们所讨论的那种现实世界的人工智能不能以任何程度的准确性进行主观决策。机器将始终缺乏足够的背景。&lt;/p&gt;
&lt;p&gt;例如，我们说该版本降低了性能，这里面也隐含了一个期望，就是这个版本包含了每个用户都期望的新功能。对于这个版本，性能退步是一个特征，而不是一个错误。&lt;/p&gt;
&lt;p&gt;虽然它们可能看起来像类似的活动，但在&lt;strong&gt;确定相关关系&lt;/strong&gt;和&lt;strong&gt;确定根本原因&lt;/strong&gt;之间存在着巨大的鸿沟。当你有正确的数据结构时，相关性是一种&lt;strong&gt;客观的分析&lt;/strong&gt; —— 你只需要计算数字。哪些相关关系是相关的，并表明真正问题的来源，总是需要&lt;strong&gt;主观的分析&lt;/strong&gt;，对数据的解释。所有这些相关关系意味着什么？正如杰弗里・李波斯基（Jeffrey Lebowski）所说：&amp;ldquo;嗯，你知道，这只是你的观点，伙计。&amp;rdquo;&lt;/p&gt;
&lt;h2 id=&#34;神奇的-aiops&#34;&gt;神奇的 AIOps&lt;/h2&gt;
&lt;p&gt;在调查一个系统时，有两种类型的分析起作用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客观的分析，基于事实的、可衡量的、可观测的。&lt;/li&gt;
&lt;li&gt;主观分析，基于解释、观点和判断的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这种二分法 —— 客观与主观，与可计算性理论中一个重要的问题有关，即 &lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Halting_problem&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;停机问题（halting problem）&lt;/a&gt;&lt;/strong&gt;。停机问题的定义是，在给定任意计算机程序及其输入的描述的情况下，是否可以编写一个计算机程序来确定任意程序是否会结束运行或永远继续运行。简而言之，在 1936 年，艾伦・图灵（Alan Turning）证明了解决停机问题的一般算法是不存在的，这个证明的延伸可以应用于计算机软件中许多形式的识别 &amp;ldquo;问题&amp;rdquo;。&lt;/p&gt;
&lt;p&gt;阿兰・图灵的意思是，我们没有办法拥有神奇的 AIOps（IT 运维的人工智能）。寻找那些承诺将繁琐的客观分析自动化的工具 —— 计算数字是机器的强项！但要小心那些声称能找到问题根源并自动修复的工具。它们很可能会让你失望。&lt;/p&gt;
&lt;p&gt;这就是为什么我们可以确定相关关系，但不能确定因果关系：想象一下，有一台机器可以确定任意计算机程序中的问题行为是什么，并确定该行为的根本原因。如果我们真的造出了这样一台机器，那就是开香槟的时候了，因为这意味着我们终于解决了停机问题！但是，目前还没有迹象表明，机器可以解决这个问题。然而，没有迹象表明机器学习已经超越了艾伦・图灵的统一计算模型；你可以相信，这不会发生。&lt;/p&gt;
&lt;p&gt;做出正确的决定和修复的工作还是要靠你自己。&lt;/p&gt;
&lt;h2 id=&#34;时间是最宝贵的资源&#34;&gt;时间是最宝贵的资源&lt;/h2&gt;
&lt;p&gt;然而，我们不需要神奇的 AIOps 来看到我们工作流程的巨大改善。识别相关性，同时获取相关信息，以便你能有效地浏览这些信息，这是计算机&lt;strong&gt;绝对可以&lt;/strong&gt;做到的事情！这将为你节省时间。大量的时间。这么多的时间，它将从根本上改变你调查系统的方式。&lt;/p&gt;
&lt;p&gt;减少浪费的时间是实践现代可观测性的核心。即使是在简单的系统中，通过分析数字来识别相关性也是很困难的，而在大规模的系统中，这几乎是不可能的。通过将认知负担转移到机器上，运维人员能够有效地管理那些已经超出人类头脑所能容纳的系统。&lt;/p&gt;
&lt;p&gt;但是，我们分析遥测方式的这种转变并不是可观测性世界中即将发生的唯一重大变化。我们需要的大部分遥测数据来自于我们没有编写的软件：我们所依赖的开源库、数据库和管理服务。这些系统在传统上一直在为产生遥测数据而奋斗。我们可以获得哪些数据，以及这些数据来自哪里，也将发生根本性的变化。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>第 4 章：支持开源和原生监测</title>
      <link>https://jimmysong.io/docs/opentelemetry-obervability/supporting-open-source-and-native-instrumentation/</link>
      <pubDate>Sat, 05 Feb 2022 00:00:00 +0800</pubDate>
      <guid>https://jimmysong.io/docs/opentelemetry-obervability/supporting-open-source-and-native-instrumentation/</guid>
      <description>&lt;p&gt;到目前为止，我们已经从数据的角度讨论了现代可观测性。但是，现代可观测性还有另一个方面，从长远来看，它可能被证明同样重要：如何对待产生数据的仪表（instrumention）。&lt;/p&gt;
&lt;p&gt;大多数软件系统都是用现成的部件构建的：网络框架、数据库、HTTP 客户端、代理服务器、编程语言。在大多数组织中，很少有这种软件基础设施是在内部编写的。相反，这些组件是在许多组织中共享的。最常见的是，这些共享组件是以开放源码（OSS）库的形式出现的，并具有许可权。&lt;/p&gt;
&lt;p&gt;由于这些开放源码软件库几乎囊括了一般系统中的所有关键功能，因此获得这些库的高质量说明对大多数可观测性系统来说至关重要。&lt;/p&gt;
&lt;p&gt;传统上，仪表是 &amp;ldquo;单独出售&amp;rdquo; 的。这意味着，软件库不包括产生追踪、日志或度量的仪表。相反，特定解决方案的仪表是在事后添加的，作为部署可观测系统的一部分。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;什么是特定解决方案仪表？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在本章中，术语 &amp;ldquo;&lt;strong&gt;特定解决方案仪表&lt;/strong&gt;&amp;rdquo; 是指任何旨在与特定的可观测系统一起工作的仪表，使用的是作为该特定系统的数据存储系统的产物而开发的客户端。在这些系统中，客户端和存储系统常常深深地融合在一起。因此，如果一个应用要从一个观测系统切换到另一个观测系统，通常需要进行全面的重新布设。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;针对解决方案的仪表是 &amp;ldquo;三大支柱&amp;rdquo; 中固有的垂直整合的遗留问题。每个后端都摄取特定类型的专有数据；因此，这些后端的创建者也必须提供产生这些数据的仪表。&lt;/p&gt;
&lt;p&gt;这种工具化的方法给参与软件开发的每个人都带来了麻烦：供应商、用户和开放源码库的作者。&lt;/p&gt;
&lt;h2 id=&#34;可观测性被淹没在特定解决方案的仪表中&#34;&gt;可观测性被淹没在特定解决方案的仪表中&lt;/h2&gt;
&lt;p&gt;从可观测性系统的角度来看，仪表化代表了巨大的开销。&lt;/p&gt;
&lt;p&gt;在过去，互联网应用是相当同质化的，可以围绕一个特定的网络框架来建立可观测性系统。Java Spring、Ruby on Rails 或 .NET。但随着时间的推移，软件的多样性已经爆炸性增长。现在为每一个流行的网络框架和数据库客户端维护仪表是一项巨大的负担。&lt;/p&gt;
&lt;p&gt;这导致的重复劳动难以估量。传统上，供应商将他们在仪表上的投资作为销售点和把关的一种形式。但是，日益增长的软件开发速度已经开始使这种做法无法维持了。对于一个合理规模的仪表设备团队来说，覆盖面实在是太大了，无法跟上。&lt;/p&gt;
&lt;p&gt;这种负担对于新的、新颖的观测系统，特别是开放源码软件的观测项目来说尤其严峻。如果一个新的系统在编写了大量的仪表之前无法在生产中部署，而一个开放源码软件项目在广泛部署之前也无法吸引开发者的兴趣，那么科学进步就会陷入僵局。这对于基于追踪的系统来说尤其如此，它需要端到端的仪表来提供最大的价值。&lt;/p&gt;
&lt;h2 id=&#34;应用程序被锁定在特定解决方案的仪表中&#34;&gt;应用程序被锁定在特定解决方案的仪表中&lt;/h2&gt;
&lt;p&gt;从应用开发者的角度来看，特定解决方案的仪表代表了一种有害的锁定形式。&lt;/p&gt;
&lt;p&gt;可观测性是一个交叉性的问题。要彻底追踪、记录或度量一个大型的应用程序，意味着成千上万的仪表 API 调用将遍布整个代码库。改变可观测性系统需要把所有这些工具去掉，用新系统提供的不同工具来代替。&lt;/p&gt;
&lt;p&gt;替换仪表是一项重大的前期投资，即使只是为了尝试一个新的系统。更糟的是，大多数系统都太大了以致于在所有服务中同时更换所有仪表是不可行的。大多数系统需要逐步推出新的仪表设备，但这样的上线可能很难设计。&lt;/p&gt;
&lt;p&gt;被特定解决方案的仪表所 &amp;ldquo;困住&amp;rdquo; 是非常令人沮丧的。在可观测性供应商开始努力提供自己的仪表的同时，用户也开始拒绝采用这种仪表。由于了解到重新安装仪表的工作量，许多用户强烈希望他们正在考虑的任何新的观测系统能与他们目前使用的仪表一起工作。&lt;/p&gt;
&lt;p&gt;为了支持这一要求，许多可观测性系统试图与其他几个系统提供的仪表一起工作。但这种拼凑的方式降低了每个系统所摄取的数据的质量。从许多来源摄取数据意味着对输入的数据不再有明确的定义，当预期的数据不均衡且定义模糊时，分析工具就很难完成它们的工作。&lt;/p&gt;
&lt;h2 id=&#34;针对开源软件的特定解决方案的仪表基本上是不可能的&#34;&gt;针对开源软件的特定解决方案的仪表基本上是不可能的&lt;/h2&gt;
&lt;p&gt;从一个开放源码库作者的角度来看，特定解决方案的仪表化是一个悲剧。&lt;/p&gt;
&lt;p&gt;来自开放源码软件库的遥测数据对于操作建立在它们之上的应用程序来说至关重要。最了解哪些数据对操作至关重要的人，以及操作者应该如何利用这些数据来补救问题的人，就是实际编写软件的开源库的开发者。&lt;/p&gt;
&lt;p&gt;但是，库的作者却陷入了困境。正如我们将看到的，没有任何一个特定解决方案的仪表化 API，无论写得多么好，都无法作为开放源码库可以接受的选择。&lt;/p&gt;
&lt;h2 id=&#34;如何挑选一个日志库&#34;&gt;如何挑选一个日志库？&lt;/h2&gt;
&lt;p&gt;假设你正在编写世界上最伟大的开源网络框架。在生产过程中，很多事情都会出错，你自然希望把错误、调试和性能信息传达给你的用户。你使用哪个日志库？&lt;/p&gt;
&lt;p&gt;有很多体面的日志库。事实上，有很多，无论你选择哪个库，你都会有很多用户希望你选择一个不同的库。如果你的 Web 框架选择了一个日志库，而数据库客户端库选择了另一个，怎么办？如果这两个都不是用户想要使用的呢？如果他们选择了同一个库的不兼容的版本呢？&lt;/p&gt;
&lt;p&gt;没有一个完美的方法可以将多个特定解决方案的日志库组合成一个连贯的系统。虽然日志足够简单，不同解决方案的大杂烩可能是可行的，但对于特定解决方案的指标和追踪来说，情况并非如此。&lt;/p&gt;
&lt;p&gt;因此，开放源码软件库通常没有内置的日志、度量或追踪功能。取而代之的是，库提供了 &amp;ldquo;可观测性钩子&amp;rdquo;，这需要用户编写和维护一堆适配器，将使用的库连接到他们的可观测性系统上。&lt;/p&gt;
&lt;p&gt;作者们有大量的知识，他们想通信关于他们的系统应该如何运行的知识，但他们没有明确的方法去做。如果你问任何写过大量开源软件的人，他们会告诉你。这种情况是痛苦的！而且是不幸的！一些库的作者&lt;strong&gt;确实&lt;/strong&gt;试图选择一个日志库，但却发现他们无意中为一些用户造成了版本冲突，同时迫使其他用户编写日志适配器来捕捉使用其&lt;strong&gt;实际&lt;/strong&gt;日志库的数据。&lt;/p&gt;
&lt;p&gt;但是对于大多数库来说，可观测性只是一个事后的想法。虽然库的作者经常编写大量的测试套件，但他们很少花时间去考虑运行时的可观测性。考虑到库有大量的测试工具，但可观测性工具为零，这种结果并不令人惊讶。&lt;/p&gt;
&lt;p&gt;正如我们在接下来的几章中所看到的，现代可观测性的设计是为了使在可观测性管道中发挥作用的每个人的代理权最大化。但受益最大的是库的作者；对于特定解决方案的仪表，他们目前根本没有选择。&lt;/p&gt;
&lt;h2 id=&#34;分解问题&#34;&gt;分解问题&lt;/h2&gt;
&lt;p&gt;我们可以通过设计一个可观测性系统来解决上面列出的所有问题，以明确地解决每个人的需求。在本章的其余部分，我们将把现代观测系统的设计分解为基本要求。这些要求将为第五章中描述的 OpenTelemetry 的结构提供动力。&lt;/p&gt;
&lt;h2 id=&#34;要求独立的仪表遥测和分析&#34;&gt;要求：独立的仪表、遥测和分析&lt;/h2&gt;
&lt;p&gt;归根结底，计算机系统实际上就是人类系统。像可观测性这样的跨领域问题，几乎与每一个软件组件都有互动。同时，传输和处理遥测数据可能是一个大批量的活动，以至于一个大规模的观测系统会产生自己的操作问题。这意味着，许多不同的人，以不同的身份，需要与观测系统的不同方面交互。为了很好地服务于他们，这个系统必须确保每个参与其中的人都有他们所需要的代理权，以便快速和独立地执行任务。提供代理权是设计一个有效的观测系统的基本要求。&lt;/p&gt;
&lt;p&gt;让我们首先确定与运行中的软件系统有关的每个角色的责任：库的作者、应用程序的所有者、操作者和响应者。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;库的作者了解他们软件的情况&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于封装了关键功能的软件库，如网络和请求管理，库的作者也必须管理追踪系统的各个方面：注入、提取和上下文传播。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;应用程序拥有者组织软件并管理依赖关系&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;应用程序所有者选择构成其应用程序的组件，并确保它们编译成一个连贯的、有功能的系统。应用程序所有者还编写应用程序级别的工具，它必须与库作者提供的指令（和上下文传播）进行正确的交互。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;运维人员管理遥测的生产和传输&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;运维管理从应用到响应者的可观测性数据的传输。他们必须能够选择数据的格式以及数据的发送地点。当数据在产生时，他们必须操作传输系统：管理缓冲、处理和传送数据所需的所有资源。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;响应者消费遥测数据并产生有用的见解&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;要做到这一点，应对者必须了解数据结构及其内在意义（结构和意义将在第三章中详细描述）。当新的和改进的分析工具出现时，反应者还需要将其添加到他们的工具箱中。&lt;/p&gt;
&lt;p&gt;这些角色代表不同的决策点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;库的作者只能通过发布其代码的新版本来进行修改。&lt;/li&gt;
&lt;li&gt;应用程序所有者只能通过部署其可执行文件的新版本来进行更改。&lt;/li&gt;
&lt;li&gt;运维人员只能通过管理可执行文件的拓扑结构和配置来进行改变。&lt;/li&gt;
&lt;li&gt;响应者只能根据他们收到的数据做出改变。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;传统的三大支柱方法扰乱了所有这些角色。垂直整合的一个副作用是，几乎所有的数据变化都需要进行代码修改。几乎任何对可观测性系统的非微不足道的改变都需要应用程序所有者进行代码修改。要求其他人进行你所关心的改变，这样会有很大的阻力，并可能导致压力、冲突和不作为。&lt;/p&gt;
&lt;p&gt;显然，一个设计良好的可观测性系统应该侧重于允许每个人尽可能多的代理和直接控制，它应该避免将开发者变成意外的看门人。&lt;/p&gt;
&lt;h2 id=&#34;要求零依赖性&#34;&gt;要求：零依赖性&lt;/h2&gt;
&lt;p&gt;应用程序是由依赖关系（网络框架、数据库客户端），加上依赖关系的依赖关系（OpenTelemetry 或其他仪表库），加上它们的依赖关系的依赖关系的依赖关系（无论这些仪表库依赖什么）组成。这些都被称为反式的依赖关系。&lt;/p&gt;
&lt;p&gt;如果任何两个依赖关系之间有冲突，应用程序就无法运行。例如，两个库可能分别需要一个不同的（不兼容的）底层网络库的版本，如 gRPC。这可能会导致一些不好的情况。例如，一个新版本的库可能包括一个需要的安全补丁，但也包括一个升级的依赖关系，这就产生了依赖关系冲突。&lt;/p&gt;
&lt;p&gt;诸如此类的过渡性依赖冲突给应用程序所有者带来了很大的麻烦，因为这些冲突无法独立解决。相反，应用程序所有者必须联系库的作者，要求他们提供一个解决方案，这最终需要时间（假设库的作者回应了这个请求）。&lt;/p&gt;
&lt;p&gt;为了使现代可观测性发挥作用，库必须能够嵌入仪表，而不必担心当他们的库被用于组成应用程序时而导致问题。因此，可观测性系统必须提供不包含可能无意中引发横向依赖冲突的依赖性的仪表。&lt;/p&gt;
&lt;h2 id=&#34;要求严格的后向兼容和长期支持&#34;&gt;要求：严格的后向兼容和长期支持&lt;/h2&gt;
&lt;p&gt;当一个仪表化的 API 破坏了向后的兼容性，坏事就会发生。一个精心设计的应用程序最终可能会有成千上万的仪表调用站点。由于 API 的改变而不得不更新数以千计的调用站点是一个相当大的工作量。&lt;/p&gt;
&lt;p&gt;这就产生了一种特别糟糕的依赖性冲突，即一个库中的仪表化不再与另一个库中的仪表化兼容。&lt;/p&gt;
&lt;p&gt;因此，仪表化 API 必须在很长的时间范围内具有严格的向后兼容能力。理想的情况是，仪表化 API 一旦变得稳定，就永远不会破坏向后兼容。新的、实验性的 API 功能的开发方式必须保证它们的存在不会在包含稳定仪表的库之间产生冲突。&lt;/p&gt;
&lt;h2 id=&#34;分离关注点是良好设计的基础&#34;&gt;分离关注点是良好设计的基础&lt;/h2&gt;
&lt;p&gt;在下一章中，我们将深入研究 OpenTelemetry 的架构，看看它是如何满足上面提出的要求的。但在这之前，我想说的是一个重要的问题。&lt;/p&gt;
&lt;p&gt;如果你分析这些需求，你可能会注意到一些奇特的现象：它们中几乎没有任何专门针对可观测性的内容。相反，重点是尽量减少依赖性，保持向后的兼容性，并确保不同的用户可以在没有无谓干扰的情况下发挥作用。&lt;/p&gt;
&lt;p&gt;每一个要求都指出了关注点分离是一个关键的设计特征。但是这些特性并不是 OpenTelemetry 所独有的。任何寻求广泛采用的软件库都会很好地包括它们。在这个意义上，OpenTelemetry 的设计也可以作为设计一般的开源软件的指南。下次当你开始一个新的开放源码软件项目时，请预先考虑这些要求，相应地设计你的库及你的用户会感谢你的。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Envoy 的构建模块</title>
      <link>https://jimmysong.io/docs/cloud-native/service-mesh/envoy-building-blocks/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://jimmysong.io/docs/cloud-native/service-mesh/envoy-building-blocks/</guid>
      <description>&lt;p&gt;在这一节中，我们将解释 Envoy 的基本构建模块。&lt;/p&gt;
&lt;p&gt;Envoy 配置的根被称为引导配置。它包含了一些字段，我们可以在这里提供静态或动态的资源和高级别的 Envoy 配置（例如，Envoy 实例名称、运行时配置、启用管理界面等等）。&lt;/p&gt;
&lt;p&gt;为了开始学习，我们将主要关注静态资源，在课程的后面，我们将介绍如何配置动态资源。&lt;/p&gt;
&lt;p&gt;Envoy 输出许多统计数据，这取决于启用的组件和它们的配置。我们会在整个课程中提到不同的统计信息，在课程后面的专门模块中，我们会更多地讨论统计信息。&lt;/p&gt;
&lt;p&gt;下图显示了通过这些概念的请求流。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-envoy-构建块&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jimmysong.io/envoy-handbook/images/008i3skNly1gz9kd0lwv0j31hc0u0my9.jpg&#34; alt=&#34;Envoy 构建块&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Envoy 构建块
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;这一切都从监听器开始。Envoy 暴露的监听器是命名的网络位置，可以是一个 IP 地址和一个端口，也可以是一个 Unix 域套接字路径。Envoy 通过监听器接收连接和请求。考虑一下下面的 Envoy 配置。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;static_resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;listeners&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;listener_0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;socket_address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0.0.0.0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;filter_chains&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;{}&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过上面的 Envoy 配置，我们在  0.0.0.0 地址的 10000 端口上声明了一个名为 listener_0 的监听器。这意味着 Envoy 正在监听 0.0.0.0:10000 的传入请求。&lt;/p&gt;
&lt;p&gt;每个监听器都有不同的部分需要配置。然而，唯一需要的设置是地址。上述配置是有效的，你可以用它来运行 Envoy—— 尽管它没有用，因为所有的连接都会被关闭。&lt;/p&gt;
&lt;p&gt;我们让 filter_chains 字段为空，因为在接收数据包后不需要额外的操作。&lt;/p&gt;
&lt;p&gt;为了进入下一个构件（路由），我们需要创建一个或多个网络过滤器链（filter_chains），至少要有一个过滤器。&lt;/p&gt;
&lt;p&gt;网络过滤器通常对数据包的有效载荷进行操作，查看有效载荷并对其进行解析。例如，Postgres 网络过滤器解析数据包的主体，检查数据库操作的种类或其携带的结果。&lt;/p&gt;
&lt;p&gt;Envoy 定义了三类过滤器：监听器过滤器、网络过滤器和 HTTP 过滤器。监听器过滤器在收到数据包后立即启动，通常对数据包的头信息进行操作。监听器过滤器包括代理监听器过滤器（提取 PROXY 协议头），或 TLS 检查器监听器过滤器（检查流量是否为 TLS，如果是，则从 TLS 握手中提取数据）。&lt;/p&gt;
&lt;p&gt;每个通过监听器进来的请求可以流经多个过滤器。我们还可以写一个配置，根据传入的请求或连接属性选择不同的过滤器链。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-过滤器链&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jimmysong.io/envoy-handbook/images/008i3skNly1gz9kd15t7tj318r0u0go4.jpg&#34; alt=&#34;过滤器链&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      过滤器链
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;一个特殊的、内置的网络过滤器被称为 &lt;strong&gt;HTTP 连接管理器&lt;/strong&gt;过滤器（HTTP Connection Manager Filter）或 &lt;strong&gt;HCM&lt;/strong&gt;。HCM 过滤器能够将原始字节转换为 HTTP 级别的消息。它可以处理访问日志，生成请求 ID，操作头信息，管理路由表，并收集统计数据。我们将在以后的课程中对 HCM 进行更详细的介绍。&lt;/p&gt;
&lt;p&gt;就像我们可以为每个监听器定义多个网络过滤器（其中一个是 HCM）一样，Envoy 也支持在 HCM 过滤器中定义多个 HTTP 级过滤器。我们可以在名为 &lt;code&gt;http_filters&lt;/code&gt; 的字段下定义这些 HTTP 过滤器。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-hcm-过滤器&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jimmysong.io/envoy-handbook/images/008i3skNly1gz9kd0buajj31hc0u0mza.jpg&#34; alt=&#34;HCM 过滤器&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      HCM 过滤器
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;HTTP 过滤器链中的最后一个过滤器必须是路由器过滤器（&lt;code&gt;envoy.filters.HTTP.router&lt;/code&gt;）。路由器过滤器负责执行路由任务。这最终把我们带到了第二个构件 —— &lt;strong&gt;路由&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;我们在 HCM 过滤器的 &lt;code&gt;route_config&lt;/code&gt; 字段下定义路由配置。在路由配置中，我们可以通过查看元数据（URI、Header 等）来匹配传入的请求，并在此基础上，定义流量的发送位置。&lt;/p&gt;
&lt;p&gt;路由配置中的顶级元素是虚拟主机。每个虚拟主机都有一个名字，在发布统计数据时使用（不用于路由），还有一组被路由到它的域。&lt;/p&gt;
&lt;p&gt;让我们考虑下面的路由配置和域的集合。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;route_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;my_route_config&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;virtual_hosts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;tetrate_hosts&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;domains&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;tetrate.io&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;routes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;test_hosts&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;domains&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;test.tetrate.io&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;qa.tetrate.io&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;routes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果传入请求的目的地是 &lt;code&gt;tetrate.io&lt;/code&gt;（即 &lt;code&gt;Host/Authority&lt;/code&gt; 标头被设置为其中一个值），则 &lt;code&gt;tetrate_hosts &lt;/code&gt; 虚拟主机中定义的路由将得到处理。&lt;/p&gt;
&lt;p&gt;同样，如果 &lt;code&gt;Host/Authority&lt;/code&gt; 标头包含 &lt;code&gt;test.tetrate.io&lt;/code&gt; 或 &lt;code&gt;qa.tetrate.io&lt;/code&gt;，&lt;code&gt;test_hosts&lt;/code&gt; 虚拟主机下的路由将被处理。使用这种设计，我们可以用一个监听器（&lt;code&gt;0.0.0.0:10000&lt;/code&gt;）来处理多个顶级域。&lt;/p&gt;
&lt;p&gt;如果你在数组中指定多个域，搜索顺序如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;精确的域名（例如：&lt;code&gt;tetrate.io&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;后缀域名通配符（如 &lt;code&gt;*.tetrate.io）&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;前缀域名通配符（例如：&lt;code&gt;tetrate.*&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;匹配任何域的特殊通配符（&lt;code&gt;*&lt;/code&gt;）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在 Envoy 匹配域名后，是时候处理所选虚拟主机中的 &lt;code&gt;routes&lt;/code&gt; 字段了。这是我们指定如何匹配一个请求，以及接下来如何处理该请求（例如，重定向、转发、重写、发送直接响应等）的地方。&lt;/p&gt;
&lt;p&gt;我们来看看一个例子。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;static_resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;listeners&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;listener_0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;socket_address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0.0.0.0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;filter_chains&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;filters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;envoy.filters.network.http_connection_manager&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;typed_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;@type&amp;#34;: &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;stat_prefix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;hello_world_service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;http_filters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;envoy.filters.http.router&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;route_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;my_first_route&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;virtual_hosts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;direct_response_service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;domains&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;routes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;prefix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;direct_response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;inline_string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;yay&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;配置的顶部部分与我们之前看到的一样。我们已经添加了 HCM 过滤器、统计前缀（&lt;code&gt;hello_world_service&lt;/code&gt;）、单个 HTTP 过滤器（路由器）和路由配置。&lt;/p&gt;
&lt;p&gt;在虚拟主机内，我们要匹配任何域名。在 &lt;code&gt;routes&lt;/code&gt; 下，我们匹配前缀（&lt;code&gt;/&lt;/code&gt;），然后我们可以发送一个响应。&lt;/p&gt;
&lt;p&gt;当涉及到匹配请求时，我们有多种选择。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;路由匹配&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;prefix&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;前缀必须与&lt;code&gt;:path&lt;/code&gt; 头的开头相符。&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/hello&lt;/code&gt; 与 &lt;code&gt;hello.com/hello&lt;/code&gt;、&lt;code&gt;hello.com/helloworld&lt;/code&gt; 和 &lt;code&gt;hello.com/hello/v1&lt;/code&gt; 匹配。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;path&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;路径必须与&lt;code&gt;:path&lt;/code&gt; 头完全匹配。&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/hello &lt;/code&gt;匹配 &lt;code&gt;hello.com/hello&lt;/code&gt;，但不匹配 &lt;code&gt;hello.com/helloworld &lt;/code&gt;或 &lt;code&gt;hello.com/hello/v1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;safe_regex&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;所提供的正则表达式必须与&lt;code&gt;:path&lt;/code&gt; 头匹配。&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/\{3}&lt;/code&gt; 匹配任何以 &lt;code&gt;/&lt;/code&gt; 开头的三位数。例如，与 &lt;code&gt;hello.com/123&lt;/code&gt; 匹配，但不能匹配 &lt;code&gt;hello.com/hello&lt;/code&gt; 或 &lt;code&gt;hello.com/54321。&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;connect_matcher&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;匹配器只匹配 CONNECT 请求。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;一旦 Envoy 将请求与路由相匹配，我们就可以对其进行路由、重定向或返回一个直接响应。在这个例子中，我们通过 &lt;code&gt;direct_response&lt;/code&gt; 配置字段使用&lt;strong&gt;直接响应&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;你可以把上述配置保存到 &lt;code&gt;envoy-direct-response.yaml&lt;/code&gt; 中。&lt;/p&gt;
&lt;p&gt;我们将使用一个名为 &lt;a href=&#34;https://func-e.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;func-e&lt;/a&gt; 的命令行工具。func-e 允许我们选择和使用不同的 Envoy 版本。&lt;/p&gt;
&lt;p&gt;我们可以通过运行以下命令下载 func-e CLI。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl https://func-e.io/install.sh &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sudo bash -s -- -b /usr/local/bin
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在我们用我们创建的配置运行 Envoy。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;func-e run -c envoy-direct-response.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一旦 Envoy 启动，我们就可以向 &lt;code&gt;localhost:10000&lt;/code&gt; 发送一个请求，以获得我们配置的直接响应。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ curl localhost:10000
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;yay
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;同样，如果我们添加一个不同的主机头（例如 &lt;code&gt;-H &amp;quot;Host: hello.com&amp;quot;&lt;/code&gt;）将得到相同的响应，因为 &lt;code&gt;hello.com&lt;/code&gt; 主机与虚拟主机中定义的域相匹配。&lt;/p&gt;
&lt;p&gt;在大多数情况下，从配置中直接发送响应是一个很好的功能，但我们会有一组端点或主机，我们将流量路由到这些端点或主机。在 Envoy 中做到这一点的方法是通过定义&lt;strong&gt;集群&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;集群（Cluster）是一组接受流量的上游类似主机。这可以是你的服务所监听的主机或 IP 地址的列表。&lt;/p&gt;
&lt;p&gt;例如，假设我们的 hello world 服务是在 &lt;code&gt;127.0.0.0:8000&lt;/code&gt; 上监听。然后，我们可以用一个单一的端点创建一个集群，像这样。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;clusters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;hello_world_service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;load_assignment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cluster_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;hello_world_service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;endpoints&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;lb_endpoints&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;endpoint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;socket_address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;127.0.0.1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;集群的定义与监听器的定义在同一级别，使用 &lt;code&gt;clusters&lt;/code&gt; 字段。我们在路由配置中引用集群时，以及在导出统计数据时，都会使用集群。该名称在所有集群中必须是唯一的。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;load_assignment&lt;/code&gt; 字段下，我们可以定义要进行负载均衡的端点列表，以及负载均衡策略设置。&lt;/p&gt;
&lt;p&gt;Envoy 支持多种负载均衡算法（round-robin、Maglev、least-request、random），这些算法是由静态引导配置、DNS、动态 xDS（CDS 和 EDS 服务）以及主动 / 被动健康检查共同配置的。如果我们没有通过 &lt;code&gt;lb_policy&lt;/code&gt; 字段明确地设置负载均衡算法，它默认为 round-robin。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;endpoints&lt;/code&gt; 字段定义了一组属于特定地域的端点。使用可选的 &lt;code&gt;locality&lt;/code&gt; 字段，我们可以指定上游主机的运行位置，然后在负载均衡过程中使用（即，将请求代理到离调用者更近的端点）。&lt;/p&gt;
&lt;p&gt;添加新的端点指示负载均衡器在一个以上的接收者之间分配流量。通常情况下，负载均衡器对所有端点一视同仁，但集群定义允许在端点内建立一个层次结构。&lt;/p&gt;
&lt;p&gt;例如，端点可以有一个 &lt;strong&gt;权重（weight）&lt;/strong&gt; 属性，这将指示负载均衡器与其他端点相比，向这些端点发送更多 / 更少的流量。&lt;/p&gt;
&lt;p&gt;另一种层次结构类型是基于&lt;strong&gt;地域性的（locality）&lt;/strong&gt;，通常用于定义故障转移架构。这种层次结构允许我们定义地理上比较接近的 &amp;ldquo;首选&amp;rdquo; 端点，以及在 &amp;ldquo;首选&amp;rdquo; 端点变得不健康的情况下应该使用的 &amp;ldquo;备份&amp;rdquo; 端点。&lt;/p&gt;
&lt;p&gt;由于我们只有一个端点，所以我们还没有设置 locality。在 &lt;code&gt;lb_endpoints&lt;/code&gt; 字段下，可以定义 Envoy 可以路由流量的实际端点。&lt;/p&gt;
&lt;p&gt;我们可以在 Cluster 中配置以下可选功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主动健康检查（&lt;code&gt;health_checks&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;断路器 (&lt;code&gt;circuit_breakers&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;异常点检测（&lt;code&gt;outlier_detection&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;在处理上游的 HTTP 请求时有额外的协议选项&lt;/li&gt;
&lt;li&gt;一组可选的网络过滤器，应用于所有出站连接等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;和监听器的地址一样，端点地址可以是一个套接字地址，也可以是一个 Unix 域套接字。在我们的例子中，我们使用一个套接字地址，并在 &lt;code&gt;127.0.0.1:8000&lt;/code&gt; 为我们的服务定义端点。一旦选择了端点，请求就会被代理到该端点的上游。&lt;/p&gt;
&lt;p&gt;让我们看看我们定义的集群是如何与其他配置结合起来的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;static_resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;listeners&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;listener_0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;socket_address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0.0.0.0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;filter_chains&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;filters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;envoy.filters.network.http_connection_manager&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;typed_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;@type&amp;#34;: &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;stat_prefix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;hello_world_service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;http_filters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;envoy.filters.http.router&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;route_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;my_first_route&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;virtual_hosts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;direct_response_service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;domains&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;routes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;prefix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cluster&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;hello_world_service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;clusters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;hello_world_service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;connect_timeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;5s&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;load_assignment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cluster_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;hello_world_service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;endpoints&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;lb_endpoints&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;endpoint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;socket_address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;127.0.0.1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们已经添加了集群配置，我们没有使用 &lt;code&gt;direct_response&lt;/code&gt;，而是使用 &lt;code&gt;routes&lt;/code&gt; 字段并指定集群名称。&lt;/p&gt;
&lt;p&gt;为了尝试这种配置，让我们在 &lt;code&gt;8000&lt;/code&gt; 端口启动一个 hello-world Docker 镜像。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker run -dit -p 8000:3000 gcr.io/tetratelabs/hello-world:1.0.0 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们可以向 &lt;code&gt;127.0.0.1:8000&lt;/code&gt; 发送一个请求，以检查我们是否得到 &amp;ldquo;Hello World&amp;rdquo; 的响应。&lt;/p&gt;
&lt;p&gt;接下来，让我们把上述 Envoy 配置保存到 &lt;code&gt;envoy-clusters.yaml中&lt;/code&gt;，并启动 Envoy 代理。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;func-e run -c envoy-cluster.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当 Envoy 代理启动时，向 &lt;code&gt;0.0.0.0:10000&lt;/code&gt; 发送一个请求，让 Envoy 代理请求到 hello world 端点。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ curl -v 0.0.0.0:10000
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; GET / HTTP/1.1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; Host: localhost:10000
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; User-Agent: curl/7.64.0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; Accept: */*
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt; HTTP/1.1 &lt;span class=&#34;m&#34;&gt;200&lt;/span&gt; OK
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt; date: Wed, &lt;span class=&#34;m&#34;&gt;30&lt;/span&gt; Jun &lt;span class=&#34;m&#34;&gt;2021&lt;/span&gt; 23:53:47 GMT
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt; content-length: &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt; content-type: text/plain&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;utf-8
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt; x-envoy-upstream-service-time: &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt; server: envoy
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;* Connection &lt;span class=&#34;c1&#34;&gt;#0 to host localhost left intact&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Hello World
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从冗长的输出中，我们会注意到由 Envoy 代理设置的响应头 &lt;code&gt;x-envoy-upstream-service-time&lt;/code&gt; 和 &lt;code&gt;server: envoy&lt;/code&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>第 5 章：OpenTelemetry 架构概述</title>
      <link>https://jimmysong.io/docs/opentelemetry-obervability/architectural-overview/</link>
      <pubDate>Sat, 05 Feb 2022 00:00:00 +0800</pubDate>
      <guid>https://jimmysong.io/docs/opentelemetry-obervability/architectural-overview/</guid>
      <description>&lt;p&gt;第 2 章描述了实现自动分析所需的数据模型，第 4 章描述了支持原生 开源仪表的额外要求，并赋予各角色（应用程序所有者、运维和响应者）自主权。这就是我们对现代可观测性的概念模型。&lt;/p&gt;
&lt;p&gt;在本报告的其余部分，我们描述了这个新模型的一个事实实现，即 OpenTelemetry。这一章描述了构成 OpenTelemetry 遥测管道的所有组件。后面的章节将描述稳定性保证、建议的设置以及 OpenTelemetry 现实中的部署策略。有关该项目的更多细节可以在附录中找到。&lt;/p&gt;
&lt;h2 id=&#34;信号&#34;&gt;信号&lt;/h2&gt;
&lt;p&gt;OpenTelemetry 规范被组织成不同类型的遥测，我们称之为&lt;strong&gt;信号（signal）&lt;/strong&gt;。主要的信号是追踪。日志和度量是其他例子。信号是 OpenTelemetry 中最基本的设计单位。&lt;/p&gt;
&lt;p&gt;每一个额外的信号首先是独立开发的，然后与追踪和其他相关信号整合。这种分离允许开发新的、实验性的信号，而不影响已经变得稳定的信号的兼容性保证。&lt;/p&gt;
&lt;p&gt;OpenTelemetry 是一个&lt;strong&gt;跨领域的关注点（cross-cutting concern）&lt;/strong&gt;，它在事务通过每个库和服务时追踪其执行。为了达到这个目的，所有的信号都建立在低级别的上下文传播系统之上，该系统为信号提供了一个地方来存储它们需要与当前正在执行的代码相关联的任何事务级数据。因为上下文传播系统与追踪系统是完全分开的，其他跨领域的问题也可以利用它。图 5-1 说明了这个分层结构。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-5-1所有-opentelemetry-信号都建立在一个共享的上下文传播系统之上其他的非可观测性的交叉关注也可以使用上下文传播机制来通过分布式系统传输他们的数据&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f5-1.png&#34; alt=&#34;图 5-1：所有 OpenTelemetry 信号都建立在一个共享的上下文传播系统之上。其他的，非可观测性的交叉关注也可以使用上下文传播机制来通过分布式系统传输他们的数据。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 5-1：所有 OpenTelemetry 信号都建立在一个共享的上下文传播系统之上。其他的，非可观测性的交叉关注也可以使用上下文传播机制来通过分布式系统传输他们的数据。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;上下文context&#34;&gt;上下文（Context）&lt;/h2&gt;
&lt;p&gt;上下文对象是一个与执行上下文相关联的键值存储，例如线程或循环程序。如何实现这一点取决于语言，但 OpenTelemetry 在每种语言中都提供一个上下文对象。&lt;/p&gt;
&lt;p&gt;信号在上下文对象中存储它们的数据。因为 OpenTelemetry 的 API 调用总是可以访问整个上下文对象，所以信号有可能成为集成的，并在上下文共享数据，而不需要改变 API。例如，如果追踪和度量信号都被启用，记录一个度量可以自动创建一个追踪范例。日志也是如此：如果有的话，日志会自动绑定到当前的追踪。&lt;/p&gt;
&lt;h2 id=&#34;传播器propagator&#34;&gt;传播器（Propagator）&lt;/h2&gt;
&lt;p&gt;为了使分布式追踪发挥作用，追踪上下文必须被参与事务的每个服务所共享。传播器通过序列化和反序列化上下文对象来实现这一点，允许信号在网络工作请求中追踪其事务。&lt;/p&gt;
&lt;h2 id=&#34;追踪tracing&#34;&gt;追踪（Tracing）&lt;/h2&gt;
&lt;p&gt;OpenTelemetry 追踪系统是基于 OpenTracing 和 OpenCensus。这两个系统，以及流行的 Zipkin 和 Jaeger 项目，都是基于谷歌开发的 Dapper 追踪系统。OpenTelemetry 试图与所有这些基于 Dapper 的系统兼容。&lt;/p&gt;
&lt;p&gt;OpenTelemetry 追踪包括一个叫做 **链接（link）**的概念，它允许单独的追踪被组合成一个更大的图。这被用来连接事务和后台处理，以及观察大型异步系统，如 Kafka 和 AMQP。&lt;/p&gt;
&lt;h2 id=&#34;指标metric&#34;&gt;指标（Metric）&lt;/h2&gt;
&lt;p&gt;度量指标（metric）是一个很大的话题，包含各种各样的方法和实现。OpenTelemetry 度量信号被设计成与 Prometheus 和 StatsD 完全兼容。&lt;/p&gt;
&lt;p&gt;指标包括追踪样本，自动将指标与产生它们的追踪样本联系起来。手工将指标和追踪联系起来往往是一项繁琐且容易出错的任务，自动执行这项任务将为运维人员节省大量的时间。&lt;/p&gt;
&lt;h2 id=&#34;日志log&#34;&gt;日志（Log）&lt;/h2&gt;
&lt;p&gt;OpenTelemetry 结合了高度结构化的日志 API 和高速日志处理系统。现有的日志 API 可以连接到 OpenTelemetry，避免了对应用程序的重新测量。&lt;/p&gt;
&lt;p&gt;每当它出现的时候，日志就会自动附加到当前的追踪中。这使得事务日志很容易找到，并允许自动分析，以找到同一追踪中的日志之间的准确关联。&lt;/p&gt;
&lt;h2 id=&#34;baggage&#34;&gt;Baggage&lt;/h2&gt;
&lt;p&gt;OpenTelemetry Baggage 是一个简单但通用的键值系统。一旦数据被添加为 Baggage（包袱）它就可以被所有下游服务访问。这允许有用的信息，如账户和项目 ID，在事务的后期变得可用，而不需要从数据库中重新获取它们。例如，一个使用项目 ID 作为索引的前端服务可以将其作为 Baggage 添加，允许后端服务也通过项目 ID 对其跨度和指标进行索引。&lt;/p&gt;
&lt;p&gt;你可以将 Baggage 看做是一种&lt;strong&gt;分布式文本的&lt;/strong&gt;形式。直接放入上下文对象的项目只能在当前服务中访问。与追踪上下文一样，作为 Baggage 添加的项目被作为 header 注入网络请求，允许下游服务提取它们。&lt;/p&gt;
&lt;p&gt;与上下文对象一样，Baggage 本身不是一个可观测性工具。它更像是一个通用的数据存储和传输系统。除了可观测性之外，其他跨领域的工具，例如，功能标记、A/B 测试和认证，可以使用 Baggage 来存储他们需要追踪当前事务的任何状态。&lt;/p&gt;
&lt;p&gt;然而，Baggage 是有代价的。因为每增加一个项目都必须被编码为一个头，每增加一个项目都会增加事务中每一个后续网络请求的大小。这就是为什么我们称它为 Baggage。我建议，Baggage 要少用，作为交叉关注的一部分。Baggage 不应该被用作明确定义的服务 API 的 &amp;ldquo;方便&amp;rdquo; 替代品，以明确地向下游应用程序发送参数。&lt;/p&gt;
&lt;h2 id=&#34;opentelemetry-客户端架构&#34;&gt;OpenTelemetry 客户端架构&lt;/h2&gt;
&lt;p&gt;应用程序通过安装一系列的软件库来检测 OpenTelemetry：API、SDK（软件开发工具包）、SDK 插件和库检测。这套库被称为 OpenTelemetry 客户端。图 5-2 显示了这些组件之间的关系。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-5-2opentelemetry-客户端架构为了帮助管理依赖性opentelemetry-将实现与仪表使用的-api-分开&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f5-2.png&#34; alt=&#34;图 5-2：OpenTelemetry 客户端架构。为了帮助管理依赖性，OpenTelemetry 将实现与仪表使用的 API 分开。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 5-2：OpenTelemetry 客户端架构。为了帮助管理依赖性，OpenTelemetry 将实现与仪表使用的 API 分开。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;在许多语言中，OpenTelemetry 提供安装程序，这有助于自动安装和设置 OpenTelemetry 客户端。然而，可用的自动化程度取决于语言。在 Java 中，OpenTelemetry 提供了一个 Java 代理，它通过动态地注入所有必要的组件来实现安装的完全自动化。在 Go 中，OpenTelemetry 包必须通过编写代码来安装和初始化，就像任何其他 Go 包一样。Python、Ruby 和 NodeJS 介于两者之间，提供不同程度的自动化。&lt;/p&gt;
&lt;p&gt;在学习 OpenTelemetry 时，了解在你使用的语言中如何设置是很重要的。特别是，一定要学习如何安装仪表，因为不同的语言有很大的不同。&lt;/p&gt;
&lt;p&gt;请查看&lt;a href=&#34;https://opentelemetry.io/docs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;客户端文档&lt;/a&gt;，了解更多的入门细节。&lt;/p&gt;
&lt;h2 id=&#34;客户端架构仪表-api&#34;&gt;客户端架构：仪表 API&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;OpenTelemetry API&lt;/strong&gt; 是指用于编写仪表的一组组件。该 API 被设计成可以直接嵌入到开放源码软件库以及应用程序中。这是 OpenTelemetry 的唯一部分，共享库和应用逻辑应该直接依赖它。&lt;/p&gt;
&lt;h2 id=&#34;提供者provider&#34;&gt;提供者（Provider）&lt;/h2&gt;
&lt;p&gt;API 与任何实现完全分开。当一个应用程序启动时，可以通过为每个信号注册一个提供者来加载一个实现。提供者成为所有 API 调用的接收者。&lt;/p&gt;
&lt;p&gt;当没有加载提供者时，API 默认为无操作提供者。这使得 OpenTelemetry 仪表化可以安全地包含在共享库中。如果应用程序不使用 OpenTelemetry，API 调用就会变成 no-ops，不会产生任何开销。&lt;/p&gt;
&lt;p&gt;对于生产使用，我们建议使用官方的 OpenTelemetry 提供商，我们称之为 &lt;strong&gt;OpenTelemetry SDK&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;为什么有多个实现方案？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;API 和实现的分离有很多好处。但是，如果用户被迫总是安装官方的 OpenTelemetry SDK，这又有什么意义？是否有必要安装另一个实现？SDK 已经具有很强的扩展性。&lt;/p&gt;
&lt;p&gt;我们相信是有的。虽然我们希望 OpenTelemetry 仪表是通用的，但建立一个对所有用例都理想的单一实现是不可能的。尽管我们相信 OpenTelemetry SDK 很好，但也应该有一个选择，那就是使用另一种实现。实现的灵活性是提供通用仪表 API 的一个关键特征。&lt;/p&gt;
&lt;p&gt;首先，这种分离保证了 OpenTelemetry 不会产生无法克服的依赖冲突。我们总是可以选择加载一个包括不同依赖链的实现。&lt;/p&gt;
&lt;p&gt;另一个原因是性能。OpenTelemetry SDK 是一个可扩展的、通用的框架。虽然 SDK 的设计是为了尽可能地提高性能，但扩展性和性能总是要权衡一下的。例如，通过外来函数接口创建与 OpenTelemetry C++ SDK 的绑定，有可能成为 Ruby、Python 和 Node.js 等动态脚本语言的一个非常有效的选择。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;还有一些流媒体架构显示了有希望的性能提升。在许多这样的优化解决方案中，编写插件和生命周期钩子的能力将受到严重限制；支持这些类型的功能所需的数据结构在这些优化解决方案中是不存在的。归根结底，没有 &amp;ldquo;完美的实现&amp;rdquo;；只有权衡。&lt;/p&gt;
&lt;p&gt;API/SDK 的分离是一个关键的设计选择，该项目大量使用了这一点。例如，除了 SDK 之外，每一种语言都有一个 no-op 的实现，它是默认安装的。还有一个 Fake/Mock 实现，我们用它来测试。而且，还有可能实现更多创造性的实现。例如，为分布式系统建立开发者工具，如一个实时调试器，它可以跨越网络边界工作。&lt;/p&gt;
&lt;h2 id=&#34;客户端架构sdk&#34;&gt;客户端架构：SDK&lt;/h2&gt;
&lt;p&gt;OpenTelemetry 项目为 OpenTelemetry API 提供了一个官方实现，我们称之为 OpenTelemetry SDK。该 SDK 通过提供一个插件框架来实现 OpenTelemetry API。下面将介绍追踪 SDK；类似的架构也适用于度量和日志。&lt;/p&gt;
&lt;p&gt;基本数据结构是一个无锁的 SpanData 对象。当用户开始一个跨度时，SpanData 对象被创建，当用户添加属性和事件时，它被自动建立起来。一旦一个跨度结束，SpanData 对象将不再被更新，可以安全地传递给后台线程。&lt;/p&gt;
&lt;p&gt;SDK 的插件架构被组织成一个流水线。对于追踪来说，该管道由一连串的 SpanProcessors 组成。每个处理器对 SpanData 对象进行两次同步访问：一次是在跨度开始时，另一次是在跨度结束后。采样器、日志附加器和数据清洗器是 SpanProcessors 的例子。链中的最后一个处理器通常是一个 BatchSpanProcessor，它管理着一个已完成的跨度的缓冲区。输出器可以连接到 BatchSpanProcessor，通过网络将成批的跨度传递到遥测管道中的下一个服务，通常将它们发送到收集器或直接发送到追踪后端。一旦跨度被导出，管道就完成了，SpanData 对象也被释放。&lt;/p&gt;
&lt;h2 id=&#34;采样器sampler&#34;&gt;采样器（Sampler）&lt;/h2&gt;
&lt;p&gt;OpenTelemetry 提供了几种常见的采样算法，包括前期采样和基于优先级的采样。采样可以帮助控制成本，但它是有代价的：你将会错过数据。在启用任何种类的采样算法之前，重要的是要检查你计划使用的分析工具支持哪些类型的采用。意外的采样可能会破坏某些形式的分析。一些工具需要他们自己的采样插件。例如，AWS X-Ray 使用它自己的采样算法，它可以作为 AWS 特定的采样插件使用。&lt;/p&gt;
&lt;h2 id=&#34;导出器exporter&#34;&gt;导出器（Exporter）&lt;/h2&gt;
&lt;p&gt;OpenTelemetry 为 OTLP（OpenTelemetry Protocol）、Jaeger、Zipkin、Prometheus 和 StatsD 提供导出器。由第三方维护的其他导出器可以在每种语言的 OpenTelemetry-Contrib 资源库中找到。使用 &lt;a href=&#34;https://opentelemetry.io/registry/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenTelemetry 注册表&lt;/a&gt;来了解目前有哪些插件可用。&lt;/p&gt;
&lt;h2 id=&#34;客户端架构库仪表化&#34;&gt;客户端架构：库仪表化&lt;/h2&gt;
&lt;p&gt;为了正常工作，OpenTelemetry 需要端到端的工具。这不是可有可无的：如果关键的库不包括仪表，上下文传播将被破坏。&lt;/p&gt;
&lt;p&gt;一般来说，必须检测的库包括 HTTP 客户端、HTTP 服务器、应用框架、消息传递 / 队列系统和数据库客户端。这些库经常在上下文传播中起作用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTP 客户端必须创建一个&lt;strong&gt;客户端 span&lt;/strong&gt; 来记录请求。客户端还必须使用一个传播器，将当前的上下文作为一组 HTTP 头信息注入到请求中。&lt;/li&gt;
&lt;li&gt;HTTP 服务器（应用框架）必须使用一个传播器来从 HTTP 头信息中提取上下文。提取的上下文被用来创建一个&lt;strong&gt;服务器跨度&lt;/strong&gt;，该跨度被设置为当前活动的跨度，它封装了所有的应用程序代码。&lt;/li&gt;
&lt;li&gt;同样，消息 / 队列系统中的发送者必须使用传播器将上下文注入消息中，这样就可以通过在接收者身上提取上下文来继续追踪。&lt;/li&gt;
&lt;li&gt;数据库客户必须创建一个&lt;strong&gt;数据库跨度&lt;/strong&gt;来记录数据基础事务。一旦数据库服务器也使用 OpenTelemetry 工具，数据库客户端也必须将上下文注入数据库请求中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这一要求是我们希望看到开放源码软件库能带有本地仪表的主要原因之一。同时，仪表插件是由 OpenTelemetry 项目或第三方提供的 &lt;strong&gt;contrib 包。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;收集器collector&#34;&gt;收集器（Collector）&lt;/h2&gt;
&lt;p&gt;除了上述的客户端外，OpenTelemetry 还提供了一个独立的服务，称为收集器。收集器是一个灵活、可配置的遥测处理系统。其基本结构如图 5-3 所示。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-5-3收集器有一个可配置的处理管道可以导入和导出许多常见格式的数据&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f5-3.png&#34; alt=&#34;图 5-3：收集器有一个可配置的处理管道，可以导入和导出许多常见格式的数据。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 5-3：收集器有一个可配置的处理管道，可以导入和导出许多常见格式的数据。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;收集器管道可以提供以下服务：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;配置，如路由和数据导出格式。OpenTelemetry 客户端可用的几乎所有配置选项都可以在收集器中进行管理。&lt;/li&gt;
&lt;li&gt;数据处理，如刷新、格式转换和向多个目的地发送。&lt;/li&gt;
&lt;li&gt;缓冲，帮助管理网络。&lt;/li&gt;
&lt;li&gt;机器级环境的资源检测。可以发现主机、Kubernetes 和云提供商的细节，并将其附加到收集器收到的所有数据上。&lt;/li&gt;
&lt;li&gt;收集主机指标，如 RAM、CPU 和存储容量。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;运维人员可以使用收集器来管理与可观测系统相关的所有部署细节，而不需要与应用程序本身进行交互。由于大多数配置选项是特定于部署的，而且是由运维而不是应用程序开发人员管理的，因此，将遥测配置从应用程序转移到收集器，可以干净地分离关注点。&lt;/p&gt;
&lt;p&gt;如果所有的路由和数据处理任务都转移到收集器上，OpenTelemetry SDK 就可以以更简单的配置运行。默认情况下，SDK 将发送未处理的 OTLP 数据到一个预定的本地端口，在那里它可以由本地收集器接收。&lt;/p&gt;
&lt;h2 id=&#34;收集器架构接收器receiver&#34;&gt;收集器架构：接收器（Receiver）&lt;/h2&gt;
&lt;p&gt;收集器可以被配置为从各种来源接收各种格式的遥测数据。目前，收集器支持超过四十种不同类型的接收器！一旦接收到，所有这些数据都会被转换为 OTLP。OpenTelemetry 同时支持基于推和拉的接收器。&lt;/p&gt;
&lt;h2 id=&#34;收集器架构处理器processor&#34;&gt;收集器架构：处理器（Processor）&lt;/h2&gt;
&lt;p&gt;一旦接收器将遥测数据转换为 OTLP，就会有各种处理器可用。处理器可以被配置为执行各种任务。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;清洗数据以删除敏感数据，如 PII（个人身份信息）。&lt;/li&gt;
&lt;li&gt;数据规范化，例如将数据源的旧版本转换为与当前后台使用的仪表盘和查询相匹配的版本。&lt;/li&gt;
&lt;li&gt;根据某些属性将数据路由到特定的后端。例如，将与欧盟用户有关的数据存储在欧盟境内托管的存储系统上。&lt;/li&gt;
&lt;li&gt;基于尾部的采样，以帮助确保错误和异常值更有可能被捕获，同时对嘈杂和无趣的信息进行速率限制。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;收集器架构导出器exporter&#34;&gt;收集器架构：导出器（Exporter）&lt;/h2&gt;
&lt;p&gt;一旦遥测数据被处理，它可以被输出到各种后端。在未来，我们希望越来越多的后端能够原生支持 OTLP。同时，OTLP 可以被转换为目前流行的系统所支持的许多格式。请查看 &lt;a href=&#34;https://opentelemetry.io/vendors/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenTelemetry 供应商页面&lt;/a&gt;，找到目前支持 OpenTelemetry 的商业供应商列表。&lt;/p&gt;
&lt;p&gt;除了将遥测数据转换为单一格式外，还可以安装多个导出器。遥测数据可以按类型分开，并发送到不同的后端。例如，将追踪数据发送到 Jaeger，将度量数据发送到 Prometheus。&lt;/p&gt;
&lt;p&gt;重复的遥测数据也可以被同步发送到多个后端。这使得运维人员可以从一个后端无缝切换到另一个后端，而不会有任何服务上的损失。它还允许特殊的分析工具与通用的观测平台一起接收数据。&lt;/p&gt;
&lt;h2 id=&#34;收集器架构管道pipeline&#34;&gt;收集器架构：管道（Pipeline）&lt;/h2&gt;
&lt;p&gt;收集器允许接收器、处理器和导出器组合成复杂的管道（pipeline），可以同时运行。管道是通过 YAML 配置文件设计和管理的。&lt;/p&gt;
&lt;p&gt;这种配置语言是非常强大的。通过在每台机器上部署一个本地收集器，并将它们连接到配置为执行专门处理任务的几层收集器部署上，收集器可以用来开发一个大规模的、强大的遥测系统。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>HTTP 连接管理器介绍</title>
      <link>https://jimmysong.io/docs/cloud-native/service-mesh/http-conneciton-manager/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://jimmysong.io/docs/cloud-native/service-mesh/http-conneciton-manager/</guid>
      <description>&lt;p&gt;HCM 是一个网络级的过滤器，将原始字节转译成 HTTP 级别的消息和事件（例如，收到的 Header，收到的 Body 数据等）。&lt;/p&gt;
&lt;p&gt;HCM 过滤器还处理标准的 HTTP 功能。它支持访问记录、请求 ID 生成和跟踪、Header 操作、路由表管理和统计等功能。&lt;/p&gt;
&lt;p&gt;从协议的角度来看，HCM 原生支持 HTTP/1.1、WebSockets、HTTP/2 和 HTTP/3（仍在 Alpha 阶段）。&lt;/p&gt;
&lt;p&gt;Envoy 代理被设计成一个 HTTP/2 复用代理，这体现在描述 Envoy 组件的术语中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTTP/2 术语&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 HTTP/2 中，流是已建立的连接中的字节的双向流动。每个流可以携带一个或多个&lt;strong&gt;消息（message）&lt;/strong&gt;。消息是一个完整的&lt;strong&gt;帧（frame）&lt;strong&gt;序列，映射到一个 HTTP 请求或响应消息。最后，帧是 HTTP/2 中最小的通信单位。每个帧都包含一个&lt;/strong&gt;帧头（frame header）&lt;/strong&gt;，它至少可以识别该帧所属的流。帧可以携带有关 HTTP Header、消息有效载荷等信息。&lt;/p&gt;
&lt;p&gt;无论流来自哪个连接（HTTP/1.1、HTTP/2 或 HTTP/3），Envoy 都使用一个叫做 &lt;strong&gt;编解码 API（codec API）&lt;/strong&gt; 的功能，将不同的线程协议翻译成流、请求、响应等协议无关模型。协议无关的模型意味着大多数 Envoy 代码不需要理解每个协议的具体内容。&lt;/p&gt;
&lt;h2 id=&#34;http-过滤器&#34;&gt;HTTP 过滤器&lt;/h2&gt;
&lt;p&gt;在 HCM 中，Envoy 支持一系列的 HTTP 过滤器。与监听器级别的过滤器不同，这些过滤器对 HTTP 级别的消息进行操作，而不知道底层协议（HTTP/1.1、HTTP/2 等）或复用能力。&lt;/p&gt;
&lt;p&gt;有三种类型的 HTTP 过滤器。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解码器（Decoder）：当 HCM 对请求流的部分进行解码时调用。&lt;/li&gt;
&lt;li&gt;编码器（Encoder）：当 HCM 对响应流的部分进行编码时调用。&lt;/li&gt;
&lt;li&gt;解码器 / 编码器（Decoder/Encoder）：在两个路径上调用，解码和编码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下图解释了 Envoy 如何在请求和响应路径上调用不同的过滤器类型。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-请求响应路径及-http-过滤器&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jimmysong.io/envoy-handbook/images/008i3skNly1gz9kop73v4j31kd0u0djh.jpg&#34; alt=&#34;请求响应路径及 HTTP 过滤器&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      请求响应路径及 HTTP 过滤器
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;像网络过滤器一样，单个的 HTTP 过滤器可以停止或继续执行后续的过滤器，并在单个请求流的范围内相互分享状态。&lt;/p&gt;
&lt;h2 id=&#34;数据共享&#34;&gt;数据共享&lt;/h2&gt;
&lt;p&gt;在高层次上，我们可以把过滤器之间的数据共享分成&lt;strong&gt;静态&lt;/strong&gt;和&lt;strong&gt;动态&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;静态包含 Envoy 加载配置时的任何不可变的数据集，它被分成三个部分。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 元数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Envoy 的配置，如监听器、路由或集群，都包含一个&lt;code&gt;metadata&lt;/code&gt;数据字段，存储键 / 值对。元数据允许我们存储特定过滤器的配置。这些值不能改变，并在所有请求 / 连接中共享。例如，元数据值在集群中使用子集选择器时被使用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 类型化的元数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;类型化元数据不需要为每个流或请求将元数据转换为类型化的类对象，而是允许过滤器为特定的键注册一个一次性的转换逻辑。来自 xDS 的元数据在配置加载时被转换为类对象，过滤器可以在运行时请求类型化的版本，而不需要每次都转换。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. HTTP 每路过滤器配置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;与适用于所有虚拟主机的全局配置相比，我们还可以指定每个虚拟主机或路由的配置。每个路由的配置被嵌入到路由表中，可以在 &lt;code&gt;typed_per_filter_config&lt;/code&gt; 字段下指定。&lt;/p&gt;
&lt;p&gt;另一种分享数据的方式是使用&lt;strong&gt;动态状态&lt;/strong&gt;。动态状态会在每个连接或 HTTP 流中产生，并且它可以被产生它的过滤器改变。名为 &lt;code&gt;StreamInfo&lt;/code&gt; 的对象提供了一种从 map 上存储和检索类型对象的方法。&lt;/p&gt;
&lt;h2 id=&#34;过滤器顺序&#34;&gt;过滤器顺序&lt;/h2&gt;
&lt;p&gt;指定 HTTP 过滤器的顺序很重要。考虑一下下面的 HTTP 过滤器链。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;http_filters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;filter_1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;filter_2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;filter_3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一般来说，链中的最后一个过滤器通常是路由器过滤器。假设所有的过滤器都是解码器 / 编码器过滤器，HCM 在请求路径上调用它们的顺序是&lt;code&gt;filter_1&lt;/code&gt;、&lt;code&gt;filter_2&lt;/code&gt;、&lt;code&gt;filter_3&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在响应路径上，Envoy 只调用编码器过滤器，但顺序相反。由于这三个过滤器都是解码器 / 编码器过滤器，所以在响应路径上的顺序是 &lt;code&gt;filter_3&lt;/code&gt;、&lt;code&gt;filter_2&lt;/code&gt;、&lt;code&gt;filter_1&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;内置-http-过滤器&#34;&gt;内置 HTTP 过滤器&lt;/h2&gt;
&lt;p&gt;Envoy 已经内置了几个 HTTP 过滤器，如 CORS、CSRF、健康检查、JWT 认证等。你可以&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/http_filters#config-http-filters&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在这里&lt;/a&gt;找到 HTTP 过滤器的完整列表。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>第 6 章：稳定和长期支持</title>
      <link>https://jimmysong.io/docs/opentelemetry-obervability/stability-and-long-term-support/</link>
      <pubDate>Sat, 05 Feb 2022 00:00:00 +0800</pubDate>
      <guid>https://jimmysong.io/docs/opentelemetry-obervability/stability-and-long-term-support/</guid>
      <description>&lt;p&gt;OpenTelemetry 被设计成允许长期稳定性和不确定性并存的局面。在 OpenTelemetry 中，稳定性保证是在每个信号的基础上提供的。与其看版本号，不如检查你想使用的信号的稳定性等级。&lt;/p&gt;
&lt;h2 id=&#34;信号生命周期&#34;&gt;信号生命周期&lt;/h2&gt;
&lt;p&gt;图 6-1 显示了新信号是如何被添加到 OpenTelemetry 的。&lt;strong&gt;实验性&lt;/strong&gt;信号仍在开发中。它们可能在任何时候改变并破坏兼容性。实验性信号的开发是以规范提案的形式开始的，它是与一组原型一起开发的。一旦实验性信号准备好在生产中使用，信号的特性就会被冻结，新信号的测试版就会以多种语言创建。测试版可能不是完整的功能，它们可能会有一些突破性的变化，但它们被认为是为早期采用者的产品反馈做好准备。一旦一个信号被认为可以被宣布为&lt;strong&gt;稳定&lt;/strong&gt;版本，就会发布一个候选版本。如果候选版本能够在一段时间内保持稳定，没有问题，那么该信号的规范和测试版都被宣布为稳定。&lt;/p&gt;
&lt;p&gt;一旦一个信号变得稳定，它就属于 OpenTelemetry 的长期支持保障范围。OpenTelemetry 非常重视向后兼容和无缝升级。详情见以下章节。&lt;/p&gt;
&lt;p&gt;如果 OpenTelemetry 信号的某个组件需要退役，该组件将被标记为&lt;strong&gt;废弃的&lt;/strong&gt;。被废弃的组件不再获得新的功能，但它们仍然被 OpenTelemetry 的长期支持保证所覆盖。如果可能的话，该组件将永远不会被删除，并将继续发挥作用。如果一个组件必须被删除，将提前宣布删除日期。&lt;/p&gt;
&lt;p&gt;实验性的功能总是与稳定性的功能保持在不同的包中，稳定的功能永远不能引用实验性的功能。这确保了新的开发不会影响现有特性的稳定性。只要库只依赖于稳定的特性，它们就不会经历破坏性的 API 变化。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-6-1opentelemetry-中的每个主要功能都被赋予了一个稳定性等级并遵循相同的生命周期&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f6-1.png&#34; alt=&#34;图 6-1：OpenTelemetry 中的每个主要功能都被赋予了一个稳定性等级，并遵循相同的生命周期。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 6-1：OpenTelemetry 中的每个主要功能都被赋予了一个稳定性等级，并遵循相同的生命周期。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;api-的稳定性&#34;&gt;API 的稳定性&lt;/h2&gt;
&lt;p&gt;OpenTelemetry API 预计将被数以千计的库所依赖，有数以百万计的调用站点。因此，API 的稳定部分决不能破坏向后的兼容性。应用程序的所有者和库的开发者不应该为了升级到一个新版本的 API 而重新测量他们的应用程序。&lt;/p&gt;
&lt;p&gt;如果一个 OpenTelemetry API 被废弃（这不太可能），被废弃的 API 仍将保持稳定并发挥功能。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;原生工具是稳定的工具&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;携带原生 OpenTelemetry 仪表的 OSS 库应该只使用稳定的 API，因为实验性功能的改变可能会造成依赖性冲突。&lt;/p&gt;
&lt;p&gt;也就是说，我们鼓励进行测试。如果一个库愿意为实验性的 OpenTelemetry 功能提供支持，这是一个给项目提供反馈和参与新功能设计的好方法。然而，我们建议将与实验性 OpenTelemetry 功能的集成作为可选的插件提供，终端用户必须单独安装才能启用。&lt;/p&gt;
&lt;p&gt;一旦功能变得稳定，就没有必要把它们作为一个单独的插件。事实上，最好是将 OpenTelemetry 原生集成，因为用户可能会忘记安装插件。这样一来，如果应用程序所有者安装了 OpenTelemetry SDK，他们就会自动开始接收来自每个库的数据。如果没有安装 SDK，API 的调用就没有意义了。原生仪表是我们希望 OpenTelemetry 能够简化应用程序所有者的观察能力的一种方式 —— 它已经存在于每一个库中，只要它需要，就可以随时使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;sdk-和收集器的稳定性&#34;&gt;SDK 和收集器的稳定性&lt;/h2&gt;
&lt;p&gt;SDK 的稳定性集中在两个方面：插件接口和资源使用。SDK 可能偶尔会废止一个插件接口。为了确保应用程序的所有者能够干净利落地进行升级，必须在废弃的接口被删除之前添加一个替代接口，而使用废弃接口的流行插件必须被迁移到新的接口上。通过以这种方式安全地迁移插件生态系统，可以避免应用程序所有者陷入这样的境地：他们想要升级，但却被一个无法使用的插件所阻挡。在废弃和移除一个插件接口之间必须有至少 6 个月的时间，而且废弃的接口只有在维护它们会造成性能问题时才会被移除。否则，我们将无限期地保留这些被废弃的接口。&lt;/p&gt;
&lt;p&gt;说到性能，OpenTelemetry SDK 的稳定部分必须避免性能倒退，以确保 SDK 的较新版本在升级时不会引起资源争夺。很明显，启用新版本中增加的功能可能需要额外的资源。但是，简单地升级 SDK 不应该导致性能退步。&lt;/p&gt;
&lt;p&gt;与 SDK 一样，收集器试图避免性能退步，并为收集器插件生态系统提供一个渐进的升级路径。&lt;/p&gt;
&lt;h2 id=&#34;升级-opentelemetry-客户端&#34;&gt;升级 OpenTelemetry 客户端&lt;/h2&gt;
&lt;p&gt;在运行 OpenTelemetry 时，我们希望用户能保持最新的 SDK 版本。有两个事件可能会迫使用户升级 SDK：一个库将其仪表升级到新版本的 API，或者 OpenTelemetry 发布一个重要的安全补丁。&lt;/p&gt;
&lt;p&gt;上面列出的稳定性保证确保了这种升级路径始终是可行的。只要一个应用程序只依赖于稳定的信号，升级应该只涉及依赖性的提升。教程不需要重写，插件也不会突然变得不受支持。&lt;/p&gt;
&lt;p&gt;OpenTelemetry 致力于向后兼容的一个很好的例子是它对其前身 OpenTracing 的支持。OpenTelemetry 追踪信号与 OpenTracing API 完全兼容，OpenTelemetry 和 OpenTracing API 调用可以混合到同一个应用程序中。OpenTracing 用户可以升级到 OpenTelemetry 而不需要重写现有的仪表。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>第 7 章：建议的设置和遥测管道</title>
      <link>https://jimmysong.io/docs/opentelemetry-obervability/suggested-setups-and-telemetry-pipelines/</link>
      <pubDate>Sat, 05 Feb 2022 00:00:00 +0800</pubDate>
      <guid>https://jimmysong.io/docs/opentelemetry-obervability/suggested-setups-and-telemetry-pipelines/</guid>
      <description>&lt;p&gt;现在我们了解了组成 OpenTelemetry 的各个构件，我们应该如何将它们组合成一个强大的生产管道？&lt;/p&gt;
&lt;p&gt;答案取决于你的出发点是什么。OpenTelemetry 是模块化的，设计成可以在各种不同的规模下工作。你只需要使用相关的部分。这就是说，我们已经创建了一个建议的路线图供你遵循。&lt;/p&gt;
&lt;h2 id=&#34;安装-opentelemetry-客户端&#34;&gt;安装 OpenTelemetry 客户端&lt;/h2&gt;
&lt;p&gt;可以单独使用 OpenTelemetry 客户端而不部署收集器。这种基本设置通常是绿地部署的充分起点，无论是测试还是初始生产。OpenTelemetry SDK 可以被配置为直接向大多数可观测性服务传输遥测数据。&lt;/p&gt;
&lt;h2 id=&#34;挑选一个导出器&#34;&gt;挑选一个导出器&lt;/h2&gt;
&lt;p&gt;默认情况下，OpenTelemetry 使用 OTLP 导出数据。该 SDK 提供了几种常见格式的导出器。Zipkin、Prometheus、StatsD 等。如果你使用的可观测性后端没有原生支持 OTLP，那么这些其他格式中的一种很可能会被支持。安装正确的导出器并将数据直接发送到你的后端系统。&lt;/p&gt;
&lt;h2 id=&#34;安装库仪表&#34;&gt;安装库仪表&lt;/h2&gt;
&lt;p&gt;除了 SDK，OpenTelemetry 仪表必须安装在所有 HTTP 客户端、Web 框架、数据库和应用程序的消息队列中。如果这些库中有一个缺少仪表，上下文传播就会中断，导致不完整的追踪和混乱的数据。&lt;/p&gt;
&lt;p&gt;在某些语言中，如 Java，仪表可以自动安装，这就更容易了。请确保了解 OpenTelemetry 如何在你使用的编程语言中管理仪表，并仔细检查仪表是否正确安装在你的应用程序中。&lt;/p&gt;
&lt;h2 id=&#34;选择传播器&#34;&gt;选择传播器&lt;/h2&gt;
&lt;p&gt;仔细检查你的系统需要哪些传播器也很重要。默认情况下，OpenTelemetry 使用 W3C 的追踪上下文和 Baggage 传播器。然而，如果你的应用程序需要与使用不同的追踪传播器的服务进行通信，如 Zipkin 的 B3 或 AWS 的 X-Amzn，那么改变 &lt;code&gt;OTEL_PROPAGATORS&lt;/code&gt; 配置以包括这个额外的传播器。&lt;/p&gt;
&lt;p&gt;如果 OpenTelemetry 最终要取代这些其他的追踪系统，我建议同时运行 trace-context 和额外的追踪传播器。这将使你在部署中逐步取代旧系统时，能够无缝地过渡到 W3C 标准。&lt;/p&gt;
&lt;h2 id=&#34;部署本地收集器&#34;&gt;部署本地收集器&lt;/h2&gt;
&lt;p&gt;虽然有些系统有可能只使用客户端，但通过在你的应用程序所运行的机器上添加一个本地收集器，可以改善你的操作体验。&lt;/p&gt;
&lt;p&gt;运行一个本地收集器有许多好处，如图 7-1 所示。收集器可以生成机器指标（CPU、RAM 等），这是遥测的一个重要部分。收集器还可以完成任何需要的数据处理任务，如从追踪和日志数据中清除 PII。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-7-1一个本地收集器c从本地应用程序a接收遥测数据同时收集主机指标h收集器将合并的遥测数据输出到管道的下一个阶段&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f7-1.png&#34; alt=&#34;图 7-1：一个本地收集器（C）从本地应用程序（A）接收遥测数据，同时收集主机指标（H）。收集器将合并的遥测数据输出到管道的下一个阶段。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 7-1：一个本地收集器（C）从本地应用程序（A）接收遥测数据，同时收集主机指标（H）。收集器将合并的遥测数据输出到管道的下一个阶段。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;运行收集器后就可以将大多数遥测配置从你的应用程序中移出。遥测配置通常是特定的部署，而不是特定的应用。SDK 可以简单地设置为使用默认配置，总是将 OTLP 数据导出到预定义的本地端口。通过管理本地收集器，运维可以在不需要与应用程序开发人员协调或重新启动应用程序的情况下进行配置更改。在通过复杂的 CI/CD（持续集成 / 持续交付）管道移动应用程序时，这尤其有帮助，因为在不同的暂存和负载测试环境中，遥测需要不同的处理方式。&lt;/p&gt;
&lt;p&gt;快速发送遥测数据到本地收集器，可以作为一个缓冲器来处理负载，并确保在应用程序崩溃时，缓冲的遥测数据不会丢失。&lt;/p&gt;
&lt;h2 id=&#34;部署收集器处理器池&#34;&gt;部署收集器处理器池&lt;/h2&gt;
&lt;p&gt;如果你的本地收集器开始执行大量的缓冲和数据处理，它就会从你的应用程序中窃取资源。这可以通过部署一个只运行收集器的机器池来解决，这些机器位于负载均衡器后面，如图 7-2 所示。现在可以根据数据吞吐量来管理收集器池的大小。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-7-2应用程序a可以通过使用路由器或负载均衡器向收集器c池发送遥测信息&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f7-2.png&#34; alt=&#34;图 7-2：应用程序（A）可以通过使用路由器或负载均衡器向收集器（C）池发送遥测信息。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 7-2：应用程序（A）可以通过使用路由器或负载均衡器向收集器（C）池发送遥测信息。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;本地收集器现在可以关闭其处理器以释放资源。它们继续收集机器级遥测数据，作为来自本地应用程序的 OTLP 的转发机制。&lt;/p&gt;
&lt;h2 id=&#34;添加额外的处理池&#34;&gt;添加额外的处理池&lt;/h2&gt;
&lt;p&gt;有时，单个收集器池是不够的。一些任务可能需要以不同的速度扩展。将收集器池分割成一个更专门的池的管道，可能允许更有效和可管理的扩展策略，因为每个专门的收集器池的工作负载变得更可预测。&lt;/p&gt;
&lt;p&gt;一旦你达到了这个规模，就没有什么部署的问题了。大规模系统的专门需求往往是独特的，这些需求将驱动你的可观测性管道的拓扑结构。利用收集器提供的灵活性，根据你的需求来定制每一件事情。我建议对每个收集器配置的资源消耗进行基准测试，并使用这些信息来创建弹性的、自动扩展的收集器池。&lt;/p&gt;
&lt;h2 id=&#34;用收集器管理现有的遥测数据&#34;&gt;用收集器管理现有的遥测数据&lt;/h2&gt;
&lt;p&gt;上面描述的路线图适用于上线 OpenTelemetry。但你应该如何处理现有的遥测？大多数运行中的系统已经有了某种形式的指标、日志和（可能有）追踪。而大型的、长期运行的系统往往最终会有多个遥测解决方案的补丁。不同的组件可能是在不同的时代建立的，有些组件可能是从外部继承的，比如收购。从可观测性的角度来看，这可能会导致混乱的局面。&lt;/p&gt;
&lt;p&gt;即使在这样复杂的遗留情况下，仍然有可能过渡到 OpenTelemetry，而不需要停机或一次重写所有的服务。秘诀是首先部署一个收集器，作为一个透明的代理。&lt;/p&gt;
&lt;p&gt;在收集器中，为接收你的系统目前产生的每一种类型的遥测设置接收器，并与以完全相同的格式发送遥测的导出器相连。一个 StatsD 接收器连接到一个 StatsD 导出器，一个 Zipkin 接收器连接到一个 Zipkin 导出器，以此类推。这种透明的代理可以逐步推出，而不会造成干扰。一旦所有的远程测量都由这些收集器来调解，就可以引入额外的处理。甚至在你把你的仪表切换到 OpenTelemetry 之前，你可能会发现这些收集器是管理和组织你当前拼凑的遥测系统的一个有用的方法。图 7-3 显示了一个收集器处理来自各种来源的数据。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-7-3收集器可以帮助管理复杂的拼凑的可观测性系统这些系统以各种格式向各种存储系统发送数据&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f7-3.png&#34; alt=&#34;图 7-3：收集器可以帮助管理复杂的、拼凑的可观测性系统，这些系统以各种格式向各种存储系统发送数据。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 7-3：收集器可以帮助管理复杂的、拼凑的可观测性系统，这些系统以各种格式向各种存储系统发送数据。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;为了开始将服务切换到 OpenTelemetry，可以在收集器上添加一个 OTLP 接收器，与现有的导出器相连。随着服务转向使用 OpenTelemetry 客户端，它们将 OTLP 发送到收集器，收集器将把 OTLP 翻译成这些系统以前产生的相同数据。这使得 OpenTelemetry 可以由不同的应用团队逐步上线，而不会出现中断。&lt;/p&gt;
&lt;h2 id=&#34;转移供应商&#34;&gt;转移供应商&lt;/h2&gt;
&lt;p&gt;一旦所有的遥测流量都通过收集器发送，切换到一个新的可观测性后端就变得很容易了：只需在收集器中添加一个导出器，将数据发送到你想尝试的新系统，并将遥测数据同时发送到旧系统和新系统。通过向两个系统发送数据，你创造了一个重叠的覆盖范围。如果你喜欢新系统，你可以在一段时间后让旧系统退役，以避免在可视性方面产生差距。图 7-4 说明了这个过程。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-7-4使用收集器在可观测性后端之间迁移而不中断服务&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f7-4.png&#34; alt=&#34;图 7-4：使用收集器在可观测性后端之间迁移而不中断服务。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 7-4：使用收集器在可观测性后端之间迁移而不中断服务。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;也可以使用 OpenTelemetry 在多个供应商之间进行测验。你可以同时向多个系统发送遥测信息，并直接比较系统，看哪一个最适合你的需要。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>第 8 章：如何在组织中推广 OpenTelemetry</title>
      <link>https://jimmysong.io/docs/opentelemetry-obervability/roll-out/</link>
      <pubDate>Sat, 05 Feb 2022 00:00:00 +0800</pubDate>
      <guid>https://jimmysong.io/docs/opentelemetry-obervability/roll-out/</guid>
      <description>&lt;p&gt;上线一个新的遥测系统可能是一项复杂的工作。它需要整个工程组织的支持，不能一蹴而就。不要低估这可能会产生的问题！&lt;/p&gt;
&lt;p&gt;在大型组织中，通常有许多服务团队负责系统的不同部分。通常情况下，每个团队都需要付出一定的努力来使他们所管理的服务得到充分的工具化。而这些团队都有自己积压的工作，他们当然希望能够优先处理这些工作。&lt;/p&gt;
&lt;p&gt;不幸的是，可观测性计划在开始提供价值和证明其价值之前就会耗尽人的耐心。但通过仔细的计划和协调，这种情况是可以避免的。&lt;/p&gt;
&lt;h2 id=&#34;主要目标&#34;&gt;主要目标&lt;/h2&gt;
&lt;p&gt;在推广 OpenTelemetry 时，重要的是要记住，任何基于分布式追踪的可观测性系统都需要对参与事务的每个服务进行检测，以提供最大价值。如果只有部分服务被检测到，那么追踪就会被分割成小的、不相连的部分。&lt;/p&gt;
&lt;p&gt;这种散乱的仪表的结果是不可取的。这种情况——不一致的仪表和断裂的追踪是你想要避免的主要事情。如果追踪是断开的，运维人员仍然需要在他们的头脑中把所有的东西拼凑起来，以获得他们系统的情况。更糟糕的是，自动分析工具可以使用的数据非常有限。与人类运维人员不同，他们可以运用直觉，跳出框框来思考问题，而分析工具却只能使用他们得到的数据。由于数据有限，他们提供有用的见解的机会也将是有限的。&lt;/p&gt;
&lt;p&gt;为了避免这个陷阱，集中精力对一个工作流程进行检测，在进入下一个工作流程之前对其进行完整的追踪。大多数工作流程并不涉及大系统的每一个部分，所以这种方法将最大限度地减少分析开始和价值实现之前所需的工作量。&lt;/p&gt;
&lt;h2 id=&#34;选择一个高价值的目标&#34;&gt;选择一个高价值的目标&lt;/h2&gt;
&lt;p&gt;谈到实现价值，在开始进行仪表测量工作时，重要的是要有一个有吸引力的目标！这一点很重要。&lt;/p&gt;
&lt;p&gt;最有可能的是，有一个特别的问题促使人们去部署 OpenTelemetry。如果是这样的话，就把重点放在解决该问题所需的最小的推广上。否则，想一想那些众所周知的问题，解决它们就值得公布了。&lt;/p&gt;
&lt;p&gt;目前有哪些痛苦的、长期的问题在困扰着运维？减少系统延迟在哪里可以直接转化为商业价值？当人们问 &amp;ldquo;为什么这么慢？&amp;rdquo; 时，他们说的是系统的哪一部分？在选择第一个工作流程时，请以这些信息为指导。&lt;/p&gt;
&lt;p&gt;识别一个有吸引力的目标有两个好处。首先，它可以更有利于说服众人，因为有一个具体的理由来做这项工作。这使得它更容易说服有关团队优先考虑增加指导，并以协调的方式进行。&lt;/p&gt;
&lt;p&gt;第二，速战速决给你的新的可观测性系统一个闪亮的机会。第一次通过分布式追踪的视角来分析一个软件系统时，几乎总是会产生有用的见解。证明可观测性的价值可以引起很多人的兴趣，并有助于降低采用时任何挥之不去的障碍。&lt;/p&gt;
&lt;p&gt;如果直接进入生产是困难的，&amp;ldquo;生产支持&amp;rdquo; 系统也是一个好的开始。可以对 CI/CD 系统进行检测，以帮助了解构建和部署的性能。在这里，整个组织都会感受到性能的大幅提升，并可以为将 OpenTelemetry 转移到生产中提供良好的理由。&lt;/p&gt;
&lt;h2 id=&#34;集中遥测管理&#34;&gt;集中遥测管理&lt;/h2&gt;
&lt;p&gt;展开和管理遥测系统从集中化中获益良多。在一些组织中，会有一个平台或信息结构团队可以接触到每一项服务。像这样的团队是集中管理遥测的一个好地方，这可以提供巨大的帮助。遥测管道最好被认为是它自己的系统；允许一个团队操作整个遥测管道，往往比要求许多团队各自拥有系统的一部分要好。&lt;/p&gt;
&lt;p&gt;在软件层面，将 OpenTelemetry 设置与已经广泛部署的代码管理工具——例如共享的启动脚本和应用框架整合起来，减少了每个团队需要管理的代码量。这有助于确保服务与最新的版本和配置保持同步，并使采用更加容易。&lt;/p&gt;
&lt;p&gt;另一个关键工具是一个集中的知识库。OpenTelemetry 有文档，但它是通用的。创建特定于在你的组织内部署、管理和使用 OpenTelemetry 的文档。大多数工程师都是第一次接触 OpenTelemetry 和分布式追踪，这对他们的帮助怎么强调都不为过。&lt;/p&gt;
&lt;h2 id=&#34;先广度后深度&#34;&gt;先广度后深度&lt;/h2&gt;
&lt;p&gt;还有一个关于合理分配精力的说明。当对一个工作流程进行端对端检测时，通常只需安装 OpenTelemetry 附带的仪表，加上你的组织所使用的任何内部或自创框架的仪表即可。没有必要深入检测应用程序代码，至少在开始时没有必要。OpenTelemetry 附带的标准跨度和指标足以让你识别大多数问题；必要时可以有选择地增加更深层次的检测。在添加这种细节之前，请确保你已经建立并运行了端到端的追踪。&lt;/p&gt;
&lt;p&gt;这就是说，有一个快速的方法可以为你的追踪增加很多细节，那就是把任何现有的日志转换成追踪事件。这可以通过创建一个简单的日志附加器来实现，它可以抓取当前的跨度，并将日志作为一个事件附加到它上面。现在，当你查找追踪时，你所有的应用日志都可以得到，这比在传统的日志工具中寻找它们要容易得多。OpenTelemetry 确实为一些常见的日志系统提供了日志附加程序，但它们也很容易编写。&lt;/p&gt;
&lt;h2 id=&#34;与管理层合作&#34;&gt;与管理层合作&lt;/h2&gt;
&lt;p&gt;如果你是一个工程师在读这篇文章，我有一个补充说明。推广一个新的遥测系统可能需要组织很多人。幸运的是，有些人已经在做这种组织工作了 —— 经理们！这就是我们的工作。&lt;/p&gt;
&lt;p&gt;但是，如果你想启动其中的一个项目，说服工程或项目经理来帮助你是很好的第一步。他们将对如何完成项目有宝贵的见解，并能在你可能不参加的会议上推销该项目。有时候，组织人比组织代码更难，所以不要害怕寻求帮助！&lt;/p&gt;
&lt;h2 id=&#34;加入社区&#34;&gt;加入社区&lt;/h2&gt;
&lt;p&gt;最后，在个人和组织层面上，考虑加入 OpenTelemetry 社区！维护者和项目负责人都很友好，非常平易近人。社区是一个很好的获取援助和专业知识的资源的地方；我们总是很乐意帮助新的用户得到指导。还有一种汗水文化：如果有你想看到的 OpenTelemetry 功能，加入一个工作组并提供帮助是使它们得到优先考虑的一个好办法。&lt;/p&gt;
&lt;p&gt;至少，一定要给我们反馈。我们从用户那里听到的越多，我们就越能专注于最重要的问题。我们的目标是建立一个推动下一代可观测性的标准。没有你，我们做不到，我们的大门永远是敞开的。&lt;/p&gt;
&lt;h2 id=&#34;谢谢你的阅读&#34;&gt;谢谢你的阅读&lt;/h2&gt;
&lt;p&gt;我希望你喜欢这份关于 OpenTelemetry 的可观测性的未来的报告。如果你有任何问题、评论、反馈或基于你所读的内容的灵感，请随时在 Twitter 上与我联系，我是 @tedsuo。&lt;/p&gt;
&lt;p&gt;要想获得 OpenTelemetry 的帮助，请加入云原生计算基金会（CNCF）Slack 上的 #OpenTelemetry 频道。我希望能在那里见到你！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>附录 A：OpenTelemetry 项目组织</title>
      <link>https://jimmysong.io/docs/opentelemetry-obervability/organization/</link>
      <pubDate>Sat, 05 Feb 2022 00:00:00 +0800</pubDate>
      <guid>https://jimmysong.io/docs/opentelemetry-obervability/organization/</guid>
      <description>&lt;p&gt;OpenTelemetry 是一个大型项目。OpenTelemetry 项目的工作被划分为&lt;strong&gt;特殊兴趣小组&lt;/strong&gt;（SIG）。虽然所有的项目决策最终都是通过 GitHub issue 和 pull request 做出的，但 SIG 成员经常通过 CNCF 的官方 Slack 保持联系，而且大多数 SIG 每周都会在 Zoom 上会面一次。&lt;/p&gt;
&lt;p&gt;任何人都可以加入一个 SIG。要想了解更多关于当前 SIG、项目成员和项目章程的细节，请查看 GitHub 上的 &lt;a href=&#34;https://github.com/open-telemetry/community&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenTelemetry 社区档案库&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;规范&#34;&gt;规范&lt;/h2&gt;
&lt;p&gt;OpenTelemetry 是一个规范驱动的项目。OpenTelemetry 技术委员会负责维护该规范，并通过管理规范的 backlog 来指导项目的发展。&lt;/p&gt;
&lt;p&gt;小的改动可以以 GitHub issue 的方式提出，随后的 pull request 直接提交给规范。但是，对规范的重大修改是通过名为 OpenTelemetry Enhancement Proposals（OTEPs）的征求意见程序进行的。&lt;/p&gt;
&lt;p&gt;任何人都可以提交 OTEP。OTEP 由技术委员会指定的具体审批人进行审查，这些审批人根据其专业领域进行分组。OTEP 至少需要四个方面的批准才能被接受。在进行任何批准之前，通常需要详细的设计，以及至少两种语言的原型。我们希望 OTEP 的作者能够认真对待其他社区成员的要求和关注。我们的目标是确保 OpenTelemetry 适合尽可能多的受众的需求。&lt;/p&gt;
&lt;p&gt;一旦被接受，将根据 OTEP 起草规范变更。由于大多数问题已经在 OTEP 过程中得到了解决，因此规范变更只需要两次批准。&lt;/p&gt;
&lt;h2 id=&#34;项目治理&#34;&gt;项目治理&lt;/h2&gt;
&lt;p&gt;管理 OpenTelemetry 项目如何运作的规则和组织结构由 OpenTelemetry 治理委员会定义和维护，其成员经选举产生，任期两年。&lt;/p&gt;
&lt;p&gt;治理成员应以个人身份参与，而不是公司代表。但是，为同一雇主工作的委员会成员的数量有一个上限。如果因为委员会成员换了工作而超过了这个上限，委员会成员必须辞职，直到雇主代表的人数降到这个上限以下。&lt;/p&gt;
&lt;h2 id=&#34;发行版&#34;&gt;发行版&lt;/h2&gt;
&lt;p&gt;OpenTelemetry 有一个基于插件的架构，因为有些观察能力系统需要一套插件和配置才能正常运行。&lt;/p&gt;
&lt;p&gt;发行版（&lt;strong&gt;distros&lt;/strong&gt;）被定义为广泛使用的 OpenTelemetry 插件的集合，加上一组脚本或辅助功能，可能使 OpenTelemetry 与特定的后端连接更简单，或在特定环境中运行 OpenTelemetry。&lt;/p&gt;
&lt;p&gt;需要澄清的是，如果一个可观测性系统声称它与 OpenTelemetry 兼容，那么它应该总是可以使用 OpenTelemetry 而不需要使用某个特定的发行版。如果一个项目没有经过规范过程就扩展了 OpenTelemetry 的核心功能，或者包括任何导致它与上游 OpenTelemetry 仓库不兼容的变化，那么这个项目就是一个分叉，而不是一个发行版。&lt;/p&gt;
&lt;h2 id=&#34;注册表&#34;&gt;注册表&lt;/h2&gt;
&lt;p&gt;为了便于发现目前有哪些语言、插件和说明，OpenTelemetry 提供了一个注册表。任何人都可以向 &lt;a href=&#34;https://opentelemetry.io/registry/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenTelemetry 注册表&lt;/a&gt;提交插件；在 OpenTelemetry 的 GitHub 组织内托管插件不是必须的。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>附录 B：OpenTelemetry 项目路线图</title>
      <link>https://jimmysong.io/docs/opentelemetry-obervability/roadmap/</link>
      <pubDate>Sat, 05 Feb 2022 00:00:00 +0800</pubDate>
      <guid>https://jimmysong.io/docs/opentelemetry-obervability/roadmap/</guid>
      <description>&lt;p&gt;路线图很快就会过时。有关最新的路线图，请参见 &lt;a href=&#34;https://opentelemetry.io/status/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenTelemetry 状态&lt;/a&gt;页面。也就是说，以下是截至目前 OpenTelemetry 的状态。&lt;/p&gt;
&lt;h2 id=&#34;核心组件&#34;&gt;核心组件&lt;/h2&gt;
&lt;p&gt;目前，OpenTelemetry 追踪信号已被宣布为稳定的，并且在许多语言中都有稳定的实现。&lt;/p&gt;
&lt;p&gt;度量信号刚刚被宣布稳定，测试版的实施将在 2022 年第一季度广泛使用。&lt;/p&gt;
&lt;p&gt;日志信号预计将在 2022 年第一季度宣布稳定，测试版实现预计将在 2022 年第二季度广泛使用。2021 年，Stanza 项目被捐赠给 OpenTelemetry，为 OpenTelemetry 收集器增加了高效的日志处理能力。&lt;/p&gt;
&lt;p&gt;用于 HTTP/RPC、数据库和消息系统的语义公约预计将在 2022 年第一季度宣布稳定。&lt;/p&gt;
&lt;h2 id=&#34;未来&#34;&gt;未来&lt;/h2&gt;
&lt;p&gt;完成上述路线图就完成了对 OpenTelemetry 核心功能的稳定性要求。这是一个巨大的里程碑，因为它打开了进一步采用 OpenTelemetry 的大门，包括与数据库、管理服务和 OSS 库的原生集成。这些集成工作大部分已经以原型和测试版支持的形式在进行。随着 OpenTelemetry 的稳定性在 2022 年上半年完成，我预计在 2022 年下半年将出现支持 OpenTelemetry 的宣言，使 2022 年成为 &amp;ldquo;OpenTelemetry 之年&amp;rdquo;。&lt;/p&gt;
&lt;p&gt;但我们并没有就此止步。下一步是什么？&lt;/p&gt;
&lt;h2 id=&#34;ebpf&#34;&gt;eBPF&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Extended Berkeley Packet Filter&lt;/strong&gt;（eBPF）是一种在 Windows、Linux 和其他类似 Unix 的操作系统上提供底层网络访问的机制。利用 eBPF 将给 OpenTelemetry 提供一种极其有效的网络监控形式，不需要任何开发人员的工具。&lt;/p&gt;
&lt;p&gt;2021 年，Flowmill 项目被捐赠给了 OpenTelemetry。Flowmill 是一个基于 eBPF 的可观测性解决方案，专门设计用于观测分布式系统。Flowmill 的开发者与 Pixie 项目的开发者一起，正在努力为 OpenTelemetry Collector 增加 eBPF 支持。Pixie 是专门为 Kubernetes 设计的基于 eBPF 的观测工具，是 CNCF 旗下 OpenTelemetry 的一个姊妹项目。我们还在一起研究如何将底层（第 2 层）eBPF 数据与高层（第 7 层）分布式追踪数据进一步关联起来，这在业界尚属首次。&lt;/p&gt;
&lt;h2 id=&#34;rum&#34;&gt;RUM&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;真实用户监控&lt;/strong&gt;（RUM）是一种可观测性工具，用于描述用户在长期运行的用户会话中如何与移动、网络和桌面客户端进行交互。RUM 与分布式追踪不同，因为图形用户界面（GUI）往往是基于反应器的系统，与数据库和网络服务器等基于事务的系统有根本的架构差异。长话短说：你不能把一个用户会话建模为一个追踪，然后就收工了。&lt;/p&gt;
&lt;p&gt;Client Instrumentation SIG 目前正在开发一个新的 RUM 设计，它将扩展并与 OpenTelemetry 现有的分布式追踪、指标和日志信号完全整合。&lt;/p&gt;
&lt;h2 id=&#34;opentelemetry-控制平面&#34;&gt;OpenTelemetry 控制平面&lt;/h2&gt;
&lt;p&gt;目前，OpenTelemetry 收集器和 SDK 是作为独立的单元来管理的，必须重新启动才能改变它们的配置。目前，Agent Management SIG 正在开发一个控制平面，它可以报告这些组件的当前状态，并允许实时改变配置。它将允许运维人员或自动服务动态地控制整个遥测管道的处理。&lt;/p&gt;
&lt;p&gt;动态配置将允许对采样、日志水平和其他形式的资源管理进行细粒度、反应灵敏的控制，从而减少成本。最终，这个控制平面可以实现更先进的基于尾部的采样形式，即需要在整个部署中协调的采样技术。&lt;/p&gt;
&lt;h2 id=&#34;列式编码的-otlp&#34;&gt;列式编码的 OTLP&lt;/h2&gt;
&lt;p&gt;目前的 OpenTelemetry 协议是对 OpenTelemetry 数据模型的一种有效而直接的编码。跨度、度量和日志被编码为跨度、度量和日志。这可以被认为是一个&lt;strong&gt;基于行的模型&lt;/strong&gt;，每个跨度、度量和日志都被编码为元素列表中的一个离散元素。基于列的模型则将每个元素编码为一个单一的表格，其中所有元素共享相同的列，用于重叠的概念，如时间戳和属性。&lt;/p&gt;
&lt;p&gt;这种列式表示法有望优化数据批次的创建、大小和处理。这种方法的主要好处是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更好的数据压缩率（一组相似的数据）。&lt;/li&gt;
&lt;li&gt;更快的数据处理（更好的数据定位意味着更好地使用 CPU 缓存线）。&lt;/li&gt;
&lt;li&gt;更快的序列化和反序列化（更少的对象需要处理）。&lt;/li&gt;
&lt;li&gt;更快的批量创建（更少的内存分配）。&lt;/li&gt;
&lt;li&gt;更好的 I/O 效率（传输的数据更少）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这种方法的好处与批次的大小成比例地增加。使用现有的 &amp;ldquo;面向行&amp;rdquo; 的表示方法很适合小批量的情况。因此，列式编码将&lt;strong&gt;扩展&lt;/strong&gt;当前的协议。目前提出的实施方案是基于 Apache Arrow，这是一种成熟的列式内存格式。&lt;/p&gt;
&lt;p&gt;这种优化的重点是允许高容量的数据源，如 CDN 和大型多租户系统，像常规服务一样参与可观测性。列式编码也将减少跨网络边界的遥测出口的成本。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Envoy API Gateway——推动网关的进一步发展</title>
      <link>https://jimmysong.io/docs/translation/the-gateway-to-a-new-frontier/</link>
      <pubDate>Tue, 17 May 2022 11:12:00 +0800</pubDate>
      <guid>https://jimmysong.io/docs/translation/the-gateway-to-a-new-frontier/</guid>
      <description>&lt;p&gt;今天，Envoy 社区&lt;a href=&#34;https://www.cncf.io/blog/2022/05/16/introducing-envoy-gateway/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;宣布了&lt;/a&gt;一个令人兴奋的新项目。 &lt;a href=&#34;https://github.com/envoyproxy/gateway&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy Gateway&lt;/a&gt;。该项目将行业领导者联合起来，精简由 Envoy 驱动的应用网关的好处。这种方法使 Envoy Gateway 能够立即为快速创新打下坚实的基础。该项目将提供一套服务来管理 Envoy 代理机群，通过易用性来推动采用，并通过定义明确的扩展机制来支持众多的用例。&lt;/p&gt;
&lt;h2 id=&#34;我们为什么要这样做&#34;&gt;我们为什么要这样做？&lt;/h2&gt;
&lt;p&gt;Tetrate 是 Envoy Proxy 的第一贡献者（按提交量计算），也是 Envoy Gateway 指导小组的成员，其贡献者涵盖技术和管理领域。我们相信，我们强大的伙伴关系和在开源软件方面的深厚经验将有助于确保 Envoy Gateway 的成功。Tetrate 推动了 EG 计划，因为我们致力于上游项目，因为我们相信这将降低 Envoy Proxy 用户的进入门槛，也因为这与我们开发服务网格作为零信任架构基础的使命相一致。Tetrate 将大力投资建设 Envoy Gateway 的安全功能，包括支持 OAuth2 和 &lt;a href=&#34;https://letsencrypt.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Let’s Encrypt&lt;/a&gt; 集成等 API 功能。&lt;/p&gt;
&lt;h3 id=&#34;对上游项目的承诺&#34;&gt;对上游项目的承诺&lt;/h3&gt;
&lt;p&gt;Tetrate 从第一天起就站在服务网格的最前沿，始终相信上游项目和它们的社区。因此，我们一直在为 Istio 和 Envoy 的上游项目提供帮助和支持。我们看到不同的人在使用 Envoy，并创建他们自己的控制平面和 API 网关实现，导致碎片化，创新速度慢，功能差距大，以及缺乏对一个代码库的支持。由于我们与 Matt Klein 和 Envoy 社区长期以来关系密切，当我们提议将其纳入 Envoy 的标准化实现，并将其整合到一个官方的上游实现中时，我们得到了 Matt 和其他 CNCF 项目的强烈支持。我们一直在幕后与其他指导委员会成员（&lt;a href=&#34;https://www.getambassador.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ambassador Labs&lt;/a&gt;、&lt;a href=&#34;https://www.fidelity.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Fidelity Investments&lt;/a&gt;、&lt;a href=&#34;https://projectcontour.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Project Contour&lt;/a&gt; 和 &lt;a href=&#34;https://www.vmware.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;VMware&lt;/a&gt; 辛勤工作，以定义 Envoy Gateway。&lt;/p&gt;
&lt;p&gt;我们知道，艰苦的工作才刚刚开始，我们致力于这个项目以及 CNCF 内其他几个项目的长期成功。&lt;/p&gt;
&lt;h3 id=&#34;实现控制平面的标准化&#34;&gt;实现控制平面的标准化&lt;/h3&gt;
&lt;p&gt;在很短的时间内，Envoy 已经成为现代云原生应用的首选网络层。随着 Envoy 获得关注，大量的上游项目开始利用它来实现服务网格、入口、出口和 API 网关功能。这些项目中有许多能力重叠、功能差距、专有特性，或者缺乏社区多样性。这种支离破碎的状态是由于 Envoy 社区没有提供控制平面的实现而产生的副作用。&lt;/p&gt;
&lt;p&gt;因此，创新的速度降低了，企业被要求辨别利用 Envoy 作为其应用网络数据平面的最佳方法。现在，社区正在提供 Envoy Gateway，更多的用户可以享受 Envoy 的好处，而无需决定控制平面。Envoy Gateway 的&lt;a href=&#34;https://github.com/envoyproxy/gateway/blob/main/GOALS.md#goals&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;目标&lt;/a&gt;是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;&amp;hellip;&amp;hellip; 通过支持众多入口和 L7/L4 流量路由使用案例的表达式、可扩展、面向角色的 API，降低采用障碍，吸引更多用户使用 Envoy；并为供应商建立增值产品提供共同基础，而无需重新设计基本交互。&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;易用性和运营效率&#34;&gt;易用性和运营效率&lt;/h3&gt;
&lt;p&gt;Envoy Proxy 是由 &lt;a href=&#34;https://github.com/cncf/xds&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;xDS API&lt;/a&gt; 驱动的，这些 APIs 暴露了大量的功能，并被控制平面广泛采用。虽然这些 API 功能丰富，但对于用户来说，要快速学习并开始利用 Envoy 的功能是非常困难的。Envoy Gateway 将为用户抽象出这些复杂的功能，同时支持现有的运营和应用管理模式。&lt;/p&gt;
&lt;p&gt;Envoy Gateway 将利用 &lt;a href=&#34;https://gateway-api.sigs.k8s.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gateway API&lt;/a&gt; 来实现这些目标，而不是开发一个新的项目专用 API。Gateway API 是一个由 &lt;a href=&#34;https://github.com/kubernetes/community/tree/master/sig-network&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes 网络特别兴趣小组&lt;/a&gt;管理的项目，正在迅速成为提供用户接口以管理应用网络基础设施和流量路由的首选方法。这个开源项目有一个丰富、多样的社区，有几个知名的实施方案。我们期待着作为社区的一部分开展工作，使 Envoy Gateway 成为业界首选的网关 API 实现。&lt;/p&gt;
&lt;h2 id=&#34;为什么这比传统的-api-网关更好&#34;&gt;为什么这比传统的 API 网关更好？&lt;/h2&gt;
&lt;p&gt;传统的代理不是轻量级的、开放的，也不是动态可编程的、类似 xDS 的 API，因此 Envoy 很适合成为当今动态后端的 API 网关 —— 尤其是在增加安全功能的情况下。我们设想将 Envoy 网关作为不断发展的 API 管理领域的一个关键组成部分。API 网关是 API 管理的核心组件，提供透明地策略执行和生成详细遥测数据的功能。这种遥测技术提供了强大的可观察性，为企业提供了更好的洞察力，以排除故障、维护和优化其 API。&lt;/p&gt;
&lt;p&gt;在我们看来，由于 Envoy 的设计、功能设置、安装基础和社区，它是业内最好的 API 网关。有了 Envoy Gateway，企业可以在将 Envoy 嵌入其 API 管理策略方面增加信心。&lt;/p&gt;
&lt;h3 id=&#34;无边界的零信任&#34;&gt;无边界的零信任&lt;/h3&gt;
&lt;p&gt;当你的所有应用服务都在一个服务网格中运行时，实现&lt;a href=&#34;https://www.tetrate.io/zero-trust/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;零信任架构&lt;/a&gt;就不那么难了。然而，现实中不都是服务网格。服务在虚拟机上运行，在无代理容器中运行，作为无服务器函数运行，等等。Envoy Gateway 将突破这些运行时的界限，为跨异构环境的统一策略执行提供基础。&lt;/p&gt;
&lt;p&gt;这一基础的关键是 Envoy Gateway 的可扩展性，它提供了暴露 Envoy 和非 Envoy 安全功能的灵活性。这些扩展点将被用来提供实现零信任架构所需的功能，包括用户和应用认证、授权、加密和速率限制。Envoy Gateway 将很快成为寻求实现零信任架构的组织的一个关键组件。&lt;/p&gt;
&lt;p&gt;同样，Tetrate 致力于上游项目和它们的长期可行性。这一举措又一次证明了这一点，并表明上游的 Envoy 和 Istio 现在正成为构建服务网格的事实上的支柱。Envoy Gateway 将使服务网格成为主流，架构师们应该把网格看作是 ZTA 的基础。为了帮助架构师进行论证，我们最近出版了《&lt;a href=&#34;https://www.tetrate.io/service-mesh-handbook/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;服务网格手册&lt;/a&gt;》。我们很快就会发布一种带有上游 Envoy Gateway 和 Istio 的架构方法，可以看作是你的应用网络的基础。&lt;/p&gt;
&lt;h3 id=&#34;探索-envoy-gateway&#34;&gt;探索 Envoy Gateway&lt;/h3&gt;
&lt;p&gt;在 Tetrate，我们正在领导基于 Envoy Gateway 和 Istio 的零信任架构的定义，并将在后续博文中阐述设想的架构。如果你想和我们一起讨论架构，并了解更多关于如何为传统和云原生应用程序进行架构，请加入 &lt;a href=&#34;http://tetrate-community.slack.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tetrate-community&lt;/a&gt; Slack 频道。&lt;/p&gt;
&lt;p&gt;要了解更多关于 Tetrate 的信息，请访问 &lt;a href=&#34;https://www.tetrate.io/envoy-gateway/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tetrate.io&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>开源项目 Envoy Gateway 简介</title>
      <link>https://jimmysong.io/docs/translation/introducing-envoy-gateway/</link>
      <pubDate>Mon, 16 May 2022 21:12:00 +0800</pubDate>
      <guid>https://jimmysong.io/docs/translation/introducing-envoy-gateway/</guid>
      <description>&lt;h2 id=&#34;envoy-gateway-简介&#34;&gt;Envoy Gateway 简介&lt;/h2&gt;
&lt;p&gt;今天，我们很高兴地宣布 &lt;a href=&#34;https://github.com/envoyproxy/gateway&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy Gateway&lt;/a&gt; 成为 Envoy 代理家族的新成员，该项目旨在大幅降低将 Envoy 作为 API 网关的使用门槛。&lt;/p&gt;
&lt;h2 id=&#34;历史&#34;&gt;历史&lt;/h2&gt;
&lt;p&gt;Envoy &lt;a href=&#34;https://medium.com/lyft-engineering/announcing-envoy-c-l7-proxy-and-communication-bus-92520b6c8191&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在 2016 年秋天开源&lt;/a&gt;，令我们惊讶的是，它很快就引领了整个行业。用户被这个项目的许多不同方面所吸引，包括它的包容性社区、可扩展性、API 驱动的配置模型、强大的可观察性输出和越来越广泛的功能集。&lt;/p&gt;
&lt;p&gt;尽管在其早期历史中，Envoy 成为了&lt;strong&gt;服务网格&lt;/strong&gt;的代名词，但它在 Lyft 的首次使用实际上是作为 API 网关 / 边缘代理，提供深入的可观察性输出，帮助 Lyft 从单体架构迁移到微服务架构。&lt;/p&gt;
&lt;p&gt;在过去的 5 年多时间里，我们看到 Envoy 被大量的终端用户采用，既可以作为 API 网关，也可以作为服务网格中的 sidecar 代理。同时，我们看到围绕 Envoy 出现了一个庞大的供应商生态系统，在开源和专有领域提供了大量的解决方案。Envoy 的供应商生态系统对项目的成功至关重要；如果没有对所有在 Envoy 上兼职或全职工作的员工的资助，这个项目肯定不会有今天的成就。&lt;/p&gt;
&lt;p&gt;Envoy 作为许多不同的架构类型和供应商解决方案的组成部分，其成功的另一面是它本质上位于架构底层；Envoy 并不是一个容易学习的软件。虽然该项目在世界各地的大型工程组织中取得了巨大的成功，但在较小和较简单的用例中，它只被轻度采用，在这些用例中，&lt;a href=&#34;https://nginx.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;nginx&lt;/a&gt; 和 &lt;a href=&#34;http://www.haproxy.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HAProxy&lt;/a&gt; 仍占主导地位。&lt;/p&gt;
&lt;p&gt;Envoy Gateway 项目的诞生是出于这样的信念：将 Envoy 作为 API 网关的角色推向大众需要两个主要条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个简化的部署模型和 API 层，旨在满足轻量级使用&lt;/li&gt;
&lt;li&gt;将现有的 &lt;a href=&#34;https://www.cncf.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNCF&lt;/a&gt; API 网关项目（&lt;a href=&#34;https://projectcontour.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Contour&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/emissary-ingress/emissary&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Emissary&lt;/a&gt;）合并为一个共同的核，可以提供最好的用户体验，同时仍然允许供应商在 Envoy Proxy 和 Envoy Gateway 的基础上建立增值解决方案。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们坚信，如果社区汇聚在单一的以 Envoy 为核心的 API 网关周围，它将会：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;减少围绕安全、控制平面技术细节和其他共同关切的重复工作。&lt;/li&gt;
&lt;li&gt;允许供应商专注于在 Envoy Proxy 和 Envoy Gateway 的基础上以扩展、管理平面 UI 等形式分层提供增值功能。&lt;/li&gt;
&lt;li&gt;众人拾柴火焰高，让全世界更多的用户享受到 Envoy 的好处，无论组织的大小。更多的用户为更多的潜在客户提供了良性循环，为 Envoy 的核心项目提供了更多的支持，也为所有人提供了更好的整体体验。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;项目概要&#34;&gt;项目概要&lt;/h2&gt;
&lt;p&gt;总得来说，Envoy Gateway 可以被认为是 Envoy Proxy 核心的一个封装器。它不会以任何方式改变核心代理、&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-docs/xds_protocol&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;xDS&lt;/a&gt;、&lt;a href=&#34;https://github.com/envoyproxy/go-control-plane&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;go-control-plane&lt;/a&gt; 等（除了潜在的驱动功能、bug 修复和一般改进以外）。它将提供以下功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为网关用例提供简化的 API。该 API 将是带有一些 Envoy 特定扩展的 &lt;a href=&#34;https://gateway-api.sigs.k8s.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes Gateway API&lt;/a&gt;。之所以选择这个 API，是因为在 Kubernetes 上作为 Ingress Controller 部署是该项目最初的重点，而且该 API 得到了业界的广泛认可。&lt;/li&gt;
&lt;li&gt;开箱即用，让用户能够尽可能快地启动和运行。这包括提供控制器资源、控制平面资源、代理实例等的生命周期管理功能。&lt;/li&gt;
&lt;li&gt;可扩展的 API 平面。虽然该项目将致力于使常见的 API 网关功能开箱即用（例如，速率限制、认证、&lt;a href=&#34;https://letsencrypt.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Let’s Encrypt&lt;/a&gt; 集成等），但供应商将能够提供所有 API 的 SaaS 版本，提供额外的 API 和增值功能，如 WAF、增强的可观察性、混乱工程等。&lt;/li&gt;
&lt;li&gt;高质量的文档和入门指南。我们对 Envoy Gateway 的主要目标是使最常见的网关用例对普通用户来说可以信手拈来。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于 API，我们认为导致混乱的主要是在针对高级用例时，在其他项目中有效地重新实现 Envoy 的 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-docs/xds_protocol&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;xDS&lt;/a&gt; API。这种模式导致用户不得不学习多个复杂的 API（最终转化为 xDS），才能完成工作。因此，Envoy Gateway 致力于 &amp;ldquo;硬性规定&amp;rdquo;，即 Kubernetes Gateway API（以及该 API 中任何允许的扩展）是&lt;strong&gt;唯一&lt;/strong&gt;被支持的额外 API。更高级的用例将由 &amp;ldquo;xDS 模式&amp;rdquo; 提供服务，其中现有的 API 资源将为最终用户自动翻译，然后他们可以切换到直接利用 xDS API。这将导致一个更清晰的主 API，同时为那些可能超越主 API 的表达能力并希望通过 xDS 利用 Envoy 的全部功能的组织提供了路径。&lt;/p&gt;
&lt;h2 id=&#34;关于-api-的标准化&#34;&gt;关于 API 的标准化&lt;/h2&gt;
&lt;p&gt;虽然 Envoy Gateway 的目标是提供一个参考实现，以便在 Kubernetes 中作为 Ingress Controller 轻松运行 Envoy，但这项工作最主要的目的是 &lt;strong&gt;API 标准化&lt;/strong&gt;。随着行业在特定的 Envoy Kubernetes Gateway API 扩展上的趋同，它将允许供应商轻松地提供替代的 SaaS 实现，如果用户超越了参考实现，想要额外的支持和功能等，这可能是最好的。显然，围绕定义 API 扩展，确定哪些 API 是必需的，哪些是可选的，等等，还有很多工作要做。这是我们标准化之旅的开始，我们渴望与所有感兴趣的人一起深入研究。&lt;/p&gt;
&lt;h2 id=&#34;接下来的计划&#34;&gt;接下来的计划&lt;/h2&gt;
&lt;p&gt;今天，我们感谢 Envoy Gateway 的最初赞助商（&lt;a href=&#34;https://www.getambassador.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ambassador Labs&lt;/a&gt;、&lt;a href=&#34;https://www.fidelity.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Fidelity&lt;/a&gt;、&lt;a href=&#34;https://www.tetrate.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate&lt;/a&gt; 和 &lt;a href=&#34;https://www.vmware.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;VMware&lt;/a&gt;），很高兴能与大家一起开始这个新的旅程。该项目是非常早期的，到目前为止的重点是商定 &lt;a href=&#34;https://github.com/envoyproxy/gateway/blob/main/GOALS.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;目标&lt;/a&gt;和&lt;a href=&#34;https://github.com/envoyproxy/gateway/blob/main/docs/design/SYSTEM_DESIGN.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;高水平的设计&lt;/a&gt;，所以现在是参与的好时机，无论是作为终端用户还是作为系统集成商。&lt;/p&gt;
&lt;p&gt;我们还想非常清楚地说明，Contour 和 Emissary 的现有用户不会被抛在后面。该项目（以及 &lt;a href=&#34;https://www.vmware.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;VMware&lt;/a&gt; 和 &lt;a href=&#34;https://www.getambassador.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ambassador Labs&lt;/a&gt;）完全致力于确保这些项目的用户最终能够顺利地迁移到 Envoy Gateway，无论是通过翻译和替换，还是通过这些项目成为 Envoy Gateway 核心的包装物。&lt;/p&gt;
&lt;p&gt;我们对通过 Envoy Gateway 项目将 Envoy 带给更大的用户群感到非常兴奋，我们希望你能&lt;a href=&#34;https://github.com/envoyproxy/gateway#contact&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;加入我们&lt;/a&gt;的旅程。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用 WebAssembly 验证请求负载</title>
      <link>https://jimmysong.io/docs/translation/validating-a-request-payload-with-wasm/</link>
      <pubDate>Fri, 13 May 2022 21:12:00 +0800</pubDate>
      <guid>https://jimmysong.io/docs/translation/validating-a-request-payload-with-wasm/</guid>
      <description>&lt;h3 id=&#34;什么是-wasm-插件&#34;&gt;什么是 Wasm 插件？&lt;/h3&gt;
&lt;p&gt;你可以使用 Wasm 插件在数据路径上添加自定义代码，轻松地扩展服务网格的功能。可以用你选择的语言编写插件。目前，有 AssemblyScript（TypeScript-ish）、C++、Rust、Zig 和 Go 语言的 Proxy-Wasm SDK。&lt;/p&gt;
&lt;p&gt;在这篇博文中，我们描述了如何使用 Wasm 插件来验证一个请求的有效载荷。这是 Wasm 与 Istio 的一个重要用例，也是你可以使用 Wasm 扩展 Istio 的许多方法的一个例子。您可能有兴趣阅读我们关于&lt;a href=&#34;https://www.tetrate.io/blog/category/wasm/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在 Istio 中使用 Wasm 的博文&lt;/a&gt;，并观看我们关于在 Istio 和 Envoy 中使用 Wasm 的免费研讨会的录音。&lt;/p&gt;
&lt;h3 id=&#34;何时使用-wasm-插件&#34;&gt;何时使用 Wasm 插件？&lt;/h3&gt;
&lt;p&gt;当你需要添加 Envoy 或 Istio 不支持的自定义功能时，你应该使用 Wasm 插件。使用 Wasm 插件来添加自定义验证、认证、日志或管理配额。&lt;/p&gt;
&lt;p&gt;在这个例子中，我们将构建和运行一个 Wasm 插件，验证请求 body 是 JSON，并包含两个必要的键 ——&lt;code&gt;id&lt;/code&gt; 和 &lt;code&gt;token&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;编写-wasm-插件&#34;&gt;编写 Wasm 插件&lt;/h3&gt;
&lt;p&gt;这个示例使用 &lt;a href=&#34;https://tinygo.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tinygo&lt;/a&gt; 来编译成 Wasm。确保你已经安装了 &lt;a href=&#34;https://tinygo.org/getting-started/install/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tinygo 编译器&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&#34;配置-wasm-上下文&#34;&gt;配置 Wasm 上下文&lt;/h4&gt;
&lt;p&gt;首先配置 Wasm 上下文，这样 tinygo 文件才能操作 HTTP 请求：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;s&#34;&gt;&amp;#34;github.com/tetratelabs/proxy-wasm-go-sdk/proxywasm&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;s&#34;&gt;&amp;#34;github.com/tetratelabs/proxy-wasm-go-sdk/proxywasm/types&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;s&#34;&gt;&amp;#34;github.com/tidwall/gjson&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;c1&#34;&gt;// SetVMContext 是配置整个 Wasm VM 的入口。请确保该入口在 main 函数中调用，否则 VM 将启动失败。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;proxywasm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;SetVMContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;vmContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// vmContext 实现 proxy-wasm-go SDK 的 types.VMContext 接口。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;vmContext&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;c1&#34;&gt;// 在这里嵌入默认的虚拟机环境，我们不需要实现所有方法。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;types&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;DefaultVMContext&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 复写 types.DefaultVMContext
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;vmContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;NewPluginContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;contextID&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;uint32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;types&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;PluginContext&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pluginContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// pluginContext 实现 proxy-wasm-go SDK 的 types.PluginContext 接口
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pluginContext&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;c1&#34;&gt;// 在这里侵入默认的插件上下文，我们不需要实现所有方法。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;types&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;DefaultPluginContext&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 复写 types.DefaultPluginContext
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pluginContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;NewHttpContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;contextID&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;uint32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;types&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;HttpContext&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;payloadValidationContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// payloadValidationContext 实现 proxy-wasm-go SDK 的 types.HttpContext 接口
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;payloadValidationContext&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;c1&#34;&gt;// 在这里嵌入默认的根 http 上下文，我们不需要实现所有方法。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;types&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;DefaultHttpContext&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nx&#34;&gt;totalRequestBodySize&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;验证负载&#34;&gt;验证负载&lt;/h4&gt;
&lt;p&gt;内容类型头是通过实现 &lt;code&gt;OnHttpRequestHeaders&lt;/code&gt; 来验证的，一旦从客户端收到请求头，就会调用该头。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;proxywasm.SendHttpResponse&lt;/code&gt; 用于响应 403 forbidden 的错误代码和信息，如果内容类型丢失的话。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;payloadValidationContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;OnHttpRequestHeaders&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;numHeaders&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;endOfStream&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;types&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Action&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nx&#34;&gt;contentType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;proxywasm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;GetHttpRequestHeader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;content-type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;contentType&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;c1&#34;&gt;// 如果 header 没有期望的 content type，返回 403 响应
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;proxywasm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;SendHttpResponse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;403&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;content-type must be provided&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;nx&#34;&gt;proxywasm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;LogErrorf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;failed to send the 403 response: %v&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;c1&#34;&gt;// 终止 ActionPause 对流量的进一步处理
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;types&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ActionPause&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;c1&#34;&gt;// ActionContinue 让主机继续处理 body
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;types&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ActionContinue&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;请求主体是通过实现 &lt;code&gt;OnHttpRequestBody&lt;/code&gt; 来验证的，每次从客户端接收到请求的一个块时，都会调用该请求。这是通过等待直到 &lt;code&gt;endOfStream&lt;/code&gt; 为真并记录所有收到的块的总大小来完成的。一旦收到整个主体，就会使用 &lt;code&gt;proxywasm.GetHttpRequestBody&lt;/code&gt; 读取，然后可以使用 golang 进行验证。&lt;/p&gt;
&lt;p&gt;这个例子使用 &lt;code&gt;gjson&lt;/code&gt;，因为 tinygo 不支持 golang 的默认 JSON 库。它检查有效载荷是否是有效的 JSON，以及键 &lt;code&gt;id&lt;/code&gt; 和 &lt;code&gt;token&lt;/code&gt; 是否存在。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;payloadValidationContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;OnHttpRequestBody&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bodySize&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;endOfStream&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;types&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Action&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nx&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;totalRequestBodySize&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bodySize&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;endOfStream&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;c1&#34;&gt;// OnHttpRequestBody 等待收到到 body 的全部才开始处理。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;types&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ActionPause&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;proxywasm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;GetHttpRequestBody&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;totalRequestBodySize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;nx&#34;&gt;proxywasm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;LogErrorf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;failed to get request body: %v&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;types&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ActionContinue&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;validatePayload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;c1&#34;&gt;// 如果验证失败，发送 403 响应。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;proxywasm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;SendHttpResponse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;403&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;invalid payload&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;nx&#34;&gt;proxywasm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;LogErrorf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;failed to send the 403 response: %v&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;c1&#34;&gt;// 终止流量
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;types&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ActionPause&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;types&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ActionContinue&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// validatePayload 验证给定的 json 负载
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 注意该函数使用 gjson 解析 json，因为 TinyGo 不支持 encoding/json
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;validatePayload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gjson&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ValidBytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;nx&#34;&gt;proxywasm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;LogErrorf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;body is not a valid json: %v&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nx&#34;&gt;jsonData&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gjson&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ParseBytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;c1&#34;&gt;// 验证 json。检查示例中是否存在必须的键
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;requiredKey&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;token&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;jsonData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;requiredKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Exists&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;nx&#34;&gt;proxywasm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;LogErrorf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;required key (%v) is missing: %v&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;requiredKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;jsonData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;编译成-wasm&#34;&gt;编译成 Wasm&lt;/h4&gt;
&lt;p&gt;使用 tinygo 编译器编译成 Wasm：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;tinygo build -o main.wasm -scheduler&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;none -target&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;wasi main.go
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;部署-wasm-插件&#34;&gt;部署 Wasm 插件&lt;/h3&gt;
&lt;h4 id=&#34;打包到-docker-中部署到-envoy&#34;&gt;打包到 Docker 中部署到 Envoy&lt;/h4&gt;
&lt;p&gt;对于开发，这个插件可以在 Docker 中部署到 Envoy。下面的 Envoy 配置文件将设置 Envoy 监听 &lt;code&gt;localhost:18000&lt;/code&gt;，运行所提供的 Wasm 插件，并在成功后响应 HTTP 200 和文本 &lt;code&gt;hello from server&lt;/code&gt;。突出显示的部分是配置 Wasm 插件。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;static_resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;listeners&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;socket_address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0.0.0.0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;18000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;filter_chains&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;filters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;envoy.http_connection_manager&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;typed_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;@type&amp;#34;: &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;stat_prefix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ingress_http&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;codec_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;auto&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;route_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;local_route&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;virtual_hosts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;local_service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;domains&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                        &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;routes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;prefix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cluster&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;web_service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;http_filters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                 &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;envoy.filters.http.wasm&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;typed_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;@type&amp;#34;: &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;type.googleapis.com/udpa.type.v1.TypedStruct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type_url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;type.googleapis.com/envoy.extensions.filters.http.wasm.v3.Wasm&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;vm_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;runtime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;envoy.wasm.runtime.v8&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;code&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;local&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;filename&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;./main.wasm&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;envoy.filters.http.router&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;staticreply&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;socket_address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;127.0.0.1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8099&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;filter_chains&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;filters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;envoy.http_connection_manager&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;typed_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;@type&amp;#34;: &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;stat_prefix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ingress_http&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;codec_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;auto&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;route_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;local_route&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;virtual_hosts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;local_service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;domains&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                        &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;routes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;prefix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;direct_response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;inline_string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;hello from the server\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;http_filters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;envoy.filters.http.router&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;typed_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;clusters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;web_service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;connect_timeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;25s&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;STATIC&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;lb_policy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ROUND_ROBIN&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;load_assignment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cluster_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;mock_service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;endpoints&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;lb_endpoints&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;endpoint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;socket_address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;127.0.0.1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8099&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;admin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;access_log_path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/dev/null&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;socket_address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0.0.0.0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8001&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行 Docker 容器：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker run --rm -p 18000:18000 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  -v &lt;span class=&#34;nv&#34;&gt;$PWD&lt;/span&gt;/envoy.yaml:/envoy.yaml &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  -v &lt;span class=&#34;nv&#34;&gt;$PWD&lt;/span&gt;/main.wasm:/main.wasm &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --entrypoint envoy containers.istio.tetratelabs.com/proxyv2:1.9.7-tetrate-v0 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  -l debug &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  -c /envoy.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过 curl 测试。首先，没有设置内容类型，将返回 403：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;% curl -i -X POST localhost:18000
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;HTTP/1.1 &lt;span class=&#34;m&#34;&gt;403&lt;/span&gt; Forbidden
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;content-length: &lt;span class=&#34;m&#34;&gt;29&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;content-type: text/plain
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;date: Sun, &lt;span class=&#34;m&#34;&gt;13&lt;/span&gt; Mar &lt;span class=&#34;m&#34;&gt;2022&lt;/span&gt; 22:13:37 GMT
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;server: envoy
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;content-type must be provided
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后，请求 body 不是 JSON，同样返回 403。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;% curl -i -X POST localhost:18000 -H &lt;span class=&#34;s1&#34;&gt;&amp;#39;Content-Type: application/json&amp;#39;&lt;/span&gt; --data &lt;span class=&#34;s1&#34;&gt;&amp;#39;not JSON&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;HTTP/1.1 &lt;span class=&#34;m&#34;&gt;403&lt;/span&gt; Forbidden
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;content-length: &lt;span class=&#34;m&#34;&gt;15&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;content-type: text/plain
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;date: Sun, &lt;span class=&#34;m&#34;&gt;13&lt;/span&gt; Mar &lt;span class=&#34;m&#34;&gt;2022&lt;/span&gt; 22:15:53 GMT
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;server: envoy
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;invalid payload
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;JSON 负载中没有 &lt;code&gt;token&lt;/code&gt; 字段，还是返回 403。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;% curl -i -X POST localhost:18000 -H &lt;span class=&#34;s1&#34;&gt;&amp;#39;Content-Type: application/json&amp;#39;&lt;/span&gt; --data &lt;span class=&#34;s1&#34;&gt;&amp;#39;{&amp;#34;id&amp;#34;: &amp;#34;xxx&amp;#34;}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;HTTP/1.1 &lt;span class=&#34;m&#34;&gt;403&lt;/span&gt; Forbidden
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;content-length: &lt;span class=&#34;m&#34;&gt;15&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;content-type: text/plain
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;date: Sun, &lt;span class=&#34;m&#34;&gt;13&lt;/span&gt; Mar &lt;span class=&#34;m&#34;&gt;2022&lt;/span&gt; 22:17:18 GMT
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;server: envoy
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;invalid payload
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当 id 和 token 字段都被提供时，将返回一个成功的响应。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;% curl -i -X POST localhost:18000 -H &lt;span class=&#34;s1&#34;&gt;&amp;#39;Content-Type: application/json&amp;#39;&lt;/span&gt; --data &lt;span class=&#34;s1&#34;&gt;&amp;#39;{&amp;#34;id&amp;#34;: &amp;#34;xxx&amp;#34;, &amp;#34;token&amp;#34;: &amp;#34;xxx&amp;#34;, &amp;#34;anotherField&amp;#34;: &amp;#34;yyy&amp;#34;}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;HTTP/1.1 &lt;span class=&#34;m&#34;&gt;200&lt;/span&gt; OK
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;content-length: &lt;span class=&#34;m&#34;&gt;22&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;content-type: text/plain
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;date: Sun, &lt;span class=&#34;m&#34;&gt;13&lt;/span&gt; Mar &lt;span class=&#34;m&#34;&gt;2022&lt;/span&gt; 22:18:37 GMT
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;server: envoy
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;x-envoy-upstream-service-time: &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;hello from the server
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;部署到-istio&#34;&gt;部署到 Istio&lt;/h3&gt;
&lt;h4 id=&#34;部署-istio-和-httpbin-示例应用&#34;&gt;部署 Istio 和 httpbin 示例应用&lt;/h4&gt;
&lt;p&gt;我们使用 &lt;a href=&#34;https://kind.sigs.k8s.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;kind&lt;/a&gt; 来创建测试集群，对于其他方式创建的 Kubernetes 集群同样适用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kind create cluster
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;集群创建完毕后，安装 Istio，我们使用的是 Istio 1.12.3，安装 &lt;a href=&#34;https://github.com/istio/istio/tree/master/samples/httpbin&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio httpbin 示例应用&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;istioctl install --set &lt;span class=&#34;nv&#34;&gt;profile&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;demo
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl label namespace default istio-injection&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;enabled
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.12/samples/httpbin/httpbin.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.12/samples/httpbin/httpbin-gateway.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在另一个终端中，将 Ingress 网关的 80 端口转发到你本地机器的 8080 端口上。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl port-forward -n istio-system svc/istio-ingressgateway 8080:80
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;发送 curl 请求，检查服务是否正常启动，你应该应该看到成功的响应。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl -X POST -i http://localhost:8080/post
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;有两种方式在 Istio 中安装 Wasm 模块：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对于 Istio 1.12 和更新版本的 Istio，支持 &lt;a href=&#34;https://istio.io/latest/docs/reference/config/proxy_extensions/wasm-plugin/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WasmPlugin&lt;/a&gt; 资源&lt;/li&gt;
&lt;li&gt;对于老版本的 Istio，可以使用 &lt;a href=&#34;https://istio.io/latest/docs/reference/config/networking/envoy-filter/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;EnvoyFilter&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;使用-wasmplugin-安装&#34;&gt;使用 WasmPlugin 安装&lt;/h4&gt;
&lt;p&gt;WasmPlugin 资源从镜像仓库中提取 wasm 模块。因此，让我们首先为我们的 wasm 模块构建并推送一个 Docker 镜像。下面的 Docker 文件允许从你的 wasm 模块建立一个 Docker 镜像。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Docker&#34; data-lang=&#34;Docker&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; scratch&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COPY&lt;/span&gt; main.wasm ./&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;构建镜像，推送到镜像仓库。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;HUB&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;your_registry &lt;span class=&#34;c1&#34;&gt;# e.g. docker.io/tetrate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker build . -t &lt;span class=&#34;nv&#34;&gt;$HUB&lt;/span&gt;/json-validation:v1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker push &lt;span class=&#34;nv&#34;&gt;$HUB&lt;/span&gt;/json-validation:v1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在我们创建 &lt;a href=&#34;https://istio.io/latest/docs/reference/config/proxy_extensions/wasm-plugin/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WasmPlugin&lt;/a&gt; 资源。这将适用于所有通过 Istio Ingress 网关暴露的路由，并对其应用我们的验证。确保你把 &lt;code&gt;{your_registry}&lt;/code&gt; 替换为你上传 wasm 镜像的镜像仓库。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;extensions.istio.io/v1alpha1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;WasmPlugin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;json-validation&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio-system&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;istio&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ingressgateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;oci://{your_registry}/json-validation:v3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;imagePullPolicy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;IfNotPresent&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;phase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;AUTHN&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;使用-envoyfilter-安装&#34;&gt;使用 EnvoyFilter 安装&lt;/h4&gt;
&lt;p&gt;为了使用 EnvoyFilter，我们创建一个包含已编译的 Wasm 插件的 ConfigMap，将 ConfigMap 挂载到网关 pod 中，然后通过 EnvoyFilter 配置 Envoy，从本地文件加载 Wasm 插件。这种方法的限制是，更大和更复杂的 Wasm 模块可能超出 ConfigMap 1MB 的大小限制。&lt;/p&gt;
&lt;p&gt;首先，创建一个包含编译好的 Wasm 模块的 ConfigMap：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl -n istio-system create configmap wasm-plugins --from-file&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;main.wasm
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后在 Istio Ingress 网关部署中打补丁，挂载这个 ConfigMap。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl -n istio-system patch deployment istio-ingressgateway --patch&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;spec:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;  template:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;    spec:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;      containers:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;        - name: istio-proxy
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;          volumeMounts:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;            - name: wasm-plugins
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;              mountPath: /var/local/lib/wasm-plugins
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;              readOnly: true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;      volumes:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;        - name: wasm-plugins
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;          configMap:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;            name: wasm-plugins&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在 Wasm 模块就挂载到了网关 Pod 中，应用这个 EnvoyFilter。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.istio.io/v1alpha3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;EnvoyFilter&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;json-validation&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio-system&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;configPatches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;applyTo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;HTTP_FILTER&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;GATEWAY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;patch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;operation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;INSERT_BEFORE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;json-validation&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;typed_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#39;@type&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;type.googleapis.com/envoy.extensions.filters.http.wasm.v3.Wasm&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;vm_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;code&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;local&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;filename&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/var/local/lib/wasm-plugins/main.wasm&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;runtime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;envoy.wasm.runtime.v8&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;vm_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;json-validation&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;测试-wasm-插件&#34;&gt;测试 Wasm 插件&lt;/h4&gt;
&lt;p&gt;重复之前的 curl 请求。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;% curl -X POST -i http://localhost:8080/post
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;HTTP/1.1 &lt;span class=&#34;m&#34;&gt;403&lt;/span&gt; Forbidden
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;content-length: &lt;span class=&#34;m&#34;&gt;29&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;content-type: text/plain
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;date: Tue, &lt;span class=&#34;m&#34;&gt;15&lt;/span&gt; Mar &lt;span class=&#34;m&#34;&gt;2022&lt;/span&gt; 22:04:35 GMT
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;server: istio-envoy
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;content-type must be provided
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果提供了内容类型和 json 负载的话，请求将会成功。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl -i http://localhost:8080/post  -H &lt;span class=&#34;s1&#34;&gt;&amp;#39;Content-Type: application/json&amp;#39;&lt;/span&gt; --data &lt;span class=&#34;s1&#34;&gt;&amp;#39;{&amp;#34;id&amp;#34;: &amp;#34;xxx&amp;#34;, &amp;#34;token&amp;#34;: &amp;#34;xxx&amp;#34;}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;让必填字段可配置&#34;&gt;让必填字段可配置&lt;/h3&gt;
&lt;p&gt;与其在编译的 golang 代码中硬编码所需的 JSON 字段，不如允许通过 Envoy 配置来配置这些字段。&lt;/p&gt;
&lt;p&gt;当在 Docker 中运行 Envoy 时，可以通过向之前创建的 Wasm &lt;code&gt;http_filter&lt;/code&gt; 添加配置来实现。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;http_filters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;envoy.filters.http.wasm&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;typed_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;@type&amp;#34;: &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;type.googleapis.com/udpa.type.v1.TypedStruct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type_url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;type.googleapis.com/envoy.extensions.filters.http.wasm.v3.Wasm&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;configuration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;@type&amp;#34;: &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;type.googleapis.com/google.protobuf.StringValue&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                                                            &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                                                            &lt;/span&gt;{&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;requiredKeys&amp;#34;: &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;token&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;vm_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;runtime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;envoy.wasm.runtime.v8&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;code&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;local&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;filename&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;./main.wasm&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当使用 WasmPlugin，在 &lt;code&gt;pluginConfig&lt;/code&gt; 字段中配置。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;extensions.istio.io/v1alpha1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;WasmPlugin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;json-validation&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio-system&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;istio&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ingressgateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;oci://{your_registry}/json-validation:v3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;imagePullPolicy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;IfNotPresent&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;phase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;AUTHN&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;pluginConfig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;requiredKeys&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;token&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后，当使用 EnvoyFilter 时，将它添加到 filter 配置中。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;json-validation&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;typed_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#39;@type&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;type.googleapis.com/envoy.extensions.filters.http.wasm.v3.Wasm&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;configuration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;@type&amp;#34;: &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;type.googleapis.com/google.protobuf.StringValue&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                                &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                                &lt;/span&gt;{&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;requiredKeys&amp;#34;: &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;token&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;vm_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;code&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;local&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;filename&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/var/local/lib/wasm-plugins/main.wasm&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;runtime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;envoy.wasm.runtime.v8&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;vm_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;json-validation&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在代码中，实现 &lt;code&gt;OnPluginStart&lt;/code&gt;，使用 &lt;code&gt;proxywasm.GetPluginConfiguration&lt;/code&gt; 加载。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// pluginContext 实现 proxy-wasm-go SDK 中的 types.PluginContext 接口
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pluginContext&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;c1&#34;&gt;// 在这里嵌入默认的 plugin 上下文，这样就不用实现所有方法
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;types&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;DefaultPluginContext&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nx&#34;&gt;configuration&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pluginConfiguration&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// pluginConfiguration 代表这个 wasm 插件中的示例配置
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pluginConfiguration&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;c1&#34;&gt;// 示例配置字段，插件将验证 json 负载中是否存在这些字段。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;requiredKeys&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 复写 types.DefaultPluginContext
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pluginContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;OnPluginStart&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pluginConfigurationSize&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;types&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;OnPluginStartStatus&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;proxywasm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;GetPluginConfiguration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;nx&#34;&gt;proxywasm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;LogCriticalf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;error reading plugin configuration: %v&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;types&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;OnPluginStartStatusFailed&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nx&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;parsePluginConfiguration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;nx&#34;&gt;proxywasm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;LogCriticalf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;error parsing plugin configuration: %v&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;types&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;OnPluginStartStatusFailed&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nx&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;configuration&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;config&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;types&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;OnPluginStartStatusOK&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// parsePluginConfiguration 解析 json 插件配置并返回 pluginConfiguration
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 注意使用 gjson 解析 json，因为 TinyGo 不支持 encoding/json
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 你也可以使用 https://github.com/mailru/easyjson，支持解析为结构体
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;parsePluginConfiguration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pluginConfiguration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nx&#34;&gt;config&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pluginConfiguration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gjson&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ValidBytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Errorf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;the plugin configuration is not a valid json: %v&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nx&#34;&gt;jsonData&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gjson&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ParseBytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nx&#34;&gt;requiredKeys&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;jsonData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;requiredKeys&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;requiredKey&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;requiredKeys&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;nx&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;requiredKeys&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;requiredKeys&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;requiredKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在它们被包含在 &lt;code&gt;pluginConfiguration&lt;/code&gt; 结构中，它们可以像其他字段一样在验证过程中被使用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// validatePayload 验证给定的 json 负载
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 注意该函数使用 gjson 解析 json，因为 TinyGo 不支持 encoding/json
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;payloadValidationContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;validatePayload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gjson&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ValidBytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;nx&#34;&gt;proxywasm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;LogErrorf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;body is not a valid json: %v&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nx&#34;&gt;jsonData&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gjson&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ParseBytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;c1&#34;&gt;// 验证 json。检查示例中是否包含必须的键。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// 必须的键通过插件配置。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;requiredKey&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;requiredKeys&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;jsonData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;requiredKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Exists&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;nx&#34;&gt;proxywasm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;LogErrorf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;required key (%v) is missing: %v&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;requiredKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;jsonData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后可以使用与之前相同的命令对其进行编译和测试。&lt;/p&gt;
&lt;h3 id=&#34;总结&#34;&gt;总结&lt;/h3&gt;
&lt;p&gt;总而言之，要在 Istio 1.12 和更新的版本上使用 Wasm 插件，需要三个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在你选择的语言中实现插件的功能。我在本教程中使用 Golang。&lt;/li&gt;
&lt;li&gt;编译 Wasm 插件并推送到镜像仓库。&lt;/li&gt;
&lt;li&gt;配置 Istio 以加载和使用镜像仓库中的插件。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;该教程还详细介绍了如何使用 Docker 在 Envoy 容器中运行 Wasm 插件，以加快开发速度，以及如何将其部署到旧的 Istio 版本。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OpenTelemetry可观察性指南🔥</title>
      <link>https://jimmysong.io/docs/book/opentelemetry-obervability/</link>
      <pubDate>Fri, 06 May 2022 00:00:00 +0000</pubDate>
      <guid>https://jimmysong.io/docs/book/opentelemetry-obervability/</guid>
      <description>&lt;p&gt;本报告译自 O&amp;rsquo;Reilly 出品的 &lt;a href=&#34;https://www.oreilly.com/library/view/the-future-of/9781098118433/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Future of Observablity with OpeTelemetry&lt;/a&gt;，作者 Ted Young，译者 &lt;a href=&#34;https://jimmysong.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Jimmy Song&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;关于本书&#34;&gt;关于本书&lt;/h2&gt;
&lt;p&gt;本书内容包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OpenTelemetry 如何满足库作者、应用程序拥有者、运维和响应者的需求&lt;/li&gt;
&lt;li&gt;应用程序的不同角色如何围绕 OpenTelemetry 来协同和独立工作&lt;/li&gt;
&lt;li&gt;关于在组织中采用和管理 OpenTelemetry 的实用建议&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;如何阅读本书&#34;&gt;如何阅读本书&lt;/h2&gt;
&lt;p&gt;您可以使用以下方式阅读：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/docs/docs/opentelemetry-obervability&#34;&gt;在线阅读&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rootsongjc/opentelemetry-obervability/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;下载 PDF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;关于作者&#34;&gt;关于作者&lt;/h2&gt;
&lt;p&gt;Ted Young 是 OpenTelemetry 项目的联合创始人之一。在过去的二十年里，他设计并建立了各种大规模的分布式系统，包括可视化 FX 管道和容器调度系统。他目前在 Lightstep 公司担任开发者教育总监，住在俄勒冈州波特兰的一个小农场里。&lt;/p&gt;
&lt;h2 id=&#34;许可证&#34;&gt;许可证&lt;/h2&gt;
&lt;p&gt;您可以使用&lt;a href=&#34;https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;署名 - 非商业性使用 - 相同方式共享 4.0 (CC BY-NC-SA 4.0)&lt;/a&gt;  协议共享。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Slack 将数百万个并发的 Websockets 迁移到 Envoy 上经验分享</title>
      <link>https://jimmysong.io/docs/translation/migrating-millions-of-concurrent-websockets-to-envoy/</link>
      <pubDate>Fri, 08 Apr 2022 13:00:00 +0800</pubDate>
      <guid>https://jimmysong.io/docs/translation/migrating-millions-of-concurrent-websockets-to-envoy/</guid>
      <description>&lt;p&gt;Slack 有一个全球客户群，在高峰期有数百万同时连接的用户。用户之间的大部分通信涉及到向对方发送大量的微小信息。在 Slack 的大部分历史中，我们一直使用 &lt;a href=&#34;https://www.haproxy.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HAProxy&lt;/a&gt; 作为所有传入流量的负载均衡器。今天，我们将讨论我们在使用 HAProxy 时所面临的问题，我们如何用 &lt;a href=&#34;https://www.envoyproxy.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy Proxy&lt;/a&gt; 来解决这些问题，迁移所涉及的步骤，以及结果是什么。让我们开始吧！&lt;/p&gt;
&lt;h2 id=&#34;slack-的-websockets&#34;&gt;&lt;strong&gt;Slack 的 Websockets&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;为了即时传递信息，我们使用 &lt;a href=&#34;https://tools.ietf.org/html/rfc6455&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;websocket 连接&lt;/a&gt;，这是一种双向的通信链接，负责让你看到 &amp;ldquo;有几个人在打字&amp;hellip;&amp;hellip;&amp;quot;，然后是他们打的东西，速度几乎是光速的。websocket 连接被摄取到一个叫做 &amp;ldquo;wss&amp;rdquo;（WebSocket 服务）的系统中，可以通过 &lt;code&gt;wss-primary.slack.com&lt;/code&gt; 和 &lt;code&gt;wss-backup.slack.com&lt;/code&gt;（这不是网站，如果去访问，只会得到一个 HTTP 404）从互联网上访问。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-显示websockets工作原理的图表&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;显示websockets工作原理的图表&#34; srcset=&#34;
               /docs/translation/migrating-millions-of-concurrent-websockets-to-envoy/e6c9d24ely1h1277posyqj20cg0b8dfz_hu638107ff3fc4b59a58bc1013075e4cae_15800_7bd2fb281eec72911f2841a9d347b546.webp 400w,
               /docs/translation/migrating-millions-of-concurrent-websockets-to-envoy/e6c9d24ely1h1277posyqj20cg0b8dfz_hu638107ff3fc4b59a58bc1013075e4cae_15800_c2182b0a5c8c836fc1a28eb3cb28df8d.webp 760w,
               /docs/translation/migrating-millions-of-concurrent-websockets-to-envoy/e6c9d24ely1h1277posyqj20cg0b8dfz_hu638107ff3fc4b59a58bc1013075e4cae_15800_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://jimmysong.io/docs/docs/translation/migrating-millions-of-concurrent-websockets-to-envoy/e6c9d24ely1h1277posyqj20cg0b8dfz_hu638107ff3fc4b59a58bc1013075e4cae_15800_7bd2fb281eec72911f2841a9d347b546.webp&#34;
               width=&#34;448&#34;
               height=&#34;404&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      显示websockets工作原理的图表
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Websocket 连接一开始是普通的 HTTPS 连接，然后客户端发出协议切换请求，将连接升级为 Websocket。在 Slack，我们有不同的 websocket 服务，专门用于消息、在线（列出哪些联系人在线）和其他服务。其中一个 websocket 端点是专门为需要与 Slack 互动的应用程序制作的（因为应用程序也想要实时通信）。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-解释流量如何被路由到后端服务的流程图&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;解释流量如何被路由到后端服务的流程图&#34; srcset=&#34;
               /docs/translation/migrating-millions-of-concurrent-websockets-to-envoy/e6c9d24ely1h1277nk5l3j20hr0bbq3e_hu35815016609feb50bf18ce64f39b9544_27440_af8ace6f8579cae0885f283bd11c3b4f.webp 400w,
               /docs/translation/migrating-millions-of-concurrent-websockets-to-envoy/e6c9d24ely1h1277nk5l3j20hr0bbq3e_hu35815016609feb50bf18ce64f39b9544_27440_063f4e2ed8d00aaed3da1b87460ce629.webp 760w,
               /docs/translation/migrating-millions-of-concurrent-websockets-to-envoy/e6c9d24ely1h1277nk5l3j20hr0bbq3e_hu35815016609feb50bf18ce64f39b9544_27440_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://jimmysong.io/docs/docs/translation/migrating-millions-of-concurrent-websockets-to-envoy/e6c9d24ely1h1277nk5l3j20hr0bbq3e_hu35815016609feb50bf18ce64f39b9544_27440_af8ace6f8579cae0885f283bd11c3b4f.webp&#34;
               width=&#34;639&#34;
               height=&#34;407&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      解释流量如何被路由到后端服务的流程图
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;过去，我们在多个 &lt;a href=&#34;https://aws.amazon.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AWS&lt;/a&gt; Region 有一组专门用于 websockets 的 HAProxy 实例，以终止靠近用户的 websocket 连接，并将请求转发给相应的后端服务。&lt;/p&gt;
&lt;h2 id=&#34;迁移到-envoy-proxy-的动机&#34;&gt;&lt;strong&gt;迁移到 Envoy Proxy 的动机&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;虽然我们从 Slack 开始就一直在使用 HAproxy，并且知道如何大规模地操作它，但有一些操作上的挑战让我们考虑替代方案，比如 Envoy Proxy。&lt;/p&gt;
&lt;h3 id=&#34;热重启&#34;&gt;&lt;strong&gt;热重启&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;在 Slack，后端服务端点列表的变化是一个常见的事件（由于实例被添加或删除）。HAProxy 提供两种方法来更新其配置，以适应端点列表的变化。一种是使用 HAProxy Runtime API。我们在其中一套 HAProxy 实例中使用了这种方法，我们的经验在另一篇博文中有所描述 —— &lt;a href=&#34;https://slack.engineering/a-terrible-horrible-no-good-very-bad-day-at-slack/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在 Slack 的可怕的、恐怖的、没有好处的、非常糟糕的一天&lt;/a&gt;。另一种方法，我们用于 websockets 负载均衡器（LB），是将后端渲染到 HAProxy 配置文件中，然后重新加载 HAProxy。&lt;/p&gt;
&lt;p&gt;每次 HAProxy 重载时，都会创建一组新的进程来处理新进入的连接。我们会让旧的进程持续运行很多小时，以便让长寿的 websocket 连接耗尽，避免用户频繁断开连接。然而，我们不能有太多的 HAProxy 进程，每个进程都运行着它自己 &amp;ldquo;当时&amp;rdquo; 的配置副本 —— 我们希望实例能更快地汇聚到新版本的配置上。我们不得不定期收割旧的 HAProxy 进程，并限制 HAProxy 重新加载的频率，以防底层后端出现混乱。&lt;/p&gt;
&lt;p&gt;无论我们使用哪种方法，都需要一些额外的基础设施来管理 HAProxy 的重新加载。&lt;/p&gt;
&lt;p&gt;Envoy 允许我们使用&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/service_discovery#arch-overview-service-discovery-types-eds&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;动态配置的集群和端点&lt;/a&gt;，这意味着如果端点列表发生变化，它不需要重新加载。如果代码或配置确实发生了变化，Envoy 有能力在不放弃任何连接的情况下&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/operations/hot_restart&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;热重启&lt;/a&gt;自己。Envoy 通过 &lt;a href=&#34;https://en.wikipedia.org/wiki/Inotify&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;inotify&lt;/a&gt; 观察文件系统配置的更新。在热重启过程中，Envoy 还将统计数据从父进程复制到子进程中，因此仪表和计数器不会被重置。&lt;/p&gt;
&lt;p&gt;这一切都使 Envoy 的运营开销大大减少，而且不需要额外的服务来管理配置变化或重新启动。&lt;/p&gt;
&lt;h3 id=&#34;负载均衡功能&#34;&gt;&lt;strong&gt;负载均衡功能&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Envoy 提供了一些先进的负载均衡功能，如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内置支持区域感知路由的功能&lt;/li&gt;
&lt;li&gt;通过&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/outlier#arch-overview-outlier-detection&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;异常值检测&lt;/a&gt;进行被动健康检查&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/load_balancing/panic_threshold&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;恐慌路由&lt;/a&gt;：Envoy 通常只将流量路由到健康的后端，但是如果健康主机的百分比低于某个阈值，它可以被配置为将流量发送到所有的后端，不管是健康的还是不健康的。这在我们 &lt;a href=&#34;https://slack.engineering/slacks-outage-on-january-4th-2021/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2021 年 1 月 4 日的故障&lt;/a&gt;中非常有帮助，这次故障是由我们基础设施中的一个广泛的网络问题引起的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于上述原因，在 2019 年，我们决定将我们的入口负载均衡层从 HAproxy 迁移到 Envoy Proxy，从 websockets 堆栈开始。迁移的主要目标是提高可操作性，获得 Envoy 提供的新功能，以及更加标准化。通过在整个 Slack 中从 HAProxy 迁移到 Envoy，我们的团队将不再需要了解两个软件的怪异之处，不再需要维护两种不同的配置，不再需要管理两个构建和发布管道，诸如此类。那时，我们已经在使用 Envoy Proxy 作为我们服务网格中的&lt;a href=&#34;https://blog.envoyproxy.io/service-mesh-data-plane-vs-control-plane-2774e720f7fc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;数据平面&lt;/a&gt;。我们内部也有经验丰富的 Envoy 开发人员，所以我们可以随时获得 Envoy 的专业知识。&lt;/p&gt;
&lt;h2 id=&#34;生成-envoy-配置&#34;&gt;生成 Envoy 配置&lt;/h2&gt;
&lt;p&gt;这次迁移的第一步是审查我们现有的 websocket 层配置，并生成一个同等的 Envoy 配置。在迁移过程中，管理 Envoy 配置是我们最大的挑战之一。Envoy 有丰富的功能集，其配置与 HAProxy 的配置有很大的不同。Envoy 配置涉及四个主要概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Listener&lt;/strong&gt;，接收请求，又称 TCP 套接字、SSL 套接字或 unix 域套接字。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cluster&lt;/strong&gt;，代表我们发送请求的内部服务，如消息服务器和存在服务器&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Route&lt;/strong&gt;，将 Listener 和 Cluster 连接在一起&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Filter&lt;/strong&gt;，它对请求进行操作&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Slack 的配置管理主要是通过 &lt;a href=&#34;https://www.chef.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Chef&lt;/a&gt; 完成的。当我们开始使用 Envoy 时，我们把 Envoy 配置作为 &lt;a href=&#34;https://docs.chef.io/resources/template/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;chef 模板文件&lt;/a&gt;来部署，但它的管理变得很麻烦，而且容易出错。为了解决这个问题，我们建立了 chef 库和&lt;a href=&#34;https://docs.chef.io/custom_resources_notes/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;自定义资源&lt;/a&gt;来生成 Envoy 配置。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-chef-资源的结构和流程图&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Chef 资源的结构和流程图&#34; srcset=&#34;
               /docs/translation/migrating-millions-of-concurrent-websockets-to-envoy/e6c9d24ely1h1277ob5drj20hs07wq2z_hu47746d181c5345bf7e9f92852b942d27_12095_6dfe436bcca60d7a49608fba8fd9ea0c.webp 400w,
               /docs/translation/migrating-millions-of-concurrent-websockets-to-envoy/e6c9d24ely1h1277ob5drj20hs07wq2z_hu47746d181c5345bf7e9f92852b942d27_12095_d2253eb535d3be569b8da4bee6cdbbaf.webp 760w,
               /docs/translation/migrating-millions-of-concurrent-websockets-to-envoy/e6c9d24ely1h1277ob5drj20hs07wq2z_hu47746d181c5345bf7e9f92852b942d27_12095_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://jimmysong.io/docs/docs/translation/migrating-millions-of-concurrent-websockets-to-envoy/e6c9d24ely1h1277ob5drj20hs07wq2z_hu47746d181c5345bf7e9f92852b942d27_12095_6dfe436bcca60d7a49608fba8fd9ea0c.webp&#34;
               width=&#34;640&#34;
               height=&#34;284&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Chef 资源的结构和流程图
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;在 Chef 内部，配置是一个&lt;a href=&#34;https://en.wikipedia.org/wiki/Singleton_pattern&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;单例&lt;/a&gt;，模拟了每个主机只有一个 Envoy 配置的情况。所有的 Chef 资源都在这个单例上操作，添加监听器、路由或集群。在 Chef 运行的最后，&lt;code&gt;envoy.yaml&lt;/code&gt; 被生成、验证，然后安装 —— 我们从不写中间配置，因为这些配置可能是无效的。&lt;/p&gt;
&lt;p&gt;这个例子展示了我们如何创建一个有两条路由的 HTTP 监听器，将流量路由到两个&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/service_discovery#endpoint-discovery-service-eds&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;动态&lt;/a&gt;集群。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-调用chef资源以创建带有集群和路由的监听器的例子&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;调用Chef资源以创建带有集群和路由的监听器的例子&#34; srcset=&#34;
               /docs/translation/migrating-millions-of-concurrent-websockets-to-envoy/e6c9d24ely1h1277otk25j20hs0ao74o_hu3f1a67d6f08178cc7e15dc6ce336f0b8_24799_b9881045a8cfef16af6f6fb09657d6ea.webp 400w,
               /docs/translation/migrating-millions-of-concurrent-websockets-to-envoy/e6c9d24ely1h1277otk25j20hs0ao74o_hu3f1a67d6f08178cc7e15dc6ce336f0b8_24799_e8fff4f745fb19c8ee736ffa081362dd.webp 760w,
               /docs/translation/migrating-millions-of-concurrent-websockets-to-envoy/e6c9d24ely1h1277otk25j20hs0ao74o_hu3f1a67d6f08178cc7e15dc6ce336f0b8_24799_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://jimmysong.io/docs/docs/translation/migrating-millions-of-concurrent-websockets-to-envoy/e6c9d24ely1h1277otk25j20hs0ao74o_hu3f1a67d6f08178cc7e15dc6ce336f0b8_24799_b9881045a8cfef16af6f6fb09657d6ea.webp&#34;
               width=&#34;640&#34;
               height=&#34;384&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      调用Chef资源以创建带有集群和路由的监听器的例子
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;要在 Envoy 中复制我们复杂的 HAProxy 配置需要一些努力。大部分需要的功能在 Envoy 中已经有了，所以只需要在 chef 库中加入对它的支持就可以了。我们实现了一些缺失的 Envoy 功能（有些是&lt;a href=&#34;https://github.com/envoyproxy/envoy/pull/12206&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;上游&lt;/a&gt;贡献的，有些是内部维护的扩展）。&lt;/p&gt;
&lt;h2 id=&#34;对我们的新配置进行测试和验证&#34;&gt;对我们的新配置进行测试和验证&lt;/h2&gt;
&lt;p&gt;测试新的 Envoy websockets 层是一个迭代的过程。我们经常用手工编码的 Envoy 配置做原型，并在本地的开发机器上测试，每个监听器、路由和集群都有一个。手工编码的修改一旦成功，就会被移到 chef 库中。&lt;/p&gt;
&lt;p&gt;HTTP 路由是用 &lt;a href=&#34;https://curl.se/docs/manpage.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;curl&lt;/a&gt; 测试的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于头和 cookie 的特定路由到特定后端&lt;/li&gt;
&lt;li&gt;基于路径、前缀和查询参数的路由到特定后端&lt;/li&gt;
&lt;li&gt;SSL 证书&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当事情没有达到预期效果时，我们在机器上使用 Envoy 调试日志。调试日志清楚地解释了为什么 Envoy 选择将一个特定的请求路由到一个特定的集群。Envoy 的调试日志非常有用，但也很冗长，而且很昂贵（你真的不想在生产环境中启用这个功能）。调试日志可以通过 Curl 启用，如下所示。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl -X POST http://localhost:&amp;lt;envoy_admin_port&amp;gt;/logging?level&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;debug
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Envoy 管理接口在初始调试时也很有用，特别是这些端点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;clusters&lt;/strong&gt;：显示所有配置的集群，包括每个集群中所有上游主机的信息以及每个主机的统计数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/certs&lt;/strong&gt;：以 JSON 格式显示所有加载的 TLS 证书，包括文件名、序列号、主体替代名称和到期前的天数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/listeners&lt;/strong&gt;：显示所有配置的监听器及其名称和地址。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们的 Chef 库使用 &lt;code&gt;-mode validate&lt;/code&gt; 命令行选项运行 Envoy，作为一个验证步骤，以防止安装无效的配置。这也可以手动完成。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo /path/to/envoy/binary -c &amp;lt;/path/to/envoy.yaml&amp;gt; --mode validate
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Envoy 提供 JSON 格式的监听器日志。我们将这些日志录入我们的日志管道（当然是在对日志进行 &lt;a href=&#34;https://en.wikipedia.org/wiki/Personal_data&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PII&lt;/a&gt; 处理后），这对调试工作经常很有帮助。&lt;/p&gt;
&lt;p&gt;一旦对开发环境中的配置有信心，我们就准备做一些更多的测试 &amp;ndash; 在生产中！&amp;quot;。&lt;/p&gt;
&lt;h2 id=&#34;迁移至生产&#34;&gt;迁移至生产&lt;/h2&gt;
&lt;p&gt;为了将迁移过程中的风险降到最低，我们建立了一个新的 Envoy websocket 栈，其配置与现有的 HAProxy 层相当。这意味着我们可以逐步、有控制地将流量转移到新的 Envoy 堆栈，并且在必要时可以快速切换回 HAProxy。缺点是我们的 AWS 成本 —— 我们在迁移过程中使用了双倍的资源，但我们愿意花费时间和资源为我们的客户透明地进行迁移。&lt;/p&gt;
&lt;p&gt;我们通过 &lt;a href=&#34;https://ns1.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NS1&lt;/a&gt; 管理我们的 DNS 记录 &lt;strong&gt;wss-primary.slack.com&lt;/strong&gt; 和 &lt;strong&gt;wss-backup.slack.com&lt;/strong&gt;。我们使用加权路由将流量从 &lt;strong&gt;haproxy-wss&lt;/strong&gt; 转移到 &lt;strong&gt;envoy-wss&lt;/strong&gt; &lt;a href=&#34;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/introduction.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NLB&lt;/a&gt; DNS 名称。第一批区域是以 10%、25%、50%、75% 和 100% 的步骤单独上线的。由于我们对新的 Envoy 层和上线过程有信心，所以最后的区域上线速度更快（25%、50%、75%、100% 只需两天，而之前的一个区域需要一周的时间）。&lt;/p&gt;
&lt;p&gt;尽管迁移工作很顺利，没有出现故障，但还是出现了一些小问题，比如超时值和 header 的差异。在迁移过程中，我们多次恢复、修复，并再次上线。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-流程图显示dns迁移过程中涉及的组件和步骤&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;流程图显示DNS迁移过程中涉及的组件和步骤&#34; srcset=&#34;
               /docs/translation/migrating-millions-of-concurrent-websockets-to-envoy/e6c9d24ely1h1277p8k19j20hs07c3yp_hu4669547ff8bb5c60104fc4cb59e289ac_17587_009688043463080c2b49d89b299bbe4c.webp 400w,
               /docs/translation/migrating-millions-of-concurrent-websockets-to-envoy/e6c9d24ely1h1277p8k19j20hs07c3yp_hu4669547ff8bb5c60104fc4cb59e289ac_17587_1caf891ca0356239f1aa71961c73381a.webp 760w,
               /docs/translation/migrating-millions-of-concurrent-websockets-to-envoy/e6c9d24ely1h1277p8k19j20hs07c3yp_hu4669547ff8bb5c60104fc4cb59e289ac_17587_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://jimmysong.io/docs/docs/translation/migrating-millions-of-concurrent-websockets-to-envoy/e6c9d24ely1h1277p8k19j20hs07c3yp_hu4669547ff8bb5c60104fc4cb59e289ac_17587_009688043463080c2b49d89b299bbe4c.webp&#34;
               width=&#34;640&#34;
               height=&#34;264&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      流程图显示DNS迁移过程中涉及的组件和步骤
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;经过漫长而激动人心的 6 个月，迁移完成了，整个 HAProxy websocket 堆栈在全球范围内被 Envoy Proxy 取代，对客户的&lt;strong&gt;影响为零&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;哪些进展顺利哪些不顺利&#34;&gt;哪些进展顺利，哪些不顺利&lt;/h2&gt;
&lt;p&gt;迁移本身是相对平淡和无聊的。&lt;strong&gt;枯燥是一件好事&lt;/strong&gt;：刺激意味着事情的中断，枯燥意味着一切顺利。&lt;/p&gt;
&lt;p&gt;我们发现，旧的 HAProxy 配置随着时间的推移而有机地增长。它在很大程度上是由 HAProxy 使用的模型形成的 —— 一个包括所有监听器的大型配置。Envoy 的配置模型比 HAProxy 的模型使用更多的定义范围。一旦一个监听器被输入，只有该监听器内的规则适用于请求。一旦输入一个路由，只有该路由上的规则适用。这使得将规则与相关的请求联系起来更加容易。&lt;/p&gt;
&lt;p&gt;我们花了很长时间从旧的 HAProxy 配置中提取重要的东西，这实际上是技术债务。通常很难弄清楚为什么会有某个规则，哪些是有意的，哪些是无意的，以及其他服务所依赖的行为是什么。例如，有些服务应该只在两个虚拟主机（vhosts）中的一个下，但实际上在 HAProxy 的两个 vhosts 下都可用。我们不得不复制这个错误，因为现有的代码依赖于这种行为。&lt;/p&gt;
&lt;p&gt;我们在 HAProxy 堆栈中错过了一些细微的东西。有时这些是很重要的 —— 我们破坏了 Slack 的每日活跃用户（DAU）指标（哎呀！）。也有很多小问题需要解决。负载均衡器的行为很复杂，除了花时间调试外，没有真正的办法解决这个问题。&lt;/p&gt;
&lt;p&gt;我们开始迁移时，没有为负载均衡器的配置提供测试框架。我们没有自动测试来验证测试的 URL 路由到正确的端点以及与请求和响应头相关的行为，而是有&amp;hellip;&amp;hellip; 一个 HAProxy 配置。在迁移过程中，测试是很有帮助的，因为它们可以提供很多关于预期行为的原因的背景。因为我们缺乏测试，所以我们经常不得不向服务所有者询问，以了解他们所依赖的行为。&lt;/p&gt;
&lt;p&gt;我们建立的 Chef 资源有意只支持 Envoy 功能的一个子集。这使我们的库更简单 —— 我们只需要考虑我们实际使用的功能。缺点是，每次我们想使用新的 Envoy 功能时，都必须在我们的 Chef 库中添加对这些功能的支持。例如，&lt;a href=&#34;https://en.wikipedia.org/wiki/Server_Name_Indication&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SNI&lt;/a&gt;（https）监听器是在开发过程中编写的，当时我们认为这比向现有的监听器添加支持更简单。然而，当涉及到 vhost 支持时，我们已经开发了很多代码并在使用中，重构整个公司其他地方正在使用的资源将花费很长时间。我们的 Chef 库中的 vhost 支持是一个 hack（很快有一天我们会修复它）。&lt;/p&gt;
&lt;p&gt;为了使改变 Envoy 资源 Chef 库更加安全，换句话说，确保我们不会破坏其他使用我们库的团队，我们引入了一套全面的测试，生成这些团队的整个配置。这使得我们可以很容易地知道，当我们更新 Envoy Chef 资源时，我们生成的所有 Envoy 配置会（或不会）受到什么影响。&lt;/p&gt;
&lt;p&gt;这次迁移（和其他迁移一样）的关键事项之一是沟通。我们努力让每个人都了解并配合我们正在进行的改变。我们的客户体验（CE）团队是一个很好的合作伙伴 —— 他们能够监控传入的工单，以发现任何可能表明用户因这次迁移而受到影响的情况。&lt;/p&gt;
&lt;h2 id=&#34;下一步是什么&#34;&gt;下一步是什么？&lt;/h2&gt;
&lt;p&gt;尽管偶尔会遇到一些小挫折，但 envoy websocket 的迁移还是非常成功的。我们已经跟进，将另一个关键的 Slack 服务，即我们的软件客户端指标摄取管道 —— 与我们的其他入口负载均衡器隔离 —— 迁移到 Envoy Proxy。我们几乎已经完成了将我们的网络和 API 流量的内部负载均衡器迁移到 Envoy。这场史诗般的迁移的最后一部分是将我们的（常规的、非 websocket 的）HTTP 堆栈从 HAProxy 迁移到 Envoy，这也是正在进行的。&lt;/p&gt;
&lt;p&gt;我们的最终目标是在入口负载均衡器和服务网格数据平面上实现 Envoy Proxy 的标准化，这将大大降低团队的认知负荷和操作复杂性，并使 Envoy 的先进功能在我们的负载均衡基础设施中得到应用。自从迁移到 Envoy 后，我们已经大大超过了以前的峰值负载，没有任何问题。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Istio服务网格🔥</title>
      <link>https://jimmysong.io/docs/book/istio-handbook/</link>
      <pubDate>Mon, 04 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://jimmysong.io/docs/book/istio-handbook/</guid>
      <description>&lt;h2 id=&#34;关于本书&#34;&gt;关于本书&lt;/h2&gt;
&lt;p&gt;本书的主题包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务网格概念解析&lt;/li&gt;
&lt;li&gt;控制平面和数据平面的原理&lt;/li&gt;
&lt;li&gt;Istio 架构详解&lt;/li&gt;
&lt;li&gt;基于 Istio 的自定义扩展&lt;/li&gt;
&lt;li&gt;迁移到 Istio 服务网格&lt;/li&gt;
&lt;li&gt;构建云原生应用网络&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;如何阅读本书&#34;&gt;如何阅读本书&lt;/h2&gt;
&lt;p&gt;本书基于 Istio 1.11+ 版本编写，您可以通过以下地址参与到本书的编写或阅读本书：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rootsongjc/istio-handbook&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;自行构建&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/istio-handbook/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在线浏览&lt;/a&gt;（推荐）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;书中部分内容来自 Tetrate 出品的 &lt;a href=&#34;https://academy.tetrate.io/courses/istio-fundamentals-zh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 基础教程&lt;/a&gt;，请访问 &lt;a href=&#34;https://academy.tetrate.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate 学院&lt;/a&gt;，解锁全部教程及测试，获得 Tetrate 认证的 Istio 认证。&lt;/p&gt;
&lt;h2 id=&#34;致谢&#34;&gt;致谢&lt;/h2&gt;
&lt;p&gt;感谢 &lt;a href=&#34;https://www.servicemesher.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ServiceMesher&lt;/a&gt; 及&lt;a href=&#34;https://cloudnative.to/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云原生社区&lt;/a&gt;先后负责翻译了 &lt;a href=&#34;https://cloudnative.to/envoy/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy&lt;/a&gt; 及 &lt;a href=&#34;https://istio.io/latest/zh/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;/a&gt; 官方文档，为本书的成书提供了大量参考资料。&lt;/p&gt;
&lt;h2 id=&#34;许可证&#34;&gt;许可证&lt;/h2&gt;
&lt;p&gt;本书所有内容支持使用&lt;a href=&#34;https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;署名 - 非商业性使用 - 相同方式共享 4.0 (CC BY-NC-SA 4.0)&lt;/a&gt;  协议共享。&lt;/p&gt;
&lt;h2 id=&#34;参与本书&#34;&gt;参与本书&lt;/h2&gt;
&lt;p&gt;请参考 &lt;a href=&#34;https://istio.io/latest/about/contribute/style-guide/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 文档样式指南&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>开发者布道手册</title>
      <link>https://jimmysong.io/docs/book/developer-advocacy-handbook/</link>
      <pubDate>Thu, 24 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://jimmysong.io/docs/book/developer-advocacy-handbook/</guid>
      <description>&lt;p&gt;本书译自 &lt;a href=&#34;https://developer-advocacy.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Developer Advocacy Handbook&lt;/a&gt;，副标题「开发者布道师的自我修养」为译者自拟。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作者：Christian Heilmann&lt;/li&gt;
&lt;li&gt;译者：宋净超（Jimmy Song）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/developer-advocacy-handbook/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;开始阅读&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rootsongjc/developer-advocacy-handbook/releases/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;下载电子书&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;译者序&#34;&gt;译者序&lt;/h2&gt;
&lt;p&gt;随着开源软件的流行，企业的开发者布道（Developer Advocacy）的需求不断增长，开发者布道师（Developer Advocate）的职业前景也越来越广阔。这本书将揭开大众口中的“布道师”的神秘面纱，让你了解这一角色的工作内容；对于各位布道师来说，这本书也将成为你整个布道生涯的得力助手，指导你布道的方方面面。&lt;/p&gt;
&lt;p&gt;作者 Christian Heilmann 是一个德国人，从事开发者布道工作已有十余年，译者本身也有多年从事开发者布道工作的经验。目前在中文互联网上，对“布道师”这一角色还存在很多猜疑和误解，相信这本书可以化解开发者对布道师这一角色的疑虑。虽然书中提到的一些技术在中国可能并不适用，但是中国也有同类出色的替代品，我相信人情总是相通的，技术只是手段而已。&lt;/p&gt;
&lt;p&gt;由于笔者完全凭个人兴趣，利用业余时间翻译此书，翻译过程中难免遗漏和错误，欢迎提交 Issue 评论和 PR 修改。如果你有关于开发者布道、开源、云原生及开源相关的问题，欢迎&lt;a href=&#34;https://jimmysong.io/contact/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;与我交流&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;许可证&#34;&gt;许可证&lt;/h2&gt;
&lt;p&gt;本书所有内容支持使用&lt;a href=&#34;https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;署名 - 非商业性使用 - 相同方式共享 4.0 (CC BY-NC-SA 4.0)&lt;/a&gt;  协议共享。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>利用服务网格实施微服务的DevSecOps</title>
      <link>https://jimmysong.io/docs/book/service-mesh-devsecops/</link>
      <pubDate>Mon, 14 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://jimmysong.io/docs/book/service-mesh-devsecops/</guid>
      <description>&lt;p&gt;本书译自美国国家标准标准与技术研究院（NIST）Special Publication 800-204C。&lt;/p&gt;
&lt;h3 id=&#34;关于本书&#34;&gt;关于本书&lt;/h3&gt;
&lt;p&gt;作者：Ramaswamy Chandramouli&lt;/p&gt;
&lt;p&gt;审阅&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;计算机安全司信息技术实验室&lt;/li&gt;
&lt;li&gt;美国商务部&lt;/li&gt;
&lt;li&gt;Gina M. Raimondo，秘书&lt;/li&gt;
&lt;li&gt;国家标准和技术研究所&lt;/li&gt;
&lt;li&gt;James K. Olthoff，履行负责标准和技术的商务部副部长兼国家标准和技术研究所所长的非专属职能和职责&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原出版物可在：&lt;a href=&#34;https://doi.org/10.6028/NIST.SP.800-204C&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://doi.org/10.6028/NIST.SP.800-204C&lt;/a&gt; 免费获取，中文版请&lt;a href=&#34;https://jimmysong.io/service-mesh-devsecops/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在此阅读&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Envoy基础教程🔥</title>
      <link>https://jimmysong.io/docs/book/envoy-handbook/</link>
      <pubDate>Sat, 12 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://jimmysong.io/docs/book/envoy-handbook/</guid>
      <description>&lt;p&gt;Envoy 基础教程，本手册梳理了 Envoy 基础知识，适用于初学者，帮你快速掌握 Envoy 代理。&lt;/p&gt;
&lt;h2 id=&#34;关于本书&#34;&gt;关于本书&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://envoyproxy.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy&lt;/a&gt; 是一个开源的边缘和服务代理，专为云原生应用而设计。Envoy 与每个应用程序一起运行，通过提供网络相关的功能，如重试、超时、流量路由和镜像、TLS 终止等，以一种平台无关的方式抽象出网络。由于所有的网络流量都流经 Envoy 代理，因此很容易观察到流量和问题区域，调整性能，并准确定位延迟来源。&lt;/p&gt;
&lt;p&gt;本书为 &lt;a href=&#34;https://tetrate.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate&lt;/a&gt; 出品的《Envoy 基础教程》的文字内容，其配套的 8 节实验及 19 个测试，请访问 &lt;a href=&#34;https://academy.tetrate.io/courses/envoy-fundamentals-zh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate 学院&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;如何阅读本书&#34;&gt;如何阅读本书&lt;/h2&gt;
&lt;p&gt;您可以使用以下方式阅读：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/envoy-handbook/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在线阅读&lt;/a&gt;（建议）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rootsongjc/envoy-handbook/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;下载 PDF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注：PDF 非实时编译，内容可能落后于在线版本，建议在线阅读。&lt;/p&gt;
&lt;h2 id=&#34;关于作者&#34;&gt;关于作者&lt;/h2&gt;
&lt;p&gt;宋净超（Jimmy Song），CNCF Ambassador，&lt;a href=&#34;https://cloudnative.to&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云原生社区&lt;/a&gt;创始人，个人网站 &lt;a href=&#34;https://jimmysong.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;jimmysong.io&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;许可证&#34;&gt;许可证&lt;/h2&gt;
&lt;p&gt;您可以使用&lt;a href=&#34;https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;署名 - 非商业性使用 - 相同方式共享 4.0 (CC BY-NC-SA 4.0)&lt;/a&gt;  协议共享。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Kubernetes中文指南🔥</title>
      <link>https://jimmysong.io/docs/book/kubernetes-handbook/</link>
      <pubDate>Wed, 09 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://jimmysong.io/docs/book/kubernetes-handbook/</guid>
      <description>&lt;p&gt;本书起始于2017年3月，记录了本人从零开始学习和使用Kubernetes的心路历程，着重于经验分享和总结，同时也会有相关的概念解析，希望能够帮助大家少踩坑，少走弯路，还会指引大家关注Kubernetes生态周边，如微服务构建、DevOps、大数据应用、服务网格（Service Mesh）、云原生等领域。&lt;/p&gt;
&lt;h3 id=&#34;开始之前&#34;&gt;开始之前&lt;/h3&gt;
&lt;p&gt;在阅读本书之前希望您掌握以下知识和准备以下环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux 操作系统原理&lt;/li&gt;
&lt;li&gt;Linux 常用命令&lt;/li&gt;
&lt;li&gt;Docker 容器原理及基本操作&lt;/li&gt;
&lt;li&gt;一台可以上网的电脑，Mac/Windows/Linux 皆可&lt;/li&gt;
&lt;li&gt;安装 Docker&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;本书主题&#34;&gt;本书主题&lt;/h3&gt;
&lt;p&gt;本书的主题不局限于Kubernetes，还包括以下几大主题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;云原生开源组件&lt;/li&gt;
&lt;li&gt;云原生应用与微服务架构&lt;/li&gt;
&lt;li&gt;基于Kubernetes的Service Mesh架构&lt;/li&gt;
&lt;li&gt;Kubernetes与微服务结合实践&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;起初写作本书时，安装的所有组件、所用示例和操作等皆基于 &lt;strong&gt;Kubernetes 1.6+&lt;/strong&gt; 版本，同时我们也将密切关注Kubernetes的版本更新，随着它的版本更新升级，本书中的Kubernetes版本和示例也将随之更新。&lt;/p&gt;
&lt;h3 id=&#34;使用方式&#34;&gt;使用方式&lt;/h3&gt;
&lt;p&gt;您可以通过以下方式使用本书：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rootsongjc/kubernetes-handbook&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/kubernetes-handbook&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitBook 在线浏览&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rootsongjc/kubernetes-handbook/releases&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;下载本书的发行版&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;按照&lt;a href=&#34;https://github.com/rootsongjc/kubernetes-handbook/blob/master/CODE_OF_CONDUCT.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;说明&lt;/a&gt;自行编译成离线版本&lt;/li&gt;
&lt;li&gt;Fork 一份添加你自己的笔记自行维护，有余力者可以一起参与进来&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;注意：本书中的 Service Mesh 相关内容已不再维护，请转至 &lt;a href=&#34;https://www.servicemesher.com/istio-handbook&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;istio-handbook&lt;/a&gt; 浏览。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;快速开始&#34;&gt;快速开始&lt;/h2&gt;
&lt;p&gt;如果您想要学习Kubernetes和云原生应用架构但是又不想自己从头开始搭建和配置一个集群，那么可以直接使用&lt;a href=&#34;https://github.com/rootsongjc/kubernetes-vagrant-centos-cluster&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;kubernetes-vagrant-centos-cluster&lt;/a&gt;项目直接在本地部署一个3节点的分布式集群及其他如Heapster、EFK、Istio等可选组件，或者使用更加轻量级的&lt;a href=&#34;https://github.com/rootsongjc/cloud-native-sandbox&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cloud-native-sandbox&lt;/a&gt;在个人电脑上使用Docker运行单节点的Kubernetes、Istio等组件。&lt;/p&gt;
&lt;h2 id=&#34;贡献与致谢&#34;&gt;贡献与致谢&lt;/h2&gt;
&lt;p&gt;感谢大家对本书做出的贡献！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rootsongjc/kubernetes-handbook/graphs/contributors&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;查看贡献者列表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rootsongjc/kubernetes-handbook/blob/master/CONTRIBUTING.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;查看如何贡献&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rootsongjc/kubernetes-handbook/blob/master/CODE_OF_CONDUCT.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;查看文档的组织结构与使用方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Istio 1.12 引入 Wasm 插件配置 API 用于扩展 Istio 生态</title>
      <link>https://jimmysong.io/docs/translation/istio-wasm-extensions-and-ecosystem/</link>
      <pubDate>Wed, 24 Nov 2021 18:03:00 +0800</pubDate>
      <guid>https://jimmysong.io/docs/translation/istio-wasm-extensions-and-ecosystem/</guid>
      <description>&lt;p&gt;Istio 1.12 中新的 WebAssembly 基础设施使其能够轻松地将额外的功能注入网格部署中。&lt;/p&gt;
&lt;p&gt;经过三年的努力，Istio 现在有了一个强大的扩展机制，可以将自定义和第三方 Wasm 模块添加到网格中的 sidecar。Tetrate 工程师&lt;a href=&#34;https://github.com/mathetake&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;米田武（Takeshi Yoneda）&lt;/a&gt;和&lt;a href=&#34;https://github.com/lizan&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;周礼赞（Lizan Zhou）&lt;/a&gt;在实现这一目标方面发挥了重要作用。这篇文章将介绍 Istio 中 Wasm 的基础知识，以及为什么它很重要，然后是关于建立自己的 Wasm 插件并将其部署到网格的简短教程。&lt;/p&gt;
&lt;h2 id=&#34;为什么-istio-中的-wasm-很重要&#34;&gt;为什么 Istio 中的 Wasm 很重要&lt;/h2&gt;
&lt;p&gt;使用 Wasm，开发人员可以更容易的扩展网格和网关。在 Tetrate，我们相信这项技术正在迅速成熟，因此我们一直在投资上游的 Istio，使配置 API、分发机制和从 Go 开始的可扩展性体验更加容易。我们认为这将使 Istio 有一个全新的方向。&lt;/p&gt;
&lt;h2 id=&#34;有何期待新的插件配置-api可靠的获取和安装机制&#34;&gt;有何期待：新的插件配置 API，可靠的获取和安装机制&lt;/h2&gt;
&lt;p&gt;有一个新的顶级 API，叫做 &lt;a href=&#34;https://istio.io/latest/docs/reference/config/proxy_extensions/wasm-plugin/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WasmPlugin&lt;/a&gt;，可以让你配置要安装哪些插件，从哪里获取它们（OCI 镜像、容器本地文件或远程 HTTP 资源），在哪里安装它们（通过 &lt;a href=&#34;https://istio.io/latest/docs/reference/config/type/workload-selector/#WorkloadSelector&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Workload 选择器&lt;/a&gt;），以及一个配置结构体来传递给插件实例。&lt;/p&gt;
&lt;p&gt;istio-agent 中的镜像提取机制（在 Istio 1.9 中引入），从远程 HTTP 源可靠地检索 Wasm 二进制文件，已被扩展到支持从任何 OCI 注册处检索 Wasm OCI 镜像，包括 Docker Hub、Google Container Registry（GCR）、Amazon Elastic Container Registry（Amazon ECR）和其他地方。&lt;/p&gt;
&lt;p&gt;这意味着你可以创建自己的 Wasm 插件，或者从任何注册处选择现成的插件，只需几行配置就可以扩展 Istio 的功能。Istio 会在幕后做所有的工作，为你获取、验证、安装和配置它们。&lt;/p&gt;
&lt;h2 id=&#34;istio-wasm-扩展&#34;&gt;Istio Wasm 扩展&lt;/h2&gt;
&lt;p&gt;Istio 的扩展机制使用 &lt;a href=&#34;https://github.com/proxy-wasm/spec&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Proxy-Wasm 应用二进制接口（ABI）&lt;/a&gt;规范，该规范由周礼赞和米田武带头制定，提供了一套代理无关的流媒体 API 和实用功能，可以用任何有合适 SDK 的语言来实现。截至目前，Proxy-Wasm 的 SDK 有 AssemblyScript（类似 TypeScript）、C++、Rust、Zig 和 Go（使用 TinyGo WebAssembly 系统接口「WASI」，米田武也是其主要贡献者）。&lt;/p&gt;
&lt;h2 id=&#34;如何获取tetrate-istio-distro&#34;&gt;如何获取：Tetrate Istio Distro&lt;/h2&gt;
&lt;p&gt;获得 Istio 的最简单方法是使用 Tetrate 的开源 &lt;a href=&#34;https://istio.tetratelabs.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;get-mesh&lt;/code&gt; CLI 和 Tetrate Istio Distro&lt;/a&gt;，这是一个简单、安全的上游 Istio 的企业级发行版。&lt;/p&gt;
&lt;h2 id=&#34;wasm-实战构建你自己的速率限制-webassembly-插件&#34;&gt;Wasm 实战：构建你自己的速率限制 WebAssembly 插件&lt;/h2&gt;
&lt;p&gt;在我们之前关于 &lt;a href=&#34;https://www.tetrate.io/blog/wasm-modules-and-envoy-extensibility-explained-part-1/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy 中的 Wasm 扩展&lt;/a&gt;的博客中，我们展示了如何开发 WebAssembly 插件来增强服务网格的能力。新的 Wasm 扩展 API 让它变得更加简单。本教程将解释如何使用 Istio Wasm 扩展 API 来实现 Golang 中的速率限制。&lt;/p&gt;
&lt;h3 id=&#34;先决条件&#34;&gt;先决条件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;熟悉 &lt;a href=&#34;https://www.tetrate.io/blog/wasm-modules-and-envoy-extensibility-explained-part-1/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 和 Envoy 中的 Wasm&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;安装 &lt;a href=&#34;https://tinygo.org/getting-started/install/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TinyGo 0.21.0&lt;/a&gt; 并使用 Golang 构建 Wasm 扩展。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;说明&#34;&gt;说明&lt;/h3&gt;
&lt;p&gt;在这个例子中，我们将在集群中部署两个应用程序（sleep 和 httpbin）。我们将从一个容器向另一个容器发送几个请求，而不部署任何 Wasm 扩展。&lt;/p&gt;
&lt;p&gt;接下来，我们将在 Go 中创建一个 Wasm 模块，为响应添加一个自定义头，并拒绝任何请求率超过每秒两个的请求。&lt;/p&gt;
&lt;p&gt;我们将把 Wasm 模块推送到 Docker 镜像仓库，并使用新的 WasmPlugin 资源，告诉 Istio 从哪里下载 Wasm 模块，以及将该模块应用于哪些工作负载。&lt;/p&gt;
&lt;h3 id=&#34;第-1-步安装-istio-并部署应用程序&#34;&gt;第 1 步：安装 Istio 并部署应用程序&lt;/h3&gt;
&lt;p&gt;首先，我们将下载并安装 Istio 1.12，并标记 Kubernetes 的 default 命名空间，以便自动注入 sidecar。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl -L https://git.io/getLatestIstio &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ISTIO_VERSION&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;1.12 sh
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; istio-1.12/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;./bin/istioctl install --set &lt;span class=&#34;nv&#34;&gt;profile&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;demo -y
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl label namespace default istio-injection&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;enabled --overwrite
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来，我们将部署 httpbin 和 sleep 应用程序的示例。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl apply -f samples/httpbin/httpbin.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl apply -f samples/sleep/sleep.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;应用程序部署并运行后，我们将每秒从 &lt;strong&gt;sleep&lt;/strong&gt; 容器向 &lt;strong&gt;httpbin&lt;/strong&gt; 容器发送 4 个请求。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ &lt;span class=&#34;nv&#34;&gt;SLEEP_POD&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;kubectl get pod -l &lt;span class=&#34;nv&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;sleep -o &lt;span class=&#34;nv&#34;&gt;jsonpath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;={&lt;/span&gt;.items..metadata.name&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;SLEEP_POD&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt; -c sleep -- sh -c &lt;span class=&#34;s1&#34;&gt;&amp;#39;for i in $(seq 1 3); do curl --head -s httpbin:8000/headers; sleep 0.25; done&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;HTTP/1.1 &lt;span class=&#34;m&#34;&gt;200&lt;/span&gt; OK
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;server: envoy
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;date: Tue, &lt;span class=&#34;m&#34;&gt;16&lt;/span&gt; Nov &lt;span class=&#34;m&#34;&gt;2021&lt;/span&gt; 22:18:32 GMT
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;content-type: application/json
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;content-length: &lt;span class=&#34;m&#34;&gt;523&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;access-control-allow-origin: *
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;access-control-allow-credentials: &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;x-envoy-upstream-service-time: &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;HTTP/1.1 &lt;span class=&#34;m&#34;&gt;200&lt;/span&gt; OK
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;server: envoy
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;date: Tue, &lt;span class=&#34;m&#34;&gt;16&lt;/span&gt; Nov &lt;span class=&#34;m&#34;&gt;2021&lt;/span&gt; 22:18:32 GMT
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;content-type: application/json
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;content-length: &lt;span class=&#34;m&#34;&gt;523&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;access-control-allow-origin: *
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;access-control-allow-credentials: &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;x-envoy-upstream-service-time: &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;HTTP/1.1 &lt;span class=&#34;m&#34;&gt;200&lt;/span&gt; OK
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;server: envoy
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;date: Tue, &lt;span class=&#34;m&#34;&gt;16&lt;/span&gt; Nov &lt;span class=&#34;m&#34;&gt;2021&lt;/span&gt; 22:18:32 GMT
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;content-type: application/json
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;content-length: &lt;span class=&#34;m&#34;&gt;523&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;access-control-allow-origin: *
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;access-control-allow-credentials: &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;x-envoy-upstream-service-time: &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你会发现所有的请求都成功了，并返回了 HTTP 200。&lt;/p&gt;
&lt;h3 id=&#34;第-2-步开发编译和推送-wasm-模块&#34;&gt;第 2 步：开发、编译和推送 Wasm 模块&lt;/h3&gt;
&lt;p&gt;我们将使用 Golang 和 Proxy Wasm Golang SDK 来开发 Wasm 模块。我们将使用 SDK 资源库中的一个现有例子，叫做 istio-rate-limiting。要开始，请先克隆 Github 仓库。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git clone https://github.com/tetratelabs/wasm-rate-limiting
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; wasm-rate-limiting/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们来看看 &lt;code&gt;main.go&lt;/code&gt; 中的代码。这就是我们使用 Proxy Wasm Golang SDK 实现速率限制逻辑的地方。Wasm 模块做了两件事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在响应中添加一个自定义的头。&lt;/li&gt;
&lt;li&gt;执行 2 个请求 / 秒的速率限制，拒绝超额的请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面是 &lt;code&gt;main.go&lt;/code&gt; 的片段，显示了功能是如何实现的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Modify the header
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;httpHeaders&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;OnHttpResponseHeaders&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;numHeaders&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;endOfStream&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;types&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Action&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;additionalHeaders&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;nx&#34;&gt;proxywasm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;AddHttpResponseHeader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;types&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ActionContinue&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Perform rate limiting
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;httpHeaders&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;OnHttpRequestHeaders&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;types&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Action&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nx&#34;&gt;current&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Now&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;UnixNano&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;c1&#34;&gt;// We use nanoseconds() rather than time.Second() because the proxy-wasm has the known limitation.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// TODO(incfly): change to time.Second() once https://github.com/proxy-wasm/proxy-wasm-cpp-host/issues/199
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// is resolved and released.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;current&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pluginContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;lastRefillNanoSec&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1e9&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;nx&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pluginContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;remainToken&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;nx&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pluginContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;lastRefillNanoSec&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;current&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nx&#34;&gt;proxywasm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;LogCriticalf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Current time %v, last refill time %v, the remain token %v&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;nx&#34;&gt;current&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pluginContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;lastRefillNanoSec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pluginContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;remainToken&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pluginContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;remainToken&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;proxywasm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;SendHttpResponse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;403&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[][&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;powered-by&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;proxy-wasm-go-sdk!!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;rate limited, wait and retry.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;nx&#34;&gt;proxywasm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;LogErrorf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;failed to send local response: %v&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;nx&#34;&gt;proxywasm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ResumeHttpRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;types&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ActionPause&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nx&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pluginContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;remainToken&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;types&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ActionContinue&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 &lt;code&gt;OnHttpResponseHeaders&lt;/code&gt; 函数中，我们正在迭代 &lt;code&gt;extraHeaders&lt;/code&gt; 变量，并将头文件添加到响应中。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;OnHttpRequestHeaders&lt;/code&gt; 函数中，我们得到当前的时间戳，将其与最后一次补给时间的时间戳进行比较（对于速率限制器），如果需要的话，就补给令牌。&lt;/p&gt;
&lt;p&gt;如果没有剩余的令牌，我们就发送一个带有额外头的 403 响应（&lt;strong&gt;由：proxy-wasm-go-sdk！！&lt;/strong&gt;）。&lt;/p&gt;
&lt;p&gt;让我们用 tinygo 将 Golang 程序编译成 Wasm 模块，并将其打包成一个 Docker 镜像。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;tinygo build -o main.wasm -scheduler&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;none -target&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;wasi main.go
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们构建一个 Docker 镜像，并将其推送到镜像仓库（用你自己的 Docker 镜像仓库和镜像名称替换 &lt;code&gt;${YOUR_DOCKER_REGISTRY_IMAGE}&lt;/code&gt;）。在这之后，你的 Wasm 插件就可以在你的服务网格中使用了。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker build -t &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;YOUR_DOCKER_REGISTRY_IMAGE&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;:v1 .
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker push -t &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;YOUR_DOCKER_REGISTRY_IMAGE&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;:v1 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;另外，你也可以使用一个预构建的 Docker 镜像，它有相同的代码，位于 &lt;a href=&#34;http://ghcr.io/tetratelabs/wasm-rate-limiting:v1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ghcr.io/tetratelabs/wasm-rate-limiting:v1&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;第-3-步配置-istio-wasm-扩展-api&#34;&gt;第 3 步：配置 Istio Wasm 扩展 API&lt;/h3&gt;
&lt;p&gt;Istio Wasm Extension API 和新的 WasmPlugin 资源允许我们将我们推送到 Docker 镜像仓库的速率限制 Wasm 模块添加到 httpbin 工作负载中。下面是 WasmPlugin 资源的 YAML 配置。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;extensions.istio.io/v1alpha1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;WasmPlugin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;httpbin-rate-limiting&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;httpbin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;oci://ghcr.io/tetratelabs/wasm-rate-limiting:v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个配置部署后，Istiod 就会把相应的配置推送到 Envoy sidecar（与我们在 &lt;code&gt;matchLabels&lt;/code&gt; 字段中指定的标签相匹配的那些）。Sidecar 中的 Istio 代理将执行远程获取，下载我们刚刚推送的 Wasm 模块，然后将其加载到 Envoy 运行时的 Wasm 引擎中执行。&lt;/p&gt;
&lt;p&gt;让我们把上述 YAML 保存为 wasm.yaml，并将其部署到集群中。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -f ./wasm.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;wasmplugin.extensions.istio.io/httpbin-rate-limiting created
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;第-4-步验证速率限制的效果&#34;&gt;第 4 步：验证速率限制的效果&lt;/h3&gt;
&lt;p&gt;在我们部署了 WasmPlugin 资源和 Istio 从注册表中获取了 Wasm 模块后，我们现在可以验证 Wasm 插件中实现的速率限制是如何工作的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ &lt;span class=&#34;nv&#34;&gt;SLEEP_POD&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;kubectl get pod -l &lt;span class=&#34;nv&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;sleep -o &lt;span class=&#34;nv&#34;&gt;jsonpath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;={&lt;/span&gt;.items..metadata.name&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;SLEEP_POD&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt; -c sleep -- sh -c &lt;span class=&#34;s1&#34;&gt;&amp;#39;for i in $(seq 1 3); do curl --head -s httpbin:8000/headers; sleep 0.25; done&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;HTTP/1.1 &lt;span class=&#34;m&#34;&gt;200&lt;/span&gt; OK
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;server: envoy
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;date: Tue, &lt;span class=&#34;m&#34;&gt;16&lt;/span&gt; Nov &lt;span class=&#34;m&#34;&gt;2021&lt;/span&gt; 22:16:34 GMT
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;content-type: application/json
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;content-length: &lt;span class=&#34;m&#34;&gt;523&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;access-control-allow-origin: *
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;access-control-allow-credentials: &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;x-envoy-upstream-service-time: &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;who-am-i: wasm-extension
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;injected-by: istio-api!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;HTTP/1.1 &lt;span class=&#34;m&#34;&gt;200&lt;/span&gt; OK
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;server: envoy
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;date: Tue, &lt;span class=&#34;m&#34;&gt;16&lt;/span&gt; Nov &lt;span class=&#34;m&#34;&gt;2021&lt;/span&gt; 22:16:35 GMT
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;content-type: application/json
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;content-length: &lt;span class=&#34;m&#34;&gt;523&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;access-control-allow-origin: *
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;access-control-allow-credentials: &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;x-envoy-upstream-service-time: &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;who-am-i: wasm-extension
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;injected-by: istio-api!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;HTTP/1.1 &lt;span class=&#34;m&#34;&gt;403&lt;/span&gt; Forbidden
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;powered-by: proxy-wasm-go-sdk!!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;content-length: &lt;span class=&#34;m&#34;&gt;29&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;content-type: text/plain
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;who-am-i: wasm-extension
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;injected-by: istio-api!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;date: Tue, &lt;span class=&#34;m&#34;&gt;16&lt;/span&gt; Nov &lt;span class=&#34;m&#34;&gt;2021&lt;/span&gt; 22:16:35 GMT
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;server: envoy
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;x-envoy-upstream-service-time: &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;就像以前一样，我们从 sleep 容器向 httpbin 容器发送 3 个请求。这一次，Wasm 插件代码被执行，我们可以注意到输出中的一些差异。首先，&lt;code&gt;who-am-i&lt;/code&gt; 头被 Wasm 插件注入了。前两个请求以 HTTP 200 的响应代码成功，剩下的请求则以 HTTP 429 失败。此外，我们可以注意到一个名为 &lt;code&gt;powered-by&lt;/code&gt; 的额外头，它也被 Wasm 插件注入了。&lt;/p&gt;
&lt;h2 id=&#34;教程摘要&#34;&gt;教程摘要&lt;/h2&gt;
&lt;p&gt;总而言之，本教程演示了如何轻松实现插件功能，以扩展 Istio 的功能，满足你的特定需求。这需要三个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在 Golang 中实现你的插件功能。&lt;/li&gt;
&lt;li&gt;编译、构建，并将 Wasm 模块推送到符合 OCI 标准的 Docker 镜像仓库。&lt;/li&gt;
&lt;li&gt;使用 WasmPlugin 资源配置服务网格工作负载，以便从远程镜像仓库中拉取 Wasm 模块。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;该教程实现了一个单一的 Wasm 插件来处理 HTTP 请求。除此之外，你可以有多个 Wasm 插件，每个单独的插件负责某一部分的功能。&lt;/p&gt;
&lt;p&gt;例如，&lt;a href=&#34;https://github.com/istio/api/blob/master/extensions/v1alpha1/wasm.proto#L254&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AUTHN&lt;/a&gt; 阶段的一个插件获取或验证认证凭证；&lt;a href=&#34;https://github.com/istio/api/blob/master/extensions/v1alpha1/wasm.proto#L257&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AUTHZ&lt;/a&gt; 阶段的另一个插件实现你自己定制的授权逻辑，等等。&lt;/p&gt;
&lt;p&gt;Istio Wasm 扩展还允许我们生成插件指标，或在多个 Wasm 插件中汇总。该插件提供了一个日志功能，允许我们将日志信息写到 Envoy sidecar。这对 Wasm 插件的调试和开发特别有帮助。&lt;/p&gt;
&lt;p&gt;目前的 Istio Wasm API 处于 alpha 阶段，将在未来的 Istio 版本中得到增强和稳定。这包括通过验证签名来安全地验证 Wasm 插件本身，支持用存储为 Kubernetes Secret 的秘密来拉取 Wasm 插件等。&lt;/p&gt;
&lt;h2 id=&#34;进一步阅读和补充资源&#34;&gt;进一步阅读和补充资源&lt;/h2&gt;
&lt;p&gt;在 Tetrate，我们正在努力改善开发者的体验，&lt;a href=&#34;https://github.com/tetratelabs/proxy-wasm-go-sdk/tree/main/examples&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tetratelabs/proxy-wasm-golang-sdk&lt;/a&gt; 包含本教程使用的 Golang SDK 库。你可以找到更多的例子，如 http &lt;a href=&#34;https://github.com/tetratelabs/proxy-wasm-go-sdk/blob/main/examples/http_routing/main.go#L70-L80&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;头的操作&lt;/a&gt;、样例&lt;a href=&#34;https://github.com/tetratelabs/proxy-wasm-go-sdk/tree/main/examples/http_auth_random&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;授权&lt;/a&gt;、&lt;a href=&#34;https://github.com/tetratelabs/proxy-wasm-go-sdk/tree/main/examples/http_routing&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;改变路由&lt;/a&gt;行为等。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://istio.tetratelabs.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate Istio Distro&lt;/a&gt; 是安装、操作和升级 Istio 的最简单方法。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.tetrate.io/istio-wasm-workshop/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;报名参加 Tetrate 的 Istio Wasm 插件研讨会，向 Istio 中的 Wasm 插件的创造者学习&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>云原生社区 meetup 第八期上海站</title>
      <link>https://jimmysong.io/docs/event/cloud-native-meetup-shanghai-08/</link>
      <pubDate>Sat, 23 Oct 2021 13:00:00 +0800</pubDate>
      <guid>https://jimmysong.io/docs/event/cloud-native-meetup-shanghai-08/</guid>
      <description>&lt;h2 id=&#34;讲师分享&#34;&gt;讲师分享&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1tP4y1L7rs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云原生社区 meetup 第八期上海站开场，郭旭东&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1Xq4y197Su&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云原生 2.0 华为云赋能 “新云原生企业”，张凯豪&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1i44y1v7fM&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;蚂蚁万级规模 K8s 集群 etcd 架构优化实践 —ETCD on OceanBase，宣超&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV17Q4y1q79o&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;新一代开源 HCI 底层原理剖析，胡凯&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1uf4y137xC&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;攀登规模化的高峰 —— 蚂蚁集团大规模 Sigma 集群 ApiServer 优化实践，唐博，谭崇康&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1fq4y1G7qD&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云原生分布式存储 Rook 及其在企业中应用的未来，林文炜&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>云原生社区 meetup 第七期深圳站</title>
      <link>https://jimmysong.io/docs/event/cloud-native-meetup-shenzhen-07/</link>
      <pubDate>Sat, 25 Sep 2021 13:00:00 +0800</pubDate>
      <guid>https://jimmysong.io/docs/event/cloud-native-meetup-shenzhen-07/</guid>
      <description>&lt;h2 id=&#34;讲师分享&#34;&gt;讲师分享&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV19h411p7jn&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云原生社区 meetup 第七期深圳站开场致辞 - 宋净超&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1WQ4y1z7zQ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;使用 IAST 构建高效的 DevSecOps 流程 - 董志勇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1hf4y1E7KJ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云原生场景下的开发和调试-汪晟杰，黄金浩&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1LL411476c&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy 在腾讯游戏云原生平台应用 - 田甜&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1TQ4y1C7xx&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;使用 KubeVela 构建混合云应用管理平台 - 邓洪超&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>云原生社区 meetup 第六期大连站</title>
      <link>https://jimmysong.io/docs/event/cloud-native-meetup-dalian-06/</link>
      <pubDate>Sun, 22 Aug 2021 13:00:00 +0800</pubDate>
      <guid>https://jimmysong.io/docs/event/cloud-native-meetup-dalian-06/</guid>
      <description>&lt;h2 id=&#34;话题&#34;&gt;话题&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1qL411b7K2/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;欢迎来到云原生社区大连站&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1fv411N7CR/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Connecting, Controlling and Observing Dubbo Microservices with Flomesh，林杨&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV11P4y1p7kz/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;基于云原生技术的服务最大化可用性，白西原（乐天创研）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1F64y1v7PU/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Jutopia 一站式云原生机器学习平台，何昌钦&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1e3411B79F/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;分布式系统的发展与趋势分析，张卫滨&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Kubernetes加固指南</title>
      <link>https://jimmysong.io/docs/book/kubernetes-hardening-guidance/</link>
      <pubDate>Sun, 08 Aug 2021 00:00:00 +0000</pubDate>
      <guid>https://jimmysong.io/docs/book/kubernetes-hardening-guidance/</guid>
      <description>&lt;p&gt;近日美国国家安全局（NSA）和网络安全与基础设施安全署（CISA）发布了一份网络安全技术报告 &lt;em&gt;Kubernetes Hardening Guidance&lt;/em&gt;（&lt;a href=&#34;https://media.defense.gov/2021/Aug/03/2002820425/-1/-1/1/CTR_KUBERNETES%20HARDENING%20GUIDANCE.PDF&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;查看英文原版 PDF&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;Jimmy 翻译的《Kubernetes 加固指南》（或译作《Kubernetes 强化指南》）中文版，&lt;a href=&#34;https://jimmysong.io/kubernetes-hardening-guidance&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点击在线阅读&lt;/a&gt;，如您发现错误，欢迎在 &lt;a href=&#34;https://github.com/rootsongjc/kubernetes-hardening-guidance&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt; 上提交勘误。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>云原生社区 meetup 第五期成都站</title>
      <link>https://jimmysong.io/docs/event/cloud-native-meetup-chengdu-05/</link>
      <pubDate>Sat, 03 Jul 2021 13:00:00 +0800</pubDate>
      <guid>https://jimmysong.io/docs/event/cloud-native-meetup-chengdu-05/</guid>
      <description>&lt;h2 id=&#34;话题&#34;&gt;话题&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1zh411h7vH&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;开场演讲：欢迎来到云原生社区成都站&lt;/a&gt;，宋净超，云原生社区创始人、Tetrate 布道师&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1to4y1C7Sm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Amazon EKS Distro 开源项目解析 &amp;amp; 演示&lt;/a&gt;，粟伟，亚马逊云科技资深解决方案架构师&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1ih411h7HA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;面向量化投资的 AI 平台 ——AI 赋能投资：打造以大数据 + AI 为核心的下一代投资平台&lt;/a&gt;，梁举，宽邦科技 CEO&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1NM4y1M7gg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;基于 TiDB 的云原生数据库实践&lt;/a&gt;，王天宜，TiDB 社区部门架构师&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1ty4y1M7SX&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Layotto: 开启服务网格 + 应用运行时新篇章&lt;/a&gt;，石建伟（卓与），蚂蚁集团高级技术专家&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>云原生社区 meetup 第四期广州站</title>
      <link>https://jimmysong.io/docs/event/cloud-native-meetup-guangzhou-04/</link>
      <pubDate>Sat, 22 May 2021 13:00:00 +0800</pubDate>
      <guid>https://jimmysong.io/docs/event/cloud-native-meetup-guangzhou-04/</guid>
      <description>&lt;h3 id=&#34;开场致辞&#34;&gt;开场致辞&lt;/h3&gt;
&lt;p&gt;讲师：宋净超（Tetrate 布道师、云原生社区创始人）&lt;/p&gt;
&lt;p&gt;讲师介绍：Tetrate 云原生布道师，云原生社区创始人，CNCF Ambassador。&lt;/p&gt;
&lt;h3 id=&#34;有了-nginx-和-kong为什么还需要-apache-apisix&#34;&gt;有了 Nginx 和 Kong，为什么还需要 Apache APISIX？&lt;/h3&gt;
&lt;p&gt;讲师：王院生&lt;/p&gt;
&lt;p&gt;个人介绍：支流科技联合创始人 CTO&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;演讲概要&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在云原生时代，k8s 和微服务已经成为主流，在带来巨大生产力提升的同时，也增加了系统的复杂度。如何发布、管理和可视化服务，成为了一个重要的问题。每次修改配置都要 reload 的 Nginx、依赖 postgres 才能工作的 Kong，都不是云原生时代的理想之选。这正是我们创造 Apache APISIX 的原因：没有 reload、毫秒内全集群生效、不依赖数据库、极致性能、支持 Java 和 Go 开发插件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;听众收益&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;更好的理解 API 网关、服务网格，以及各个开源项目的优劣势&lt;/p&gt;
&lt;h3 id=&#34;云原生时代的研发效能&#34;&gt;云原生时代的研发效能&lt;/h3&gt;
&lt;p&gt;讲师：黄国峰&lt;/p&gt;
&lt;p&gt;个人介绍：腾讯 PCG 工程效能专家。10 多年的软件和互联网从业经验；现任腾讯工程效能部，负责持续集成、研发流程和构建系统等平台；曾任职唯品会高级经理，负责架构团队。在云原生平台下的研发效能方向有丰富的理论知识和实践经验。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;演讲概要&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;云原生时代，软件研发的逻辑彻底改变了。传统的软件开发在本机编码 / 调试、部署到测试环境测试、再发布到生产环境；而云原生时代的开发，基于不可变设施，研发流程从编码、构建、持续测试、持续集成到持续部署，整个过程几乎完全代码化。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;听众收益&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;了解云原生开发的新挑战和难点&lt;/li&gt;
&lt;li&gt;了解腾讯云原生开发实践的流程和思路&lt;/li&gt;
&lt;li&gt;了解腾讯云原生开发中的遇到的坑和解决思路&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;37-手游-go-微服务架构演进和云原生实践&#34;&gt;37 手游 Go 微服务架构演进和云原生实践&lt;/h3&gt;
&lt;p&gt;讲师：吴凌峰&lt;/p&gt;
&lt;p&gt;个人介绍：任职于三七互娱集团 37 手游技术部基础架构组，负责平台 golang 基础框架以及 DevOps、CI/CD 生态建设，从业以来一直专注于云原生、DevOps 和容器化等技术应用和推广，在 golang 工程化领域有一定的心得。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;演讲概要&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Golang 微服务应用和云原生的概念近年越来越火热，传统技术栈公司随着业务规模增长，在云原生技术应用落地探索和转型的过程中一定会遇到很多共通的问题以及有各自不同的思考，包括如何更好地提升我们的开发效率、提升服务稳定性、降低运维成本？面对不断增长的服务数量和不断变长变复杂的调用关系网，怎样才能更好地观测、管理和保证核心服务高可用，本次演讲分享将会围绕 37 手游转型为 Go 微服务架构以及建设云原生 DevOps 体系的历程、过程中的领悟和思考展开。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;听众收益&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;了解 Golang 云原生微服务框架的关键技术和优化实践经验&lt;/li&gt;
&lt;li&gt;了解云原生观测体系如链路追踪、监控等 Golang 微服务落地实践经验&lt;/li&gt;
&lt;li&gt;了解混合云混合部署 DevOps 和 CI/CD 体系的企业实践经验&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;死生之地不可不察论-api-标准化对-dapr-的重要性&#34;&gt;死生之地不可不察：论 API 标准化对 Dapr 的重要性&lt;/h3&gt;
&lt;p&gt;讲师：敖小剑&lt;/p&gt;
&lt;p&gt;个人介绍：资深码农，十九年软件开发经验，微服务专家，Service Mesh 布道师，Servicemesher 社区联合创始人，Dapr Maintainer。专注于基础架构，Cloud Native 拥护者，敏捷实践者，坚守开发一线打磨匠艺的架构师。曾在亚信、爱立信、唯品会、蚂蚁金服等任职，对基础架构和微服务有过深入研究和实践。目前就职阿里云，在云原生应用平台全职从事 Dapr 开发。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;演讲概要&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Dapr 作为新兴的云原生项目，以 &amp;ldquo;应用运行时&amp;rdquo; 之名致力于围绕云原生应用的各种分布式需求打造一个通用而可移植的抽象能力层。这个愿景有着令人兴奋而向往的美好前景：一个受到普通认可和遵循的云原生业界标准，基于此开发的云原生应用可以在不同的厂家的云上自由的部署和迁移，恍惚间一派云原生下世界大同的美景。然而事情往往没这么简单，API 的标准化之路异常的艰辛而痛苦，Dapr 的分布式能力抽象在实践中会遇到各种挑战和困扰。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;听众收益&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;了解 Dapr 的愿景和分布式能力抽象层的重要&lt;/li&gt;
&lt;li&gt;了解 Dapr API 在抽象和实现时遇到的实际问题，尤其是取舍之间的艰难&lt;/li&gt;
&lt;li&gt;了解目前 Dapr 在 API 抽象上正在进行的努力和新近准备增加的 API&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>云原生社区 meetup 第三期杭州站</title>
      <link>https://jimmysong.io/docs/event/cloud-native-meetup-hangzhou-03/</link>
      <pubDate>Sat, 17 Apr 2021 13:00:00 +0800</pubDate>
      <guid>https://jimmysong.io/docs/event/cloud-native-meetup-hangzhou-03/</guid>
      <description>&lt;h3 id=&#34;开场致辞&#34;&gt;开场致辞&lt;/h3&gt;
&lt;p&gt;讲师：宋净超（Tetrate 布道师、云原生社区创始人）&lt;/p&gt;
&lt;p&gt;讲师介绍：Tetrate 云原生布道师，云原生社区创始人，CNCF Ambassador。&lt;/p&gt;
&lt;h3 id=&#34;使用-chaos-mesh-来保障云原生系统的健壮性&#34;&gt;使用 Chaos Mesh 来保障云原生系统的健壮性&lt;/h3&gt;
&lt;p&gt;讲师：周强&lt;/p&gt;
&lt;p&gt;公司：PingCAP&lt;/p&gt;
&lt;p&gt;讲师介绍：周强，PingCAP 工程效率负责人，Chaos Mesh 负责人，专注稳定性和性能测试平台。在混沌工程领域有 4 年的从业经验，领导开发云原生混沌测试平台 Chaos Mesh。&lt;/p&gt;
&lt;p&gt;演讲概要:&lt;/p&gt;
&lt;p&gt;在云原生的世界中，错误无处不在，混沌工程在提高系统稳定性方面起着至关重要的作用。通过执行混沌工程实验，我们可以了解系统的弱点并主动解决。我们开发了云原生混沌工程平台 Chaos Mesh，并在内部使用 Chaos Mesh 来提升云原生分布式数据库 TiDB 的健壮性。目前 Chaos Mesh 已加入 CNCF Sandbox 项目，该平台依托于 k8s 基础设施，通过对 pod/container 进行诸如杀节点、IO 错误和延时注入、时间回退、内核分配内存失败等等来进行混沌测试。主题大纲:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在分布式领域会遇到的质量和稳定性问题&lt;/li&gt;
&lt;li&gt;混沌工程在提升系统稳定性方面的作用和意义&lt;/li&gt;
&lt;li&gt;Chaos Mesh 项目简介&lt;/li&gt;
&lt;li&gt;混沌工程主要的测试方式和使用案例&lt;/li&gt;
&lt;li&gt;混沌工程平台的构建实践&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;听众收益：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;了解在构建分布式系统可能出现的问题和风险&lt;/li&gt;
&lt;li&gt;了解混沌工程的使用经验和踩过的坑，观众后续可以通过混沌工程来进行相关实践，提升产品质量&lt;/li&gt;
&lt;li&gt;通过 case study 可以帮助大家构建分布式混沌测试平台&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;envoy-在轻舟微服务中落地实践&#34;&gt;Envoy 在轻舟微服务中落地实践&lt;/h3&gt;
&lt;p&gt;讲师：王佰平&lt;/p&gt;
&lt;p&gt;公司：网易&lt;/p&gt;
&lt;p&gt;讲师介绍：网易数帆资深工程师，负责轻舟 Envoy 网关与轻舟 Service Mesh 数据面开发、功能增强、性能优化等工作。对于 Envoy 数据面开发、增强、落地具有较为丰富的经验。&lt;/p&gt;
&lt;p&gt;演讲概要：&lt;/p&gt;
&lt;p&gt;Envoy 是由 Lyft 开源的高性能数据和服务代理，以其可观察性和高扩展性著称。如何充分利用 Envoy 的特性，为业务构建灵活易扩展、稳定高性能的基础设施（服务网格、API 网关）是 Envoy 落地生产实践必须考虑的问题。本次分享主要介绍 Envoy 在轻舟微服务网关与轻舟微服务网格中落地实践经验和构建此类基础设施时轻舟关注的核心问题。希望能够给大家带来一些帮助。&lt;/p&gt;
&lt;p&gt;听众收益：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;了解 Envoy 本身架构与关键特性；&lt;/li&gt;
&lt;li&gt;在生产实践当中微服务网关与服务网格关注的核心问题以及轻舟 Envoy 的解决之道；&lt;/li&gt;
&lt;li&gt;为期望实现集群流量全方位治理和观察的听众提供些许借鉴。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;kubevela阿里巴巴新一代应用交付管理系统实践&#34;&gt;KubeVela：阿里巴巴新一代应用交付管理系统实践&lt;/h3&gt;
&lt;p&gt;讲师：孙健波&lt;/p&gt;
&lt;p&gt;公司：阿里巴巴&lt;/p&gt;
&lt;p&gt;讲师介绍：孙健波 (花名：天元) 阿里云技术专家，云原生应用模型 OAM (Open Application Model) 核心成员和主要制定者，KubeVela 项目作者，致力于推动云原生应用标准化，负责大规模云原生应用交付与应用管理相关工作。曾参与编写《Docker 容器与容器云》技术书籍。&lt;/p&gt;
&lt;p&gt;演讲概要：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;云原生应用交付面临的问题与挑战&lt;/li&gt;
&lt;li&gt;社区中常见的应用交付解决方案对比&lt;/li&gt;
&lt;li&gt;基于 KubeVela 的标准化应用交付管理核心原理&lt;/li&gt;
&lt;li&gt;阿里巴巴基于 KubeVela 的应用交付实践&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;听众收益：&lt;/p&gt;
&lt;p&gt;随着 “云原生” 的普及，基础设施逐渐成熟的今天，越来越多的应用开发者们开始追求快速的构建交付应用。然而使用场景的不同往往意味着应用交付的环境会有巨大的差异。就比如，K8s 中不同的工作负载类型需要对接不同的灰度发布、流量管理等实现方案，不同的部署环境（公有云、私有化部署等）也常常需要对接不同的日志监控体系。如何才能将应用管理和交付变得标准化，使得应用研发不再需要花大量精力对接不同的交付平台？这已经逐渐成为云原生应用管理领域的一大痛点。本次分享将针对这些问题为大家介绍如何基于 KubeVela 构建标准化的应用交付管理平台，介绍阿里巴巴在此基础上的实践经验。&lt;/p&gt;
&lt;h3 id=&#34;envoy-在阿里巴巴内部的落地实践&#34;&gt;Envoy 在阿里巴巴内部的落地实践&lt;/h3&gt;
&lt;p&gt;讲师：张义飞&lt;/p&gt;
&lt;p&gt;公司：阿里巴巴&lt;/p&gt;
&lt;p&gt;讲师介绍：阿里巴巴云原生部门高级工程师，主要负责阿里巴巴内部 ServiceMesh 数据面的落地。Envoy/Istio 社区 Member，给 envoy 社区贡献了 Dubbo Proxy filter，metadata 优化等。&lt;/p&gt;
&lt;p&gt;演讲概要：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;介绍 Envoy 在大规模场景下存在的问题以及如何优化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;介绍 Envoy 实现自定义协议的最佳实践&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;扩展自定义协议&lt;/li&gt;
&lt;li&gt;扩展连接池&lt;/li&gt;
&lt;li&gt;扩展 Cluster&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;介绍 Envoy 在阿里巴巴内部落地遇到的一些困难&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;听众收益：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Envoy 在大规模场景下存在的一些问题&lt;/li&gt;
&lt;li&gt;机器数量过多导致的内存问题&lt;/li&gt;
&lt;li&gt;机器全量下发导致的 CPU 问题&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Quarkus实战</title>
      <link>https://jimmysong.io/docs/book/quarkus-cookbook/</link>
      <pubDate>Wed, 31 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://jimmysong.io/docs/book/quarkus-cookbook/</guid>
      <description>&lt;p&gt;2021 年 3 月，《Quarkus 实战——专为 Kubernetes 而优化的 Java 解决方案》，已经由机械工业出版社出版上市，可点击查看详情&lt;a href=&#34;https://item.jd.com/10028088987963.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;购买&lt;/a&gt;，下面是本书封面及封底。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Quarkus cookbook 实战&#34; srcset=&#34;
               /docs/book/quarkus-cookbook/quarkus-cookbook_hu20748ed953ea51ac1a2e6ce67ae2862a_596251_199ea48259e8e5b4954bb94bb2943e1d.webp 400w,
               /docs/book/quarkus-cookbook/quarkus-cookbook_hu20748ed953ea51ac1a2e6ce67ae2862a_596251_229ec9f933f3523bd87b4d6974579855.webp 760w,
               /docs/book/quarkus-cookbook/quarkus-cookbook_hu20748ed953ea51ac1a2e6ce67ae2862a_596251_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://jimmysong.io/docs/docs/book/quarkus-cookbook/quarkus-cookbook_hu20748ed953ea51ac1a2e6ce67ae2862a_596251_199ea48259e8e5b4954bb94bb2943e1d.webp&#34;
               width=&#34;760&#34;
               height=&#34;478&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;译者序&#34;&gt;译者序&lt;/h2&gt;
&lt;p&gt;Quarkus 是一款有别于传统 Java 架构的新技术框架，它是建立在我们熟知的技术栈上，使用了诸多成熟的技术，如 JPA，JAX-RS、Eclipse Vert.x、Eclipse MicroProfile 和 CDI 等，并将之和 Kubernetes 紧密融合在一起。用户可以借助 Kubernetes 的高效的调度运维能力，最大限度地节约资源。&lt;/p&gt;
&lt;p&gt;云原生的星星之火，自社区 Kubernetes 爆红之后，变成燎原之势。云原生相关的技术如雨后春笋般涌出。刘岩，宋净超和我都是云原生社区的成员，也钟爱布道各种相关技术，是这一领域的狂热爱好者。我们共同的爱好之一，就是时刻关注有好的国外技术或者成熟技术的优秀书籍发布。&lt;/p&gt;
&lt;p&gt;在这一过程中，我们机缘巧合地发现了这本书，恰好这本书在国内还没有进行翻译，满怀热情的我们就此踏上了研究 Quarkus 之旅。&lt;/p&gt;
&lt;p&gt;这本采用十分简单的抛出问题，提出解决方案，和引发讨论的方式，将 Quarkus 的技术点描绘的细致透彻。通过本书，用户可以自学相关内容，借助 Quarkus，提高 Java 相关研发的工作效率，让你在快节奏的微服务构建和基于云的应用程序开发领域立于不败之地。&lt;/p&gt;
&lt;p&gt;在整个翻译过程中，我们得到华章出版社和李忠明编辑的全力帮助，在此表示衷心感谢。&lt;/p&gt;
&lt;p&gt;最后，感谢大家有缘阅读到此书，希望我们三人的绵薄之力可以帮助到崇尚云原生技术的你，在 Quarkus 的技术道路上，能够享受到和我们一样的欣喜。&lt;/p&gt;
&lt;p&gt;译者：张晓宇、刘岩、宋净超&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>云原生社区 meetup 第二期北京站</title>
      <link>https://jimmysong.io/docs/event/cloud-native-meetup-beijing-02/</link>
      <pubDate>Sun, 20 Dec 2020 13:00:00 +0800</pubDate>
      <guid>https://jimmysong.io/docs/event/cloud-native-meetup-beijing-02/</guid>
      <description>&lt;h3 id=&#34;istio-18还是从前那个少年&#34;&gt;Istio 1.8——还是从前那个少年&lt;/h3&gt;
&lt;p&gt;讲师：宋净超（Tetrate 布道师、云原生社区创始人）&lt;/p&gt;
&lt;p&gt;个人介绍：Tetrate 布道师、CNCF Ambassador、云原生社区 创始人、电子工业出版社优秀译者、出品人。Kubernetes、Istio 等技术的早期使用及推广者。曾就职于科大讯飞、TalkingData 和蚂蚁集团。&lt;/p&gt;
&lt;p&gt;议题简介：带你回顾 Istio 的发展历程，看他是否还是从前那个少年，“没有一丝丝改变”，能够经历时间的考验。带你一起来了解 Istio 1.8 的新特性，看它是如何作为传统和现代应用的桥接器，成为云原生应用中的中流砥柱。同时也会为你分享云原生社区的规划，为了推行云原生，我们在行动。&lt;/p&gt;
&lt;h3 id=&#34;百度服务网格在金融行业的大规模落地实践&#34;&gt;百度服务网格在金融行业的大规模落地实践&lt;/h3&gt;
&lt;p&gt;讲师：孙召昌（百度高级研发工程师）&lt;/p&gt;
&lt;p&gt;个人介绍：百度高级研发工程师，现就职于百度基础架构部云原生团队，参与了服务网格产品的研发工作和大规模落地实践，对云原生、微服务、Service Mesh等方向有深入的研究和实践经验。&lt;/p&gt;
&lt;p&gt;议题简介：百度服务网格技术在金融行业大规模落地过程的实践经验和思考，主要包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;支持传统微服务应用的平滑迁移，兼容SpringCloud和Dubbo应用；&lt;/li&gt;
&lt;li&gt;灵活对接多种注册中心，支持百万级别的服务注册和发现；&lt;/li&gt;
&lt;li&gt;提供丰富的流量治理策略，包括自定义路由、全链路灰度等；&lt;/li&gt;
&lt;li&gt;实现业务无侵入的指标统计和调用链展示，满足用户的可观察性需求。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;apachedubbo-go-在云原生时代的实践与探索&#34;&gt;Apache/Dubbo-go 在云原生时代的实践与探索&lt;/h3&gt;
&lt;p&gt;讲师：赵新（于雨）&lt;/p&gt;
&lt;p&gt;个人介绍：于雨（GitHub ID AlexStocks），dubbogo 社区负责人，一个有十多年服务端基础架构研发经验的一线程序员，陆续改进过 Redis/Muduo/Pika/Dubbo/Dubbo-go/Sentinel-go 等知名项目，目前在蚂蚁集团可信原生部从事容器编排和 Service Mesh 工作。&lt;/p&gt;
&lt;p&gt;议题简介：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基于Kubernetes 的微服务通信能力&lt;/li&gt;
&lt;li&gt;基于 MOSN 的云原生 Service Mesh 能力&lt;/li&gt;
&lt;li&gt;基于应用级注册的服务自省能力&lt;/li&gt;
&lt;li&gt;dubbo-go 3.0 规划&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;合影中场休息签售&#34;&gt;合影、中场休息、签售&lt;/h3&gt;
&lt;p&gt;中场休息时会有《云原生操作系统 Kubernetes》作者之一张城为大家现场签售。&lt;/p&gt;
&lt;h3 id=&#34;云原生下的可观察性&#34;&gt;云原生下的可观察性&lt;/h3&gt;
&lt;p&gt;讲师：张城（元乙）&lt;/p&gt;
&lt;p&gt;个人介绍：阿里云技术专家，负责阿里巴巴集团、蚂蚁金服、阿里云等日志采集基础设施，服务数万内外部客户，日流量数十PB。同时负责云原生相关的日志/监控解决方案，包括系统组件，负载均衡，审计，安全，Service Mesh，事件，应用等监控方案。目前主要关注可观察性、AIOps、大规模分析引擎等方向。&lt;/p&gt;
&lt;p&gt;议题简介：近年来随着云原生技术的普及，PaaS和SaaS化的程度越来越高，传统的监控系统正在朝可观察性系统的方向演进。在这背景下OpenTelemetry诞生，OpenTelemetry为我们带来了Metric、Tracing、Logging的统一标准，便于我们构建一个统一的可观察性平台。&lt;/p&gt;
&lt;h3 id=&#34;云原生分布式存储解决方案实践&#34;&gt;云原生分布式存储解决方案实践&lt;/h3&gt;
&lt;p&gt;讲师：刘硕然（OPPO）&lt;/p&gt;
&lt;p&gt;个人介绍：OPPO互联网云平台分布式文件存储技术负责人，ChubaoFS初创成员及项目维护者。&lt;/p&gt;
&lt;p&gt;议题简介：ChubaoFS是云原生的分布式存储系统，目前已经在多家公司生产环境为大规模容器平台的云原生应用提供分布式存储解决方案。主要特点包括高可用，高可扩展，多租户，文件及对象双接口等。与云原生社区的生态也有非常紧密的结合，目前监控使用Prometheus，部署支持Helm，使用支持CSI driver。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>云原生社区 meetup 第一期上海站</title>
      <link>https://jimmysong.io/docs/event/cloud-native-meetup-shanghai-01/</link>
      <pubDate>Sat, 28 Nov 2020 13:00:00 +0800</pubDate>
      <guid>https://jimmysong.io/docs/event/cloud-native-meetup-shanghai-01/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    演讲幻灯片及视频回放请点击页面上方的按钮。
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;开场演讲&#34;&gt;开场演讲&lt;/h2&gt;
&lt;p&gt;讲师：宋净超&lt;/p&gt;
&lt;p&gt;公司：Tetrate&lt;/p&gt;
&lt;p&gt;讲师介绍：Tetrate 云原生布道师，云原生社区创始人，CNCF Ambassador，作家和摄影师，热衷于开源和分享。&lt;/p&gt;
&lt;h2 id=&#34;kubernetes-在-ucloud-内部的应用&#34;&gt;Kubernetes 在 UCloud 内部的应用&lt;/h2&gt;
&lt;p&gt;讲师：高鹏&lt;/p&gt;
&lt;p&gt;公司：UCloud&lt;/p&gt;
&lt;p&gt;讲师介绍：高鹏 UCloud 后台研发工程师，负责内部云原生平台的建设。&lt;/p&gt;
&lt;p&gt;演讲概要：在 Kubernetes 的实际应用中，我们会碰到各种各样的问题，比如复杂的网络结构、持久化存储的实现、多租户的权限模型、集群的升级、Istio 的使用、镜像仓库的高可用、CI/CD、监控告警、日志、Operator 等等等等。这次分享将介绍 UCloud 内部对 Kubernetes 以及云原生生态的应用实践，和大家分析每个选择背后的原因，碰到的问题以及解决方案。&lt;/p&gt;
&lt;h2 id=&#34;使用-apache-skywalking-adapter-实现-k8s-hpa&#34;&gt;使用 Apache SkyWalking Adapter 实现 K8s HPA&lt;/h2&gt;
&lt;p&gt;讲师：高洪涛&lt;/p&gt;
&lt;p&gt;公司：Tetrate&lt;/p&gt;
&lt;p&gt;讲师介绍：高洪涛 美国 servicemesh 服务商 Tetrate 创始工程师。原华为软件开发云技术专家，对云 APM 有深入的理解，并有丰富的 APM 产品设计，研发与实施经验。对分布式数据库，容器调度，微服务，ServicMesh 等技术有深入的了解。目前为 Apache SkyWalking 核心贡献者，参与该开源项目在软件开发云的商业化进程。前当当网系统架构师，开源达人，曾参与 Apache ShardingSphere，Elastic-Job 等知名开源项目。对开源项目的管理，推广和社区运营有丰富的经验。积极参与技术分享，曾在多个技术大会中做过分享，包括 ArchSummit， Top100，Oracle 嘉年华等。在多个媒体发表过文章，如 InfoQ。&lt;/p&gt;
&lt;p&gt;演讲概要：Apache SkyWalking 作为云原生可观测性工具在 Kubernetes 领域内有诸多应用，包括监控微服务的性能，观测基于 ISTIO 的 Service Mesh 服务等。本次分享将带来使用 SkyWalking 的 Adapter 来实现 Kubernetes 的 HPA 功能。应用该能力后，应用或服务将会根据 SkyWalking 分析的指标进行横向扩展。&lt;/p&gt;
&lt;h2 id=&#34;chaos-mesh---让应用与混沌在-kubernetes-上共舞&#34;&gt;Chaos Mesh - 让应用与混沌在 Kubernetes 上共舞&lt;/h2&gt;
&lt;p&gt;讲师：杨可奥&lt;/p&gt;
&lt;p&gt;公司：PingCAP&lt;/p&gt;
&lt;p&gt;讲师介绍：杨可奥，是 Chaos Mesh 的核心开发者之一；也是当前 Chaos Mesh 的 maintainer。在混沌工程的实践和实现上拥有一定经验和见解。除了 Chaos Mesh 之外还维护有多个受欢迎的开源项目，如 pprof-rs。他也曾多次主持或参与社区活动，对云环境下的应用有自己的见解和热爱。&lt;/p&gt;
&lt;p&gt;演讲概要：在生产环境中，各种各样的故障随时会发生，一个稳健的应用应当时刻处于能够应对故障的状态。对于云环境下的应用来说，这一点尤为重要。近些年来，混沌工程逐渐成为了一个稳定性保障和测试的重要话题。而 Chaos Mesh 以 Kubernetes 为平台，提供了云环境下的混沌工程实践方案。在这次分享中将介绍混沌工程和 Chaos Mesh 这一实践方案，并对其动机、Operator 模式、部分实现进行讲解。&lt;/p&gt;
&lt;h2 id=&#34;云原生技术在风控-saas-领域的踩坑与最佳实践&#34;&gt;&lt;strong&gt;云原生技术在风控 SaaS 领域的踩坑与最佳实践&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;讲师：侯诗军&lt;/p&gt;
&lt;p&gt;公司：同盾科技&lt;/p&gt;
&lt;p&gt;讲师介绍：侯诗军 &amp;ndash; 同盾科技云原生计算部门负责人，香港理工大学与华中科技大学双硕士，十几年来一直专注于云计算技术与管理领域，是 kube-router 等 kubernetes 组件的源代码贡献者，拥有多项云技术专利。16 年加入同盾科技，带领云原生团队从 0 到 N 进行了集团层面的自动化运维、K8S 云平台、DevOps 研发体系变革，将公司在线业务 100% 容器化。&lt;/p&gt;
&lt;p&gt;演讲概要：同盾是国内智能风控领域的头部领军企业，全国独角兽 top50。在中国、印尼雅加达、北美、新加坡拥有 8 个混合云数据中心，共计服务器数量 5000 + 台，在线运转的容器数量 2 万 + 个。截至目前已有超过 1 万家客户选择了同盾的产品及服务，API 单日调用量最低 1 亿次以上，平均响应时间最高 200MS 以内。截止 2019 年，同盾科技全部 (1000 个 app) 在线业务已 100% 容器化。本次议题分别从自动化运维、CI/CD、镜像、云原生网络、域名切换、监控与日志、机器学习、容器安全、混合云弹性、多云管理等方面来讲述公司的踩坑与最佳实践。&lt;/p&gt;
&lt;h2 id=&#34;云原生监控体系建设&#34;&gt;云原生监控体系建设&lt;/h2&gt;
&lt;p&gt;讲师：程亮&lt;/p&gt;
&lt;p&gt;公司：VIPKID&lt;/p&gt;
&lt;p&gt;讲师介绍： VIPKID 资深架构师，曾任百度高级研发工程师，阿里巴巴技术专家。目前负责大班课后端总架构，VIPKID 监控系统。&lt;/p&gt;
&lt;p&gt;演讲概要：&lt;/p&gt;
&lt;p&gt;vipkid 的传统监控体系介绍：传统的机器监控，zabbix，falcon；日志监控，钉钉，邮件直接上报；业务监控&lt;/p&gt;
&lt;p&gt;基于 k8s 发布之后的监控体系：从 19 开始，vipkid 开始基于 k8s 的发布流程改造，响应的基于 thanos 的监控体系升级。基于公司内部的 CMDBCMD 系统，开发 k8s 的 opertor，自动化适配 vm（虚拟机）发布项目及监控。&lt;/p&gt;
&lt;p&gt;基于日志链路监控：基于流量 CDN-LB-WAF-NG 等链路信息的日志监控&lt;/p&gt;
&lt;p&gt;业务监控的全新规划: 对于研发 RD 和测试 QA 同学来说，更加关注线上业务的正确性。构建业务监控平台，支持线上业务指标追踪。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>云原生模式</title>
      <link>https://jimmysong.io/docs/book/cloud-native-patterns/</link>
      <pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate>
      <guid>https://jimmysong.io/docs/book/cloud-native-patterns/</guid>
      <description>&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;云原生模式，张若飞，宋净超译，电子工业出版社出版&#34; srcset=&#34;
               /docs/book/cloud-native-patterns/cloud-native-patterns_hu53442bc8a5df1347cc048c02a27fccf1_119191_b313d1d8b30e9da89aa48a5323694cea.webp 400w,
               /docs/book/cloud-native-patterns/cloud-native-patterns_hu53442bc8a5df1347cc048c02a27fccf1_119191_98ac4b465feadab62f442ff7f2fcaf5b.webp 760w,
               /docs/book/cloud-native-patterns/cloud-native-patterns_hu53442bc8a5df1347cc048c02a27fccf1_119191_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://jimmysong.io/docs/docs/book/cloud-native-patterns/cloud-native-patterns_hu53442bc8a5df1347cc048c02a27fccf1_119191_b313d1d8b30e9da89aa48a5323694cea.webp&#34;
               width=&#34;580&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;当我们在讨论云原生时究竟在讨论什么？这些年来我一直在思索这个问题，大家的观点可能不尽相同。三年前从我翻译了第一本云原生领域书籍开始，陆续参与翻译和创作了一系列云原生作品，同时通过对云原生领域的开源项目、社区、基金会、应用云化过程的参与和观察，我得出了下面的结论：云原生是一种行为方式和设计理念，究其本质，凡是能够提高云上资源利用率和应用交付效率的行为或方式都是云原生的。云计算的发展史就是一部云原生化的历史。云原生是云计算适应社会分工的必然结果，将系统资源、底层基础设施和应用编排交由云平台管理，让开发者专注于业务逻辑，这不正是云计算长久以来孜孜以求的吗？云原生应用追求的是快速构建高容错性、弹性的分布式应用，追求的极致的研发效率和友好的上线与运维体验，随云云原生的理念应运而生，它们天生适合部署在云上，可以最大限度利用云计算带来的红利。&lt;/p&gt;
&lt;p&gt;在此之前我曾翻译过几本云原生主题的图书，其中&lt;a href=&#34;https://jimmysong.io/docs/docs/book/cloud-native-go/&#34;&gt;《Cloud Native Go》&lt;/a&gt;的作者 Kevin Hoffman，&lt;a href=&#34;https://jimmysong.io/docs/docs/book/cloud-native-java/&#34;&gt;《云原生 Java》&lt;/a&gt;的作者 Josh Long，他们都是来自 Pivotal 或曾在 Pivotal 工作多年，当看到此书时，我惊奇的发现，作者 Cornelia Davis 同样来自这家公司，Pivotal 真可谓是云原生的黄埔军校，此书的内容跟以往的云原生书籍有所不同，对于模式的梳理标新立异，因此我立马联系了电子工业出版社的张春雨编辑，经他了解到张若飞正在翻译此书，此前我已与他合作翻译了《云原生 Java》，本书算是我跟他的第二次合作，他翻译图书时的精准和高效着实让我佩服，我们各自翻译了本书一半的内容。
人人都在讨论云原生，但是究竟如何实现却莫衷一是。本书列举了构建云原生应用的 12 种模式，主要关注的是云原生应用的数据、服务与交互，即应用层面的设计模式，这些模式穿插于本书的第二部分各个章节中，基本覆盖了云原生应用的各个方面，并将理论结合实践，带领读者使用 Java 来实现一个云原生应用。&lt;/p&gt;
&lt;p&gt;同时还要感谢&lt;a href=&#34;https://cloudnative.to&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云原生社区&lt;/a&gt;的成员及志愿者们，对于云原生在中国的发展做出的贡献，你们的鼓励和支持是在云原生领域不断努力和探索的动力。本书在翻译过程中难免有一些纰漏，还望读者指正。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Service Mesh Meetup #9 杭州站</title>
      <link>https://jimmysong.io/docs/event/service-mesh-meetup-09/</link>
      <pubDate>Tue, 24 Dec 2019 13:00:00 +0800</pubDate>
      <guid>https://jimmysong.io/docs/event/service-mesh-meetup-09/</guid>
      <description>&lt;h2 id=&#34;讲师与演讲话题&#34;&gt;讲师与演讲话题&lt;/h2&gt;
&lt;h3 id=&#34;蚂蚁集团-api-gateway-mesh-的思考与实践&#34;&gt;蚂蚁集团 API Gateway Mesh 的思考与实践&lt;/h3&gt;
&lt;p&gt;主讲人: 贾岛&lt;/p&gt;
&lt;p&gt;在 Service Mesh 微服务架构中，我们常常会听到东西流量和南北流量两个术语。蚂蚁集团开源的Service Mesh Sidecar MOSN 已经多次与大家见面交流了，以往的议题重点在东西流量的服务发现与路由，那么蚂蚁集团在南北流量上的思考是怎样的？本次分享，将从蚂蚁集团 API 网关发展历程来看，Mesh 化的网关架构是怎样的，解决了什么问题，双十一的实践表现，以及我们对未来的思考。&lt;/p&gt;
&lt;h3 id=&#34;酷家乐的-istio-与-knative-踩坑实录&#34;&gt;酷家乐的 Istio 与 Knative 踩坑实录&lt;/h3&gt;
&lt;p&gt;主讲人: 付铖&lt;/p&gt;
&lt;p&gt;酷家乐在部分业务模块，自2018年使用了 Istio 进行服务治理，自2019年使用了 Knative 作为 FaaS 基础设施，在实践过程中解决了大量问题，也积累了不少第一手经验。本次分享，将重点讨论服务网格的性能损耗，存量业务迁移难题，函数计算的冷启动时间问题以及解决方案等。&lt;/p&gt;
&lt;h3 id=&#34;云原生开放智能网络代理-mosn-金融级云原生架构助推器-蚂蚁集团&#34;&gt;云原生开放智能网络代理 MOSN 金融级云原生架构助推器-蚂蚁集团&lt;/h3&gt;
&lt;p&gt;主讲人：肖涵（涵畅）&lt;/p&gt;
&lt;h3 id=&#34;圆桌环节service-mesh-落地的务实与创新&#34;&gt;圆桌环节：Service Mesh 落地的务实与创新&lt;/h3&gt;
&lt;p&gt;主讲人: 鲁直 、涵畅 、张超盟 、付铖 、王国云&lt;/p&gt;
&lt;h3 id=&#34;蚂蚁集团-service-mesh-技术风险思考和实践&#34;&gt;蚂蚁集团 Service Mesh 技术风险思考和实践&lt;/h3&gt;
&lt;p&gt;主讲人: 嘉祁&lt;/p&gt;
&lt;p&gt;Servish Mesh 是微服务架构与云原生碰撞出的火花，对于传统的中间件体系与运维支撑能力是极大的挑战。本次分享的主题主要关注于在蚂蚁集团内部如何应对这些挑战，并建设相应的技术风险能力来保障其稳定。&lt;/p&gt;
&lt;h3 id=&#34;网易严选的-service-mesh-实践&#34;&gt;网易严选的 Service Mesh 实践&lt;/h3&gt;
&lt;p&gt;主讲人: 王国云&lt;/p&gt;
&lt;p&gt;网易严选在2016年选择了 Service Mesh 作为未来微服务改造的基础架构，并在过去几年支持了业务的持续快速增长。本次分享主要介绍 Service Mesh 在严选的落地和演进情况，讨论 Service Mesh 在混合云架构下落地遇到的挑战和我们的解决方案，同时也希望和大家交流一下在架构方面的一些思考。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Service Mesh Meetup #8 北京站</title>
      <link>https://jimmysong.io/docs/event/service-mesh-meetup-08/</link>
      <pubDate>Sun, 24 Nov 2019 13:00:00 +0800</pubDate>
      <guid>https://jimmysong.io/docs/event/service-mesh-meetup-08/</guid>
      <description>&lt;p&gt;本期为 Service Mesh Meetup#8 特别场，联合 CNCF、阿里巴巴及蚂蚁集团共同举办。&lt;/p&gt;
&lt;p&gt;不是任何一朵云都撑得住双 11。&lt;/p&gt;
&lt;p&gt;成交 2684 亿，阿里巴巴核心系统 100% 上云。&lt;/p&gt;
&lt;p&gt;蚂蚁集团的核心交易链路大规模上线 Service Mesh。&lt;/p&gt;
&lt;p&gt;这次，让双 11 狂欢继续，让云原生经得起双 11 大考，也让云原生走到开发者身边。&lt;/p&gt;
&lt;p&gt;你将收获 3 大经验加持：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;双 11 洗礼下的阿里巴巴 K8s 超大规模实践经验&lt;/li&gt;
&lt;li&gt;蚂蚁集团首次 Service Mesh 大规模落地经验&lt;/li&gt;
&lt;li&gt;阿里巴巴超大规模神龙裸金属 K8s 集群运维实践经验&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;讲师与演讲话题&#34;&gt;讲师与演讲话题&lt;/h3&gt;
&lt;h4 id=&#34;释放云原生价值双-11-洗礼下的阿里巴巴-k8s-超大规模实践&#34;&gt;释放云原生价值，双 11 洗礼下的阿里巴巴 K8s 超大规模实践&lt;/h4&gt;
&lt;p&gt;主讲人：曾凡松（逐灵） 、汪萌海（木苏）&lt;/p&gt;
&lt;p&gt;2019 双 11 点燃了全球人民的购物热情，而阿里经济体核心系统全面上云则刷爆了国内的技术圈子，引起了众多热爱云计算、云原生技术专家的热议。阿里巴巴是首个在超大规模体量公司内大规模使用 K8s 的公司，借此机会将为大家带来阿里巴巴在生产场景中大规模应用 K8s 的实践经验，包括在大规模应用管理上的经验教训；当前如何通过云原生方式高效管理应用；以及对未来应用管理发展趋势的基本看法。&lt;/p&gt;
&lt;h4 id=&#34;蚂蚁集团双-11-service-mesh-超大规模落地实践&#34;&gt;蚂蚁集团双 11 Service Mesh 超大规模落地实践&lt;/h4&gt;
&lt;p&gt;主讲人: 黄挺（鲁直） 、雷志远（碧远）&lt;/p&gt;
&lt;p&gt;Service Mesh 在过去几年中取得了巨大的关注，但是业界大规模的落地却比较少，目前蚂蚁集团已经在双十一的核心交易链路中大规模上线 Service Mesh，在本次分享中，我们将详细分享我们如何做大规模的落地，在大规模落地 Service Mesh 的时候遇到了什么样的问题，对应的解法又是什么，分享我们在大规模落地 Service Mesh 之后取得的收益，希望能够给有志于尝试 Service Mesh 的公司带来更多的参考。&lt;/p&gt;
&lt;h4 id=&#34;阿里巴巴超大规模神龙裸金属-k8s-集群运维实践&#34;&gt;阿里巴巴超大规模神龙裸金属 K8s 集群运维实践&lt;/h4&gt;
&lt;p&gt;主讲人: 周涛 (广侯）&lt;/p&gt;
&lt;p&gt;2019 年是云原生大规模落地的元年，阿里巴巴集团底层基础设施全部搬迁到公有云上，并基于阿里云最新一代的神龙裸金属服务器共同形成了云原生的最佳组合。本次分享将介绍大规模的神龙裸金属云原生集群如何管理和运维的实践。&lt;/p&gt;
&lt;h4 id=&#34;深入kubernetes的无人区--蚂蚁集团双十一的调度系统&#34;&gt;深入Kubernetes的“无人区” — 蚂蚁集团双十一的调度系统&lt;/h4&gt;
&lt;p&gt;主讲人: 曹寅&lt;/p&gt;
&lt;p&gt;蚂蚁集团今年已全面落地 Kubernetes, 支撑双 11 大促。这次分享主要介绍我们在落地过程中面对的各项新技术挑战，及应对这些问题形成的最佳实践，话题包含了规模化 Kubernetes 实践、计算型业务的统一调度与资源混部、蚂蚁双大促分时调度以及 Service Mesh 落地等。&lt;/p&gt;
&lt;h4 id=&#34;服务网格在路口的产品思考与实践&#34;&gt;服务网格在“路口”的产品思考与实践&lt;/h4&gt;
&lt;p&gt;主讲人: 宋顺（齐天）&lt;/p&gt;
&lt;p&gt;这次分享主要介绍在云原生概念如火如荼而金融行业还处在数字化转型初期的当下，蚂蚁集团服务网格从技术到产品化过程中的思考与实践。内容包括：规模化场景下如何平滑过渡、如何兼顾性能与稳定性、如何支持多语言多协议、无侵入、异构服务统一治理等方面的思考和实践。&lt;/p&gt;
&lt;h4 id=&#34;阿里集团核心应用落地-service-mesh-的挑战与机遇&#34;&gt;阿里集团核心应用落地 Service Mesh 的挑战与机遇&lt;/h4&gt;
&lt;p&gt;主讲人: 李云（至简）&lt;/p&gt;
&lt;p&gt;将分享阿里巴巴集团在核心应用落地 Service Mesh 时如何做到“在飞行的飞机上换引擎”，以及在落地的过程中面临的挑战。那些挑战虽然在现阶段的落地过程中并没有全面解决，但给后面的发展和技术突破重点指引了方向。 此外，Service Mesh 作为云原生技术的关键内容，还将分享在这个技术趋势下的发展思考，与大家交流什么是“三位一体”，以及未来 Service Mesh 应当“长成什么模样”。&lt;/p&gt;
&lt;h4 id=&#34;蚂蚁集团云原生-paas-实践之路&#34;&gt;蚂蚁集团云原生 PaaS 实践之路&lt;/h4&gt;
&lt;p&gt;主讲人: 王成昌（晙曦）&lt;/p&gt;
&lt;p&gt;已实现异地多活单元化架构的蚂蚁集团、网商银行基础设施正全面拥抱云原生。本次分享将首次披露蚂蚁集团 PaaS 产品层的建设思路：SOFAStack-CAFE - 承担着海量应用管理、变更保障、容灾多活的应用 PaaS，如何结合实际金融级技术风险保障诉求，基于 Kubernetes 构建云原生运维体系。内容将包括多集群联邦、核心运维能力下沉、发布变更体系、运行时安全、应用交付模式、SOFAMesh 运维体系支撑等方面的实践探索。&lt;/p&gt;
&lt;h4 id=&#34;函数计算在双十一小程序场景的应用&#34;&gt;函数计算在双十一小程序场景的应用&lt;/h4&gt;
&lt;p&gt;主讲人: 吴天龙 （木吴）&lt;/p&gt;
&lt;p&gt;小程序是轻量级的快速迭代的移动应用，对小程序开发者的开发效率有很高的要求。使用函数计算，开发者无需关心后端服务的搭建运维，只需要编写函数就能够提供稳定可靠并且弹性伸缩的服务。双 11 中很多推广活动都是以小程序的方式提供给用户的，在活动时间会有集中的访问，这对后端服务的稳定和弹性是很大的考验。使用函数计算提供的预留实例，可提前为活动高峰预留一部分资源，结合极速的弹性伸缩，轻松应对活动高峰。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Service Mesh Meetup #7 成都站</title>
      <link>https://jimmysong.io/docs/event/service-mesh-meetup-07/</link>
      <pubDate>Sat, 26 Oct 2019 13:00:00 +0800</pubDate>
      <guid>https://jimmysong.io/docs/event/service-mesh-meetup-07/</guid>
      <description>&lt;p&gt;本期 Meetup 邀请社区大咖，从服务网格下微服务架构设计、在 5G 时代的应用、如何使用开源的 Traefik 构建云原生边缘路由及蚂蚁集团的服务网格代理演进角度给大家带来精彩分享。&lt;/p&gt;
&lt;h3 id=&#34;讲师与演讲话题&#34;&gt;讲师与演讲话题&lt;/h3&gt;
&lt;h4 id=&#34;服务网格技术在5g网络管理平台中的落地实践&#34;&gt;服务网格技术在5G网络管理平台中的落地实践&lt;/h4&gt;
&lt;p&gt;赵化冰（中兴通讯网管软件资深专家）&lt;/p&gt;
&lt;p&gt;在通信网络向5G演进的过程中，电信行业借鉴了IT行业的微服务架构和云原生相关技术对5G网络功能进行重构，以提供敏捷、灵活、易于扩展的业务能力。 本演讲主题将介绍在5G网络管理平台的微服务架构中落地微服务网格的产品实践，包括多网络平面支持、API网关和网格Ingress的定位、Consul Registry的性能增强等等。&lt;/p&gt;
&lt;h4 id=&#34;蚂蚁集团网络代理的演进之路&#34;&gt;蚂蚁集团网络代理的演进之路&lt;/h4&gt;
&lt;p&gt;肖涵（蚂蚁集团高级技术专家）&lt;/p&gt;
&lt;p&gt;从网络硬件设备到自研平台，从传统服务治理到 Service Mesh，本次分享将介绍蚂蚁集团网络代理在接入层以及 Service Mesh 化道路上是如何一步步支撑秒级百万支付，千万红包请求的。&lt;/p&gt;
&lt;h4 id=&#34;进击的traefik云原生边缘路由探秘&#34;&gt;进击的Traefik——云原生边缘路由探秘&lt;/h4&gt;
&lt;p&gt;杨川胡（ 知群后台负责人）&lt;/p&gt;
&lt;p&gt;Traefik 是一个云原生的边缘路由器，开源的反向代理和负载均衡器，寄予厚望的 2.0 版本历时一年的开发终于发布了，此处大版本的更新新增了许多新的特性，特别是大家期望的对 TCP 的支持，在当前 topic 中我们将来探索 Traefik 2.0 有哪些值得我们关注的新特性。&lt;/p&gt;
&lt;h4 id=&#34;service-mesh下微服务的架构设计&#34;&gt;Service Mesh下微服务的架构设计&lt;/h4&gt;
&lt;p&gt;杨彪（美团高级技术专家）&lt;/p&gt;
&lt;p&gt;当下Service Mesh技术可以说是炙手可热，它通过容器编排、持续交付DevOps、以及微服务等理论和方法来构建和运行云原生应用。然而Service Mesh毕竟发展才短短的2年，对于我们刚刚熟悉和稳定的微服务架构又将带来哪些挑战，业务系统架构是否有必要升级到Service Mesh，我们的微服务架构设计将发生什么改变，这些问题我将在本次大会交流讨论，敬请期待。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Serverless实战</title>
      <link>https://jimmysong.io/docs/book/serverless-handbook/</link>
      <pubDate>Mon, 21 Oct 2019 00:00:00 +0000</pubDate>
      <guid>https://jimmysong.io/docs/book/serverless-handbook/</guid>
      <description>&lt;p&gt;Serverless（无服务器架构）是指服务端逻辑由开发者实现，应用运行在无状态的计算容器中，由事件触发，完全被第三方管理，其业务层面的状态则存储在数据库或其他介质中。&lt;/p&gt;
&lt;p&gt;Serverless 是云原生技术发展的高级阶段，可以使开发者更聚焦在业务逻辑，而减少对基础架构的关注。&lt;/p&gt;
&lt;h3 id=&#34;关于本书&#34;&gt;关于本书&lt;/h3&gt;
&lt;p&gt;本书是本人学习和实践 Serverless 过程中所整理的资料，目前主要关注的 Serverless 开源项目是 &lt;a href=&#34;https://github.com/knative&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Knative&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;使用方式&#34;&gt;使用方式&lt;/h3&gt;
&lt;p&gt;您可以通过以下方式使用本书：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/serverless-handbook&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在线浏览&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>云原生基础架构</title>
      <link>https://jimmysong.io/docs/book/cloud-native-infrastructure/</link>
      <pubDate>Mon, 21 Oct 2019 00:00:00 +0000</pubDate>
      <guid>https://jimmysong.io/docs/book/cloud-native-infrastructure/</guid>
      <description>&lt;p&gt;本书为 &lt;em&gt;Cloud Native Infrastructure&lt;/em&gt; 中文版，作者 &lt;em&gt;Justin Garrison&lt;/em&gt; 和 &lt;em&gt;Kris Nova&lt;/em&gt; ，英文版发行于 2017 年 11 月，已可以在网上免费获得，本书是关于创建和管理基础架构，以适用于云原生应用全生命周期管理的模式和实践。&lt;/p&gt;
&lt;p&gt;阅读完这本书后，您将会有如下收获：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;理解为什么说云原生基础架构是高效运行云原生应用所必须的&lt;/li&gt;
&lt;li&gt;根据准则来决定您的业务何时以及是否应该采用云原生&lt;/li&gt;
&lt;li&gt;了解部署和管理基础架构和应用程序的模式&lt;/li&gt;
&lt;li&gt;设计测试以证明您的基础架构可以按预期工作，即使在各种边缘情况下也是如此&lt;/li&gt;
&lt;li&gt;了解如何以策略即代码的方式保护基础架构&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;使用方式&#34;&gt;使用方式&lt;/h3&gt;
&lt;p&gt;您可以通过以下方式使用本书：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rootsongjc/cloud-native-infra&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/cloud-native-infra/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在线阅读&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.oreilly.com/library/view/cloud-native-infrastructure/9781491984291/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;英文原版&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;许可证&#34;&gt;许可证&lt;/h3&gt;
&lt;p&gt;本书英文版版权属于 O’Reilly，中文版版权归属于机械工业出版，基于&lt;a href=&#34;https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;署名-非商业性使用-相同方式共享 4.0（CC BY-NC-SA 4.0）&lt;/a&gt;分享，本书为本人自行翻译，目的在于学习和巩固云原生知识，如有需要请&lt;a href=&#34;https://item.jd.com/12432007.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;购买纸质书&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>谷歌工程实践</title>
      <link>https://jimmysong.io/docs/book/google-engineering-practices/</link>
      <pubDate>Mon, 30 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://jimmysong.io/docs/book/google-engineering-practices/</guid>
      <description>&lt;p&gt;Google 有许多通用工程实践，几乎涵盖所有语言和项目。此文档为长期积累的最佳实践，是集体经验的结晶。我们尽可能地将其公之于众，您的组织和开源项目也会从中受益。&lt;/p&gt;
&lt;p&gt;当前包含以下文档：&lt;/p&gt;
&lt;p&gt;Google 代码审查指南，实则两套指南：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/eng-practices/docs/review/reviewer&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;代码审查者指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/eng-practices/docs/review/developer&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;代码开发者指南&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;译者序&#34;&gt;译者序&lt;/h3&gt;
&lt;p&gt;此仓库翻译自 &lt;a href=&#34;https://github.com/google/eng-practices&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;google/eng-practices&lt;/a&gt;，目前为止的主要内容为 Google 总结的如何进行 &lt;strong&gt;Code Review（代码审查）&lt;/strong&gt; 指南，根据原 Github 仓库的标题判断以后会追加更多 Google 工程实践的内容。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本文档的 &lt;a href=&#34;https://github.com/rootsongjc/eng-practices&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Github 地址&lt;/a&gt;，点击页面底部的 &lt;code&gt;Edit this page&lt;/code&gt; 链接可以编辑页面。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/eng-practices/eng-practices&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;其他语言的版本&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;感谢 &lt;a href=&#34;https://github.com/life1347&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ta-Ching Chen&lt;/a&gt; 的审阅。&lt;/li&gt;
&lt;li&gt;译者：&lt;a href=&#34;https://jimmysong.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Jimmy Song&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;本网站使用 &lt;a href=&#34;https://gohugo.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hugo&lt;/a&gt; 构建。&lt;/li&gt;
&lt;li&gt;本网站使用 &lt;a href=&#34;https://github.com/alex-shpak/hugo-book&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;hugo-book&lt;/a&gt; 主题。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;许可证&#34;&gt;许可证&lt;/h3&gt;
&lt;p&gt;本项目中的文档适用于 &lt;a href=&#34;https://creativecommons.org/licenses/by/3.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC-By 3.0&lt;/a&gt; 许可证，该许可证鼓励您共享这些文档。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Service Mesh Meetup #6 广州站</title>
      <link>https://jimmysong.io/docs/event/service-mesh-meetup-06/</link>
      <pubDate>Sun, 11 Aug 2019 13:00:00 +0800</pubDate>
      <guid>https://jimmysong.io/docs/event/service-mesh-meetup-06/</guid>
      <description>&lt;h2 id=&#34;讲师与演讲话题&#34;&gt;讲师与演讲话题&lt;/h2&gt;
&lt;h4 id=&#34;虎牙直播在微服务改造方面的实践&#34;&gt;虎牙直播在微服务改造方面的实践&lt;/h4&gt;
&lt;p&gt;张波 虎牙基础保障部中间件团队负责人&lt;/p&gt;
&lt;p&gt;本次主要分享虎牙注册中心、名字服务、DNS 的改造实践，以及如何通过 Nacos 实现与 istio 打通实现，使微服务平滑过渡到 service mesh。&lt;/p&gt;
&lt;h4 id=&#34;service-mesh-在蚂蚁集团的生产级安全实践&#34;&gt;Service Mesh 在蚂蚁集团的生产级安全实践&lt;/h4&gt;
&lt;p&gt;彭泽文 蚂蚁集团高级开发工程师&lt;/p&gt;
&lt;p&gt;介绍通过 Envoy SDS（Secret Discovery Service）实现 Sidecar 证书管理的落地方案；分享如何为可信身份服务构建敏感信息数据下发通道，以及 Service Mesh Sidecar 的 TLS 生产级落地实践。&lt;/p&gt;
&lt;h4 id=&#34;基于-kubernetes-的微服务实践&#34;&gt;基于 Kubernetes 的微服务实践&lt;/h4&gt;
&lt;p&gt;涂小刚 慧择网运维经理&lt;/p&gt;
&lt;p&gt;介绍如何跟据现有业务环境情况制定容器化整体解决方案，导入业务进入 K8S 平台，容器和原有业务环境互通。制订接入规范、配置中心对接 K8S 服务、网络互通方案、DNS 互通方案、jenkins-pipeline 流水线构建方案、日志采集方案、监控方案等。&lt;/p&gt;
&lt;h4 id=&#34;service-mesh-发展趋势续棋到中盘路往何方&#34;&gt;Service Mesh 发展趋势（续）：棋到中盘路往何方&lt;/h4&gt;
&lt;p&gt;敖小剑 蚂蚁集团高级技术专家&lt;/p&gt;
&lt;p&gt;继续探讨 Service Mesh 发展趋势：深度分析 Istio 的重大革新 Mixer v2，Envoy 支持 Web Assembly 的意义所在，以及在 Mixer v2 出来之前的权宜之计; 深入介绍 Google Traffic Director 对虚拟机模式的创新支持方式，以及最近围绕 SMI 发生的故事。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>未来架构——从服务化到云原生</title>
      <link>https://jimmysong.io/docs/book/future-architecture/</link>
      <pubDate>Mon, 01 Apr 2019 00:00:00 +0000</pubDate>
      <guid>https://jimmysong.io/docs/book/future-architecture/</guid>
      <description>&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;未来架构&#34; srcset=&#34;
               /docs/book/future-architecture/future-architecture_hud60a11f0910ecceebc3b7ea1a5832fc1_141425_9c12ac28ebad9b43fe728aac7936111f.webp 400w,
               /docs/book/future-architecture/future-architecture_hud60a11f0910ecceebc3b7ea1a5832fc1_141425_5b11b0811be33cd39b31b5cf25df8938.webp 760w,
               /docs/book/future-architecture/future-architecture_hud60a11f0910ecceebc3b7ea1a5832fc1_141425_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://jimmysong.io/docs/docs/book/future-architecture/future-architecture_hud60a11f0910ecceebc3b7ea1a5832fc1_141425_9c12ac28ebad9b43fe728aac7936111f.webp&#34;
               width=&#34;580&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;这本书的第一作者是张亮，现就职于京东金融，为了丰富全书的内容，张亮要求了圈内的好友吴晟、敖小剑和我，共同创作了这本宏大命题的《未来架构》，下面引述的他介绍的成书原由。&lt;/p&gt;
&lt;h3 id=&#34;成书缘由&#34;&gt;成书缘由&lt;/h3&gt;
&lt;p&gt;身处互联网行业的我们一向处在变革的最前端，受到世界浪潮的洗礼，不停歇地追赶着这一波又一波的技术潮流，才不会落在时代脚步之后。特别是近几年来，互联网架构不断演化，经历了从集中式架构到分布式架构，再到云原生架构的过程。云原生因能解决传统应用升级缓慢、架构臃肿、不能快速迭代等问题而逐渐成为这个时代舞台的主角。&lt;/p&gt;
&lt;p&gt;身处在这个变化浪潮中，我看着它改变着互联网架构的航行方向，并给越来越多的公司和个人带来新的思想和发展，也用我这些年走过的路、积累的经验、沉淀的眼界去学习它、读懂它，并让它融入我的知识体系网，来更新大脑里那张探索不断、充满指南针意义的架构地图。&lt;/p&gt;
&lt;p&gt;2017、2018年，我与这些变化同进同退，让Elastic-Job、&lt;a href=&#34;https://github.com/sharding-sphere&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Sharding-Sphere&lt;/a&gt;成为业界里大家认可的项目、让所负责的开源项目开始走向国际化、也认识了更多的良师益友……这种种的经历和发展，触动我开始将所闻、所见、所知、所感的珠玑落到了笔尖，串联成了这本书：《未来架构——从服务化到云原生》。&lt;/p&gt;
&lt;p&gt;这本书里有你想认识的分布式、服务化、服务网格、容器、编排治理、云原生、云数据库……&lt;/p&gt;
&lt;p&gt;这本书里既有我多年深思熟虑的见解和沉淀良久的经验，也有我弃笔又拾笔的挣扎，因为我需要让书的内容对读者负责……&lt;/p&gt;
&lt;p&gt;这本书里更有这些资深大咖的精彩章节叙述：Apache孵化器项目SkyWalking创始人&amp;amp;APM专家吴晟、CNCF Ambassador&amp;amp;云原生布道师&amp;amp;云原生社区创始人&lt;a href=&#34;https://jimmysong.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;宋净超&lt;/a&gt;、Service Mesh布道师&lt;a href=&#34;https://skyao.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;敖小剑&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;目录&#34;&gt;目录&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;第1章 云原生&lt;/li&gt;
&lt;li&gt;第2章 远程通信&lt;/li&gt;
&lt;li&gt;第3章 配置&lt;/li&gt;
&lt;li&gt;第4章 服务治理&lt;/li&gt;
&lt;li&gt;第5章 观察分布式服务&lt;/li&gt;
&lt;li&gt;第6章 侵入式服务治理方案&lt;/li&gt;
&lt;li&gt;第7章 云原生生态的基石Kubernetes&lt;/li&gt;
&lt;li&gt;第8章 跨语言服务治理方案Service Mesh&lt;/li&gt;
&lt;li&gt;第9章 云原生数据架构&lt;/li&gt;
&lt;li&gt;第10章 分布式数据库中间件生态圈ShardingSphere&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;寄托期翼&#34;&gt;寄托期翼&lt;/h3&gt;
&lt;p&gt;书的封页是张亮老师选择的老特拉福德球场前矗立的曼联Holy Trinity雕像作为背景图。&lt;/p&gt;
&lt;p&gt;1958年2月6日，曼联队在南斯拉夫参加欧冠杯获得半决赛权后，回程途中遭遇慕尼黑空难，曼联战队瞬间消失在夜空。为了曼联的复兴，幸存下来的曼联队的主帅马特·巴斯比强忍悲痛，用血泪和汗水重建曼联。1968年5月29日，在慕尼黑空难整整10年后，巴斯比带领他的新战队终于捧起了欧洲冠军杯，告慰了那些故去的亡魂！这座Holy Trinity雕像变成了永恒的纪念！&lt;/p&gt;
&lt;p&gt;信仰、永不言弃、坚持不懈、创造奇迹、浴火重生…，是我从这座雕塑中感受到的力量。每个人的一生一定都会经历高峰和低谷，见过山川和沙漠，也希望这本书不仅仅能为大家带来互联网架构的干货知识，也能寄托我对大家的祝福：希望在这十万长征路上正在不懈拼搏的你，能够拥有自己的信仰和希望，即使要途径无数沙漠和海洋，也能在经历千帆后柳暗花明！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Service Mesh Meetup #5 广州站</title>
      <link>https://jimmysong.io/docs/event/service-mesh-meetup-05/</link>
      <pubDate>Sun, 06 Jan 2019 13:00:00 +0800</pubDate>
      <guid>https://jimmysong.io/docs/event/service-mesh-meetup-05/</guid>
      <description>&lt;h3 id=&#34;讲师与演讲话题&#34;&gt;讲师与演讲话题&lt;/h3&gt;
&lt;h4 id=&#34;唯品会-service-mesh-的实践分享&#34;&gt;唯品会 Service Mesh 的实践分享&lt;/h4&gt;
&lt;p&gt;郑德惠 唯品会Java资深开发工程师，内部Service Mesh框架负责人，唯品会开源项目vjtools重要开发者，10年电信与互联网后台开发经验。&lt;/p&gt;
&lt;h4 id=&#34;sofamosn-持续演进路径及实践案例&#34;&gt;SOFAMosn 持续演进路径及实践案例&lt;/h4&gt;
&lt;p&gt;陈逸凡 花名无钩，蚂蚁集团资深开发工程师。专注于网络接入层，高性能服务器研发，SOFAMosn团队核心成员&lt;/p&gt;
&lt;h4 id=&#34;在网格的边缘试探企业-istio-试水指南&#34;&gt;在网格的边缘试探——企业 Istio 试水指南&lt;/h4&gt;
&lt;p&gt;崔秀龙 HPE 软件分析师，Kubernetes 权威指南作者之一，Kubernetes、Istio 项目成员&lt;/p&gt;
&lt;h4 id=&#34;roundtable回顾2018service-mesh-蓄势待发&#34;&gt;Roundtable：回顾2018，Service Mesh 蓄势待发&lt;/h4&gt;
&lt;p&gt;主持人：宋净超，ServiceMesher 社区联合创始人&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Service Mesh Meetup #4 上海站</title>
      <link>https://jimmysong.io/docs/event/service-mesh-meetup-04/</link>
      <pubDate>Sun, 25 Nov 2018 13:00:00 +0800</pubDate>
      <guid>https://jimmysong.io/docs/event/service-mesh-meetup-04/</guid>
      <description>&lt;h2 id=&#34;讲师与演讲话题&#34;&gt;讲师与演讲话题&lt;/h2&gt;
&lt;h4 id=&#34;observability-and-istio-telemetry&#34;&gt;Observability and Istio telemetry&lt;/h4&gt;
&lt;p&gt;吴晟 Apache SkyWalking创始人、Apache Sharding-Sphere原型作者、比特大陆资深技术专家、CNCF OpenTracing标准化委员会成员&lt;/p&gt;
&lt;h4 id=&#34;蚂蚁集团-service-mesh-渐进式迁移方案&#34;&gt;蚂蚁集团 Service Mesh 渐进式迁移方案&lt;/h4&gt;
&lt;p&gt;敖小剑 蚂蚁集团高级技术专家，十六年软件开发经验，微服务专家，Service Mesh布道师，Servicemesher社区联合创始人&lt;/p&gt;
&lt;p&gt;张瑜标 阿里巴巴技术专家、前京东Hadoop负责人、Hadoop代码贡献者、现负责UC 基于Kubernetes自研的PaaS平台整体的稳定性&lt;/p&gt;
&lt;h4 id=&#34;探讨和实践基于isito的微服务治理事件监控&#34;&gt;探讨和实践基于Isito的微服务治理事件监控&lt;/h4&gt;
&lt;p&gt;徐运元 谐云科技云平台架构师，致力于容器 PaaS 平台、企业级容器云平台的方案设计和技术落地&lt;/p&gt;
&lt;h4 id=&#34;envoycontour与kubernetes实践&#34;&gt;Envoy、Contour与Kubernetes实践&lt;/h4&gt;
&lt;p&gt;冯玮 七牛容器云平台产品架构师，曾在百度和华为从事公有云领域高性能分布式计算和存储平台的架构设计和产品研发&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Service Mesh Meetup #3 深圳站</title>
      <link>https://jimmysong.io/docs/event/service-mesh-meetup-03/</link>
      <pubDate>Sat, 25 Aug 2018 13:00:00 +0800</pubDate>
      <guid>https://jimmysong.io/docs/event/service-mesh-meetup-03/</guid>
      <description>&lt;h2 id=&#34;讲师与演讲话题&#34;&gt;讲师与演讲话题&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;张超盟（华为）——Kubernetes容器应用基于Istio的灰度发布实践&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Topic摘要：随着1.0版本在上月底的发布，标志着Istio作为最火热的ServcieMesh框架已经逐渐成熟。本次议题中将以典型的灰度发布为例，分享华为云容器服务在Istio的实践，以及Istio和Kubernetes的完美结合释放云原生应用的核心优势，加速企业微服务技术转型。&lt;/p&gt;
&lt;p&gt;讲师简介：华为云微服务平台架构师，现负责华为云容器服务Istio产品化工作。参与华为PaaS平台产品设计研发，在Kubernetes容器服务、微服务架构、云服务目录、大数据、APM、DevOpS工具等多个领域有深入研究与实践。曾供职于趋势科技。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;朱经惠 （联邦车网）——Istio控制平面组件原理解析&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Topic摘要：网上有很多关于Istio的介绍，但主要的关注是数据平面。所以这次独辟蹊径，给大家解密Istio里强大的控制平面：管理生命周期的Pilot-Agent，配置中心Pilot-Discovery， 生成遥测报告的Mixer以及安全证书管理的Istio_Ca。通过本次分享您将了解其工作原理和现存的问题。&lt;/p&gt;
&lt;p&gt;讲师简介：朱经惠，ETC车宝平台工程师。喜欢开源，个人开源项目《Jaeger PHP Client》；喜欢研究源码，对NSQ，Jaeger，Istio（控制平面）等go语言开源项目进行过研究。除了代码还喜欢爬山和第二天睡醒后全身酸疼的感觉。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;邵俊雄（蚂蚁集团）——SOFAMesh 的通用协议扩展&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Topic摘要：介绍蚂蚁集团在SOFAMesh上开发对SOFA RPC与HSF这两个RPC框架的支持过程中总结出来的一个通用协议扩展方案。&lt;/p&gt;
&lt;p&gt;讲师介绍：蚂蚁集团中间件团队高级技术专家，目前主要负责 SOFAMesh 的开发工作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;杨文（JEX）——Kubernetes、Service Mesh、CI/CD 实践&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Topic摘要：本次主题我将跟大家分享我们在提升研发团队工程效率上的一些思考和实践，包括如何构建自动化 CI/CD 平台，如何提升持续交付能力，以及我们在这一系列演化过程中所踩过一些坑。&lt;/p&gt;
&lt;p&gt;讲师介绍：JEX 技术VP，前小恩爱技术总监，开源爱好者，TiDB、logkit 等多个开源项目的 Contributor，Go 夜读发起人。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Service Mesh Meetup #2 北京站</title>
      <link>https://jimmysong.io/docs/event/service-mesh-meetup-02/</link>
      <pubDate>Sun, 29 Jul 2018 13:00:00 +0800</pubDate>
      <guid>https://jimmysong.io/docs/event/service-mesh-meetup-02/</guid>
      <description>&lt;h2 id=&#34;讲师与演讲话题&#34;&gt;讲师与演讲话题&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;张亮（京东金融数据研发负责人）：Service Mesh的延伸 —— 论道Database Mesh&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;个人简介：张亮，京东金融数据研发负责人。热爱开源，目前主导两个开源项目Elastic-Job和Sharding-Sphere(Sharding-JDBC)。擅长以java为主分布式架构以及以Kubernetes和Mesos为主的云平台方向，推崇优雅代码，对如何写出具有展现力的代码有较多研究。2018年初加入京东金融，现担任数据研发负责人。目前主要精力投入在将Sharding-Sphere打造为业界一流的金融级数据解决方案之上。&lt;/p&gt;
&lt;p&gt;随着Service Mesh概念的推广与普及，云原生、低接入成本以及分布式组件下移等理念，已逐渐被认可。在Service Mesh依旧处于高速迭代的发展期的同时，以它的理念为参考，其他的Mesh思想也在崭露萌芽。 Database Mesh即是Service Mesh的其中一种延伸，虽然理念与Service Mesh相近，但数据库与无状态的服务却有着巨大的差别。Database Mesh与分布式数据库（如NoSQL和NewSQL）的功能范畴并非重叠而是互补，它更加关注数据库之上的中间啮合层。本次将与您一起交流Database Mesh的一些思考，以及探讨如何与现有产品相结合，实现更加强大与优雅的云原生数据库解决方案。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;吴晟（Apache SkyWalking创始人）：Observability on Service Mesh —— Apache SkyWalking 6.0&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;个人简介：Apache SkyWalking 创始人，PPMC和Committer，比特大陆资深技术专家，&lt;a href=&#34;http://tetrate.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate.io&lt;/a&gt; Founding Engineer，专注APM和自动化运维相关领域。Microsoft MVP。CNCF OpenTracing标准化委员会成员。Sharding-Sphere PMC 成员。&lt;/p&gt;
&lt;p&gt;APM在传统意义上，都是通过语言探针，对应用性能进行整体分析。但随着Cloud Native, K8s容器化之后，以Istio为代表的Service Mesh的出现，为可观测性和APM提供了一种新的选择。SkyWalking作为传统上提供多语言自动探针的Apache开源项目，在service mesh的大背景下，也开始从新的角度提供可观测性支持。&lt;/p&gt;
&lt;p&gt;SkyWalking和Tetrate Inc. Istio核心团队合作，从Mixer接口提取遥感数据，提供SkyWalking语言探针一样的功能，展现service mesh风格探针的强大力量。之后，也会和更多的mesh实现进行合作，深入在此领域的运用。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;朵晓东（蚂蚁集团，高级技术专家）：蚂蚁集团开源的Service Mesh数据平面SOFA MOSN深层揭秘&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;个人简介：蚂蚁集团高级技术专家，专注云计算技术及产品。Apache Kylin创始团队核心成员；蚂蚁金融云PaaS创始团队核心成员，Antstack网络产品负责人；SOFAMesh创始团队核心成员。&lt;/p&gt;
&lt;p&gt;Service Mesh技术体系在蚂蚁落地过程中，我们意识到Mesh结合云原生在多语言，流量调度等各方面的优势，同时面对蚂蚁内部语言体系与运维构架深度融合，7层流量调度规则方式复杂多样，金融级安全要求等诸多特征带来的问题和挑战，最终选择结合蚂蚁自身情况自研Golang版本数据平面MOSN，同时拥抱开源社区，支持作为Envoy替代方案与Istio集成工作。本次session将从功能、构架、跨语言、安全、性能、开源等多方面分享Service Mesh在蚂蚁落地过程中在数据平面的思考和阶段成果。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;丁振凯（新浪微博，微博搜索架构师）：微博Service Mesh实践 - WeiboMesh&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;个人简介：微博搜索架构师，主要负责搜索泛前端架构工作。主导搜索结果和热搜榜峰值应对及稳定性解决方案，以及微服务化方案落地。在Web系统架构方面拥有比较丰富的实践和积累。喜欢思考，深究技术本质。去年十一鹿晗关晓彤事件中一不小心成为网红工程师，并成功登上自家热搜榜。&lt;/p&gt;
&lt;p&gt;WeiboMesh源自于微博内部对异构体系服务化的强烈需求以及对历史沉淀的取舍权衡，它没有把历史作为包袱，而是巧妙的结合自身实际情况完成了对Service Mesh规范的实现。目前WeiboMesh在公司内部已经大规模落地，并且已经开源，WeiboMesh是非常接地气的Service Mesh实现。本次分享主要介绍微博在跨语言服务化面临的问题及WeiboMesh方案介绍，并结合业务实例分析WeiboMesh的独到之处。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python云原生</title>
      <link>https://jimmysong.io/docs/book/cloud-native-python/</link>
      <pubDate>Sun, 01 Jul 2018 00:00:00 +0000</pubDate>
      <guid>https://jimmysong.io/docs/book/cloud-native-python/</guid>
      <description>&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;云原生Python&#34; srcset=&#34;
               /docs/book/cloud-native-python/cloud-native-python_hu53442bc8a5df1347cc048c02a27fccf1_87386_e848f39e32eaad5b47a6f5f25d83c887.webp 400w,
               /docs/book/cloud-native-python/cloud-native-python_hu53442bc8a5df1347cc048c02a27fccf1_87386_0d9be92198e7db21ef6edb16f6d74970.webp 760w,
               /docs/book/cloud-native-python/cloud-native-python_hu53442bc8a5df1347cc048c02a27fccf1_87386_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://jimmysong.io/docs/docs/book/cloud-native-python/cloud-native-python_hu53442bc8a5df1347cc048c02a27fccf1_87386_e848f39e32eaad5b47a6f5f25d83c887.webp&#34;
               width=&#34;580&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;cloud-native-python-介绍&#34;&gt;Cloud Native Python 介绍&lt;/h2&gt;
&lt;p&gt;随着当今商业的迅速发展，企业为了支撑自身的迅速扩张，仅仅通过自有的基础设施是远远不够的。因此，他们一直在追求利用云的弹性来构建支持高度可扩展应用程序的平台。&lt;/p&gt;
&lt;p&gt;这本书能够帮助您一站式的了解使用Python构建云原生应用架构的所有信息。本书中我们首先向您介绍云原生应用架构和他们能够帮助您解决哪些问题。然后您将了解到如何使用REST API和Python构建微服务，通过事件驱动的方式构建Web层。接下来，您将了解到如何与数据服务进行交互，并使用React构建Web视图，之后我们将详细介绍应用程序的安全性和性能。然后，您还将了解到如何Docker容器化您的服务。最后，您将学习如何在AWS和Azure平台上部署您的应用程序。在您部署了应用程序后，我们将围绕关于应用程序故障排查的一系列概念和技术来结束这本书。&lt;/p&gt;
&lt;h2 id=&#34;本书中涵盖哪些内容&#34;&gt;本书中涵盖哪些内容&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;第1章 介绍云原生应用架构和微服务，讨论云原生架构的基本概念和构建应用程序开发环境。&lt;/li&gt;
&lt;li&gt;第2章 使用Python构建微服务，构建自己的微服务知识体系并根据您的用例进行扩展。&lt;/li&gt;
&lt;li&gt;第3章 使用Python构建Web应用程序，构建一个初始的Web应用程序并与微服务集成。&lt;/li&gt;
&lt;li&gt;第4章 与数据服务交互，教您如何将应用程序迁移到不同的数据库服务。&lt;/li&gt;
&lt;li&gt;第5章 使用React构建Web视图。&lt;/li&gt;
&lt;li&gt;第6章 使用Flux创建可扩展UI，帮助您理解如何使用Flux创建可扩展的应用程序。&lt;/li&gt;
&lt;li&gt;第7章 事件溯源和CQRS，讨论如何以事件形式存储合约（transaction）。&lt;/li&gt;
&lt;li&gt;第8章 保护Web应用程序，让您的应用程序免于受到外部威胁。&lt;/li&gt;
&lt;li&gt;第9章 持续交付，应用程序频繁发布的相关知识。&lt;/li&gt;
&lt;li&gt;第10章 Docker容器化您的服务，讨论容器服务和在Docker中运行应用程序。&lt;/li&gt;
&lt;li&gt;第11章 将应用程序部署到AWS平台上，教您如何在AWS上构建基础设施并建立应用程序的生产环境。&lt;/li&gt;
&lt;li&gt;第12章 将应用程序部署到Azure平台上，讨论如何在Azure上构建基础设施并建立应用程序的生产环境。&lt;/li&gt;
&lt;li&gt;第13章 监控云应用，了解不同的基础设施和应用的监控工具。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;使用本书您需要哪些工具和环境&#34;&gt;使用本书您需要哪些工具和环境&lt;/h2&gt;
&lt;p&gt;您需要在系统上安装Python。一个文本编辑器，最好是Vim、Sublime或者Notepad++。在有一个章节中您需要下载POSTMAN，这是一个功能强大的API测试套件，可以作为作为Chrome扩展插件来安装。您可以从&lt;a href=&#34;https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?hl=en&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里下载&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;除此之外，如果您还有如下网站的账号那就更好了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Jenkins&lt;/li&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;li&gt;Amazon Web Services&lt;/li&gt;
&lt;li&gt;Terraform&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;目标读者&#34;&gt;目标读者&lt;/h2&gt;
&lt;p&gt;本书适用于具有Python基础知识、熟悉命令行和基于HTTP的应用程序基本原理的开发人员。对于那些想要了解如何构建、测试和扩展Python开发的应用程序的人员来说本书是个理想选择。不需要有使用Python构建微服务的经验。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>云原生Java</title>
      <link>https://jimmysong.io/docs/book/cloud-native-java/</link>
      <pubDate>Sun, 01 Jul 2018 00:00:00 +0000</pubDate>
      <guid>https://jimmysong.io/docs/book/cloud-native-java/</guid>
      <description>&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;云原生Java&#34; srcset=&#34;
               /docs/book/cloud-native-java/cloud-native-java_hu53442bc8a5df1347cc048c02a27fccf1_94349_e6c0e163603a0da123f544bab4da1b8b.webp 400w,
               /docs/book/cloud-native-java/cloud-native-java_hu53442bc8a5df1347cc048c02a27fccf1_94349_b586463193254da29b0f08cd1ba0f40f.webp 760w,
               /docs/book/cloud-native-java/cloud-native-java_hu53442bc8a5df1347cc048c02a27fccf1_94349_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://jimmysong.io/docs/docs/book/cloud-native-java/cloud-native-java_hu53442bc8a5df1347cc048c02a27fccf1_94349_e6c0e163603a0da123f544bab4da1b8b.webp&#34;
               width=&#34;580&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;这是我翻译的第三本云原生相关技术书籍，前两本分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/docs/docs/book/cloud-native-go/&#34;&gt;Cloud Native Go 中文版&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/docs/docs/book/cloud-native-python/&#34;&gt;Cloud Native Python 中文版&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Jimmy Song with Josh Long&#34; srcset=&#34;
               /docs/book/cloud-native-java/jimmy-song-with-josh-long_huea3c791af24fc641d73e0c4c834fe1e3_185537_5f7222f0d33b587e80f4c26009b1f69d.webp 400w,
               /docs/book/cloud-native-java/jimmy-song-with-josh-long_huea3c791af24fc641d73e0c4c834fe1e3_185537_bd85c16e6d429ae4d7be77c6eb871864.webp 760w,
               /docs/book/cloud-native-java/jimmy-song-with-josh-long_huea3c791af24fc641d73e0c4c834fe1e3_185537_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://jimmysong.io/docs/docs/book/cloud-native-java/jimmy-song-with-josh-long_huea3c791af24fc641d73e0c4c834fe1e3_185537_5f7222f0d33b587e80f4c26009b1f69d.webp&#34;
               width=&#34;760&#34;
               height=&#34;507&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;em&gt;照片拍摄于 2018 年 11 月 3 日，北京&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;本书介绍&#34;&gt;本书介绍&lt;/h2&gt;
&lt;p&gt;传统企业与如亚马逊、Netflix和Etsy这类企业之间的区别是什么？这些公司有完善云原生开发方法，这些方法使得他们能够保持优势并领先于竞争对手。本实践指南向Java/JVM开发人员展示如何使用Spring Boot、Spring Cloud和Cloud Foundry更快更好得构建软件。&lt;/p&gt;
&lt;p&gt;很多组织都已踏足云计算、测试驱动开发、微服务与持续集成和交付领域。本书作者Josh Long和Kenny Bastani将带您深入研究这些工具和方法，并帮助您将传统应用程序转变为真正的云原生应用程序。&lt;/p&gt;
&lt;p&gt;本书中包含以下四大部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基础知识&lt;/strong&gt;：了解云原生思维背后的动机；配置和测试Spring Boot应用程序；将您的传统应用程序迁移至云端&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;微服务&lt;/strong&gt;：使用Spring构建HTTP和RESTful服务；在分布式系统中路由请求；建立更接近数据的边缘服务&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据整合&lt;/strong&gt;：使用Spring Data管理数据，并将分布式服务与Spring支持的事件驱动的，以消息传递为中心的架构集成&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;生产&lt;/strong&gt;：让您的系统可观测；使用服务代理来连接有状态的服务；了解持续交付背后的重要思想&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果您正在构建云原生应用程序，这本书将是使用Java生态系统的基本指南。本书中包含了所有内容——构建弹性服务、管理数据流（通过REST和异步事件）、测试、部署和可观察性的关键任务。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;——Daniel Bryant&lt;/strong&gt;，SpectoLabs的软件开发者和CTO&lt;/p&gt;
&lt;p&gt;我预测无论是刚开始云原生之旅还是已经接近云原生的目标，所有参与其中的人都将从这本云原生Java的洞察和经验中受益。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;——Dava Syer博士&lt;/strong&gt;，Spring框架的贡献者，Spring Boot和Spring Cloud的贡献者和联合创始人&lt;/p&gt;
&lt;h2 id=&#34;作者信息&#34;&gt;作者信息&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Josh Long&lt;/strong&gt;是一名Spring布道师，同时也是InfoQ.com的Java queue编辑，以及包括Spring Recipes第二版（Apress出版社出版）在内的多本书籍的主要作者。Josh在许多国际行业会议上发表过演讲，包括TheServiceSide Java Symposium、SpringOne、OSCON、JavaZone、Devoxx、Java2Days等。当他没在编写SpringSource的代码的时候，不是泡在Java用户组就是在咖啡店里喝咖啡。Josh喜欢能够推动技术发展的解决方案。他的兴趣包括可扩展性、BPM、网格计算、移动计算和所谓的“智能”系统等。您可以在&lt;a href=&#34;http://blog.springsource.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://blog.springsource.org&lt;/a&gt;或&lt;a href=&#34;http://joshlong.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://joshlong.com&lt;/a&gt;上浏览他的博客。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Kenny Bastani&lt;/strong&gt;是Pivotal的Spring布道师。作为一名开源贡献者和博客作者，Kenny关注图数据库、微服务等，并喜欢吸引一群充满热情的软件开发人员。Kenny还是OSCON、SpringOne Platform和GOTO等行业会议的常客。他维护了一个关于软件架构的&lt;a href=&#34;http://kennybastani.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;个人博客&lt;/a&gt;，并提供用于构建事件驱动的微服务和无服务器架构的教程和开源参考示例。&lt;/p&gt;
&lt;h2 id=&#34;目录&#34;&gt;目录&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;序言（James Watters） xvii&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;序言（Rod Johnson） xix&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;前言 xxi&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第Ⅰ部分　基础知识&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第1 章　云原生应用程序 3&lt;/li&gt;
&lt;li&gt;第2 章　训练营：Spring Boot 和Cloud Foundry 21&lt;/li&gt;
&lt;li&gt;第3 章　符合十二要素程序风格的配置 67&lt;/li&gt;
&lt;li&gt;第４章　测试 85&lt;/li&gt;
&lt;li&gt;第5 章　迁移遗留的应用程序 115&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;第Ⅱ部分　Web 服务&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第6 章　REST API 137&lt;/li&gt;
&lt;li&gt;第7 章　路由 179&lt;/li&gt;
&lt;li&gt;第8 章　边缘服务 197&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;第Ⅲ部分　数据整合&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第9 章　数据管理 251&lt;/li&gt;
&lt;li&gt;第10 章　消息系统 303&lt;/li&gt;
&lt;li&gt;第11 章　批处理和任务 325&lt;/li&gt;
&lt;li&gt;第12 章　数据集成 363&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;第IV 部分　生产&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第13 章　可观测的系统 411&lt;/li&gt;
&lt;li&gt;第14 章　服务代理 469&lt;/li&gt;
&lt;li&gt;第15 章　持续交付 497&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;第V 部分 附录&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;附录A 在Java EE 中使用Spring Boot 527&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Service Mesh Meetup #1 杭州站</title>
      <link>https://jimmysong.io/docs/event/service-mesh-meetup-01/</link>
      <pubDate>Sat, 30 Jun 2018 13:00:00 +0800</pubDate>
      <guid>https://jimmysong.io/docs/event/service-mesh-meetup-01/</guid>
      <description>&lt;h2 id=&#34;讲师分享&#34;&gt;讲师分享&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV19h411p7jn&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云原生社区 meetup 第七期深圳站开场致辞 - 宋净超&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1WQ4y1z7zQ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;使用 IAST 构建高效的 DevSecOps 流程 - 董志勇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1hf4y1E7KJ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云原生场景下的开发和调试-汪晟杰，黄金浩&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1LL411476c&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy 在腾讯游戏云原生平台应用 - 田甜&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1TQ4y1C7xx&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;使用 KubeVela 构建混合云应用管理平台 - 邓洪超&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>SOFAStack Cloud Native Workshop</title>
      <link>https://jimmysong.io/docs/event/sofastack-cloud-native-workshop/</link>
      <pubDate>Sun, 24 Jun 2018 10:00:00 +0800</pubDate>
      <guid>https://jimmysong.io/docs/event/sofastack-cloud-native-workshop/</guid>
      <description>&lt;p&gt;SOFAStack（Scalable Open Financial Architecture Stack）是蚂蚁集团自主研发并开源的金融级分布式架构，包含了构建金融级云原生架构所需的各个组件，是在金融场景里锤炼出来的最佳实践。SOFAStack 官方网站：&lt;a href=&#34;https://www.sofastack.tech/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.sofastack.tech/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;参加此次 Meetup 您将获得：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于 SOFAStack 快速构建微服务&lt;/li&gt;
&lt;li&gt;金融场景下的分布式事务最佳实践&lt;/li&gt;
&lt;li&gt;基于 Kubernetes 的云原生部署体验&lt;/li&gt;
&lt;li&gt;云上的 Service Mesh 基本使用场景体验&lt;/li&gt;
&lt;li&gt;基于 Serverless 轻松构建云上应用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如何注册：此活动须提前注册。请将 SOFAStack Cloud Native Workshop 添加到您 KubeCon + CloudNativeCon + Open Source Summit 的&lt;a href=&#34;https://www.lfasiallc.com/events/kubecon-cloudnativecon-china-2019/register/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;注册表&lt;/a&gt;里。您可以使用 &lt;code&gt;KCCN19COMATF&lt;/code&gt; 折扣码获取 KubeCon 半价门票！&lt;/p&gt;
&lt;p&gt;如果对此活动有任何疑问，请发送邮件至 &lt;a href=&#34;mailto:jingchao.sjc@antfin.com&#34;&gt;jingchao.sjc@antfin.com&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;活动详情&#34;&gt;活动详情&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;9:00 - 9:20 开场演讲 SOFAStack 云原生开源体系介绍 by 余淮&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;9:20 - 10:10 使用 SOFAStack 快速构建微服务 by 玄北&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;基于 SOFA 技术栈构建微服务应用。通过本 workshop ，您可以了解在 SOFA 体系中如何上报应用监控数据、服务链路数据以及发布及订阅服务。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;10:15 - 11:05 SOFABoot 动态模块实践 by 卫恒&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在本 workshop 中，您可以基于 SOFADashboard 的 ARK 管控能力来实现 SOFAArk 提供的合并部署和动态模块推送的功能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;11:10 - 12:00 使用 Seata 保障支付一致性 by 屹远&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;微服务架构下，分布式事务问题是一个业界难题。通过本workshop，您可以了解到分布式架构下，分布式事务问题产生的背景，以及常见的分布式事务解决方案；并亲身体验到如何使用开源分布式事务框架Seata的AT模式、TCC模式解决业务数据的最终一致性问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;12:00 - 13:00 午餐时间&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;13:00 - 13:30 蚂蚁集团的云原生探索与实践 by 首仁&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;13:30 - 14:40 通过 Serverless 快速上云 by 隐秀&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;作为云原生技术前进方向之一，Serverless 架构让您进一步提高资源利用率，更专注于业务研发。通过我们的 workshop，您可以体验到快速创建 Serveless 应用、根据业务请求秒级 0-1-N 自动伸缩、通过日志查看器快速排错、按时间触发应用等产品新功能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;14:50 - 16:00 使用 CloudMesh 轻松实践 Service Mesh by 敖小剑&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Service Mesh 将服务间通信能力下沉到基础设施，让应用解耦并轻量化。但 Service Mesh 本身的复杂度依然存在，CloudMesh 通过将 Service Mesh 托管在云上，使得您可以轻松的实践 Service Mesh 技术。通过我们的 workshop，您可以快速部署应用到 CloudMesh ，对服务进行访问，通过监控查看流量，体验服务治理、Sidecar管理和对服务的新版本进行灰度发布等实用功能。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Docker指南</title>
      <link>https://jimmysong.io/docs/book/docker-handbook/</link>
      <pubDate>Wed, 11 Oct 2017 00:00:00 +0000</pubDate>
      <guid>https://jimmysong.io/docs/book/docker-handbook/</guid>
      <description>&lt;p&gt;此书是 &lt;a href=&#34;https://jimmysong.io/kubernetes-handbook/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes Handbook&lt;/a&gt; 的前传，本书中主要介绍 Docker 1.13 新特性和帮助大家了解 Docker 集群的管理和使用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rootsongjc/docker-handbook&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/docker-handbook&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在线访问地址&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;容器是微服务的最佳载体，Kubernetes 是微服务的最佳运行平台，&lt;a href=&#34;https://istio.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;/a&gt; 是 Kubernetes 上最佳的 service mesh。&lt;/p&gt;
&lt;p&gt;2017年4月 Docker 项目改名为 moby，10月的 DockerCon 在哥本哈根 Docker 公司宣布拥抱 Kubernetes，对于容器编排领域 Kubernetes 已经成为事实上的王者。&lt;/p&gt;
&lt;h3 id=&#34;关于&#34;&gt;关于&lt;/h3&gt;
&lt;p&gt;本书中引用了一些公开的分享与链接并加以整理。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本书作于2017年初，现已停止更新。&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugo实战手册</title>
      <link>https://jimmysong.io/docs/book/hugo-handbook/</link>
      <pubDate>Tue, 10 Oct 2017 00:00:00 +0000</pubDate>
      <guid>https://jimmysong.io/docs/book/hugo-handbook/</guid>
      <description>&lt;p&gt;本手册将指导你如何使用&lt;a href=&#34;https://gohugo.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hugo&lt;/a&gt;构建静态网站用于个人博客或者项目展示。&lt;/p&gt;
&lt;p&gt;手把手教你如何从0开始构建一个静态网站，这不需要有太多的编程和开发经验和时间投入，也基本不需要多少成本（除了个性化域名），使用GitHub和Hugo模板即可快速构建和上线一个网站。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/hugo-handbook&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在线浏览&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rootsongjc/hugo-handbook&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Github地址&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;目标读者&#34;&gt;目标读者&lt;/h3&gt;
&lt;p&gt;本文档适用于以下用户：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对网站构建不太了解，没有web开发经验的用户&lt;/li&gt;
&lt;li&gt;希望快速构建一个网站，个性化需求不多，不想花费太多精力打理，更新不多的用户&lt;/li&gt;
&lt;li&gt;希望学习网站构建、网站模板、web开发的用户&lt;/li&gt;
&lt;li&gt;对Go语言感兴趣，希望从事开源项目的用户👏&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;贡献者&#34;&gt;贡献者&lt;/h3&gt;
&lt;p&gt;感谢此书的&lt;a href=&#34;https://github.com/rootsongjc/hugo-handbook/graphs/contributors&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;贡献者&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cloud Native Go</title>
      <link>https://jimmysong.io/docs/book/cloud-native-go/</link>
      <pubDate>Tue, 01 Aug 2017 00:00:00 +0000</pubDate>
      <guid>https://jimmysong.io/docs/book/cloud-native-go/</guid>
      <description>&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Cloud Native Go&#34; srcset=&#34;
               /docs/book/cloud-native-go/cloud-native-go_hu53442bc8a5df1347cc048c02a27fccf1_98418_7f7d2990f685f7c800daf6b4309012a6.webp 400w,
               /docs/book/cloud-native-go/cloud-native-go_hu53442bc8a5df1347cc048c02a27fccf1_98418_c52da8efc5d22e0459b125ad6fb007ca.webp 760w,
               /docs/book/cloud-native-go/cloud-native-go_hu53442bc8a5df1347cc048c02a27fccf1_98418_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://jimmysong.io/docs/docs/book/cloud-native-go/cloud-native-go_hu53442bc8a5df1347cc048c02a27fccf1_98418_7f7d2990f685f7c800daf6b4309012a6.webp&#34;
               width=&#34;580&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本书作者：Kevin Hoffman &amp;amp; Dan Nemeth&lt;/li&gt;
&lt;li&gt;译者：宋净超、吴迎松、徐蓓、马超译&lt;/li&gt;
&lt;li&gt;出版社：电子工业出版社&lt;/li&gt;
&lt;li&gt;全名：Cloud Native Go - 基于Go和React的web云原生应用构建指南&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本书已由电子工业出版社出版，可以&lt;a href=&#34;https://item.m.jd.com/product/12123347.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在京东上购买&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Jimmy Song with Kevin Hoffman&#34; srcset=&#34;
               /docs/book/cloud-native-go/jimmy-song-with-kevein-hoffman_hu312225a5a873c48f1fe96765783fcf0e_149816_40cb1ff90ac0a16a23547880bb4441bf.webp 400w,
               /docs/book/cloud-native-go/jimmy-song-with-kevein-hoffman_hu312225a5a873c48f1fe96765783fcf0e_149816_cbeafea8cba4b51955895a26930ca800.webp 760w,
               /docs/book/cloud-native-go/jimmy-song-with-kevein-hoffman_hu312225a5a873c48f1fe96765783fcf0e_149816_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://jimmysong.io/docs/docs/book/cloud-native-go/jimmy-song-with-kevein-hoffman_hu312225a5a873c48f1fe96765783fcf0e_149816_40cb1ff90ac0a16a23547880bb4441bf.webp&#34;
               width=&#34;760&#34;
               height=&#34;467&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;em&gt;照片拍摄于 2017 年 9 月 12 日，北京&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;Cloud Native Go向开发人员展示如何构建大规模云应用程序，在满足当今客户的强大需求的同时还可以动态扩展来处理几乎任何规模的数据量、流量或用户。&lt;/p&gt;
&lt;p&gt;Kevin Hoffman和Dan Nemeth详细描述了现代云原生应用程序，阐明了与快速、可靠的云原生开发相关的因素、规则和习惯。他们还介绍了Go这种“简单优雅”的高性能语言，它特别适合于云开发。&lt;/p&gt;
&lt;p&gt;在本书中你将使用Go语言创建微服务，使用ReactJS和Flux添加前端Web组件，并掌握基于Go的高级云原生技术。Hoffman和Nemeth展示了如何使用Wercker、Docker和Dockerhub等工具构建持续交付管道; 自动推送应用程序到平台上; 并系统地监控生产中的应用程序性能。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;学习“云之道”：为什么开发好的云软件基本上是关于心态和规则&lt;/li&gt;
&lt;li&gt;了解为什么使用Go语言是云本地微服务开发的理想选择&lt;/li&gt;
&lt;li&gt;规划支持持续交付和部署的云应用程序&lt;/li&gt;
&lt;li&gt;设计服务生态系统，然后以test-first的方式构建它们&lt;/li&gt;
&lt;li&gt;将正在进行的工作推送到云&lt;/li&gt;
&lt;li&gt;使用事件源和CQRS模式来响应大规模和高吞吐量&lt;/li&gt;
&lt;li&gt;安全的基于云的Web应用程序：做与不做的选择&lt;/li&gt;
&lt;li&gt;使用第三方消息传递供应商创建响应式云应用程序&lt;/li&gt;
&lt;li&gt;使用React和Flux构建大规模，云友好的GUI&lt;/li&gt;
&lt;li&gt;监控云中的动态扩展，故障转移和容错&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;章节简介如下图。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Cloud Native Go各章节简介&#34; srcset=&#34;
               /docs/book/cloud-native-go/cloud-native-go-abstract_hu33228f6ac5162c93564ca09d7215efa7_662988_429fdfbd4f9184ab13b46a65d94a5aaa.webp 400w,
               /docs/book/cloud-native-go/cloud-native-go-abstract_hu33228f6ac5162c93564ca09d7215efa7_662988_7e07d8dcbef8b63df72b5c2a659d01d5.webp 760w,
               /docs/book/cloud-native-go/cloud-native-go-abstract_hu33228f6ac5162c93564ca09d7215efa7_662988_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://jimmysong.io/docs/docs/book/cloud-native-go/cloud-native-go-abstract_hu33228f6ac5162c93564ca09d7215efa7_662988_429fdfbd4f9184ab13b46a65d94a5aaa.webp&#34;
               width=&#34;760&#34;
               height=&#34;383&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;关于作者&#34;&gt;关于作者&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Kevin Hoffman&lt;/strong&gt;通过现代化和以多种不同语言构建云原生服务的方式帮助企业将其应用程序引入云端。他10岁时开始编程，在重新组装的CommodoreVIC-20上自习BASIC。从那时起，他已经沉迷于构建软件，并花了很多时间学习语言、框架和模式。他已经构建了从遥控摄影无人机、仿生性安全系统、超低延迟金融应用程序到移动应用程序等一系列软件。他在构建需要与Pivotal Cloud Foundry配合使用的自定义组件时爱上了Go语言。&lt;/p&gt;
&lt;p&gt;Kevin 是流行的幻想书系列（&lt;a href=&#34;http://amzn.to/2fc8iES&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Sigilord Chronicles&lt;/a&gt; ）的作者，他热切地期待着最终能够将自己对构建软件的热爱与对构建幻想世界的热爱结合起来。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dan Nemeth&lt;/strong&gt;目前在Pivotal担任咨询解决方案架构师，负责支持Pivotal Cloud Foundry。他从Commodore 64开始就一直在开发软件，从1995年起开始专业编码，使用ANSIC编写了用于本地ISP的CGI脚本。从那时起，他职业生涯的大部分时间里是作为独立顾问为从金融到制药行业提供解决方案，并使用当时流行的各种语言和框架。Dan最近接受了Go作为自己的归宿，并热情地将它用于所有的项目。&lt;/p&gt;
&lt;p&gt;如果你发现Dan没在电脑前，他很可能就是在靠近安纳波利斯的水域玩帆船或飞钓。&lt;/p&gt;
&lt;h2 id=&#34;目录&#34;&gt;目录&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;第1章 云之道&lt;/li&gt;
&lt;li&gt;第2章  开始&lt;/li&gt;
&lt;li&gt;第3章  Go入门&lt;/li&gt;
&lt;li&gt;第4章  持续交付&lt;/li&gt;
&lt;li&gt;第5章  在Go中构建微服务&lt;/li&gt;
&lt;li&gt;第6章  运用后端服务&lt;/li&gt;
&lt;li&gt;第7章  构建数据服务&lt;/li&gt;
&lt;li&gt;第8章  事件溯源和CQRS&lt;/li&gt;
&lt;li&gt;第9章  使用Go构建web应用程序&lt;/li&gt;
&lt;li&gt;第10章  云安全&lt;/li&gt;
&lt;li&gt;第11章  使用WebSockets&lt;/li&gt;
&lt;li&gt;第12章  使用React构建Web视图&lt;/li&gt;
&lt;li&gt;第13章  使用Flux构建可扩展的UI&lt;/li&gt;
&lt;li&gt;第14章  创建完整应用World of FluxCraft&lt;/li&gt;
&lt;li&gt;第15章  结论&lt;/li&gt;
&lt;li&gt;附录A  云应用的故障排查&lt;/li&gt;
&lt;li&gt;索引&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>迁移到云原生应用架构</title>
      <link>https://jimmysong.io/docs/book/migrating-to-cloud-native-application-architectures/</link>
      <pubDate>Tue, 11 Jul 2017 00:00:00 +0000</pubDate>
      <guid>https://jimmysong.io/docs/book/migrating-to-cloud-native-application-architectures/</guid>
      <description>&lt;p&gt;本书是 &lt;a href=&#34;https://content.pivotal.io/ebooks/migrating-to-cloud-native-application-architectures&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Migrating to Cloud Native Application Architectures&lt;/a&gt; 的中文版，本书英文版发布于 2015 年 2 月，中文版由 &lt;a href=&#34;https://jimmysong.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Jimmy Song&lt;/a&gt; 翻译，发布于 2017 年 7 月。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rootsongjc/migrating-to-cloud-native-application-architectures&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/migrating-to-cloud-native-application-architectures&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gitbook 阅读&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;译者序&#34;&gt;译者序&lt;/h3&gt;
&lt;p&gt;云时代的云原生应用大势已来，将传统的单体架构应用迁移到云原生架构，你准备好了吗？&lt;/p&gt;
&lt;p&gt;俗话说“意识决定行动”，在迁移到云原生应用之前，我们大家需要先对 Cloud Native（云原生）的概念、组织形式并对实现它的技术有一个大概的了解，这样才能指导我们的云原生架构实践。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://pivotal.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pivotal&lt;/a&gt; 是云原生应用的提出者，并推出了 &lt;a href=&#34;https://pivotal.io/platform&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pivotal Cloud Foundry&lt;/a&gt; 云原生应用平台和 &lt;a href=&#34;https://spring.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring&lt;/a&gt; 开源 Java 开发框架，成为云原生应用架构中先驱者和探路者。&lt;/p&gt;
&lt;p&gt;原书作于2015年，其中的示例主要针对 Java 应用，实际上也适用于任何应用类型，云原生应用架构适用于异构语言的程序开发，不仅仅是针对 Java 语言的程序开发。截止到本人翻译本书时，云原生应用生态系统已经初具规模，&lt;a href=&#34;https://cncf.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNCF&lt;/a&gt; 成员不断发展壮大，基于 Cloud Native 的创业公司不断涌现，&lt;a href=&#34;https://kubernetes.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;kubernetes&lt;/a&gt; 引领容器编排潮流，和 Service Mesh 技术（如 &lt;a href=&#34;https://linkerd.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Linkerd&lt;/a&gt; 和 &lt;a href=&#34;https://istio.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;/a&gt;） 的出现，Go 语言的兴起（参考另一本书 &lt;a href=&#34;https://jimmysong.io/docs/book/cloud-native-go&#34;&gt;Cloud Native Go&lt;/a&gt;）等为我们将应用迁移到云原生架构的提供了更多的方案选择。&lt;/p&gt;
&lt;h3 id=&#34;简介&#34;&gt;简介&lt;/h3&gt;
&lt;p&gt;当前很多企业正在采用云原生应用架构，这可以帮助其IT转型，成为市场竞争中真正敏捷的力量。 O&amp;rsquo;Reilly 的报告中定义了云原生应用架构的特性，如微服务和十二因素应用程序。&lt;/p&gt;
&lt;p&gt;本书中作者Matt Stine还探究了将传统的单体应用和面向服务架构（SOA）应用迁移到云原生架构所需的文化、组织和技术变革。本书中还有一个迁移手册，其中包含将单体应用程序分解为微服务，实施容错模式和执行云原生服务的自动测试的方法。&lt;/p&gt;
&lt;p&gt;本书中讨论的应用架构包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;十二因素应用程序：云原生应用架构模式的集合&lt;/li&gt;
&lt;li&gt;微服务：独立部署的服务，每个服务只做一件事情&lt;/li&gt;
&lt;li&gt;自助服务的敏捷基础设施：快速，可重复和一致地提供应用环境和后台服务的平台&lt;/li&gt;
&lt;li&gt;基于API的协作：发布和版本化的API，允许在云原生应用架构中的服务之间进行交互&lt;/li&gt;
&lt;li&gt;抗压性：根据压力变强的系统&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;关于作者&#34;&gt;关于作者&lt;/h3&gt;
&lt;p&gt;Matt Stine，Pivotal的技术产品经理，拥有15年企业IT和众多业务领域的经验。Matt 强调精益/敏捷方法、DevOps、架构模式和编程范例，他正在探究使用技术组合帮助企业IT部门能够像初创公司一样工作。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://jimmysong.io/docs/cloud-native/intro/certification/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jimmysong.io/docs/cloud-native/intro/certification/</guid>
      <description>&lt;h1 id=&#34;认证及培训&#34;&gt;认证及培训&lt;/h1&gt;
&lt;p&gt;随着云原生生态的不断发展壮大，业界缺乏相应的人才储备及知识积累，各种认证及培训则如雨后春笋般出现。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
