<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Quickstart with Workloads on AWS ECS | 云原生资料库</title>
    <link>https://lib.jimmysong.io/tsb/setup/workload-onboarding/quickstart/aws-ecs/</link>
      <atom:link href="https://lib.jimmysong.io/tsb/setup/workload-onboarding/quickstart/aws-ecs/index.xml" rel="self" type="application/rss+xml" />
    <description>Quickstart with Workloads on AWS ECS</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><lastBuildDate>Wed, 09 Aug 2023 12:00:00 +0800</lastBuildDate>
    <image>
      <url>https://lib.jimmysong.io/media/sharing.png</url>
      <title>Quickstart with Workloads on AWS ECS</title>
      <link>https://lib.jimmysong.io/tsb/setup/workload-onboarding/quickstart/aws-ecs/</link>
    </image>
    
    <item>
      <title>Configure WorkloadGroup and Sidecar for the AWS ECS workloads</title>
      <link>https://lib.jimmysong.io/tsb/setup/workload-onboarding/quickstart/aws-ecs/configure-workload-onboarding/</link>
      <pubDate>Wed, 09 Aug 2023 12:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/tsb/setup/workload-onboarding/quickstart/aws-ecs/configure-workload-onboarding/</guid>
      <description>&lt;p&gt;You will deploy the &lt;code&gt;ratings&lt;/code&gt; application as an AWS ECS task and onboard it
into the service mesh.&lt;/p&gt;
&lt;h2 id=&#34;create-a-workloadgroup&#34;&gt;Create a WorkloadGroup&lt;/h2&gt;
&lt;p&gt;Execute the following command to create a &lt;code&gt;WorkloadGroup&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cat &lt;span class=&#34;s&#34;&gt;&amp;lt;&amp;lt;EOF | kubectl apply -f -
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;apiVersion: networking.istio.io/v1alpha3
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;kind: WorkloadGroup
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;metadata:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  name: ratings
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  namespace: bookinfo
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  labels:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    app: ratings
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;spec:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  template:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    labels:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;      app: ratings
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;      class: ecs
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;      cloud: aws
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    serviceAccount: bookinfo-ratings
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;EOF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The field &lt;code&gt;spec.template.serviceAccount&lt;/code&gt; declares that the workload have the
identity of the service account &lt;code&gt;bookinfo-ratings&lt;/code&gt; within the Kubernetes cluster.
The service account &lt;code&gt;bookinfo-ratings&lt;/code&gt; was created during the
&lt;a href=&#34;../aws-ec2/bookinfo&#34;&gt;deployment of the Istio bookinfo example earlier&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;create-the-sidecar-configuration&#34;&gt;Create the Sidecar configuration&lt;/h2&gt;
&lt;p&gt;Execute the following command to create a new sidecar configuration:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cat &lt;span class=&#34;s&#34;&gt;&amp;lt;&amp;lt;EOF | kubectl apply -f -
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;apiVersion: networking.istio.io/v1beta1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;kind: Sidecar
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;metadata:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  name: bookinfo-ratings-no-iptables
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  namespace: bookinfo
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;spec:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  workloadSelector:                  # (1)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    labels:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;      app: ratings
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;      class: ecs
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  ingress:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  - defaultEndpoint: 127.0.0.1:9080  # (2)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    port:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;      name: http
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;      number: 9080                   # (3)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;      protocol: HTTP
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  egress:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  - bind: 127.0.0.2                  # (4)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    port:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;      number: 9080                   # (5)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    hosts:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    - ./*                            # (6)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;EOF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above sidecar configuration will only apply to workloads that have the
labels &lt;code&gt;app=ratings&lt;/code&gt; and &lt;code&gt;class=ecs&lt;/code&gt; (1). The &lt;code&gt;WorkloadGroup&lt;/code&gt; you have created
has these labels.&lt;/p&gt;
&lt;p&gt;Istio proxy will be configured to listen on &lt;code&gt;&amp;lt;host IP&amp;gt;:9080&lt;/code&gt; (3) and will
forward &lt;em&gt;incoming&lt;/em&gt; requests to the application that listens on &lt;code&gt;127.0.0.1:9080&lt;/code&gt; (2).&lt;/p&gt;
&lt;p&gt;And finally the proxy will be configured to listen on &lt;code&gt;127.0.0.2:9080&lt;/code&gt; (4) (5) to
proxy &lt;em&gt;outgoing&lt;/em&gt; requests out of the application to other services (6) that have port &lt;code&gt;9080&lt;/code&gt; (5).&lt;/p&gt;
&lt;h2 id=&#34;allow-workloads-to-join-the-workloadgroup&#34;&gt;Allow Workloads to Join the &lt;code&gt;WorkloadGroup&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;You will need to create an &lt;a href=&#34;../../guides/setup#allow-workloads-to-join-workloadgroup&#34;&gt;&lt;code&gt;OnboardingPolicy&lt;/code&gt;&lt;/a&gt;
resource to explicitly authorize workloads deployed outside of Kubernetes to join the mesh.&lt;/p&gt;
&lt;p&gt;First, obtain your &lt;a href=&#34;https://docs.aws.amazon.com/general/latest/gr/acct-identifiers.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AWS Account ID&lt;/a&gt;.
If you do not know your AWS Account ID, see the &lt;a href=&#34;https://docs.aws.amazon.com/IAM/latest/UserGuide/console_account-alias.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AWS Account Docs&lt;/a&gt; for more details on how to find your ID.&lt;/p&gt;
&lt;p&gt;If you already have your &lt;a href=&#34;https://aws.amazon.com/cli/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;aws&lt;/code&gt; CLI&lt;/a&gt; setup, you can
execute the following command:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-bash{promptUser:&#34; data-lang=&#34;bash{promptUser:&#34;&gt;AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then create an &lt;code&gt;OnboardingPolicy&lt;/code&gt; to allow any AWS ECS task from your
AWS Account ID to join any &lt;code&gt;WorkloadGroup&lt;/code&gt; in the &lt;code&gt;bookinfo&lt;/code&gt; namespace
by executing the following command. Replace &lt;code&gt;AWS_ACCOUNT_ID&lt;/code&gt; with the
appropriate value.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-bash{promptUser:&#34; data-lang=&#34;bash{promptUser:&#34;&gt;cat &amp;lt;&amp;lt;EOF | kubectl apply -f -
apiVersion: authorization.onboarding.tetrate.io/v1alpha1
kind: OnboardingPolicy
metadata:
  name: allow-ecs
  namespace: bookinfo            # (1)
spec:
  allow:
  - workloads:
    - aws:
        accounts:
        - &amp;#34;&amp;lt;AWS_ACCOUNT_ID&amp;gt;&amp;#34;     # (2)
        ecs: {}                  # (3)
    onboardTo:
    - workloadGroupSelector: {}  # (4)
EOF
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The above policy applies to any AWS ECS tasks (3) owned by the account
specified in (2), and allows them to join any &lt;code&gt;WorkloadGroup&lt;/code&gt; (4) in the
namespace &lt;code&gt;bookinfo&lt;/code&gt; (1)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Onboard AWS ECS task</title>
      <link>https://lib.jimmysong.io/tsb/setup/workload-onboarding/quickstart/aws-ecs/onboard-ecs/</link>
      <pubDate>Wed, 09 Aug 2023 12:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/tsb/setup/workload-onboarding/quickstart/aws-ecs/onboard-ecs/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;To onboard an AWS Elastic Container Service (ECS) task you need to follow
these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create an
&lt;a href=&#34;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/clusters.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AWS ECS cluster&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Create an
&lt;a href=&#34;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;IAM role for the task&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Create a
&lt;a href=&#34;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_execution_IAM_role.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;task execution IAM role&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Create an
&lt;a href=&#34;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definitions.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AWS ECS task definition&lt;/a&gt;
with the Workload Onboarding Agent as a sidecar container&lt;/li&gt;
&lt;li&gt;Create a subnet for the tasks&lt;/li&gt;
&lt;li&gt;Create a security group&lt;/li&gt;
&lt;li&gt;Create an
&lt;a href=&#34;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AWS ECS service&lt;/a&gt;
with this task definition&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;create-an-aws-ecs-cluster&#34;&gt;Create an AWS ECS cluster&lt;/h2&gt;
&lt;p&gt;Create an AWS ECS cluster called &lt;code&gt;bookinfo&lt;/code&gt; using &lt;code&gt;FARGATE&lt;/code&gt; as the capacity
provider.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-bash{promptUser:&#34; data-lang=&#34;bash{promptUser:&#34;&gt;aws ecs create-cluster --cluster-name bookinfo --capacity-providers FARGATE
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;create-an-iam-role-for-the-task&#34;&gt;Create an IAM role for the task&lt;/h2&gt;
&lt;p&gt;Create an IAM role for the task with the following trust policy.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-bash{promptUser:&#34; data-lang=&#34;bash{promptUser:&#34;&gt;cat &amp;lt;&amp;lt; EOF &amp;gt; task-role-trust-policy.json
{
  &amp;#34;Version&amp;#34;: &amp;#34;2012-10-17&amp;#34;,
  &amp;#34;Statement&amp;#34;: [
    {
      &amp;#34;Effect&amp;#34;: &amp;#34;Allow&amp;#34;,
      &amp;#34;Principal&amp;#34;: {
        &amp;#34;Service&amp;#34;: &amp;#34;ecs-tasks.amazonaws.com&amp;#34;
      },
      &amp;#34;Action&amp;#34;: &amp;#34;sts:AssumeRole&amp;#34;
    }
  ]
}
EOF

aws iam create-role \
  --role-name bookinfoECSTaskRole \
  --assume-role-policy-document file://task-role-trust-policy.json
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Configure this role with the following policy to allow
&lt;a href=&#34;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-exec.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ECS Exec&lt;/a&gt;.
This is not required for the task to join the mesh, but is used later in the
guide to verify traffic from the task to Kubernetes services.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-bash{promptUser:&#34; data-lang=&#34;bash{promptUser:&#34;&gt;cat &amp;lt;&amp;lt; EOF &amp;gt; ecs-exec-policy.json
{
  &amp;#34;Version&amp;#34;: &amp;#34;2012-10-17&amp;#34;,
  &amp;#34;Statement&amp;#34;: [
    {
      &amp;#34;Effect&amp;#34;: &amp;#34;Allow&amp;#34;,
      &amp;#34;Action&amp;#34;: [
        &amp;#34;ssmmessages:CreateControlChannel&amp;#34;,
        &amp;#34;ssmmessages:CreateDataChannel&amp;#34;,
        &amp;#34;ssmmessages:OpenControlChannel&amp;#34;,
        &amp;#34;ssmmessages:OpenDataChannel&amp;#34;
      ],
      &amp;#34;Resource&amp;#34;: &amp;#34;*&amp;#34;
    }
  ]
}
EOF

aws iam put-role-policy \
  --role-name bookinfoECSTaskRole \
  --policy-name bookinfoECSExecPolicy \
  --policy-document file://ecs-exec-policy.json
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;create-a-task-execution-iam-role&#34;&gt;Create a task execution IAM role&lt;/h2&gt;
&lt;p&gt;Create a task execution IAM role with the following trust policy and configure
it to use the AWS managed &lt;code&gt;AmazonECSTaskExecutionRolePolicy&lt;/code&gt; policy. This
policy gives the task permissions to access images in your Elastic Container
Registry (ECR) and to write logs.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-bash{promptUser:&#34; data-lang=&#34;bash{promptUser:&#34;&gt;cat &amp;lt;&amp;lt; EOF &amp;gt; task-exec-role-trust-policy.json
{
  &amp;#34;Version&amp;#34;: &amp;#34;2012-10-17&amp;#34;,
  &amp;#34;Statement&amp;#34;: [
    {
      &amp;#34;Effect&amp;#34;: &amp;#34;Allow&amp;#34;,
      &amp;#34;Principal&amp;#34;: {
          &amp;#34;Service&amp;#34;: &amp;#34;ecs-tasks.amazonaws.com&amp;#34;
      },
      &amp;#34;Action&amp;#34;: &amp;#34;sts:AssumeRole&amp;#34;
    }
  ]
}
EOF

aws iam create-role \
  --role-name bookinfoECSTaskExecRole \
  --assume-role-policy-document file://task-exec-role-trust-policy.json

aws iam attach-role-policy \
  --role-name bookinfoECSTaskExecRole \
  --policy-arn arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;create-an-aws-ecs-task-definition&#34;&gt;Create an AWS ECS task definition&lt;/h2&gt;
&lt;p&gt;Set the onboarding configuration as JSON in a shell variable, with spaces
removed and quotes escaped so that it can be encoded in the ECS task container
definition. Replace &lt;code&gt;ONBOARDING_ENDPOINT_ADDRESS&lt;/code&gt; with
&lt;a href=&#34;../aws-ec2/enable-workload-onboarding#verify-the-workload-onboarding-endpoint&#34;&gt;the value that you have obtained earlier&lt;/a&gt;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-bash{promptUser:&#34; data-lang=&#34;bash{promptUser:&#34;&gt;ONBOARDING_CONFIG=$(jq --compact-output . &amp;lt;&amp;lt;&amp;#39;EOF&amp;#39; | sed &amp;#39;s/&amp;#34;/\\&amp;#34;/g&amp;#39;
{
  &amp;#34;apiVersion&amp;#34;: &amp;#34;config.agent.onboarding.tetrate.io/v1alpha1&amp;#34;,
  &amp;#34;kind&amp;#34;: &amp;#34;OnboardingConfiguration&amp;#34;,
  &amp;#34;onboardingEndpoint&amp;#34;: {
    &amp;#34;host&amp;#34;: &amp;#34;&amp;lt;ONBOARDING_ENDPOINT_ADDRESS&amp;gt;&amp;#34;,
    &amp;#34;transportSecurity&amp;#34;: {
      &amp;#34;tls&amp;#34;: {
        &amp;#34;sni&amp;#34;: &amp;#34;onboarding-endpoint.example&amp;#34;
      }
    }
  },
  &amp;#34;workload&amp;#34;: {
    &amp;#34;labels&amp;#34;: {
      &amp;#34;version&amp;#34;: &amp;#34;v5&amp;#34;
    }
  },
  &amp;#34;workloadGroup&amp;#34;: {
    &amp;#34;name&amp;#34;: &amp;#34;ratings&amp;#34;,
    &amp;#34;namespace&amp;#34;: &amp;#34;bookinfo&amp;#34;
  }
}
EOF
)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Set the self-signed root certificate used for signing the onboarding plane TLS
certificate in a shell variable, with the line breaks escaped so that it can
be encoded in the ECS task container definition. &lt;code&gt;example-ca.crt.pem&lt;/code&gt; is the
self-signed cert created earlier when
&lt;a href=&#34;../aws-ec2/enable-workload-onboarding#prepare-the-certificates&#34;&gt;enabling workload onboarding&lt;/a&gt;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-bash{promptUser:&#34; data-lang=&#34;bash{promptUser:&#34;&gt;ONBOARDING_AGENT_ROOT_CERTS=$(awk &amp;#39;{printf &amp;#34;%s\\n&amp;#34;, $0}&amp;#39; example-ca.crt.pem)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now create the ECS task definition with the following command:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-bash{promptUser:&#34; data-lang=&#34;bash{promptUser:&#34;&gt;AWS_REGION=$(aws configure get region)
TASK_ROLE_ARN=$(aws iam get-role --role-name bookinfoECSTaskRole --query &amp;#39;Role.Arn&amp;#39; --output text)
TASK_EXECUTION_ROLE_ARN=$(aws iam get-role --role-name bookinfoECSTaskExecRole --query &amp;#39;Role.Arn&amp;#39; --output text)
ONBOARDING_AGENT_IMAGE=$(kubectl get deploy onboarding-operator -n istio-system -ojsonpath=&amp;#39;{.spec.template.spec.containers[?(@.name==&amp;#34;onboarding-operator&amp;#34;)].image}&amp;#39; | sed &amp;#39;s|/onboarding-operator-server:|/onboarding-agent:|&amp;#39;)

aws ecs register-task-definition \
  --task-role-arn=&amp;#34;${TASK_ROLE_ARN}&amp;#34; \
  --execution-role-arn=&amp;#34;${TASK_EXECUTION_ROLE_ARN}&amp;#34; \
  --family=&amp;#34;bookinfo_ratings&amp;#34; \
  --network-mode=&amp;#34;awsvpc&amp;#34; \
  --cpu=256 \
  --memory=512 \
  --requires-compatibilities FARGATE \
  --container-definitions=&amp;#39;[
   {
       &amp;#34;name&amp;#34;: &amp;#34;onboarding-agent&amp;#34;,
       &amp;#34;image&amp;#34;: &amp;#34;&amp;#39;&amp;#34;${ONBOARDING_AGENT_IMAGE}&amp;#34;&amp;#39;&amp;#34;,
       &amp;#34;user&amp;#34;: &amp;#34;0&amp;#34;,
       &amp;#34;environment&amp;#34;: [
           {
               &amp;#34;name&amp;#34;: &amp;#34;ONBOARDING_CONFIG&amp;#34;,
               &amp;#34;value&amp;#34;: &amp;#34;&amp;#39;&amp;#34;${ONBOARDING_CONFIG}&amp;#34;&amp;#39;&amp;#34;
           },
           {
               &amp;#34;name&amp;#34;: &amp;#34;ONBOARDING_AGENT_ROOT_CERTS&amp;#34;,
               &amp;#34;value&amp;#34;: &amp;#34;&amp;#39;&amp;#34;${ONBOARDING_AGENT_ROOT_CERTS}&amp;#34;&amp;#39;&amp;#34;
           }
       ],
       &amp;#34;logConfiguration&amp;#34;: {
           &amp;#34;logDriver&amp;#34;: &amp;#34;awslogs&amp;#34;,
           &amp;#34;options&amp;#34;: {
               &amp;#34;awslogs-group&amp;#34;: &amp;#34;/ecs/bookinfo_ratings&amp;#34;,
               &amp;#34;awslogs-region&amp;#34;: &amp;#34;&amp;#39;&amp;#34;${AWS_REGION}&amp;#34;&amp;#39;&amp;#34;,
               &amp;#34;awslogs-stream-prefix&amp;#34;: &amp;#34;ecs&amp;#34;
           }
       }
   },
   {
       &amp;#34;name&amp;#34;: &amp;#34;ratings&amp;#34;,
       &amp;#34;image&amp;#34;: &amp;#34;docker.io/tetrate/tetrate-examples-bookinfo-ratings-localhost-v1:1.16.4&amp;#34;,
       &amp;#34;essential&amp;#34;: true,
       &amp;#34;logConfiguration&amp;#34;: {
           &amp;#34;logDriver&amp;#34;: &amp;#34;awslogs&amp;#34;,
           &amp;#34;options&amp;#34;: {
               &amp;#34;awslogs-group&amp;#34;: &amp;#34;/ecs/bookinfo_ratings&amp;#34;,
               &amp;#34;awslogs-region&amp;#34;: &amp;#34;&amp;#39;&amp;#34;${AWS_REGION}&amp;#34;&amp;#39;&amp;#34;,
               &amp;#34;awslogs-stream-prefix&amp;#34;: &amp;#34;ecs&amp;#34;
           }
       }
   }
]&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This configures the task to write logs using the
&lt;a href=&#34;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_awslogs.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;awslogs driver&lt;/a&gt;
to the &lt;code&gt;/ecs/bookinfo_ratings&lt;/code&gt; log group. Create this group with the following
command:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-bash{promptUser:&#34; data-lang=&#34;bash{promptUser:&#34;&gt;aws logs create-log-group --log-group-name &amp;#34;/ecs/bookinfo_ratings&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;create-a-subnet&#34;&gt;Create a subnet&lt;/h2&gt;
&lt;h3 id=&#34;ensure-that-there-is-a-nat-gateway-in-your-vpc&#34;&gt;Ensure that there is a NAT gateway in your VPC&lt;/h3&gt;
&lt;p&gt;Ensure that there is a NAT gateway in your VPC by running commands below,
replacing &lt;code&gt;EKS_CLUSTER_NAME&lt;/code&gt; with the name of your EKS cluster.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-bash{promptUser:&#34; data-lang=&#34;bash{promptUser:&#34;&gt;VPC_ID=$(aws eks describe-cluster --name &amp;lt;EKS_CLUSTER_NAME&amp;gt; --query &amp;#39;cluster.resourcesVpcConfig.vpcId&amp;#39; --output text)

aws ec2 describe-nat-gateways --filter Name=vpc-id,Values=${VPC_ID}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If the returned list is empty, create a public subnet and NAT gateway using
the commands below, replacing &lt;code&gt;CIDR_BLOCK&lt;/code&gt; with the desired CIDR block to use
for the subnet, e.g. &lt;code&gt;10.0.3.0/24&lt;/code&gt;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-bash{promptUser:&#34; data-lang=&#34;bash{promptUser:&#34;&gt;INTERNET_GATEWAY_ID=$(aws ec2 describe-internet-gateways --filters Name=attachment.vpc-id,Values=${VPC_ID} --query &amp;#39;InternetGateways[0].InternetGatewayId&amp;#39; --output text)

aws ec2 create-subnet \
  --vpc-id &amp;#34;${VPC_ID}&amp;#34; \
  --cidr-block &amp;lt;CIDR_BLOCK&amp;gt; \
  --tag-specifications &amp;#39;ResourceType=subnet,Tags=[{Key=Name,Value=bookinfo-ecs-nat-gw-subnet}]&amp;#39;

NAT_GW_SUBNET_ID=$(aws ec2 describe-subnets --filters Name=tag:Name,Values=bookinfo-ecs-nat-gw-subnet --query &amp;#39;Subnets[0].SubnetId&amp;#39; --output text)

aws ec2 create-route-table \
  --vpc-id &amp;#34;${VPC_ID}&amp;#34; \
  --tag-specifications &amp;#39;ResourceType=route-table,Tags=[{Key=Name,Value=bookinfo-ecs-nat-gw-rtb}]&amp;#39;

NAT_GW_ROUTE_TABLE_ID=$(aws ec2 describe-route-tables --filters Name=tag:Name,Values=bookinfo-ecs-nat-gw-rtb --query &amp;#39;RouteTables[0].RouteTableId&amp;#39; --output text)

aws ec2 create-route \
  --route-table-id &amp;#34;${NAT_GW_ROUTE_TABLE_ID}&amp;#34; \
  --destination-cidr-block 0.0.0.0/0 \
  --gateway-id &amp;#34;${INTERNET_GATEWAY_ID}&amp;#34;

aws ec2 associate-route-table \
  --route-table-id &amp;#34;${NAT_GW_ROUTE_TABLE_ID}&amp;#34; \
  --subnet-id &amp;#34;${NAT_GW_SUBNET_ID}&amp;#34;

aws ec2 allocate-address \
  --tag-specifications &amp;#39;ResourceType=elastic-ip,Tags=[{Key=Name,Value=bookinfo-ecs-nat-gw-ip}]&amp;#39;

NAT_GW_EIP_ID=$(aws ec2 describe-addresses --filters Name=tag:Name,Values=bookinfo-ecs-nat-gw-ip --query &amp;#39;Addresses[0].AllocationId&amp;#39; --output text)

aws ec2 create-nat-gateway \
  --subnet-id &amp;#34;${NAT_GW_SUBNET_ID}&amp;#34; \
  --allocation-id &amp;#34;${NAT_GW_EIP_ID}&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;create-a-subnet-for-the-ecs-tasks&#34;&gt;Create a subnet for the ECS tasks&lt;/h3&gt;
&lt;p&gt;If you already have a private subnet configured with a NAT gateway that you
want to use for deploying tasks, set its ID in the shell variable &lt;code&gt;SUBNET_ID&lt;/code&gt;,
i.e.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-bash{promptUser:&#34; data-lang=&#34;bash{promptUser:&#34;&gt;SUBNET_ID=&amp;lt;YOUR_SUBNET_ID&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Otherwise, create a subnet using the NAT gateway found or created above using
the commands below, replacing &lt;code&gt;CIDR_BLOCK&lt;/code&gt; with the desired CIDR block to use
for the subnet, e.g. &lt;code&gt;10.0.4.0/24&lt;/code&gt;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-bash{promptUser:&#34; data-lang=&#34;bash{promptUser:&#34;&gt;NAT_GATEWAY_ID=$(aws ec2 describe-nat-gateways --filter Name=vpc-id,Values=${VPC_ID} --query &amp;#39;NatGateways[0].NatGatewayId&amp;#39; --output text)

aws ec2 create-subnet \
  --vpc-id &amp;#34;${VPC_ID}&amp;#34; \
  --cidr-block &amp;lt;CIDR_BLOCK&amp;gt; \
  --tag-specifications &amp;#39;ResourceType=subnet,Tags=[{Key=Name,Value=bookinfo-ecs-subnet}]&amp;#39;

SUBNET_ID=$(aws ec2 describe-subnets --filters Name=tag:Name,Values=bookinfo-ecs-subnet --query &amp;#39;Subnets[0].SubnetId&amp;#39; --output text)

aws ec2 create-route-table \
  --vpc-id &amp;#34;${VPC_ID}&amp;#34; \
  --tag-specifications &amp;#39;ResourceType=route-table,Tags=[{Key=Name,Value=bookinfo-ecs-rtb}]&amp;#39;

ROUTE_TABLE_ID=$(aws ec2 describe-route-tables --filters Name=tag:Name,Values=bookinfo-ecs-rtb --query &amp;#39;RouteTables[0].RouteTableId&amp;#39; --output text)

aws ec2 create-route \
  --route-table-id &amp;#34;${ROUTE_TABLE_ID}&amp;#34; \
  --destination-cidr-block 0.0.0.0/0 \
  --gateway-id &amp;#34;${NAT_GATEWAY_ID}&amp;#34;

aws ec2 associate-route-table \
  --route-table-id &amp;#34;${ROUTE_TABLE_ID}&amp;#34; \
  --subnet-id &amp;#34;${SUBNET_ID}&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;create-a-security-group&#34;&gt;Create a security group&lt;/h2&gt;
&lt;p&gt;A security group is needed with a rule allowing ingress traffic to port 9080
for Istio to use. Create one using the commands below:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-bash{promptUser:&#34; data-lang=&#34;bash{promptUser:&#34;&gt;aws ec2 create-security-group \
  --group-name BookinfoECSSecurityGroup \
  --description &amp;#34;Security group for ECS onboarding quickstart bookinfo tasks&amp;#34; \
  --vpc-id &amp;#34;${VPC_ID}&amp;#34;

SECURITY_GROUP_ID=$(aws ec2 describe-security-groups --filters Name=vpc-id,Values=${VPC_ID} Name=group-name,Values=BookinfoECSSecurityGroup --query &amp;#34;SecurityGroups[0].GroupId&amp;#34; --output text)

aws ec2 authorize-security-group-ingress \
    --group-id &amp;#34;${SECURITY_GROUP_ID}&amp;#34; \
    --protocol tcp \
    --port 9080 \
    --cidr 0.0.0.0/0
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;create-an-aws-ecs-service&#34;&gt;Create an AWS ECS service&lt;/h2&gt;
&lt;p&gt;Create an AWS ECS service in your cluster that uses the task definition,
subnet and security group using the following command. If you created
multiple task definition versions, update the version passed in the
&lt;code&gt;--task-definition&lt;/code&gt; flag.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-bash{promptUser:&#34; data-lang=&#34;bash{promptUser:&#34;&gt;aws ecs create-service \
  --cluster bookinfo \
  --service-name ratings \
  --task-definition bookinfo_ratings:1 \
  --desired-count 1 \
  --launch-type FARGATE \
  --platform-version LATEST \
  --network-configuration &amp;#34;awsvpcConfiguration={subnets=[${SUBNET_ID}],securityGroups=[${SECURITY_GROUP_ID}]}&amp;#34; \
  --enable-execute-command
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once you create this service, it will create an ECS task that will join the
mesh.&lt;/p&gt;
&lt;h2 id=&#34;verify-the-workload&#34;&gt;Verify the Workload&lt;/h2&gt;
&lt;p&gt;Verify that the workload has been properly onboarded by executing the
following command:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-bash{promptUser:&#34; data-lang=&#34;bash{promptUser:&#34;&gt;kubectl get war -n bookinfo
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If the workload was properly onboarded, you should get an output similar to:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-bash{promptUser:&#34; data-lang=&#34;bash{promptUser:&#34;&gt;NAME                                                                                    AGENT CONNECTED   AGE
ratings-aws-aws-123456789012-us-east-1a-ecs-bookinfo-3a151358f03a4e32bf8cd401c1c74653   True              1m
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;verify-traffic-from-kubernetes-to-the-task&#34;&gt;Verify Traffic from Kubernetes to the task&lt;/h3&gt;
&lt;p&gt;To verify traffic from Kubernetes Pod(s) to the AWS ECS task, create
some load on the bookinfo application deployed on Kubernetes and confirm
that requests get routed into the &lt;code&gt;ratings&lt;/code&gt; application deployed on the
AWS ECS task.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;../aws-ec2/bookinfo&#34;&gt;Set up port forwarding&lt;/a&gt; if you have not already done so.&lt;/p&gt;
&lt;p&gt;Then run the following commands:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-bash{promptUser:&#34; data-lang=&#34;bash{promptUser:&#34;&gt;for i in `seq 1 9`; do
    curl -s &amp;#34;http://localhost:9080/productpage?u=normal&amp;#34; | grep -c &amp;#34;glyphicon-star&amp;#34; | awk &amp;#39;{print $1&amp;#34; stars on the page&amp;#34;}&amp;#39;
done
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Two out of three times you should get a message &lt;code&gt;10 stars on the page&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Furthermore, you can verify that the task is receiving the traffic by
inspecting the
&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/configuration/observability/access_log/usage&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;access logs&lt;/a&gt;
for the incoming HTTP requests proxied by the Istio sidecar.&lt;/p&gt;
&lt;p&gt;Execute the following command using the &lt;code&gt;ecs-cli&lt;/code&gt; tool that can be
&lt;a href=&#34;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_CLI_installation.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;downloaded and installed here&lt;/a&gt;:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-bash{promptUser:&#34; data-lang=&#34;bash{promptUser:&#34;&gt;# Get the task ID from the WorkloadAutoRegistration resource
TASK_ID=$(kubectl get war -n bookinfo -o jsonpath=&amp;#34;{.items[0].spec.identity.aws.ecs.taskId}&amp;#34;)

ecs-cli logs --cluster bookinfo --task-id ${TASK_ID} --container-name onboarding-agent --follow
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You should see an output similar to:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[2021-10-25T11:06:13.553Z] &amp;#34;GET /ratings/0 HTTP/1.1&amp;#34; 200 - via_upstream - &amp;#34;-&amp;#34; 0 48 3 2 &amp;#34;-&amp;#34; &amp;#34;curl/7.68.0&amp;#34; &amp;#34;1928e798-dfe7-45a6-9020-d0f3a8641d03&amp;#34; &amp;#34;172.31.7.211:9080&amp;#34; &amp;#34;127.0.0.1:9080&amp;#34; inbound|9080|| 127.0.0.1:40992 172.31.7.211:9080 172.31.7.211:35470 - default
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;verify-traffic-from-the-task-to-kubernetes&#34;&gt;Verify Traffic from the task to Kubernetes&lt;/h3&gt;
&lt;p&gt;Start a shell in the task by running the following commands:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-bash{promptUser:&#34; data-lang=&#34;bash{promptUser:&#34;&gt;# Get the task ID from the WorkloadAutoRegistration resource
TASK_ID=$(kubectl get war -n bookinfo -o jsonpath=&amp;#34;{.items[0].spec.identity.aws.ecs.taskId}&amp;#34;)

# Start a shell
aws ecs execute-command --cluster bookinfo --task ${TASK_ID} --container onboarding-agent --interactive --command bash
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then execute the following commands:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-bash{promptUser:&#34; data-lang=&#34;bash{promptUser:&#34;&gt;for i in `seq 1 5`; do
  curl -i \
    --resolve details.bookinfo:9080:127.0.0.2 \
    details.bookinfo:9080/details/0
done
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The above command will make &lt;code&gt;5&lt;/code&gt; HTTP requests to Bookinfo &lt;code&gt;details&lt;/code&gt; application.
&lt;code&gt;curl&lt;/code&gt; will resolve Kubernetes cluster-local DNS name &lt;code&gt;details.bookinfo&lt;/code&gt;
into the IP address of the &lt;code&gt;egress&lt;/code&gt; listener of Istio proxy (&lt;code&gt;127.0.0.2&lt;/code&gt; according
to &lt;a href=&#34;./configure-workload-onboarding#create-the-sidecar-configuration&#34;&gt;the sidecar configuration you created earlier&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;You should get an output similar to:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-bash{promptUser:&#34; data-lang=&#34;bash{promptUser:&#34;&gt;HTTP/1.1 200 OK
content-type: application/json
server: envoy

{&amp;#34;id&amp;#34;:0,&amp;#34;author&amp;#34;:&amp;#34;William Shakespeare&amp;#34;,&amp;#34;year&amp;#34;:1595,&amp;#34;type&amp;#34;:&amp;#34;paperback&amp;#34;,   &amp;#34;pages&amp;#34;:200,&amp;#34;publisher&amp;#34;:&amp;#34;PublisherA&amp;#34;,&amp;#34;language&amp;#34;:&amp;#34;English&amp;#34;,   &amp;#34;ISBN-10&amp;#34;:&amp;#34;1234567890&amp;#34;,&amp;#34;ISBN-13&amp;#34;:&amp;#34;123-1234567890&amp;#34;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If this returns an HTTP 503 error, ensure the security group for your EKS
cluster is set to allow traffic on port 9080 from the
&lt;code&gt;BookinfoECSSecurityGroup&lt;/code&gt; that the ECS tasks created here use.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
