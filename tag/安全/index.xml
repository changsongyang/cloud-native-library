<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>安全 | 云原生资料库</title>
    <link>https://lib.jimmysong.io/tag/%E5%AE%89%E5%85%A8/</link>
      <atom:link href="https://lib.jimmysong.io/tag/%E5%AE%89%E5%85%A8/index.xml" rel="self" type="application/rss+xml" />
    <description>安全</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><lastBuildDate>Mon, 23 Oct 2023 00:00:00 +0800</lastBuildDate>
    <image>
      <url>https://lib.jimmysong.io/media/sharing.png</url>
      <title>安全</title>
      <link>https://lib.jimmysong.io/tag/%E5%AE%89%E5%85%A8/</link>
    </image>
    
    <item>
      <title>在 Envoy 中集成 SPIRE</title>
      <link>https://lib.jimmysong.io/spiffe-and-spire/examples/envoy/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/spiffe-and-spire/examples/envoy/</guid>
      <description>&lt;p&gt;本文指导你如何配置 Envoy 代理与 SPIFFE 和 SPIRE 配合使用。&lt;/p&gt;
&lt;p&gt;Envoy 是一种流行的开源服务代理，广泛用于提供抽象、安全、经过身份验证和加密的服务间通信。Envoy 拥有丰富的配置系统，允许灵活地与第三方进行交互。&lt;/p&gt;
&lt;p&gt;该配置系统的一个组成部分是 Secret Discovery Service 协议或 SDS。Envoy 使用 SDS 从 SDS 提供者检索和维护更新的“密钥”。在 TLS 身份验证的上下文中，这些密钥是 TLS 证书、私钥和可信 CA 证书。SPIRE 代理可以配置为 Envoy 的 SDS 提供者，使其能够直接向 Envoy 提供所需的密钥材料以进行 TLS 身份验证。SPIRE 代理还会根据需要重新生成短期密钥和证书。&lt;/p&gt;
&lt;p&gt;有关如何将 SPIRE 与 Envoy 集成的基于 Kubernetes 的示例，请参阅&lt;a href=&#34;https://github.com/spiffe/spire-tutorials/tree/main/k8s/envoy-x509&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;使用 X.509 证书集成 Envoy&lt;/a&gt; 和&lt;a href=&#34;https://github.com/spiffe/spire-tutorials/tree/main/k8s/envoy-jwt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;使用 JWT 集成 Envoy&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;工作原理&#34;&gt;工作原理&lt;/h2&gt;
&lt;p&gt;当 Envoy 连接到 SPIRE 代理提供的 SDS 服务器时，代理会对 Envoy 进行验证，并确定应向 Envoy 公开哪些服务标识和 CA 证书，以通过 SDS。&lt;/p&gt;
&lt;p&gt;随着服务标识和 CA 证书的轮换，更新会流式传输回 Envoy，使其可以立即将其应用于新连接，无需中断或停机，并且无需私钥接触磁盘。换句话说，SPIRE 丰富的定义和验证服务的方法可以用于定位 Envoy 进程、为其定义标识，并为其提供 Envoy 可用于 TLS 通信的 X.509 证书和信任信息。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-示意图展示了两个-envoy-代理在使用-spire-代理-sds实现获取用于服务间相互认证的-tls-通信的密钥&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/spire_plus_envoy.png&#34; alt=&#34;示意图展示了两个 Envoy 代理在使用 SPIRE 代理 SDS，实现获取用于服务间相互认证的 TLS 通信的密钥。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      示意图展示了两个 Envoy 代理在使用 SPIRE 代理 SDS，实现获取用于服务间相互认证的 TLS 通信的密钥。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;配置-spire&#34;&gt;配置 SPIRE&lt;/h2&gt;
&lt;p&gt;在 SPIRE v0.10 版本中，默认启用了 SDS 支持，因此不需要进行 SPIRE 配置更改。在早期版本的 SPIRE 中，SPIRE 代理配置文件中需要设置 &lt;code&gt;enable_sds = true&lt;/code&gt;。该设置现已停用，应在 SPIRE v0.10 及更高版本的 SPIRE 代理配置文件中删除该设置。&lt;/p&gt;
&lt;h2 id=&#34;配置-envoy&#34;&gt;配置 Envoy&lt;/h2&gt;
&lt;h3 id=&#34;spire-代理集群&#34;&gt;SPIRE 代理集群&lt;/h3&gt;
&lt;p&gt;必须配置 Envoy 以与 SPIRE 代理通信，方法是配置一个指向 SPIRE 代理提供的 Unix 域套接字的集群。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;clusters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;spire_agent&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;connect_timeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;25s&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;http2_protocol_options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hosts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;pipe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/tmp/spire-agent/public/api.sock&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;connect_timeout&lt;/code&gt; 影响当 Envoy 在启动时 SPIRE 代理未运行或 SPIRE 代理重新启动时，Envoy 能够快速响应的速度。&lt;/p&gt;
&lt;h3 id=&#34;tls-证书&#34;&gt;TLS 证书&lt;/h3&gt;
&lt;p&gt;要从 SPIRE 获取 TLS 证书和私钥，可以在 TLS 上下文中设置 SDS 配置。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;tls_context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;common_tls_context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tls_certificate_sds_secret_configs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;spiffe://example.org/backend&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;sds_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;api_config_source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;api_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;GRPC&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;grpc_services&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;envoy_grpc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cluster_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;spire_agent&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;TLS 证书的名称是 Envoy 作为代理的服务的 SPIFFE ID。&lt;/p&gt;
&lt;h3 id=&#34;验证上下文&#34;&gt;验证上下文&lt;/h3&gt;
&lt;p&gt;Envoy 使用可信 CA 证书来验证对等证书。验证上下文提供这些可信 CA 证书。SPIRE 可以为每个信任域提供验证上下文。&lt;/p&gt;
&lt;p&gt;要获取信任域的验证上下文，可以在 TLS 上下文的 SDS 配置中配置验证上下文，将验证上下文的名称设置为信任域的 SPIFFE ID。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;tls_context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;common_tls_context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;validation_context_sds_secret_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;spiffe://example.org&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;sds_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;api_config_source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;api_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;GRPC&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;grpc_services&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;envoy_grpc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cluster_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;spire_agent&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;SPIFFE 和 SPIRE 的重点是促进安全身份验证作为授权的构建块，而不是授权本身，因此验证上下文中的授权相关字段（例如 &lt;code&gt;match_subject_alt_names&lt;/code&gt;）不在其范围之内。相反，我们建议你利用 Envoy 的广泛过滤器框架执行授权。&lt;/p&gt;
&lt;p&gt;此外，你可以配置 Envoy 以将客户端证书详细信息转发到目标服务，使其能够执行自己的授权步骤，例如使用嵌入在客户端 X.509-SVID 的 URI SAN 中的 SPIFFE ID。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SPIFFE 基本概念</title>
      <link>https://lib.jimmysong.io/spiffe-and-spire/concept/spiffe/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/spiffe-and-spire/concept/spiffe/</guid>
      <description>&lt;p&gt;SPIFFE，即普适安全生产身份框架（Secure Production Identity Framework for Everyone），是一套开源标准，用于在动态和异构环境中安全地进行身份识别。采用 SPIFFE 的系统无论在哪里运行，都可以轻松可靠地相互认证。&lt;/p&gt;
&lt;p&gt;SPIFFE 开源规范的核心是——通过简单 API 定义了一个短期的加密身份文件 SVID。然后，工作负载进行认证时可以使用该身份文件，例如建立 TLS 连接或签署和验证 JWT 令牌等。&lt;/p&gt;
&lt;p&gt;SPIFFE 已经在云原生应用中得到了大量的应用，尤其是在 Istio 和 Envoy 中。下面将向你介绍 SPIFFE 的一些基本概念。&lt;/p&gt;
&lt;h2 id=&#34;工作负载&#34;&gt;工作负载&lt;/h2&gt;
&lt;p&gt;工作负载是一个单一的软件实体，通过特定配置部署，用于单一目的；它可能包括多个运行中的软件实例，所有这些实例执行相同的任务。术语“工作负载”可能涵盖软件系统的各种不同定义，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运行 Python Web 应用程序的 Web 服务器，部署在一组虚拟机上，前面有一个负载均衡器。&lt;/li&gt;
&lt;li&gt;一个 MySQL 数据库的实例。&lt;/li&gt;
&lt;li&gt;处理队列中条目的工作程序。&lt;/li&gt;
&lt;li&gt;一组独立部署的系统共同工作，例如使用数据库服务的 Web 应用程序。Web 应用程序和数据库也可以分别被视为工作负载。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于 SPIFFE 来说，工作负载往往比物理或虚拟节点更精细 - 通常精细到节点上的单个进程。对于在容器编排器中托管的工作负载而言，这对于多个工作负载可以共存（但在彼此之间隔离）于单个节点的情况非常重要。&lt;/p&gt;
&lt;p&gt;对于 SPIFFE 来说，工作负载也可能跨越多个节点 - 例如，一个可以在多台机器上同时运行的弹性缩放的 Web 服务器。&lt;/p&gt;
&lt;p&gt;尽管在不同的上下文中，将何为工作负载的粒度会有所不同，但对于 SPIFFE 的目的而言，&lt;em&gt;假定&lt;/em&gt;工作负载与其他工作负载隔离得足够好，以至于恶意的工作负载在发放证书后无法窃取另一个工作负载的凭据。此隔离的稳固性以及其实现机制超出了 SPIFFE 的范围。&lt;/p&gt;
&lt;h2 id=&#34;spiffe-id&#34;&gt;SPIFFE ID&lt;/h2&gt;
&lt;p&gt;SPIFFE ID 是一个字符串，唯一且具体地标识一个工作负载。SPIFFE ID 也可以分配给工作负载运行在的中间系统（如一组虚拟机）。例如，&lt;strong&gt;spiffe://acme.com/billing/payments&lt;/strong&gt; 是一个有效的 SPIFFE ID。&lt;/p&gt;
&lt;p&gt;SPIFFE ID 是一个&lt;a href=&#34;https://tools.ietf.org/html/rfc3986&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;统一资源标识符 (URI)&lt;/a&gt;，其格式如下：&lt;strong&gt;spiffe://信任域/工作负载标识符&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;工作负载标识符&lt;/em&gt;唯一地标识&lt;a href=&#34;https://spiffe.io/docs/latest/spiffe-about/spiffe-concepts/#trust-domain&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;信任域&lt;/a&gt;中的特定工作负载。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/spiffe/spiffe/blob/main/standards/SPIFFE.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIFFE 规范&lt;/a&gt;详细描述了 SPIFFE ID 的格式和用途。&lt;/p&gt;
&lt;h2 id=&#34;信任域&#34;&gt;信任域&lt;/h2&gt;
&lt;p&gt;信任域对应于系统的信任根。信任域可以代表运行其独立 SPIFFE 基础设施的个人、组织、环境或部门。在相同信任域中标识的所有工作负载都会收到可以与信任域的根密钥进行验证的身份文件。&lt;/p&gt;
&lt;p&gt;通常建议将位于不同物理位置（例如不同数据中心或云区域）或应用不同安全实践的环境（例如与生产环境相比的暂存或实验环境）的工作负载保持在不同的信任域中。&lt;/p&gt;
&lt;h2 id=&#34;spiffe-可验证身份文件svid&#34;&gt;SPIFFE 可验证身份文件（SVID）&lt;/h2&gt;
&lt;p&gt;SVID 是工作负载用于向资源或调用方证明其身份的文档。如果由 SPIFFE ID 信任域内的权威签名，SVID 被认为是有效的。&lt;/p&gt;
&lt;p&gt;一个 SVID 包含一个单一的 SPIFFE ID，代表了呈现它的服务的身份。它将 SPIFFE ID 编码在一个密码学可验证的文档中，支持两种当前支持的格式之一：X.509 证书或 JWT 令牌。&lt;/p&gt;
&lt;p&gt;由于令牌容易受到&lt;em&gt;重放攻击&lt;/em&gt;，在传输中获取了令牌后，攻击者可以使用它来冒充一个工作负载，因此建议尽可能使用 X.509-SVIDs。但是，在某些情况下，JWT 令牌格式可能是唯一的选择，例如当你的架构在两个工作负载之间有一个 L7 代理或负载均衡器时。&lt;/p&gt;
&lt;p&gt;有关 SVID 的详细信息，请参阅&lt;a href=&#34;https://github.com/spiffe/spiffe/blob/main/standards/X509-SVID.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SVID 规范&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;spiffe-工作负载-api&#34;&gt;SPIFFE 工作负载 API&lt;/h2&gt;
&lt;p&gt;工作负载 API 提供以下功能：&lt;/p&gt;
&lt;p&gt;对于 X.509 格式的身份文件（X.509-SVID）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;其身份，以 SPIFFE ID 形式描述。&lt;/li&gt;
&lt;li&gt;与该 ID 相关的私钥，可用于代表工作负载对数据进行签名。还创建了相应的短暂的 X.509 证书，即 X509-SVID。这可用于建立 TLS 连接或以其他方式对其他工作负载进行身份验证。&lt;/li&gt;
&lt;li&gt;一组证书 - 称为&lt;a href=&#34;https://spiffe.io/docs/latest/spiffe-about/spiffe-concepts/#trust-bundle&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;信任捆绑包&lt;/a&gt; - 可用于验证另一个工作负载呈现的 X.509-SVID。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于 JWT 格式的身份文件（JWT-SVID）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;其身份，以 SPIFFE ID 形式描述。&lt;/li&gt;
&lt;li&gt;JWT 令牌&lt;/li&gt;
&lt;li&gt;一组证书 - 称为&lt;a href=&#34;https://spiffe.io/docs/latest/spiffe-about/spiffe-concepts/#trust-bundle&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;信任捆绑包&lt;/a&gt; - 可用于验证其他工作负载的身份。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;与&lt;a href=&#34;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Amazon EC2 实例元数据 API&lt;/a&gt;和&lt;a href=&#34;https://cloud.google.com/compute/docs/storing-retrieving-metadata&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google GCE 实例元数据 API&lt;/a&gt;类似，工作负载 API 不要求调用工作负载具有自己的身份知识，或在调用 API 时拥有任何身份验证令牌。这意味着你的应用程序无需将任何身份验证密钥与工作负载一起部署。&lt;/p&gt;
&lt;p&gt;然而，与这些其他 API 不同，工作负载 API 是平台无关的，并且可以在进程级别以及内核级别识别运行的服务 - 这使其适用于与容器调度器（如 Kubernetes）一起使用。&lt;/p&gt;
&lt;p&gt;为了最小化由于密钥泄露或被破坏而造成的风险，所有私钥（及相应的证书）都是短暂的，会经常自动轮换。在相应的密钥到期之前，工作负载可以从工作负载 API 请求新的密钥和信任捆绑包。&lt;/p&gt;
&lt;h2 id=&#34;信任捆绑包&#34;&gt;信任捆绑包&lt;/h2&gt;
&lt;p&gt;在使用 X.509-SVID 时，信任捆绑包用于由目标工作负载验证源工作负载的身份。信任捆绑包是一个包含一个或多个证书颁发机构（CA）根证书的集合，工作负载应将其视为可信任的。信任捆绑包包含了验证 X.509 和 JWT SVID 的公钥材料。&lt;/p&gt;
&lt;p&gt;用于验证 X.509 SVID 的公钥材料是一组证书。用于验证 JWT 的公钥材料是一个原始的公钥。信任捆绑包的内容经常会发生变化。在调用工作负载 API 时，工作负载会检索信任捆绑包。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SPIFFE ID 和 SVID</title>
      <link>https://lib.jimmysong.io/spiffe-and-spire/standard/spiffe-id/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/spiffe-and-spire/standard/spiffe-id/</guid>
      <description>&lt;p&gt;SPIFFE 标准提供了一个规范，用于在异构环境和组织边界中引导和颁发服务的身份。它包括各种规范，每个规定了 SPIFFE 功能的特定子集的操作。&lt;/p&gt;
&lt;p&gt;特别是本文档作为 SPIFFE 标准的核心规范。虽然在 SPIFFE 范围内还有其他规范，但符合本文档就足以实现 SPIFFE 合规性，并获得 SPIFFE 标准本身的互操作性好处。&lt;/p&gt;
&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;
&lt;p&gt;本文档提出了正式的 SPIFFE 规范。它定义了 SPIFFE 标准的两个最基本组件：SPIFFE 身份和 SPIFFE 可验证身份文档。&lt;/p&gt;
&lt;p&gt;第 2 节概述了 SPIFFE 身份（SPIFFE ID）及其命名空间。SPIFFE ID 被定义为符合&lt;a href=&#34;https://tools.ietf.org/html/rfc3986&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 3986&lt;/a&gt;标准的 URI，包括“信任域名”和相关路径。信任域名作为 URI 的授权组件，用于识别发放给定身份的系统。以下示例演示了如何构造 SPIFFE ID：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;spiffe://trust-domain-name/path&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;有效的 SPIFFE ID 必须将方案设置为&lt;code&gt;spiffe&lt;/code&gt;，包含非零的信任域名，并且不能包含查询或片段组件。换句话说，SPIFFE ID 由&lt;code&gt;spiffe&lt;/code&gt;方案和一个特定站点的&lt;code&gt;hier-part&lt;/code&gt;（其中包括授权组件和可选路径）完全定义。&lt;/p&gt;
&lt;h3 id=&#34;信任域&#34;&gt;信任域&lt;/h3&gt;
&lt;p&gt;信任域对应于系统的信任根。信任域可以代表独立运行其自己的 SPIFFE 基础设施的个人、组织、环境或部门。&lt;/p&gt;
&lt;p&gt;信任域名称通常是自我注册的，与公共 DNS 不同，没有委托权机构来断言并注册基本域名到实际的法律实体，或者断言该法律实体对任何特定信任域名拥有公正和正当的权利。&lt;/p&gt;
&lt;p&gt;信任域名被定义为 URI 的授权组件，并应用以下限制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;授权组件的&lt;code&gt;host&lt;/code&gt;部分不得为空。&lt;/li&gt;
&lt;li&gt;授权组件的&lt;code&gt;userinfo&lt;/code&gt;和&lt;code&gt;port&lt;/code&gt;部分必须为空。&lt;/li&gt;
&lt;li&gt;授权组件的&lt;code&gt;host&lt;/code&gt;部分必须小写。&lt;/li&gt;
&lt;li&gt;授权组件的&lt;code&gt;host&lt;/code&gt;部分只能包含字母、数字、点、破折号和下划线（[a-z0-9.-_]）。&lt;/li&gt;
&lt;li&gt;授权组件的&lt;code&gt;host&lt;/code&gt;部分不能包含百分比编码的字符。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;请注意，此定义不排除用点分四段表示法表示的 IPv4 地址，但排除了 IPv6 地址。DNS 名称是有效信任域名的严格子集。实现在处理信任域名时，无论它们是有效的 IP 地址还是有效的 DNS 名称，都不得以不同方式处理它们。&lt;/p&gt;
&lt;h4 id=&#34;信任域名称冲突&#34;&gt;信任域名称冲突&lt;/h4&gt;
&lt;p&gt;信任域操作员可以自由选择任何他们认为合适的信任域名称：没有中央权威机构来监管或注册信任域名称。因此，不能保证全局唯一性，也没有技术手段阻止不同的信任域使用相同的信任域名称。&lt;/p&gt;
&lt;p&gt;为防止意外碰撞（两个信任域选择相同的名称），建议操作员选择高度可能全球唯一的信任域名称。即使信任域名称不是 DNS 名称，但如果可用，使用注册的域名作为信任域名的后缀将降低意外碰撞的可能性；例如，如果信任域操作员拥有域名&lt;code&gt;example.com&lt;/code&gt;，那么使用类似&lt;code&gt;trust_domain_name.example.com&lt;/code&gt;的信任域名可能不会产生冲突。当信任域名在没有操作员输入的情况下自动生成时，强烈建议随机生成一个唯一的名称（例如 UUID）。&lt;/p&gt;
&lt;p&gt;发生冲突时，这些信任域将继续独立运行，但将无法联合（相互连接）。因为每个信任域使用独特的信任根，由一个信任域发放的身份声明将在另一个信任域中验证失败。&lt;/p&gt;
&lt;h3 id=&#34;路径&#34;&gt;路径&lt;/h3&gt;
&lt;p&gt;SPIFFE ID 的路径组件允许唯一标识给定的工作负载。路径的含义是开放式的，由管理员负责定义。&lt;/p&gt;
&lt;p&gt;有效的 SPIFFE ID 路径组件必须遵循以下规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;路径组件不能包含百分比编码的字符。&lt;/li&gt;
&lt;li&gt;路径组件不能包含空段或相对路径修饰符（即&lt;code&gt;.&lt;/code&gt;、&lt;code&gt;..&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;路径组件不能以斜杠结尾。&lt;/li&gt;
&lt;li&gt;单个路径段只能包含字母、数字、点、破折号和下划线（[a-zA-Z0-9.-_]）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;路径可以是分层的，类似于文件系统路径。路径的具体含义保留给实施者，不属于 SVID 规范的范围之内。以下是一些示例和约定。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;直接标识服务&lt;/p&gt;
&lt;p&gt;通常，直接标识服务是有价值的。例如，管理员可能会决定在特定一组节点上运行的任何进程都应该能够以特定的身份呈现自己。例如：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;spiffe://staging.example.com/payments/mysql&lt;/code&gt;
或
&lt;code&gt;spiffe://staging.example.com/payments/web-fe&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;上述两个 SPIFFE ID 指代了两个不同的组件 - mysql 数据库服务和一个运行在暂存环境中的支付服务的 web 前端。环境“staging”的含义和“payments”作为高级服务集合的含义由实施者定义。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;标识服务所有者&lt;/p&gt;
&lt;p&gt;通常，更高级别的编排器和平台可能已经内置了它们自己的身份概念（如 Kubernetes 服务账户或 AWS/GCP 服务账户），直接将 SPIFFE 身份映射到这些身份是很有帮助的。例如：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;spiffe://k8s-west.example.com/ns/staging/sa/default&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在这个示例中，example.com 的管理员正在运行一个名为 k8s-west.example.com 的 Kubernetes 集群，该集群有一个“staging”命名空间，在其中有一个名为“default”的服务账户（sa）。这些都是由 SPIFFE 管理员定义的约定，而不是本规范所保证的断言。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不透明的 SPIFFE 身份&lt;/p&gt;
&lt;p&gt;上述示例是说明性的，在最一般的情况下，SPIFFE 路径可能是不透明的，不包含任何可见的分层信息。例如，地理位置、逻辑系统分区和/或服务名称等元数据可以由注册身份及其属性的次级系统提供。可以查询以检索与 SPIFFE 标识符相关联的任何元数据。例如：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;spiffe://example.com/9eebccd2-12bf-40a6-b262-65fe0487d453&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;最大-spiffe-id-长度&#34;&gt;最大 SPIFFE ID 长度&lt;/h3&gt;
&lt;p&gt;如&lt;a href=&#34;https://tools.ietf.org/html/rfc3986&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 3986&lt;/a&gt;定义的 URI 没有最大长度。出于互操作性考虑，SPIFFE 实现必须支持最长为 2048 字节的 SPIFFE URI，并且不应生成长度大于 2048 字节的 URI。&lt;a href=&#34;https://tools.ietf.org/html/rfc3986&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 3986&lt;/a&gt;仅允许 ASCII 字符，因此 SPIFFE ID 的推荐最大长度为 2048 字节。&lt;/p&gt;
&lt;p&gt;所有 URI 组件都会影响 URI 的长度，包括“spiffe”方案、“：//”分隔符、信任域名和路径组件。非 ASCII 字符在将其编码为 ASCII 字符后会影响 URI 的长度。请注意，&lt;a href=&#34;https://tools.ietf.org/html/rfc3986&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 3986&lt;/a&gt;为 URI 的“host”组件定义了最大长度为 255 个字符；因此，信任域名的最大长度为 255 字节。&lt;/p&gt;
&lt;h3 id=&#34;spiffe-id-解析&#34;&gt;SPIFFE ID 解析&lt;/h3&gt;
&lt;p&gt;SPIFFE ID 遵循由&lt;a href=&#34;https://tools.ietf.org/html/rfc3986&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 3986&lt;/a&gt;定义的 URI 规范。SPIFFE ID 的方案和信任域名对大小写不敏感，而路径对大小写敏感。&lt;/p&gt;
&lt;h2 id=&#34;spiffe-可验证身份文档&#34;&gt;SPIFFE 可验证身份文档&lt;/h2&gt;
&lt;p&gt;SPIFFE 可验证身份文档（SVID）是工作负载将其身份通信给资源或调用者的机制。如果 SVID 已由 SPIFFE ID 所在信任域内的授权方签名，则认为 SVID 是有效的。&lt;/p&gt;
&lt;h3 id=&#34;svid-信任&#34;&gt;SVID 信任&lt;/h3&gt;
&lt;p&gt;SPIFFE 信任根植于给定 ID 的信任域。每个信任域必须存在一个签名授权机构，该授权机构必须携带自己的 SVID。签名授权机构的 SPIFFE ID 应该驻留在其具有权威性的信任域中，并且不应具有路径组件。授权机构的 SVID 然后形成了给定信任域的信任基础。&lt;/p&gt;
&lt;p&gt;如果需要，可以通过使用外部信任域授权机构的私钥对授权机构的 SVID 进行签名来实现信任链。如果不需要链接信任，那么授权机构的 SVID 将进行自签名。&lt;/p&gt;
&lt;h3 id=&#34;svid-组件&#34;&gt;SVID 组件&lt;/h3&gt;
&lt;p&gt;SVID 是一个相当简单的构造，包括三个基本组件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个 SPIFFE ID&lt;/li&gt;
&lt;li&gt;一个有效的签名&lt;/li&gt;
&lt;li&gt;一个可选的公钥&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SPIFFE ID 和公钥（如果存在）必须包含在签名的有效载荷的一部分中。如果包含了公钥，则相应的私钥将由发放 SVID 的实体保留，并用于证明对 SVID 本身的所有权。&lt;/p&gt;
&lt;p&gt;个别的 SVID 规范可能要求或以其他方式允许在 SVID 中包含超出此处描述的内容。所包含信息的性质可能或可能不会严格由相关的 SPIFFE 规范定义 - 例如，JWT-SVID 规范允许用户在 SVID 本身中包含任意信息。在相关 SVID 规范未明确指定此附加信息的情况下，操作者在将此信息用作安全决策的输入时应格外小心，特别是如果要验证的 SVID 属于不同的信任域。有关更多信息，请参阅安全注意事项部分。&lt;/p&gt;
&lt;h3 id=&#34;svid-格式&#34;&gt;SVID 格式&lt;/h3&gt;
&lt;p&gt;SVID 本身不是一种文件类型。已经存在许多文件格式可以满足 SPIFFE SVID 的需求，我们不希望重新发明这些格式。相反，我们定义了一组特定于格式的规范，规范化了 SVID 信息的编码。&lt;/p&gt;
&lt;p&gt;为了使 SVID 被视为有效，它必须利用已定义相应规范的文件类型。在撰写本文时，唯一受支持的文件类型是 X.509 和 JWT。请注意，特定于格式的 SVID 规范可能会升级本文中规定的要求。&lt;/p&gt;
&lt;h2 id=&#34;安全注意事项&#34;&gt;安全注意事项&lt;/h2&gt;
&lt;p&gt;本节包含在使用 SPIFFE ID 和 SVID 时实施者和用户应考虑的安全注意事项。&lt;/p&gt;
&lt;h3 id=&#34;svid-断言&#34;&gt;SVID 断言&lt;/h3&gt;
&lt;p&gt;SVID 始终包含一组数据 - 至少是一个 SPIFFE ID。有时，此数据代表了信任域授权机构对 SVID 主体所做的断言。在从此数据中解释含义时，必须小心确保所有涉及方都充分理解所使用信息的含义和重要性。&lt;/p&gt;
&lt;p&gt;在考虑给定断言的相对安全性时，有四个主要问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先是时间上的准确性 - SVID 在到期之前一段时间内是有效的，SVID 中的断言在 SVID 的整个生命周期内是否为真？&lt;/li&gt;
&lt;li&gt;其次，断言的范围和影响 - 断言最初是在什么上下文下进行的，它的影响有多大？&lt;/li&gt;
&lt;li&gt;第三是解释和含义的问题 - 断言对授权机构和消费者是否具有相同的含义或解释，或者存在着不同的解释可能性？&lt;/li&gt;
&lt;li&gt;最后，断言本身的真实性在某些情况下可能会受到质疑。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本节探讨了这四个关注领域的所有方面，并提供了操作者可以评估任何给定 SVID 断言的相对安全性的指导方针。一般来说，操作者应该以谨慎为原则，只包含那些对所涉及的断言的安全性具有非常高度信心的断言。&lt;/p&gt;
&lt;p&gt;值得注意的是，虽然通常由 SPIFFE 规范直接形式化的断言通常不容易受到与解释和含义相关的问题的影响，但它们仍然可能容易受到与真实性相关的问题的影响。但是，由于 SPIFFE 定义的断言的范围非常有限，因此在这方面的真实性问题表明了与问题相关的信任域的安全姿态的更大问题，此时操作者应该认真考虑是否应该在第一时间与这些系统交换数据。&lt;/p&gt;
&lt;h4 id=&#34;时间上的准确性&#34;&gt;时间上的准确性&lt;/h4&gt;
&lt;p&gt;SVID 在一段有限的时间内有效，主要是为了降低密钥被泄露和相关损害的可能性。虽然通常情况下，SVID 中的断言在签发时是真实的，但并不一定意味着在使用时也是真实的。&lt;/p&gt;
&lt;p&gt;某些类型的断言比其他类型更容易受到此问题的影响。服务所有者的名称、角色或组成员资格以及访问策略都是在 SVID 签发时和验证或使用时之间更有可能发生变化的示例。相反，工作负载及其运行时的自然属性（例如 SPIFFE ID 或工作负载所在的区域）通常与工作负载的生命周期绑定，因此不太可能发生变化，这使得它们不太容易受到时间上的准确性的问题影响。&lt;/p&gt;
&lt;p&gt;在决定是否应该在 SVID 中包含某个特定的断言时，考虑到这一点是很重要的。在 SVID 中作出的断言将被认为在 SVID 的生命周期内都是有效的，并且对于具有旧断言的所有 SVID 来说，将首先过期，因此在活动系统上对此断言进行更改（或撤销）将会很费时。如果对于所考虑的断言的波动性不清楚，操作者应该以谨慎为原则，并将其排除在 SVID 之外。&lt;/p&gt;
&lt;h4 id=&#34;范围和影响&#34;&gt;范围和影响&lt;/h4&gt;
&lt;p&gt;SVID 由位于其信任域中的授权机构签名。签名授权机构有责任验证其签署的 SVID 中的所有信息，而包含在 SVID 中的所有断言实际上都是由签名授权机构所做的断言。&lt;/p&gt;
&lt;p&gt;此授权机构的影响和断言所做的范围是自然有限的。一个信任域的授权机构的权限不应该对其他信任域中的实体做出断言（即其断言的范围仅限于其控制下的实体）。同样，在消费 SVID 数据时，消费者应该将其中包含的所有断言视为受到 SVID 所在信任域的限制。&lt;/p&gt;
&lt;p&gt;例如：如果信任域 A 和 B 都使用名为“role”的属性，那么信任域 A 中具有“admin”角色的实体可以使用该角色做出自己信任域中 SVID 的断言，但信任域 B 中的实体不能使用与 A 中相同的断言对其 SVID 进行断言。&lt;/p&gt;
&lt;p&gt;在这方面，SPIFFE 设计意图是将这些信任域之间的安全隔离形式化并保证在接受 SPIFFE SVID 的所有系统中得到正确执行。&lt;/p&gt;
&lt;h4 id=&#34;解释&#34;&gt;解释&lt;/h4&gt;
&lt;p&gt;通过签名 SVID 断言，签名授权机构明确其对所签名断言的含义的解释。此解释的范围由信任域的信任基础确定。&lt;/p&gt;
&lt;p&gt;此外，消费者和其他参与者也可以对断言的含义进行自己的解释。例如，可能存在一个交叉信任域的场景，其中包含了不同信任域中的实体。这些实体可能会在实体之间以不同方式解释相同的断言。&lt;/p&gt;
&lt;p&gt;操作者和开发人员在评估任何给定 SVID 断言的相对安全性时应该非常小心，特别是如果要验证的 SVID 属于不同的信任域。尽管通常情况下这种情况不会出现问题，但它也可能会导致复杂的安全问题，甚至不可知的问题。&lt;/p&gt;
&lt;h4 id=&#34;真实性&#34;&gt;真实性&lt;/h4&gt;
&lt;p&gt;就像所有数字证书和断言一样，SVID 的真实性取决于其颁发方的安全性。签名授权机构的私钥的保护是 SVID 真实性的主要保障。如果授权机构的私钥暴露或泄漏，那么可以生成无效 SVID，并可能会导致错误的授权。&lt;/p&gt;
&lt;p&gt;授权机构的私钥的安全性是信任域操作员的责任，他们应该采取必要的措施来确保私钥的安全，包括使用强大的密码学方法（如硬件安全模块）来保护私钥。此外，应定期更换私钥以降低突破的风险。&lt;/p&gt;
&lt;p&gt;授权机构的私钥的安全性也是操作员选择是否使用外部信任域授权机构的一个重要考虑因素。如果使用外部授权机构的私钥进行签名，那么授权机构的私钥的安全性不再完全由信任域操作员控制，而是由外部授权机构的授权机构控制。这可能会引入一些风险和不确定性，特别是如果外部授权机构是第三方服务或实体。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;请注意，上述文档是一个假设的 SPIFFE（面向所有人的安全生产身份框架）标准的核心规范的示例草稿。实际的 SPIFFE 规范可能会包含更多细节和具体规定，同时也可能会参考其他相关规范。在实际使用中，请始终参考最新的 SPIFFE 规范文档以确保遵守正确的标准和规定。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>获取 SPIRE</title>
      <link>https://lib.jimmysong.io/spiffe-and-spire/installation/getting-spire/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/spiffe-and-spire/installation/getting-spire/</guid>
      <description>&lt;p&gt;本页面描述了一些开始使用 SPIRE 的选项。&lt;/p&gt;
&lt;h2 id=&#34;docker-compose&#34;&gt;Docker Compose&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://spiffe.io/docs/latest/try/spire101/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 101&lt;/a&gt; 是一个在 Docker Compose 上运行的 SPIRE 入门介绍&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spiffe/spire-tutorials&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;spire-tutorials&lt;/a&gt; 存储库中提供了其他 Docker Compose 演示&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;kubernetes&#34;&gt;Kubernetes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;SPIRE 没有官方的 Helm chart、Kustomize 文件或自定义资源操作器，但 &lt;a href=&#34;https://spiffe.io/docs/latest/spire/installing/getting-started-k8s/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes 快速入门&lt;/a&gt; 包括一套用于测试 SPIRE Server 和 Agent 的基本 Kubernetes YAML 文件&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spiffe/spire-tutorials&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;spire-tutorials&lt;/a&gt; 存储库中提供了其他 Kubernetes 演示&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;linux&#34;&gt;Linux&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;SPIRE GitHub &lt;a href=&#34;https://github.com/spiffe/spire/releases&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;releases&lt;/a&gt; 页面提供了每个 SPIRE 版本的下载链接和变更日志&lt;/li&gt;
&lt;li&gt;spiffe.io 的&lt;a href=&#34;https://spiffe.io/downloads/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;获取 SPIRE&lt;/a&gt; 页面提供了其他下载选项和构建 SPIRE 的说明&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://spiffe.io/docs/latest/spire/installing/getting-started-linux-macos-x/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Linux 和 MacOS X 快速入门&lt;/a&gt; 介绍了如何下载和测试 SPIRE Server 和 Agent 的简单单节点安装&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;macos&#34;&gt;MacOS&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;没有预编译的 MacOS 可执行文件可用，但 &lt;a href=&#34;https://spiffe.io/docs/latest/spire/installing/getting-started-linux-macos-x/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Linux 和 MacOS X 快速入门&lt;/a&gt; 介绍了如何下载和构建 SPIRE 以测试 SPIRE Server 和 Agent 的简单单节点安装&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>扩展 SPIRE 部署：支持的 SPIRE 拓扑结构、身份联合和规模考虑</title>
      <link>https://lib.jimmysong.io/spiffe-and-spire/architecture/scaling-spire/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/spiffe-and-spire/architecture/scaling-spire/</guid>
      <description>&lt;p&gt;扩展 SPIRE 可以通过嵌套拓扑和联合拓扑来实现。&lt;strong&gt;嵌套拓扑允许将多个 SPIRE 服务器链接在一起，以发放属于同一信任域的身份。联合拓扑用于在不同信任域之间建立信任，使工作负载能够在不同信任域中进行身份验证&lt;/strong&gt;。SPIRE 还可以与其他 SPIFFE 兼容系统和 OIDC 提供者系统进行联合，以实现安全的身份验证和通信。在部署规模时，需要考虑 SVID 和根证书的生存时间、工作负载数量和分布、JWT-SVID 的使用等因素，并注意数据存储的设计和规划。&lt;/p&gt;
&lt;p&gt;SPIRE 部署可以根据工作负载的增长来调整大小或规模。一个 SPIRE 部署由一个或多个共享复制数据存储的 SPIRE 服务器组成，或者相反，由在同一信任域中的一组 SPIRE 服务器和至少一个 SPIRE 代理（通常是一个以上）组成。&lt;/p&gt;
&lt;p&gt;部署的大小范围广泛。单个 SPIRE 服务器可以容纳多个代理和工作负载注册条目。一个规模大小的考虑是，由于涉及到管理和发放与这些条目相对应的身份所涉及的操作数量，SPIRE 服务器实例的内存和 CPU 消耗往往与部署中的工作负载注册条目数量成比例增长。单个 SPIRE 服务器实例也代表了一个单点故障。&lt;/p&gt;
&lt;p&gt;为了支持给定部署中更多的代理和工作负载（数以万计或数十万个节点），可以水平扩展 SPIRE 服务器的数量。有了多个服务器，SPIRE 服务器执行的计算工作将在所有 SPIRE 服务器实例之间分布。除了额外的容量之外，使用多个 SPIRE 服务器实例还可以消除单点故障，实现高可用性。&lt;/p&gt;
&lt;h3 id=&#34;高可用性模式下的-spire-服务器&#34;&gt;高可用性模式下的 SPIRE 服务器&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/ha_mode.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;要水平扩展 SPIRE 服务器，无论是出于高可用性还是负载分配目的，都要配置所有属于同一信任域的服务器以读写相同的共享数据存储。&lt;/p&gt;
&lt;p&gt;数据存储是 SPIRE 服务器持久保存动态配置信息的地方，例如注册条目和身份映射策略。SQLite 已捆绑到 SPIRE 服务器中，它是默认的数据存储。支持一些兼容的 SQL 数据库，以及一个用于使用 Kubernetes CRD 的 Kubernetes 插件。在水平扩展 SPIRE 服务器时，请选择符合你要求的数据存储，并配置所有 SPIRE 服务器以使用所选的数据存储。有关详细信息，请参阅 &lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_datastore_sql.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;数据存储插件配置参考&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;在高可用性模式下，每个服务器都维护自己的证书颁发机构，可以是自签名证书，也可以是从共享根证书颁发机构获取的中间证书（即在配置了上游机构时）。&lt;/p&gt;
&lt;h2 id=&#34;选择-spire-部署拓扑&#34;&gt;选择 SPIRE 部署拓扑&lt;/h2&gt;
&lt;p&gt;有三种主要的 SPIRE 部署拓扑：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单一信任域&lt;/li&gt;
&lt;li&gt;嵌套 SPIRE&lt;/li&gt;
&lt;li&gt;联合 SPIRE&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;诸如管理域边界、工作负载数量、可用性要求、云供应商数量和身份验证要求等因素将决定你环境中的适当拓扑，如下所述。&lt;/p&gt;
&lt;h3 id=&#34;单一信任域&#34;&gt;单一信任域&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/single_trust_domain.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;单一信任域最适合个体环境或在管理域内具有相似特征的环境。创建一个单一的主导信任域的主要动机是从单个证书颁发机构中发放身份，因为这会减少在不同部署中管理的 SPIRE 服务器数量。&lt;/p&gt;
&lt;p&gt;然而，当将单个 SPIRE 信任域部署以跨越地理区域、平台和云提供商环境时，在跨越地理位置或跨越云提供商边界的多个地方管理共享数据存储会带来一定的复杂性。在这些情况下，当部署扩展以覆盖多个环境时，解决在单一信任域上使用共享数据存储的问题的方法是在嵌套拓扑中配置 SPIRE 服务器。&lt;/p&gt;
&lt;h3 id=&#34;嵌套-spire&#34;&gt;嵌套 SPIRE&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/nested_spire.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;嵌套 SPIRE 允许 SPIRE 服务器被“链接”在一起，所有服务器仍然发放属于同一信任域的身份，这意味着在同一信任域中识别的所有工作负载都会获得可以与信任域的根密钥进行验证的身份文档。&lt;/p&gt;
&lt;p&gt;嵌套拓扑通过在每个下游 SPIRE 服务器与“链接”的 SPIRE 代理共存来工作。下游 SPIRE 服务器通过 Workload API 获取凭据，然后使用这些凭据直接与上游 SPIRE 服务器进行身份验证以获取中间 CA。&lt;/p&gt;
&lt;p&gt;一个有助于理解嵌套拓扑功能的心理模型是将顶级 SPIRE 服务器想象成是一个全局服务器（或一组用于高可用性的服务器），而下游 SPIRE 服务器是区域或集群级别的服务器。&lt;/p&gt;
&lt;p&gt;在此配置中，顶层 SPIRE 服务器保存根证书/密钥，而下游服务器请求中间签名证书，用作下游服务器的 X.509 签名授权机构。这提供了弹性，因为顶层可能会崩溃，中间服务器将继续运行。&lt;/p&gt;
&lt;p&gt;嵌套拓扑非常适用于多云部署。由于能够混合匹配节点证明者，下游服务器可以驻留在不同云提供商环境中，为不同云提供商环境中的工作负载和代理提供身份。&lt;/p&gt;
&lt;p&gt;作为为了实现高可用性和负载平衡而将 SPIRE 服务器水平扩展的补充，嵌套拓扑可以用作分隔故障域的约束策略。&lt;/p&gt;
&lt;h3 id=&#34;联合-spire&#34;&gt;联合 SPIRE&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/federated_spire.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;部署可能需要多个信任根：也许因为一个组织有不同的组织部门，各自有不同的管理员，或者因为它们有单独的临时和生产环境，需要偶尔进行通信。&lt;/p&gt;
&lt;p&gt;另一个用例是在组织之间实现 SPIFFE 互操作性，例如在云提供商和其客户之间。&lt;/p&gt;
&lt;p&gt;这些多信任域和互操作性用例都需要一种明确定义的、可互操作的方法，使一个信任域中的工作负载能够对另一个信任域中的工作负载进行身份验证。首先通过验证各自的束终点来建立不同信任域之间的信任，然后通过经过身份验证的端点检索外部信任域束。&lt;/p&gt;
&lt;p&gt;有关如何实现这一点的更多细节，请参阅以下 SPIFFE 规范，其中描述了这种机制：&lt;a href=&#34;https://github.com/spiffe/spiffe/blob/main/standards/SPIFFE_Trust_Domain_and_Bundle.md#5-spiffe-bundle-endpoint&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIFFE 信任域和束&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;有关配置联合 SPIRE 的教程，请参阅：&lt;a href=&#34;https://github.com/spiffe/spire-tutorials/tree/main/docker-compose/federation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;联合 SPIRE 教程&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;与外部系统的交互&#34;&gt;与外部系统的交互&lt;/h2&gt;
&lt;h3 id=&#34;与与-spiffe-兼容的系统联合&#34;&gt;与“与 SPIFFE 兼容”的系统联合&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/spiffe_compatible.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;SPIFFE 身份颁发者可以与其他暴露 SPIFFE 联合 API 实现的 SPIFFE 身份颁发者联合，使联合域中的工作负载能够安全地进行身份验证和通信。与在 SPIRE 部署之间建立联合一样，SPIFFE 联合用于在 SPIFFE 兼容系统之间启用联合，比如在一个 Istio 服务网格和另一个 Istio 服务网格之间运行的 Istio 服务网格。&lt;/p&gt;
&lt;p&gt;例如，在当前的 Istio 中，服务网格上的所有应用程序都位于同一个信任域中，因此共享一个共同的信任根。可能会有不止一个服务网格，或者在服务网格中通信到需要进行身份验证的外部服务。使用联合功能可以使得 SPIFFE 兼容的系统，比如多个 Istio 服务网格，能够为安全的跨网格和脱网通信建立信任。&lt;/p&gt;
&lt;h3 id=&#34;与-oidc-提供者系统的联合&#34;&gt;与 OIDC 提供者系统的联合&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/oidc_federation.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;SPIRE 具有一个特性，可以代表已识别的工作负载对远程系统进行编程身份验证，例如与支持 OIDC 联合的公共云提供商服务和密钥存储进行交互。例如，在亚马逊网络服务的情况下，一个经过 SPIRE 认证的工作负载可以对接 AWS S3 存储桶、AWS RDS 实例或 AWS CodePipeline 进行身份验证和通信。&lt;/p&gt;
&lt;p&gt;SPIRE OIDC 发现提供者使用 ACME 协议检索 WebPKI 证书，用于保护一个端点，该端点提供 OIDC 兼容的 JWKS 束和标准 OIDC 发现文档。然后需要配置远程 OIDC 认证服务以定位该端点并确定 WebPKI 服务。一旦完成此配置，可以设置远程系统的 IAM 策略和角色以映射到特定的 SPIFFE ID。工作负载随后将通过发送 JWT-SVID 与 OIDC 认证系统通信。然后，目标系统从预定义的 URI 获取 JWKS，该 URI 由 OIDC 发现提供者提供。目标系统使用 JWKS 文件验证 JWT-SVID，如果 JWT-SVID 中包含的 SPIFFE ID 被授权访问所请求的资源，则服务请求。然后，工作负载就能够访问外部远程服务，而无需拥有由其提供的任何凭据。&lt;/p&gt;
&lt;p&gt;有关 OIDC 发现提供者的配置参考，请参阅：&lt;a href=&#34;https://github.com/spiffe/spire/tree/main/support/oidc-discovery-provider&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OIDC 发现提供者配置参考&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;有关在 Amazon Web Services 配置 OIDC 联合的详细教程，请参阅：&lt;a href=&#34;https://spiffe.io/spire/try/oidc-federation-aws/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;配置 OIDC 到 Amazon Web Services&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;部署规模考虑&#34;&gt;部署规模考虑&lt;/h2&gt;
&lt;p&gt;在为 SPIRE 部署调整大小以实现最佳性能时，需要考虑的因素包括但不限于以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SVID 和根证书的生存时间&lt;/li&gt;
&lt;li&gt;每个节点的工作负载数量和分布&lt;/li&gt;
&lt;li&gt;大量 JWT-SVID 的使用（因为 JWT 需要根据需要进行签名，而不像 x509 那样预先存储）&lt;/li&gt;
&lt;li&gt;注册更改的频率&lt;/li&gt;
&lt;li&gt;在 SPIRE 服务器节点上运行的其他进程&lt;/li&gt;
&lt;li&gt;基础架构环境的“形状”和“大小”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;特别要注意对数据存储的设计和规划。请注意，数据存储的性能在上述列表中没有得到解决，并且可能会限制 SPIRE 的性能。由于每个代理同步（每 5 秒一次）都会进行授权检查，因此数据存储通常是性能瓶颈。在嵌套拓扑中，由于嵌套拓扑中的每个 SPIRE 服务器集群都有自己的数据存储，因此可以降低此成本。&lt;/p&gt;
&lt;p&gt;下表旨在提供关于在 SPIRE 部署中调整 SPIRE 服务器大小的参考信息。这些参考数字基于测试环境。它们仅作为数量级指南，不代表任何特定用户环境的性能保证。网络带宽和数据库查询信息未包含在内。此外，所显示的工作负载和代理数量不代表在理论上可能的 SPIRE 部署规模。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;工作负载数量&lt;/th&gt;
&lt;th&gt;10 代理&lt;/th&gt;
&lt;th&gt;100 代理&lt;/th&gt;
&lt;th&gt;1000 代理&lt;/th&gt;
&lt;th&gt;5000 代理&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;10 工作负载&lt;/td&gt;
&lt;td&gt;2 个服务器单元，1 个 CPU 核心，1GB RAM&lt;/td&gt;
&lt;td&gt;2 个服务器单元，2 个 CPU 核心，2GB RAM&lt;/td&gt;
&lt;td&gt;2 个服务器单元，4 个 CPU 核心，4GB RAM&lt;/td&gt;
&lt;td&gt;2 个服务器单元，8 个 CPU 核心，8GB RAM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;100 工作负载&lt;/td&gt;
&lt;td&gt;2 个服务器单元，2 个 CPU 核心，2GB RAM&lt;/td&gt;
&lt;td&gt;2 个服务器单元，2 个 CPU 核心，2GB RAM&lt;/td&gt;
&lt;td&gt;2 个服务器单元，8 个 CPU 核心，8GB RAM&lt;/td&gt;
&lt;td&gt;2 个服务器单元，16 个 CPU 核心，16GB RAM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1000 工作负载&lt;/td&gt;
&lt;td&gt;2 个服务器单元，16 个 CPU 核心，8GB RAM&lt;/td&gt;
&lt;td&gt;2 个服务器单元，16 个 CPU 核心，8GB RAM&lt;/td&gt;
&lt;td&gt;2 个服务器单元，16 个 CPU 核心，8GB RAM&lt;/td&gt;
&lt;td&gt;4 个服务器单元，16 个 CPU 核心，8GB RAM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10000 工作负载&lt;/td&gt;
&lt;td&gt;每个 4 个服务器单元，16 个 CPU 核心，16GB RAM&lt;/td&gt;
&lt;td&gt;每个 4 个服务器单元，16 个 CPU 核心，16GB RAM&lt;/td&gt;
&lt;td&gt;每个 4 个服务器单元，16 个 CPU 核心，16GB RAM&lt;/td&gt;
&lt;td&gt;每个 8 个服务器单元，16 个 CPU 核心，16GB RAM&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>配置 SPIRE</title>
      <link>https://lib.jimmysong.io/spiffe-and-spire/configuration/configuring/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/spiffe-and-spire/configuration/configuring/</guid>
      <description>&lt;p&gt;要根据你的应用程序需求自定义 SPIRE 服务器和 SPIRE 代理的行为，你需要编辑服务器和代理的配置文件。&lt;/p&gt;
&lt;h2 id=&#34;如何配置-spire&#34;&gt;如何配置 SPIRE&lt;/h2&gt;
&lt;p&gt;SPIRE 服务器和代理的配置文件分别为 &lt;code&gt;server.conf&lt;/code&gt; 和 &lt;code&gt;agent.conf&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;默认情况下，服务器期望配置文件位于 &lt;code&gt;conf/server/server.conf&lt;/code&gt;，但是服务器可以通过 &lt;code&gt;--config&lt;/code&gt; 标志配置为使用不同位置的配置文件。有关更多信息，请参阅 &lt;a href=&#34;https://spiffe.io/docs/latest/deploying/spire_server/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 服务器参考&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;同样，代理期望配置文件位于 &lt;code&gt;conf/agent/agent.conf&lt;/code&gt;，但是代理可以通过 &lt;code&gt;--config&lt;/code&gt; 标志配置为使用不同位置的配置文件。有关更多信息，请参阅 &lt;a href=&#34;https://spiffe.io/docs/latest/deploying/spire_agent/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 代理参考&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;配置文件在启动服务器或代理时加载一次。如果更改了服务器或代理的配置文件，则必须重新启动服务器或代理以使配置生效。&lt;/p&gt;
&lt;p&gt;在 Kubernetes 中运行 SPIRE 时，通常将配置文件存储在 &lt;code&gt;ConfigMap&lt;/code&gt; 对象中，然后将其作为文件挂载到运行代理或服务器进程的容器中。&lt;/p&gt;
&lt;p&gt;SPIRE 代理支持使用 &lt;a href=&#34;https://github.com/hashicorp/hcl&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HCL&lt;/a&gt; 或 &lt;a href=&#34;http://www.json.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JSON&lt;/a&gt; 作为配置文件结构语法。下面的示例将假定使用 HCL。&lt;/p&gt;
&lt;h2 id=&#34;配置信任域&#34;&gt;配置信任域&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;此配置适用于 SPIRE 服务器和 SPIRE 代理&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;信任域对应于 SPIFFE 身份提供者的信任根。信任域可以表示运行其自己独立的 SPIFFE 基础设施的个人、组织、环境或部门。在同一信任域中标识的所有工作负载都将获得可以与信任域的根密钥进行验证的身份文件。&lt;/p&gt;
&lt;p&gt;每个 SPIRE 服务器关联一个必须在该组织内唯一的信任域。信任域采用与 DNS 名称相同的形式（例如，&lt;code&gt;prod.acme.com&lt;/code&gt;），但不需要与任何 DNS 基础设施对应。&lt;/p&gt;
&lt;p&gt;在首次启动服务器之前，需要在 SPIRE 服务器中配置信任域。通过在配置文件的 &lt;code&gt;server&lt;/code&gt; 部分的 &lt;code&gt;trust_domain&lt;/code&gt; 参数中配置。例如，如果服务器的信任域应配置为 &lt;code&gt;prod.acme.com&lt;/code&gt;，则应设置为：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;trust_domain = &amp;#34;prod.acme.com&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;同样，代理必须通过在代理配置文件的 &lt;code&gt;agent&lt;/code&gt; 部分的 &lt;code&gt;trust_domain&lt;/code&gt; 参数中配置来为相同的信任域颁发身份。&lt;/p&gt;
&lt;p&gt;SPIRE 服务器和代理只能为单个信任域&lt;em&gt;颁发&lt;/em&gt;身份，代理配置的信任域必须与其连接的服务器的信任域匹配。&lt;/p&gt;
&lt;h2 id=&#34;配置服务器监听代理的端口&#34;&gt;配置服务器监听代理的端口&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;此配置适用于 SPIRE 服务器&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;默认情况下，SPIRE 服务器在端口 8081 上监听来自 SPIRE 代理的传入连接；要选择不同的值，请编辑 &lt;code&gt;server.conf&lt;/code&gt; 文件中的 &lt;code&gt;bind_port&lt;/code&gt; 参数。例如，要将监听端口更改为 9090：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;bind_port = &amp;#34;9090&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果从服务器的默认配置更改了此配置，则还必须在代理上更改服务端口的配置。&lt;/p&gt;
&lt;h2 id=&#34;配置节点认证&#34;&gt;配置节点认证&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;此配置适用于 SPIRE 服务器和 SPIRE 代理&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;SPIFFE 服务器通过节点认证和解析的过程来识别和验证代理。这是通过节点验证器和节点解析器插件来完成的，你需要在服务器中配置和启用它们。&lt;/p&gt;
&lt;p&gt;你选择的节点认证方法将确定你在 SPIRE 配置文件的服务器插件和代理插件部分中配置 SPIRE 使用哪些节点验证器插件。服务器上必须配置&lt;em&gt;至少一个&lt;/em&gt;节点验证器，每个代理上只能配置&lt;em&gt;一个&lt;/em&gt;节点验证器。&lt;/p&gt;
&lt;h3 id=&#34;对运行在-kubernetes-上的节点进行认证&#34;&gt;对运行在 Kubernetes 上的节点进行认证&lt;/h3&gt;
&lt;p&gt;为了向在 Kubernetes 集群中运行的工作负载发放身份，需要在每个运行负载的集群节点上部署一个 SPIRE 代理。（&lt;a href=&#34;https://spiffe.io/docs/latest/spire/installing/install-agents/#installing-spire-agents-on-kubernetes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在 Kubernetes 上安装 SPIRE 代理&lt;/a&gt;了解如何在 Kubernetes 上安装 SPIRE 代理）。&lt;/p&gt;
&lt;p&gt;可以使用 Kubernetes 的 &lt;a href=&#34;https://kubernetes.io/docs/reference/kubernetes-api/authentication-resources/token-review-v1/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Token Review API&lt;/a&gt; 对服务帐户令牌进行验证。因此，SPIRE 服务器本身不需要在 Kubernetes 上运行，并且单个 SPIRE 服务器可以支持在启用了 PSAT 认证的多个 Kubernetes 集群上运行的代理。&lt;/p&gt;
&lt;h4 id=&#34;projected-service-account-tokens&#34;&gt;Projected Service Account Tokens&lt;/h4&gt;
&lt;p&gt;在撰写本文时，预投影的服务帐户是 Kubernetes 的一个相对较新的功能，不是所有部署都支持它们。你的 Kubernetes 平台文档将告诉你是否支持此功能。如果你的 Kubernetes 部署不支持预投影的服务帐户令牌，则应启用服务帐户令牌。&lt;/p&gt;
&lt;p&gt;使用 Kubernetes 的 &lt;a href=&#34;https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#service-account-token-volume-projection&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Projected Service Account Tokens&lt;/a&gt; (PSATs) 对节点进行认证允许 SPIRE 服务器验证在 Kubernetes 集群上运行的 SPIRE 代理的身份。预投影的服务帐户令牌相对于传统的 Kubernetes 服务帐户令牌提供了额外的安全保证，因此，如果 Kubernetes 集群支持，PSAT 是推荐的认证策略。&lt;/p&gt;
&lt;p&gt;要使用 PSAT 节点认证，请在 &lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_nodeattestor_k8s_psat.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE Server&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_agent_nodeattestor_k8s_psat.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE Agent&lt;/a&gt; 上配置启用 PSAT 节点认证器插件。&lt;/p&gt;
&lt;h4 id=&#34;服务帐户令牌&#34;&gt;服务帐户令牌&lt;/h4&gt;
&lt;p&gt;在 Kubernetes 上运行工作负载时，如果集群上没有 Projected Service Account Token 功能，则 SPIRE 可以使用 Service Account Tokens 在 Server 和 Agent 之间建立信任。与使用 Projected Service Account Tokens 不同，此方法要求 SPIRE Server 和 SPIRE Agent 都部署在同一个 Kubernetes 集群上。&lt;/p&gt;
&lt;p&gt;由于服务帐户令牌不包含可用于强力识别运行 Agent 的节点/守护程序/Pod 的声明，因此任何在允许的服务帐户下运行的容器都可以冒充 Agent。因此，强烈建议在使用此认证方法时，Agent 应在专用的服务帐户下运行。&lt;/p&gt;
&lt;p&gt;要使用 SAT 节点认证，请在 &lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_nodeattestor_k8s_sat.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE Server&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_agent_nodeattestor_k8s_sat.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE Agent&lt;/a&gt; 上配置和启用 SAT 节点认证器插件。&lt;/p&gt;
&lt;h3 id=&#34;对运行-linux-的节点进行认证&#34;&gt;对运行 Linux 的节点进行认证&lt;/h3&gt;
&lt;p&gt;SPIRE 能够对运行 Linux 的物理或虚拟机（节点）上的工作负载的身份进行认证。作为认证过程的一部分，SPIRE Server 需要建立与运行 Linux 节点上的 SPIRE Agent 的信任关系。根据节点运行的位置，SPIRE 支持各种节点认证器，这些节点认证器允许在创建注册项时使用不同的选择器来标识特定的工作负载。&lt;/p&gt;
&lt;h4 id=&#34;加入令牌join-token&#34;&gt;加入令牌（Join Token）&lt;/h4&gt;
&lt;p&gt;加入令牌是一种使用单次使用的令牌来对服务器进行认证的简单方法，该令牌在服务器上生成并在启动代理时提供给代理。它适用于在 Linux 上运行的任何节点。&lt;/p&gt;
&lt;p&gt;SPIRE 服务器可以通过在 &lt;code&gt;server.conf&lt;/code&gt; 配置文件中启用内置的&lt;code&gt;join-token&lt;/code&gt; NodeAttestor 插件来支持加入令牌认证，如下所示：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;NodeAttestor &amp;#34;join_token&amp;#34; {
    plugin_data {
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;配置了加入令牌节点认证之后，可以使用&lt;code&gt;spire-server token generate&lt;/code&gt;命令在服务器上生成加入令牌。可以使用&lt;code&gt;-spiffeID&lt;/code&gt;标志将特定的 SPIFFE ID 与加入令牌关联起来。&lt;a href=&#34;https://spiffe.io/docs/latest/deploying/spire_server/#spire-server-token-generate&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在此处阅读更多&lt;/a&gt;有关使用此命令的更多信息。&lt;/p&gt;
&lt;p&gt;当第一次启动启用加入令牌证明的 SPIRE 代理时，可以使用 &lt;code&gt;spire-agent run&lt;/code&gt; 命令启动代理，并使用 &lt;code&gt;-joinToken&lt;/code&gt; 标志指定服务器生成的加入令牌。有关此命令的详细信息，请阅读&lt;a href=&#34;https://spiffe.io/docs/latest/deploying/spire_agent/#spire-agent-run&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;更多&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;服务器将验证加入令牌并向代理颁发 SVID（SPIFFE 身份验证信息文档）。只要代理与服务器保持连接，SVID 将自动轮换。在以后的启动中，除非 SVID 已过期且未续订，否则代理将使用该 SVID 对服务器进行身份验证。&lt;/p&gt;
&lt;p&gt;要使用加入令牌节点证明，请在 &lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_nodeattestor_jointoken.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 服务器&lt;/a&gt;和 &lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_agent_nodeattestor_jointoken.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 代理&lt;/a&gt;上配置和启用加入令牌节点证明插件。&lt;/p&gt;
&lt;p&gt;要在服务器上禁用加入令牌证明，请在启动之前从配置文件中注释或删除此部分。&lt;/p&gt;
&lt;h4 id=&#34;x509-证书&#34;&gt;X.509 证书&lt;/h4&gt;
&lt;p&gt;在许多情况下，特别是在手动配置节点的情况下（例如在数据中心），可以通过验证先前安装在节点上的现有 X.509 叶子证书来识别节点并唯一标识它。&lt;/p&gt;
&lt;p&gt;通常，这些叶子证书是从单个公共密钥和证书（在本指南中称为&lt;em&gt;根证书包&lt;/em&gt;）生成的。服务器必须配置根密钥和任何中间证书，以便能够验证特定机器呈现的叶子证书。只有找到可以通过证书链验证到服务器的证书时，节点证明才会成功，并且可以向该节点上的工作负载发布 SPIFFE ID。&lt;/p&gt;
&lt;p&gt;此外，证明者公开了 &lt;code&gt;subject:cn &lt;/code&gt; 选择器，该选择器将匹配满足以下条件的证书：（a）有效，如上所述，（b）其通用名称（CN）与选择器中描述的通用名称匹配。&lt;/p&gt;
&lt;p&gt;要使用 X.509 证书节点证明，请在 &lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_nodeattestor_x509pop.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 服务器&lt;/a&gt;和 &lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_agent_nodeattestor_x509pop.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 代理&lt;/a&gt;上配置和启用 x509pop 节点证明插件。&lt;/p&gt;
&lt;h4 id=&#34;ssh-证书&#34;&gt;SSH 证书&lt;/h4&gt;
&lt;p&gt;在某些环境中，每个节点都会自动配备一个有效且唯一的 SSH 证书，用于标识该节点。SPIRE 可以使用此证书来引导其身份验证。&lt;/p&gt;
&lt;p&gt;通过这种方法进行验证的节点会自动获得形式为的 SPIFFE ID：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;spiffe://&amp;lt;trust-domain&amp;gt;/spire/agent/sshpop/&amp;lt;fingerprint&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中 &lt;code&gt;&amp;lt;fingerprint&amp;gt;&lt;/code&gt; 是证书本身的哈希值。然后，可以使用此 SPIFFE ID 作为其他工作负载注册条目的基础。&lt;/p&gt;
&lt;p&gt;要使用 SSH 证书节点验证，请在 SPIRE 服务器和 SPIRE 代理上配置并启用 sshpop 节点验证插件。&lt;/p&gt;
&lt;h3 id=&#34;云供应商上的-linux-节点验证&#34;&gt;云供应商上的 Linux 节点验证&lt;/h3&gt;
&lt;p&gt;许多云供应商提供特权 API，允许在由该供应商托管的特定节点上运行的进程能够证明其所在的节点。SPIRE 可以配置为利用这些 API 进行节点验证。这对于自动化来说特别方便，因为在新实例上首次启动代理时，代理可以自动向 SPIRE 服务器证明其身份，而无需为其发行预先存在的证书或加入令牌。&lt;/p&gt;
&lt;h4 id=&#34;google-compute-engine-实例&#34;&gt;Google Compute Engine 实例&lt;/h4&gt;
&lt;p&gt;Google Compute Engine（GCE）节点验证和解析允许 SPIRE 服务器自动识别和验证在 GCP GCE 实例上运行的 SPIRE 代理。简而言之，通过以下步骤完成：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;SPIRE 代理 gcp_iit 节点验证插件检索 GCP 实例的实例标识令牌，并向 SPIRE 服务器 gcp_iit 节点验证插件标识自身。&lt;/li&gt;
&lt;li&gt;如果 &lt;code&gt;use_instance_metadata&lt;/code&gt; 配置值设置为 &lt;code&gt;true&lt;/code&gt;，SPIRE 服务器 gcp_iit 节点验证插件调用 GCP API 验证令牌的有效性。&lt;/li&gt;
&lt;li&gt;验证完成后，SPIRE 代理被视为经过验证，并分配其自己的 SPIFFE ID。&lt;/li&gt;
&lt;li&gt;最后，如果工作负载与注册条目匹配，SPIRE 会向节点上的工作负载发放 SVID。注册条目可以包括节点验证插件或解析器公开的选择器，或者将 SPIRE 代理的 SPIFFE ID 作为父级。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;要使用 GCP IIT 节点验证，请在 SPIRE 服务器和 SPIRE 代理上配置并启用 gcp_iit 节点验证插件。&lt;/p&gt;
&lt;h4 id=&#34;amazon-ec2-实例&#34;&gt;Amazon EC2 实例&lt;/h4&gt;
&lt;p&gt;EC2 节点认证和解析允许 SPIRE 服务器自动识别和验证在 AWS EC2 实例上运行的 SPIRE Agent。简而言之，通过以下方式实现：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;SPIRE Agent 的 aws_iid 节点证明插件检索 AWS 实例的实例身份文档，并向 SPIRE Server 的 aws_iid 节点证明插件进行身份验证。&lt;/li&gt;
&lt;li&gt;SPIRE Server 的 aws_iid 节点证明插件使用具有有限权限的 AWS IAM 角色调用 AWS API 来验证文档的有效性。&lt;/li&gt;
&lt;li&gt;如果配置了 aws_iid 节点解析器插件，则 SPIRE 将使用节点的已验证身份查找有关节点的其他信息。此元数据可以用作注册条目中的选择器。&lt;/li&gt;
&lt;li&gt;验证完成后，SPIRE Agent 被视为经过验证的，并被分配其自己的 SPIFFE ID。&lt;/li&gt;
&lt;li&gt;最后，如果工作负载与注册条目匹配，SPIRE 为节点上的工作负载发放 SVID。注册条目可以包含节点证明者或解析器提供的选择器，或者将 SPIRE Agent 的 SPIFFE ID 作为父级。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;有关配置 AWS EC2 节点证明者或解析器插件的更多信息，请参阅 SPIRE 服务器的相应 SPIRE 文档，其中包括 &lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_nodeattestor_aws_iid.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 服务器节点证明者&lt;/a&gt; 和 SPIRE 服务器节点解析器，以及代理上的 &lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_agent_nodeattestor_aws_iid.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE Agent 节点证明者&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&#34;azure-虚拟机&#34;&gt;Azure 虚拟机&lt;/h4&gt;
&lt;p&gt;Azure MSI 节点认证和解析允许 SPIRE 服务器自动识别和验证在 Azure VM 上运行的 SPIRE Agent。SPIRE 使用 MSI 令牌来验证代理。如果拦截，MSI 令牌必须进行范围限制以防止滥用。简而言之，通过以下方式实现：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;SPIRE Agent 的 azure_msi 节点证明插件检索 Azure VM 的 MSI 令牌，并向 SPIRE Server 的 azure_msi 节点证明插件进行身份验证。&lt;/li&gt;
&lt;li&gt;SPIRE Server 的 azure_msi 节点证明插件通过 API 调用从 Azure 检索 JSON Web Key Set (JWKS) 文档，并使用 JWKS 信息验证 MSI 令牌。&lt;/li&gt;
&lt;li&gt;SPIRE Server 的 azure_msi 节点解析器插件与 Azure 交互，获取有关代理 VM 的信息，例如订阅 ID、VM 名称、网络安全组、虚拟网络和虚拟网络子网，以构建有关代理 VM 的属性集，然后可以将其用作 Azure 节点集的节点选择器。&lt;/li&gt;
&lt;li&gt;一旦验证完成，SPIRE 代理将被视为已验证，并发放其自己的 SPIFFE ID。&lt;/li&gt;
&lt;li&gt;最后，如果工作负载与注册条目匹配，SPIRE 将向节点上的工作负载发放 SVID。注册条目可以包括节点验证器或解析器公开的选择器，或者将 SPIRE 代理的 SPIFFE ID 作为父级。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;默认情况下，代理插件分配的资源范围相对较大，它使用 Azure 资源管理器 (&lt;code&gt;https://management.azure.com&lt;/code&gt; 端点) 的资源 ID。出于安全考虑，考虑使用自定义资源 ID 来进行更精细的范围设置。&lt;/p&gt;
&lt;p&gt;如果在代理配置文件中配置自定义资源 ID，则必须在 &lt;code&gt;server.conf&lt;/code&gt; 配置文件的 &lt;code&gt;NodeAttestor&lt;/code&gt; 部分中为每个租户指定自定义资源 ID。&lt;/p&gt;
&lt;p&gt;有关配置 Azure MSI 节点验证器或解析器插件的更多信息，请参阅对应的 SPIRE 文档，包括 Azure MSI &lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_nodeattestor_azure_msi.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE Server 节点验证器&lt;/a&gt;，SPIRE Server 节点解析器，以及代理上的 &lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_agent_nodeattestor_azure_msi.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 代理节点验证器&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;配置工作负载验证&#34;&gt;配置工作负载验证&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;此配置适用于 SPIRE 代理&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;与节点验证器关注的是 SPIRE Server 如何在特定物理或虚拟机上识别 SPIRE 代理不同，工作负载验证关注的是 SPIRE 代理如何识别特定进程。通常，两者结合使用以识别特定的工作负载。&lt;/p&gt;
&lt;p&gt;与节点验证类似，工作负载验证通过启用相关插件来完成。不同的插件提供了不同的选择器，可在注册条目中使用这些选择器来识别特定的工作负载。与节点验证不同，对于单个工作负载，工作负载验证可以使用多种策略。例如，对于给定的 Unix 组，可能要求单个工作负载运行，并从特定的 Docker 镜像启动。&lt;/p&gt;
&lt;h3 id=&#34;为由-kubernetes-调度的工作负载进行工作负载证明&#34;&gt;为由 Kubernetes 调度的工作负载进行工作负载证明&lt;/h3&gt;
&lt;p&gt;当工作负载在 Kubernetes 中运行时，能够用 Kubernetes 构造描述它们是非常有价值的，比如与工作负载运行的 Pod 相关联的命名空间、服务账户或标签。&lt;/p&gt;
&lt;p&gt;Kubernetes 工作负载证明插件通过与本地的 Kubelet 进行交互来检索有关特定进程的 Kubernetes 特定元数据，当它调用工作负载 API 时，使用这些元数据来识别与注册条目匹配的工作负载。&lt;/p&gt;
&lt;p&gt;有关更多信息，包括暴露的选择器的详细信息，请参阅 &lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_agent_workloadattestor_k8s.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes 工作负载证明插件的相应 SPIRE 文档&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;为-docker-容器进行工作负载证明&#34;&gt;为 Docker 容器进行工作负载证明&lt;/h3&gt;
&lt;p&gt;当工作负载在 Docker 容器中运行时，能够用该容器的属性来描述它们是很有帮助的，比如容器启动的 Docker 镜像或特定环境变量的值。&lt;/p&gt;
&lt;p&gt;Docker 工作负载证明插件通过与本地的 Docker 守护程序进行交互来检索有关特定进程的 Docker 特定元数据，当它调用工作负载 API 时。&lt;/p&gt;
&lt;p&gt;有关更多信息，包括暴露的选择器的详细信息，请参阅 &lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_agent_workloadattestor_docker.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Docker 工作负载证明插件的相应 SPIRE 文档&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;为-unix-进程进行工作负载证明&#34;&gt;为 Unix 进程进行工作负载证明&lt;/h3&gt;
&lt;p&gt;当工作负载在 Unix 上运行时，能够用进程在 Unix 中的管理方式来描述它们是很有帮助的，比如它正在运行的 Unix 组的名称。&lt;/p&gt;
&lt;p&gt;Unix 工作负载证明通过检查 Unix 域套接字的调用者来确定调用 Workload API 的工作负载的内核元数据。&lt;/p&gt;
&lt;p&gt;有关更多信息，包括暴露的选择器的详细信息，请参阅 &lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_agent_workloadattestor_unix.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Unix 工作负载证明插件的相应 SPIRE 文档&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;配置代理和服务器数据存储位置&#34;&gt;配置代理和服务器数据存储位置&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;此配置适用于 SPIRE 服务器和 SPIRE 代理&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;agent.conf&lt;/code&gt; 和 &lt;code&gt;server.conf&lt;/code&gt; 配置文件中的 &lt;code&gt;data_dir&lt;/code&gt; 选项设置了 SPIRE 运行时数据的目录。&lt;/p&gt;
&lt;p&gt;如果你为 &lt;code&gt;data_dir&lt;/code&gt; 指定了相对路径，即以 &lt;code&gt;./&lt;/code&gt; 开头的路径，则 &lt;code&gt;data_dir&lt;/code&gt; 将基于你执行 &lt;code&gt;spire-agent&lt;/code&gt; 或 &lt;code&gt;spire-server&lt;/code&gt; 命令时的当前工作目录进行评估。使用相对路径的 &lt;code&gt;data_dir&lt;/code&gt; 对于对 SPIRE 进行初始评估可能很有用，但对于生产部署，你可能希望将 &lt;code&gt;data_dir&lt;/code&gt; 设置为绝对路径。按照惯例，如果你已在 &lt;code&gt;/opt/spire&lt;/code&gt; 安装了 SPIRE，则将 &lt;code&gt;data_dir&lt;/code&gt; 指定为 &lt;code&gt;&amp;quot;/opt/spire/data&amp;quot;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;确保你为 &lt;code&gt;data_dir&lt;/code&gt; 指定的路径及其所有子目录对运行 SPIRE 代理或服务器可执行文件的 Linux 用户可读取。你可能需要使用 &lt;a href=&#34;http://man7.org/linux/man-pages/man1/chown.1.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;chown&lt;/a&gt; 来更改这些数据目录的所有权，以便其归属于将运行可执行文件的 Linux 用户。&lt;/p&gt;
&lt;p&gt;如果你为 &lt;code&gt;data_dir&lt;/code&gt; 指定的路径不存在，则 SPIRE 代理或服务器可执行文件将在具有执行权限的情况下创建该路径。&lt;/p&gt;
&lt;p&gt;通常，你应该将 &lt;code&gt;data_dir&lt;/code&gt; 的值用作在 &lt;code&gt;agent.conf&lt;/code&gt; 和 &lt;code&gt;server.conf&lt;/code&gt; 配置文件中配置的其他数据路径的基目录。例如，如果你在 &lt;code&gt;agent.conf&lt;/code&gt; 中将 &lt;code&gt;data_dir&lt;/code&gt; 设置为 &lt;code&gt;&amp;quot;/opt/spire/data&amp;quot;&lt;/code&gt;，则将 &lt;code&gt;KeyManager“disk”plugin_data directory&lt;/code&gt; 设置为 &lt;code&gt;&amp;quot;/opt/spire/data/agent&amp;quot;&lt;/code&gt;。或者，如果你在 &lt;code&gt;server.conf&lt;/code&gt; 中将 &lt;code&gt;data_dir&lt;/code&gt; 设置为 &lt;code&gt;/opt/spire/data&lt;/code&gt;，则将 &lt;code&gt;connection_string&lt;/code&gt; 设置为 &lt;code&gt;&amp;quot;/opt/spire/data/server/datastore.sqlite3&amp;quot;&lt;/code&gt;，如果你使用 SQLite 作为 SPIRE Server 数据存储，则如下所述。&lt;/p&gt;
&lt;h2 id=&#34;配置服务器数据存储方式&#34;&gt;配置服务器数据存储方式&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;此配置适用于 SPIRE 服务器&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;数据存储是 SPIRE 服务器用于持久化动态配置的地方，例如从 SPIRE 服务器检索的注册条目和标识映射策略。默认情况下，SPIRE 使用 SQLite 捆绑并将其设置为默认的服务器数据存储方式。SPIRE 还支持其他兼容的数据存储。对于生产用途，你应该仔细考虑使用哪个数据库，特别是在将 SPIRE 部署在高可用配置时。&lt;/p&gt;
&lt;p&gt;可以通过配置默认的 SQL 数据存储插件来将 SPIRE 服务器配置为使用不同的 SQL 兼容存储后端，如下所述。有关如何配置此块的完整参考，请参阅&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_datastore_sql.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 文档&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&#34;将-sqlite-配置为-spire-数据存储&#34;&gt;将 SQLite 配置为 SPIRE 数据存储&lt;/h4&gt;
&lt;p&gt;默认情况下，SPIRE 服务器会创建并使用本地 SQLite 数据库来备份和存储配置数据。虽然对于测试来说很方便，但是在生产部署中通常不推荐使用，因为很难在多台机器上共享 SQLite 数据存储，这会使备份、HA 部署和升级变得复杂。&lt;/p&gt;
&lt;p&gt;要配置服务器使用 SQLite 数据库，请在配置文件中启用以下类似的部分：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    DataStore &amp;#34;sql&amp;#34; {
        plugin_data {
            database_type = &amp;#34;sqlite3&amp;#34;
            connection_string = &amp;#34;/opt/spire/data/server/datastore.sqlite3&amp;#34;
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;配置文件中不应该有其他（取消注释的）&lt;code&gt;DataStore&lt;/code&gt; 部分。&lt;/p&gt;
&lt;p&gt;数据库将在 &lt;code&gt;connection_string&lt;/code&gt; 中指定的路径中创建。有关选择 SPIRE 相关数据位置的更多信息，请参见&lt;a href=&#34;https://spiffe.io/docs/latest/deploying/configuring/#configuring-where-to-store-agent-and-server-data&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;配置代理和服务器数据存储位置&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&#34;将-mysql-配置为数据存储&#34;&gt;将 MySQL 配置为数据存储&lt;/h4&gt;
&lt;p&gt;在生产环境中，建议使用专用数据库来备份和存储配置数据。尽管安装和配置 MySQL 数据库不在本指南的范围内，但值得注意的是 SPIRE 服务器需要：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于 SPIRE 服务器配置的 MySQL 服务器上的专用数据库。&lt;/li&gt;
&lt;li&gt;具有能力连接到运行 SPIRE 服务器的任何 EC2 实例，并能向该数据库中的表、列和行插入和删除的 MySQL 用户。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要配置 SPIRE 服务器使用 MySQL 数据库，请在配置文件中启用以下类似的部分：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    DataStore &amp;#34;sql&amp;#34; {
        plugin_data {
            database_type = &amp;#34;mysql&amp;#34;
            connection_string = &amp;#34;username:password@tcp(localhost:3306)/dbname?parseTime=true&amp;#34;
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在上述连接字符串中，用以下内容替换：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;username&lt;/code&gt;：要用于访问数据库的 MySQL 用户的用户名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;password&lt;/code&gt;：MySQL 用户的密码&lt;/li&gt;
&lt;li&gt;&lt;code&gt;localhost:3306&lt;/code&gt;：MySQL 服务器的 IP 地址或主机名和端口号&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dbname&lt;/code&gt;：数据库的名称&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;将-postgres-配置为数据存储&#34;&gt;将 Postgres 配置为数据存储&lt;/h4&gt;
&lt;p&gt;在生产环境中，建议使用专用数据库来备份和存储配置数据。尽管安装和配置 Postgres 数据库不在本指南的范围内，但值得注意的是 SPIRE 服务器需要：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于 SPIRE 服务器配置的 Postgres 服务器上的专用数据库。&lt;/li&gt;
&lt;li&gt;具有能力连接到运行 SPIRE 服务器的任何实例，并能向该数据库中的表、列和行插入和删除的 Postgres 用户。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要配置 SPIRE 服务器使用 Postgres 数据库，请在服务器配置文件中启用以下部分：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    DataStore &amp;#34;sql&amp;#34; {
        plugin_data {
            database_type = &amp;#34;postgres&amp;#34;
            connection_string = &amp;#34;dbname=[database_name] user=[username]
                                 password=[password] host=[hostname] port=[port]&amp;#34;
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;connection_string&lt;/code&gt; 的值采用键=值格式，但也可以使用连接 URI（参见 Postgres 文档中支持的连接字符串格式的 &lt;a href=&#34;https://www.postgresql.org/docs/11/libpq-connect.html#LIBPQ-CONNSTRING&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;34.1.1. 连接字符串&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;以下是你设置的连接字符串值的摘要：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[database-name]：数据库的名称&lt;/li&gt;
&lt;li&gt;[username]：访问数据库的 Postgres 用户的用户名&lt;/li&gt;
&lt;li&gt;[password]：用户的密码&lt;/li&gt;
&lt;li&gt;[hostname]：Postgres 服务器的 IP 地址或主机名&lt;/li&gt;
&lt;li&gt;[port]：Postgres 服务器的端口号&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;配置代理和服务器上存储生成的密钥的方式&#34;&gt;配置代理和服务器上存储生成的密钥的方式&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;此配置适用于 SPIRE 服务器和 SPIRE 代理&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;SPIRE 代理和 SPIRE 服务器在正常运行过程中会生成私钥和证书。保持这些密钥和证书的完整性非常重要，以确保维护所发行的 SPIFFE 身份的完整性。&lt;/p&gt;
&lt;p&gt;目前，SPIRE 在代理和服务器上支持两种密钥管理策略。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存储于内存中。在此策略中，密钥和证书仅存储在内存中。这意味着，如果服务器或代理崩溃或重新启动，则必须重新生成密钥。对于 SPIRE 代理来说，这通常需要代理在重新启动时重新对服务器进行验证。通过启用和配置内存密钥管理器插件来管理此策略，可用于 &lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_keymanager_memory.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 服务器&lt;/a&gt;和/或 &lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_agent_keymanager_memory.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 代理&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;存储在磁盘上。在此策略中，密钥和证书存储在指定的磁盘文件中。使用此方法的一个优点是它们在 SPIRE 服务器或代理重新启动后仍然存在。缺点是，由于密钥存储在磁盘文件中，必须采取其他预防措施，以防止恶意进程读取这些文件。通过启用和配置磁盘密钥管理器插件来管理此策略，可用于 &lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_keymanager_disk.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 服务器&lt;/a&gt;和/或 &lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_agent_keymanager_disk.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 代理&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外，SPIRE 可以配置为通过第三方密钥管理器插件集成自定义后端，例如秘密存储。&lt;a href=&#34;https://spiffe.io/docs/latest/spire/developing/extending/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;扩展 SPIRE&lt;/a&gt; 指南对此进行了更详细的介绍。&lt;/p&gt;
&lt;h2 id=&#34;配置应用程序将使用的信任根上游授权机构&#34;&gt;配置应用程序将使用的信任根/“上游授权机构”&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;此配置适用于 SPIRE 服务器&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;每个 SPIRE 服务器使用特定的根签名密钥，用于执行几个重要操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过 SPIRE 代理对 SPIRE 服务器建立信任，因为代理持有由该密钥签名的证书（但请注意，服务器对代理的信任是通过验证建立的）。&lt;/li&gt;
&lt;li&gt;生成发放给工作负载的 X.509 或 JWT SVID。&lt;/li&gt;
&lt;li&gt;生成用于与其他 SPIRE 服务器建立信任的 SPIFFE 信任捆绑。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应将此签名密钥视为非常敏感的，因为获取它将允许恶意行为者冒充 SPIRE 服务器并代表其发放身份。&lt;/p&gt;
&lt;p&gt;为了确保签名密钥的完整性，SPIRE 服务器可以自行对材料进行签名，使用存储在磁盘上的签名密钥，或委托签名给独立的证书颁发机构（CA），例如 AWS Secrets Manager。此行为通过 &lt;code&gt;server.conf&lt;/code&gt; 文件中的 &lt;code&gt;UpstreamAuthority&lt;/code&gt; 部分进行配置。&lt;/p&gt;
&lt;p&gt;有关完整的服务器配置参考，请参阅 &lt;a href=&#34;https://spiffe.io/docs/latest/deploying/spire_server/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 服务器配置参考&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&#34;配置磁盘上的签名密钥&#34;&gt;配置磁盘上的签名密钥&lt;/h4&gt;
&lt;p&gt;SPIRE 服务器可以配置为从磁盘加载 CA 凭据，使用它们为服务器的签名机构生成中间签名证书。&lt;/p&gt;
&lt;p&gt;SPIRE 服务器附带了一个“虚拟”密钥和证书，可用于简化测试，但由于该密钥分发给所有 SPIRE 用户，因此不应将其用于除测试目的之外的任何用途。相反，应生成一个在磁盘上的签名密钥。&lt;/p&gt;
&lt;p&gt;如果已安装&lt;code&gt;openssl&lt;/code&gt;工具，则可以使用类似以下命令生成有效的根密钥和证书：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo openssl req &lt;span class=&#34;se&#34;&gt;\\\\&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       -subj &lt;span class=&#34;s2&#34;&gt;&amp;#34;/C=/ST=/L=/O=/CN=acme.com&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\\\\&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       -newkey rsa:2048 -nodes -keyout /opt/spire/conf/root.key &lt;span class=&#34;se&#34;&gt;\\\\&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       -x509 -days &lt;span class=&#34;m&#34;&gt;365&lt;/span&gt; -out /opt/spire/conf/root.crt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过启用和配置磁盘 &lt;code&gt;UpstreamAuthority&lt;/code&gt; 插件，可以管理此策略，用于 &lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_upstreamauthority_disk.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 服务器&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&#34;配置-aws-证书管理器&#34;&gt;配置 AWS 证书管理器&lt;/h4&gt;
&lt;p&gt;可以配置 SPIRE 服务器从亚马逊网络服务的证书管理器（&lt;a href=&#34;https://aws.amazon.com/certificate-manager/private-certificate-authority/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Private Certificate Authority&lt;/a&gt;）加载 CA 凭据，并使用它们生成服务器签名授权的中间签名证书。&lt;/p&gt;
&lt;p&gt;可以通过启用和配置 &lt;code&gt;aws_pca&lt;/code&gt; UpstreamAuthority 插件来管理此策略，有关详细信息，请参阅 &lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_upstreamauthority_aws_pca.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 服务器&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&#34;配置另一个-spire-安装&#34;&gt;配置另一个 SPIRE 安装&lt;/h4&gt;
&lt;p&gt;可以配置 SPIRE 服务器从另一个 SPIFFE 实现（例如 SPIRE）的 Workload API 加载 CA 凭据。这使得可以使用一种称为“嵌套 SPIRE”的技术，作为 HA 部署的补充，允许独立的 SPIRE 服务器针对单个信任域发出标识。&lt;/p&gt;
&lt;p&gt;关于嵌套 SPIRE 的完整处理超出了本指南的范围。但是，可以通过启用和配置 &lt;code&gt;spire&lt;/code&gt; UpstreamAuthority 插件来管理此策略，有关详细信息，请参阅 &lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_upstreamauthority_spire.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 服务器&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;导出用于监控的指标&#34;&gt;导出用于监控的指标&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;此配置适用于 SPIRE 服务器和 SPIRE Agent&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;要将 SPIRE 服务器或 Agent 配置为将数据输出到指标收集器，请编辑 &lt;code&gt;server.conf&lt;/code&gt; 或 &lt;code&gt;agent.conf&lt;/code&gt; 中的遥测部分。SPIRE 可以将指标导出到 &lt;a href=&#34;https://docs.datadoghq.com/developers/dogstatsd/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Datadog&lt;/a&gt; （DogStatsD 格式）、&lt;a href=&#34;https://github.com/m3db/m3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;M3&lt;/a&gt;、&lt;a href=&#34;https://prometheus.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Prometheus&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/statsd/statsd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;StatsD&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;可以同时配置多个收集器。在要将指标发送到多个收集器的情况下，DogStatsD、M3 和 StatsD 支持多个声明。&lt;/p&gt;
&lt;p&gt;如果要使用 Amazon CloudWatch 进行指标收集，请查阅 &lt;a href=&#34;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Agent-custom-metrics-statsd.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;此文档&lt;/a&gt; 以了解使用 CloudWatch 代理程序和 StatsD 检索自定义指标的方法。&lt;/p&gt;
&lt;p&gt;以下是将遥测导出到 Datadog、M3、Prometheus 和 StatsD 并禁用内存收集器的 &lt;code&gt;agent.conf&lt;/code&gt; 或 &lt;code&gt;server.conf&lt;/code&gt; 的配置块示例：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;telemetry {
        Prometheus {
                port = 9988
        }

        DogStatsd = [
            { address = &amp;#34;localhost:8125&amp;#34; },
        ]

        Statsd = [
            { address = &amp;#34;localhost:1337&amp;#34; },
            { address = &amp;#34;collector.example.org:8125&amp;#34; },
        ]

        M3 = [
            { address = &amp;#34;localhost:9000&amp;#34; env = &amp;#34;prod&amp;#34; },
        ]

        InMem {
            enabled = false
        }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;有关更多信息，请参阅 &lt;a href=&#34;https://spiffe.io/docs/latest/deploying/telemetry_config/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;遥测配置&lt;/a&gt; 指南。&lt;/p&gt;
&lt;h2 id=&#34;日志记录&#34;&gt;日志记录&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;此配置适用于 SPIRE 服务器和 SPIRE Agent&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;可以在各自的配置文件中设置 SPIRE 服务器和 SPIRE Agent 的日志文件位置和日志级别。编辑 &lt;code&gt;log_file&lt;/code&gt; 值以设置日志文件位置，编辑 &lt;code&gt;log_level&lt;/code&gt; 值以设置日志级别。此值可以是 DEBUG、INFO、WARN 或 ERROR 中的一个。&lt;/p&gt;
&lt;p&gt;默认情况下，SPIRE 日志将输出到 STDOUT。但是，可以通过在 &lt;code&gt;log_file&lt;/code&gt; 属性中指定文件路径，将 SPIRE Agent 和 Server 配置为直接将日志写入文件。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>关于本书</title>
      <link>https://lib.jimmysong.io/spiffe/preface/</link>
      <pubDate>Fri, 07 Oct 2022 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/spiffe/preface/</guid>
      <description>&lt;p&gt;本书介绍了服务身份的 SPIFFE 标准，以及 SPIFFE 的参考实现 SPIRE。这些项目为现代异构基础设施提供了一个统一的身份控制平面。这两个项目都是开源的，隶属于云原生计算基金会（CNCF）。&lt;/p&gt;
&lt;p&gt;随着企业发展他们的应用架构以充分利用新的基础设施技术，他们的安全模式也必须不断发展。软件已经从一个单片机上的单个应用发展到了几十甚至几百个紧密联系的微服务，这些微服务可能分布在公共云或私人数据中心的数千个虚拟机上。在这个新的基础设施世界里，SPIFFE 和 SPIRE 帮助保障系统的安全。&lt;/p&gt;
&lt;p&gt;本书努力提炼了 SPIFFE 和 SPIRE 的最重要的专家经验，以提供对身份问题的深刻理解，并协助你解决这些问题。通过这些项目，开发和运维可以利用新的基础设施技术构建软件，同时让安全团队摆脱昂贵和耗时的人工安全流程。&lt;/p&gt;
&lt;h2 id=&#34;关于零号乌龟&#34;&gt;关于零号乌龟&lt;/h2&gt;
&lt;p&gt;访问控制、秘密管理和身份是相互依赖的。大规模地管理秘密需要有效的访问控制；实施访问控制需要身份；证明身份需要拥有一个秘密。保护一个秘密需要想出一些办法来保护另一个秘密，这就需要保护那个秘密，以此类推。&lt;/p&gt;
&lt;p&gt;这让人想起一个著名的轶事：一个女人打断了一位哲学家的讲座，告诉他世界是在乌龟的背上。当哲学家问她乌龟靠的是什么时，她说：&amp;ldquo;还是乌龟！&amp;quot;。找到底层的乌龟，即所有其他安全所依赖的坚实基础，是 SPIFFE 和 SPIRE 项目的目标。&lt;/p&gt;
&lt;p&gt;本书封面上的 &amp;ldquo;零号乌龟&amp;rdquo; 就是这只底层乌龟。零代表了数据中心和云计算的安全基础。零号是值得信赖的，愉快地支持所有其他的乌龟。&lt;/p&gt;
&lt;p&gt;SPIFFE 和 SPIRE 是帮助你为你的组织找到底层乌龟的项目。通过这本书中的工具，我们希望你也能为 &amp;ldquo;底层乌龟&amp;rdquo; 找到一个家。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>通知和历史</title>
      <link>https://lib.jimmysong.io/kubernetes-hardening-guidance/notices-and-hitory/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/kubernetes-hardening-guidance/notices-and-hitory/</guid>
      <description>&lt;p&gt;&lt;strong&gt;文件变更历史&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;英文版&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;日期&lt;/th&gt;
&lt;th&gt;版本&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2021 年 8 月&lt;/td&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;td&gt;首次发布&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;中文版&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;日期&lt;/th&gt;
&lt;th&gt;版本&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2021 年 8 月 8 日&lt;/td&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;td&gt;首次发布&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;担保和认可的免责声明&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本文件中的信息和意见是 &amp;ldquo;按原样&amp;rdquo; 提供的，没有任何保证或担保。本文件以商品名称、商标、制造商或其他方式提及任何具体的商业产品、程序或服务，并不一定构成或暗示美国政府对其的认可、推荐或青睐，而且本指南不得用于广告或产品代言的目的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关于中文版&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;中文版为 &lt;a href=&#34;https://jimmysong.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Jimmy Song&lt;/a&gt; 个人翻译，翻译过程中完全遵照原版，未做任何删减。其本人与本书的原作者没有任何组织或利益上的联系，翻译本书仅为交流学习之用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;商标认可&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kubernetes 是 Linux 基金会的注册商标。&lt;/li&gt;
&lt;li&gt;SELinux 是美国国家安全局的注册商标。&lt;/li&gt;
&lt;li&gt;AppArmor 是 SUSE LLC 的注册商标。&lt;/li&gt;
&lt;li&gt;Windows 和 Hyper-V 是微软公司的注册商标。&lt;/li&gt;
&lt;li&gt;ETCD 是 CoreOS, Inc. 的注册商标。&lt;/li&gt;
&lt;li&gt;Syslog-ng 是 One Identity Software International Designated Activity 公司的注册商标。&lt;/li&gt;
&lt;li&gt;Prometheus 是 Linux 基金会的注册商标。&lt;/li&gt;
&lt;li&gt;Grafana 是 Raintank, Inc.dba Grafana Labs 的注册商标。&lt;/li&gt;
&lt;li&gt;Elasticsearch 和 ELK Stack 是 Elasticsearch B.V 的注册商标。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;版权确认&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本文件中的信息、例子和数字基于 Kubernetes 作者的 &lt;a href=&#34;https://kubernetes.io/docs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes&lt;/a&gt; &lt;a href=&#34;https://kubernetes.io/docs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;文档&lt;/a&gt;，以&lt;a href=&#34;https://git.k8s.io/website/LICENSE&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;知识共享&lt;/a&gt;&lt;a href=&#34;https://git.k8s.io/website/LICENSE&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;署名 4.0 许可方式&lt;/a&gt;发布。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用 Envoy 和 X.509-SVID</title>
      <link>https://lib.jimmysong.io/spiffe-and-spire/examples/envoy-x509/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/spiffe-and-spire/examples/envoy-x509/</guid>
      <description>&lt;p&gt;本教程在 &lt;a href=&#34;https://spiffe.io/docs/latest/try/getting-started-k8s/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes 快速入门教程&lt;/a&gt;的基础上，演示了如何配置 SPIRE 以提供动态的 X.509 证书形式的服务身份，并由 Envoy 秘密发现服务（SDS）使用。本教程中展示了实现 X.509 SVID 身份验证所需的更改，因此你应该首先运行或至少阅读 Kubernetes 快速入门教程。&lt;/p&gt;
&lt;p&gt;为了演示 X.509 身份验证，我们创建了一个简单的场景，包含三个服务。其中一个服务是后端服务，是一个简单的 nginx 实例，用于提供静态数据。我们另外运行两个 &lt;code&gt;Symbank&lt;/code&gt; 演示银行应用作为前端服务。&lt;code&gt;Symbank&lt;/code&gt; 前端服务向 nginx 后端发送 HTTP 请求以获取用户账户详细信息。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/SPIRE_Envoy_diagram.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;如图所示，前端服务通过 Envoy 实例建立的 mTLS 连接与后端服务连接，并且 Envoy 实例会为每个工作负载执行 X.509 SVID 身份验证。&lt;/p&gt;
&lt;p&gt;在本教程中，你将学习如何：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;配置 SPIRE 以支持 SDS&lt;/li&gt;
&lt;li&gt;配置 Envoy SDS 以使用 SPIRE 提供的 X.509 证书&lt;/li&gt;
&lt;li&gt;在 SPIRE 服务器上为 Envoy 实例创建注册条目&lt;/li&gt;
&lt;li&gt;使用 SPIRE 测试成功的 X.509 身份验证&lt;/li&gt;
&lt;li&gt;可选地配置 Envoy RBAC HTTP 过滤器策略&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;先决条件&#34;&gt;先决条件&lt;/h2&gt;
&lt;p&gt;在继续之前，请先阅读以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你需要访问通过 &lt;a href=&#34;https://spiffe.io/docs/latest/try/getting-started-k8s/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes 快速入门教程&lt;/a&gt;配置的 Kubernetes 环境。可选地，你可以使用下面描述的 &lt;code&gt;pre-set-env.sh&lt;/code&gt; 脚本创建 Kubernetes 环境。Kubernetes 环境必须能够将 Ingress 公开到公共互联网上。&lt;strong&gt;注意：对于本地 Kubernetes 环境（例如 Minikube），通常不适用此条件&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;本教程所需的 YAML 文件可在 &lt;a href=&#34;https://github.com/spiffe/spire-tutorials&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/spiffe/spire-tutorials&lt;/a&gt; 的 &lt;code&gt;k8s/envoy-x509&lt;/code&gt; 目录中找到。如果你尚未克隆 &lt;em&gt;Kubernetes 快速入门教程&lt;/em&gt;的存储库，请现在进行克隆。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果 &lt;em&gt;Kubernetes 快速入门教程&lt;/em&gt;环境不可用，你可以使用以下脚本创建该环境，并将其用作本教程的起点。从&lt;code&gt;k8s/envoy-x509&lt;/code&gt;目录中运行以下命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ bash scripts/pre-set-env.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该脚本将创建所需的 SPIRE 服务器和 SPIRE 代理资源。&lt;/p&gt;
&lt;h3 id=&#34;外部-ip-支持&#34;&gt;外部 IP 支持&lt;/h3&gt;
&lt;p&gt;本教程需要一个可以分配外部 IP 的负载均衡器（例如&lt;a href=&#34;https://metallb.universe.tf/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;metallb&lt;/a&gt;）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.13.7/config/manifests/metallb-native.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;等待 metallb 启动&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl &lt;span class=&#34;nb&#34;&gt;wait&lt;/span&gt; --namespace metallb-system &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;                --for&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;condition&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;ready pod &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;                --selector&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;metallb &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;                --timeout&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;90s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;应用 metallb 配置&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -f metallb-config.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;envoy-sds-支持&#34;&gt;Envoy SDS 支持&lt;/h2&gt;
&lt;p&gt;SPIRE 代理原生支持 Envoy Secret Discovery Service（SDS）。SDS 通过与工作负载 API 和连接到 SDS 的 Envoy 进程使用相同的 Unix 域套接字提供服务，并对工作负载进行验证。&lt;/p&gt;
&lt;h2 id=&#34;第-1-部分运行工作负载&#34;&gt;第 1 部分：运行工作负载&lt;/h2&gt;
&lt;p&gt;现在，让我们部署本教程中将使用的工作负载。它由三个工作负载组成：如前所述，两个 &lt;em&gt;Symbank&lt;/em&gt; 演示应用程序的实例将充当前端服务，另一个提供静态文件的 nginx 实例将充当后端服务。&lt;/p&gt;
&lt;p&gt;为了区分两个 &lt;em&gt;Symbank&lt;/em&gt; 应用程序的实例，让我们将其称为 &lt;em&gt;frontend&lt;/em&gt; 和 &lt;em&gt;frontend-2&lt;/em&gt;。前者配置为显示与用户 &lt;em&gt;Jacob Marley&lt;/em&gt; 相关的数据，而后者将显示用户 &lt;em&gt;Alex Fergus&lt;/em&gt; 的帐户详细信息。&lt;/p&gt;
&lt;h2 id=&#34;部署所有工作负载&#34;&gt;部署所有工作负载&lt;/h2&gt;
&lt;p&gt;确保当前的工作目录是 &lt;code&gt;.../spire-tutorials/k8s/envoy-x509&lt;/code&gt;，然后使用以下命令部署新的资源：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -k k8s/.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;configmap/backend-balance-json-data created
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;configmap/backend-envoy created
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;configmap/backend-profile-json-data created
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;configmap/backend-transactions-json-data created
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;configmap/frontend-2-envoy created
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;configmap/frontend-envoy created
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;configmap/symbank-webapp-2-config created
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;configmap/symbank-webapp-config created
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;service/backend-envoy created
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;service/frontend-2 created
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;service/frontend created
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;deployment.apps/backend created
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;deployment.apps/frontend-2 created
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;deployment.apps/frontend created
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;kubectl apply&lt;/code&gt; 命令将创建以下资源：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个工作负载的部署。它包含一个用于我们的服务和 Envoy Sidecar 的容器。&lt;/li&gt;
&lt;li&gt;每个工作负载的服务。用于它们之间的通信。&lt;/li&gt;
&lt;li&gt;多个 Configmap：
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;json-data&lt;/em&gt; 用于向作为后端服务运行的 Nginx 实例提供静态文件。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;envoy&lt;/em&gt; 包含每个工作负载的 Envoy 配置。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;symbank-webapp-&lt;/em&gt; 包含供每个前端服务实例使用的配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来的两个部分将重点介绍配置 Envoy 所需的设置。&lt;/p&gt;
&lt;h4 id=&#34;spire-agent-集群&#34;&gt;SPIRE Agent 集群&lt;/h4&gt;
&lt;p&gt;为了让 Envoy SDS 使用 SPIRE Agent 提供的 X.509 证书，我们配置一个集群，指向 SPIRE Agent 提供的 Unix 域套接字。后端服务的 Envoy 配置位于 &lt;code&gt;k8s/backend/config/envoy.yaml&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;clusters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;spire_agent&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;connect_timeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;25s&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;http2_protocol_options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;load_assignment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cluster_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;spire_agent&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;endpoints&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;lb_endpoints&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;endpoint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;pipe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/run/spire/sockets/agent.sock&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;tls-证书&#34;&gt;TLS 证书&lt;/h4&gt;
&lt;p&gt;要从 SPIRE 获取 TLS 证书和私钥，你需要在 TLS 上下文中设置一个 SDS 配置。TLS 证书的名称是 Envoy 充当代理的服务的 SPIFFE ID。此外，SPIRE 为每个信任域提供一个验证上下文，Envoy 使用它来验证对等证书。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;transport_socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;envoy.transport_sockets.tls&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;typed_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;@type&amp;#34;: &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;common_tls_context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tls_certificate_sds_secret_configs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;spiffe://example.org/ns/default/sa/default/backend&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;sds_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resource_api_version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;V3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;api_config_source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;api_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;GRPC&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;transport_api_version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;V3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;grpc_services&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;envoy_grpc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cluster_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;spire_agent&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;combined_validation_context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# validate the SPIFFE ID of incoming clients (optionally)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;default_validation_context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;match_typed_subject_alt_names&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;san_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;URI&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matcher&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;exact&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;spiffe://example.org/ns/default/sa/default/frontend&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;san_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;URI&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matcher&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;exact&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;spiffe://example.org/ns/default/sa/default/frontend-2&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# obtain the trust bundle from SDS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;validation_context_sds_secret_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;spiffe://example.org&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;sds_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resource_api_version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;V3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;api_config_source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;api_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;GRPC&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;transport_api_version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;V3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;grpc_services&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;envoy_grpc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cluster_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;spire_agent&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;类似的配置也适用于前端服务，以建立一个 mTLS 通信。检查名为 &lt;code&gt;backend&lt;/code&gt; 的集群在 &lt;code&gt;k8s/frontend/config/envoy.yaml&lt;/code&gt; 和 &lt;code&gt;k8s/frontend-2/config/envoy.yaml&lt;/code&gt; 中的配置。&lt;/p&gt;
&lt;h3 id=&#34;创建注册条目&#34;&gt;创建注册条目&lt;/h3&gt;
&lt;p&gt;为了获得 SPIRE 颁发的 X.509 证书，必须先注册服务。我们通过在 SPIRE Server 上为每个工作负载创建注册条目来实现这一点。让我们使用以下 Bash 脚本：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ bash create-registration-entries.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行脚本后，将显示所创建的注册条目列表。输出将显示 &lt;a href=&#34;https://spiffe.io/docs/latest/try/getting-started-k8s/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes Quickstart Tutorial&lt;/a&gt; 创建的其他注册条目。这里重要的是每个工作负载的三个新条目：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;...
Entry ID      : 0d02d63f-712e-47ad-a06e-853c8b062835
SPIFFE ID     : spiffe://example.org/ns/default/sa/default/backend
Parent ID     : spiffe://example.org/ns/spire/sa/spire-agent
TTL           : 3600
Selector      : k8s:container-name:envoy
Selector      : k8s:ns:default
Selector      : k8s:pod-label:app:backend
Selector      : k8s:sa:default

Entry ID      : 3858ec9b-f924-4f69-b812-5134aa33eaee
SPIFFE ID     : spiffe://example.org/ns/default/sa/default/frontend
Parent ID     : spiffe://example.org/ns/spire/sa/spire-agent
TTL           : 3600
Selector      : k8s:container-name:envoy
Selector      : k8s:ns:default
Selector      : k8s:pod-label:app:frontend
Selector      : k8s:sa:default

Entry ID      : 4e37f863-302a-4b3c-a942-dc2a86459f37
SPIFFE ID     : spiffe://example.org/ns/default/sa/default/frontend-2
Parent ID     : spiffe://example.org/ns/spire/sa/spire-agent
TTL           : 3600
Selector      : k8s:container-name:envoy
Selector      : k8s:ns:default
Selector      : k8s:pod-label:app:frontend-2
Selector      : k8s:sa:default
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;请注意，我们工作负载的选择器指向了 Envoy 容器：k8s:container-name:envoy。这是我们配置 Envoy 代表工作负载执行 X.509 SVID 身份验证的方式。&lt;/p&gt;
&lt;h2 id=&#34;第二部分测试连接&#34;&gt;第二部分：测试连接&lt;/h2&gt;
&lt;p&gt;现在，服务已经部署并在 SPIRE 中注册，让我们测试我们配置的授权。&lt;/p&gt;
&lt;h3 id=&#34;使用有效的-x509-svid-进行身份验证的测试&#34;&gt;使用有效的 X.509 SVID 进行身份验证的测试&lt;/h3&gt;
&lt;p&gt;第一组测试将演示如何使用有效的 X.509 SVID 显示相关数据。为此，我们将展示前端服务 (&lt;code&gt;frontend&lt;/code&gt;和&lt;code&gt;frontend-2&lt;/code&gt;) 如何通过获取每个服务的正确 IP 地址和端口与&lt;code&gt;backend&lt;/code&gt;服务进行通信。要运行这些测试，我们需要找到用于访问数据的 URL 所组成的 IP 地址和端口。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl get services
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NAME            TYPE           CLUSTER-IP    EXTERNAL-IP      PORT&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;S&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;          AGE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;backend-envoy   ClusterIP      None          &amp;lt;none&amp;gt;           9001/TCP         6m53s
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;frontend        LoadBalancer   10.8.14.117   35.222.164.221   3000:32586/TCP   6m52s
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;frontend-2      LoadBalancer   10.8.7.57     35.222.190.182   3002:32056/TCP   6m53s
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubernetes      ClusterIP      10.8.0.1      &amp;lt;none&amp;gt;           443/TCP          59m
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;frontend&lt;/code&gt; 服务将在 &lt;code&gt;EXTERNAL-IP&lt;/code&gt; 值和端口 &lt;code&gt;3000&lt;/code&gt; 处可用，这是我们容器配置的端口。在上面显示的示例输出中，导航的 URL 为 &lt;code&gt;http://35.222.164.221:3000&lt;/code&gt;。打开浏览器并导航到环境中显示的 &lt;code&gt;frontend&lt;/code&gt; 的 IP 地址，添加端口 &lt;code&gt;:3000&lt;/code&gt;。页面加载完成后，你将看到用户 &lt;em&gt;Jacob Marley&lt;/em&gt; 的账户详细信息。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/frontend_view.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;按照相同的步骤，当你连接到 &lt;code&gt;frontend-2&lt;/code&gt; 服务的 URL 时（例如 &lt;code&gt;http://35.222.190.182:3002&lt;/code&gt;），浏览器将显示用户 &lt;em&gt;Alex Fergus&lt;/em&gt; 的账户详细信息。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/frontend-2_view.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;更新-tls-配置以便只有一个前端可以访问后端&#34;&gt;更新 TLS 配置以便只有一个前端可以访问后端&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;backend&lt;/code&gt; 服务的 Envoy 配置使用 TLS 配置来通过验证 TLS 连接上呈现的证书的主题备用名称 (SAN) 来过滤传入的连接。对于 SVIDs，证书的 SAN 字段设置为与服务关联的 SPIFFE ID。因此，通过在 &lt;code&gt;combined_validation_context&lt;/code&gt; 部分的 &lt;a href=&#34;https://github.com/spiffe/spire-tutorials/blob/main/k8s/envoy-x509/k8s/backend/config/envoy.yaml#L49&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy 配置&lt;/a&gt;中删除 &lt;code&gt;frontend-2&lt;/code&gt; 服务的 SPIFFE ID，可以使&lt;code&gt;backend&lt;/code&gt;服务的 Envoy 配置允许仅来自 &lt;code&gt;frontend&lt;/code&gt;服务的请求。更新后的配置如下所示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;combined_validation_context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# validate the SPIFFE ID of incoming clients (optionally)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;default_validation_context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;match_typed_subject_alt_names&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;san_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;URI&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matcher&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;exact&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;spiffe://example.org/ns/default/sa/default/frontend&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;应用-envoy-的新配置&#34;&gt;应用 Envoy 的新配置&lt;/h3&gt;
&lt;p&gt;使用文件&lt;code&gt;backend-envoy-configmap-update.yaml&lt;/code&gt;更新&lt;code&gt;backend&lt;/code&gt;工作负载的 Envoy 配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -f backend-envoy-configmap-update.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来，需要重新启动&lt;code&gt;backend&lt;/code&gt; Pod 以应用新配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl scale deployment backend --replicas&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl scale deployment backend --replicas&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在尝试再次在浏览器中查看&lt;code&gt;frontend-2&lt;/code&gt;服务之前，请等待几秒钟以使部署生效。一旦 Pod 准备就绪，请使用 &lt;code&gt;frontend-2&lt;/code&gt; 服务的正确 URL（例如 &lt;code&gt;http://35.222.190.182:3002&lt;/code&gt;）刷新浏览器。结果，现在 Envoy 不允许请求到达 &lt;code&gt;backend&lt;/code&gt; 服务，并且浏览器中不显示账户详细信息。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/frontend-2_view_no_details.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;另一方面，你可以检查&lt;code&gt;frontend&lt;/code&gt;服务仍然能够从 &lt;code&gt;backend&lt;/code&gt; 获得响应。刷新浏览器以正确的 URL（例如 &lt;code&gt;http://35.222.164.221:3000&lt;/code&gt;），并确认对&lt;em&gt;Jacob Marley&lt;/em&gt;的账户显示账户详细信息。&lt;/p&gt;
&lt;h2 id=&#34;通过基于角色的访问控制过滤器扩展场景&#34;&gt;通过基于角色的访问控制过滤器扩展场景&lt;/h2&gt;
&lt;p&gt;Envoy 提供了一种基于角色的访问控制（RBAC）HTTP 过滤器，它根据一组策略检查请求。策略由权限和主体组成，其中主体指的是请求的下游客户端身份，例如下游客户端证书的 URI SAN。因此，我们可以使用为服务分配的 SPIFFE ID 创建策略，以实现更细粒度的访问控制。&lt;/p&gt;
&lt;p&gt;“Symbank”演示应用程序使用三个不同的端点来获取有关银行账户的所有信息。&lt;code&gt;/profiles&lt;/code&gt; 端点提供账户所有者的姓名和地址。另外两个端点，&lt;code&gt;/balances&lt;/code&gt; 和 &lt;code&gt;/transactions&lt;/code&gt;，提供账户的余额和交易信息。&lt;/p&gt;
&lt;p&gt;为了演示 Envoy 的 RBAC 过滤器，我们可以创建一个策略，允许“frontend”服务仅获取 &lt;code&gt;/profiles&lt;/code&gt; 端点的数据，并拒绝发送到其他端点的请求。这可以通过定义一个主体与服务的 SPIFFE ID 匹配以及只允许对 &lt;code&gt;/profiles&lt;/code&gt; 资源进行 GET 请求的权限来实现。&lt;/p&gt;
&lt;p&gt;可以将以下代码片段添加到&lt;code&gt;backend&lt;/code&gt;服务的 Envoy 配置中作为新的 HTTP 过滤器来测试该策略。&lt;em&gt;注意：为了使 Envoy 配置正常工作，必须在现有的  &lt;code&gt;envoy.router&lt;/code&gt;  过滤器之前添加此代码片段&lt;/em&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;envoy.filters.http.rbac&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;typed_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;@type&amp;#34;: &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;type.googleapis.com/envoy.extensions.filters.http.rbac.v3.RBAC&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ALLOW&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;policies&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;general-rules&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;permissions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;and_rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;:method&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;, exact_match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;GET&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;url_path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;prefix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/profiles&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;principals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;authenticated&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;principal_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;exact&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;spiffe://example.org/ns/default/sa/default/frontend&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该示例演示了如何在已由 SPIRE 获得其身份的 Envoy 实例建立了 TLS 连接时，根据请求参数执行更精细的访问控制。&lt;/p&gt;
&lt;h2 id=&#34;清理&#34;&gt;清理&lt;/h2&gt;
&lt;p&gt;完成本教程后，你可以使用以下脚本删除用于配置 Envoy 以代表工作负载执行 X.509 身份验证的所有资源。此命令将删除：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于 SPIRE - Envoy X.509 集成教程的所有资源。&lt;/li&gt;
&lt;li&gt;SPIRE 代理、SPIRE 服务器和命名空间的所有部署和配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ bash scripts/clean-env.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>SPIRE 基本概念</title>
      <link>https://lib.jimmysong.io/spiffe-and-spire/concept/spire/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/spiffe-and-spire/concept/spire/</guid>
      <description>&lt;p&gt;SPIRE 是 &lt;a href=&#34;../spiffe&#34;&gt;SPIFFE API&lt;/a&gt; 的一个生产就绪的实现，它执行节点和工作负载认证，以便根据一组预先定义的条件，安全地向工作负载发出 SVID，并验证其他工作负载的 SVID。&lt;/p&gt;
&lt;h2 id=&#34;spire-架构和组件&#34;&gt;SPIRE 架构和组件&lt;/h2&gt;
&lt;p&gt;SPIRE 部署由一个 SPIRE 服务器和一个或多个 SPIRE 代理组成。服务器充当通过代理向一组工作负载发放身份的签名机构。它还维护一个工作负载身份的注册表，以及为签发这些身份而必须验证的条件。代理在本地向工作负载公开 SPIFFE 工作负载 API，必须安装在工作负载运行的每个节点上。&lt;/p&gt;
















&lt;figure  id=&#34;figure-spire-架构图&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/spire-arch.svg&#34; alt=&#34;SPIRE 架构图&#34; loading=&#34;lazy&#34; data-zoomable width=&#34;30%&#34; /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      SPIRE 架构图
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;h2 id=&#34;服务器&#34;&gt;服务器&lt;/h2&gt;
&lt;p&gt;SPIRE 服务器负责管理和发布其配置的 SPIFFE 信任域中的所有身份。它存储注册条目（指定决定特定 SPIFFE ID 应被签发的条件的选择器）和签名密钥，使用节点证明来自动验证代理的身份，并在被验证的代理请求时为工作负载创建 SVID。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-spire-服务器&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/spire-server.svg&#34; alt=&#34;SPIRE 服务器&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      SPIRE 服务器
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;服务器的行为是通过一系列的插件决定的。SPIRE 包含几个插件，你可以建立额外的插件来扩展 SPIRE 以满足特定的使用情况。插件的类型包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;节点证明器插件&lt;/strong&gt;：与代理节点证明器一起，验证代理运行的节点的身份。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;节点解析器插件&lt;/strong&gt;：它通过验证关于节点的额外属性来扩展服务器可以用来识别节点的选择器集合。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据存储插件&lt;/strong&gt;：服务器用它来存储、查询和更新各种信息，如注册条目、哪些节点已认证、这些节点的选择器是什么。有一个内置的数据存储插件，可以使用 MySQL、SQLite3 或 PostgresSQL 数据库来存储必要的数据。默认情况下，使用 SQLite 3。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;密钥管理器插件&lt;/strong&gt;：控制服务器如何存储用于签署 X.509-SVID 和 JWT-SVID 的私钥。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;上游权威机构插件&lt;/strong&gt;：默认情况下，SPIRE 服务器充当其自身的证书授权机构。但是，你可以使用上游权威机构插件来使用来自不同 PKI 系统的不同 CA。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你可以通过配置插件和其他各种配置变量来定制服务器的行为。详见 &lt;a href=&#34;https://spiffe.io/docs/latest/deploying/spire_server/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 服务器配置参考&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;代理&#34;&gt;代理&lt;/h2&gt;
&lt;p&gt;SPIRE 代理在已识别的工作负载所运行的每个节点上运行。该代理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从服务器上请求 SVID，并将其缓存起来，直到工作负载请求其 SVID 为止。&lt;/li&gt;
&lt;li&gt;向节点上的工作负载公开 SPIFFE 工作负载 API，并证明调用它的工作负载的身份&lt;/li&gt;
&lt;li&gt;为已识别的工作负载提供其 SVID&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-spire-代理&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/spire-agent.svg&#34; alt=&#34;SPIRE 代理&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      SPIRE 代理
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;该代理的主要组成部分包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;节点证明器插件&lt;/strong&gt;：与服务器节点证明器一起，验证代理运行的节点的身份。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;工作负载证明器插件&lt;/strong&gt;：通过从节点操作系统中查询有关工作负载进程的信息，并将其与你在使用选择器注册工作负载属性时提供给服务器的信息进行比较，来验证节点上工作负载进程的身份。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;密钥管理器插件&lt;/strong&gt;：代理用来生成和使用颁发给工作负载的 X.509-SVID 的私钥。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你可以通过配置插件和其他配置变量来定制代理的行为。详见《&lt;a href=&#34;https://spiffe.io/docs/latest/deploying/spire_agent/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 代理配置参考》&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;自定义服务器和代理插件&#34;&gt;自定义服务器和代理插件&lt;/h2&gt;
&lt;p&gt;你可以为特定的平台和架构创建自定义的服务器和代理插件，而 SPIRE 并不包括这些插件。例如，你可以为一个架构创建服务器和代理节点验证器，而不是在节点验证下总结的那些。或者你可以创建一个自定义密钥管理器插件，以 SPIRE 目前不支持的方式处理私钥。因为 SPIRE 在运行时加载自定义插件，你不需要重新编译 SPIRE 来启用它们。&lt;/p&gt;
&lt;h2 id=&#34;工作负载注册&#34;&gt;工作负载注册&lt;/h2&gt;
&lt;p&gt;为了让 SPIRE 识别工作负载，你必须通过注册条目向 SPIRE 服务器注册工作负载。工作负载注册告诉 SPIRE 如何识别工作负载以及为其提供哪个 SPIFFE ID。&lt;/p&gt;
&lt;p&gt;注册条目将身份（以 SPIFFE ID 的形式）映射到一组称为选择器的属性，工作负载必须拥有这些属性才能获得特定身份。在工作负载证明期间，代理使用这些选择器值来验证工作负载的身份。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://spiffe.io/docs/latest/spire/using/registering/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 文档&lt;/a&gt;中详细介绍了工作负载注册。&lt;/p&gt;
&lt;h2 id=&#34;证明&#34;&gt;证明&lt;/h2&gt;
&lt;p&gt;SPIRE 上下文中的证明（attestation）是断言工作负载的身份。SPIRE 通过从受信任的第三方收集工作负载进程本身和运行 SPIRE 代理的节点的属性并将它们与工作负载注册时定义的一组选择器进行比较来实现这一点。&lt;/p&gt;
&lt;p&gt;用于执行证明的可信第三方 SPIRE 查询是特定于平台的。&lt;/p&gt;
&lt;p&gt;SPIRE 分两个阶段执行证明：首先是节点证明（其中验证工作负载正在运行的节点的身份），然后是工作负载证明（其中验证节点上的工作负载）。&lt;/p&gt;
&lt;p&gt;SPIRE 有一个灵活的架构，允许它根据工作负载运行的环境，使用许多不同的受信第三方进行节点和工作负载验证。你通过代理和服务器配置文件中的条目告诉 SPIRE 使用哪些受信任的第三方，并通过你在注册工作负载时指定的选择器值告诉 SPIRE 使用哪些类型的信息进行验证。&lt;/p&gt;
&lt;h3 id=&#34;节点证明&#34;&gt;节点证明&lt;/h3&gt;
&lt;p&gt;SPIRE 要求每个代理在首次连接到服务器时进行身份验证和自我验证；这个过程称为节点证明（Node Attestation）。在节点证明期间，代理和服务器一起验证运行代理的节点的身份。他们通过称为节点证明器的插件来做到这一点。所有节点证明器都向节点及其环境询问只有该节点拥有的信息片段，以证明该节点的身份。&lt;/p&gt;
&lt;p&gt;节点证明的成功后，代理收到唯一的 SPIFFE ID。然后，代理的 SPIFFE ID 充当其负责的工作负载的“父级”。&lt;/p&gt;
&lt;p&gt;节点身份证明的示例包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过云平台交付给节点的身份证明文件（例如 AWS Instance 身份证明文件）&lt;/li&gt;
&lt;li&gt;验证存储在连接到节点的硬件安全模块或可信平台模块上的私钥&lt;/li&gt;
&lt;li&gt;安装代理时通过加入令牌提供的手动验证&lt;/li&gt;
&lt;li&gt;多节点软件系统安装在节点上时提供的标识凭据（例如 Kubernetes 服务账户令牌）&lt;/li&gt;
&lt;li&gt;其他机器身份证明（例如部署的服务器证书）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;节点证明器向服务器返回一组（可选）节点选择器，用于标识特定机器（例如 Amazon 实例 ID）。由于在定义工作负载的身份时，单个机器的特定身份通常没有用处，因此 SPIRE 会查询&lt;a href=&#34;https://spiffe.io/docs/latest/spire-about/spire-concepts/#node-resolution&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;节点解析器&lt;/a&gt;（如果有）以查看可以验证被证明节点的哪些附加属性（例如，如果节点是 AWS 安全组的成员）。来自证明器和解析者的选择器集成为与代理节点的 SPIFFE ID 关联的选择器集。&lt;/p&gt;
&lt;div class=&#34;alert-note-title&#34;&gt;
    &lt;p&gt;注意&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
    节点证明不需要节点选择器，除非你&lt;a href=&#34;https://spiffe.io/docs/latest/spire/using/registering/#mapping-workloads-to-multiple-nodes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;将工作负载映射到多个节点&lt;/a&gt;。
&lt;/div&gt;

&lt;p&gt;下图说明了节点证明中的步骤。在此图中，底层平台是 AWS：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-spire-节点证明步骤&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/spire-node-attestor.svg&#34; alt=&#34;SPIRE 节点证明步骤&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      SPIRE 节点证明步骤
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 id=&#34;步骤总结节点证明&#34;&gt;步骤总结：节点证明&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;代理 AWS 节点证明器插件向 AWS 查询节点身份证明，并将该信息提供给代理。&lt;/li&gt;
&lt;li&gt;代理将此身份证明传递给服务器。服务器将此数据传递给其 AWS 节点证明器。&lt;/li&gt;
&lt;li&gt;服务器 AWS 节点证明器独立验证身份证明，或者通过调用 AWS API，使用它在步骤 2 中获得的信息。节点证明器还为代理创建一个 SPIFFE ID，并将其传递回服务器进程，以及它发现的任何节点选择器。&lt;/li&gt;
&lt;li&gt;服务器发回代理节点的 SVID。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;节点证明器&#34;&gt;节点证明器&lt;/h4&gt;
&lt;p&gt;代理和服务器通过它们各自的节点证明器询问底层平台。SPIRE 支持节点证明器在各种环境中证明节点身份，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AWS 上的 EC2 实例（使用 EC2 实例身份文档）&lt;/li&gt;
&lt;li&gt;Microsoft Azure 上的 VM（使用 Azure 托管服务标识）&lt;/li&gt;
&lt;li&gt;Google Cloud Platform 上的 Google Compute Engine 实例（使用 GCE 实例身份令牌）&lt;/li&gt;
&lt;li&gt;作为 Kubernetes 集群成员的节点（使用 Kubernetes 服务账户令牌）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于没有平台可以直接识别节点的情况，SPIRE 包括用于证明的节点证明器：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用服务器生成的加入令牌&lt;/strong&gt;—— 加入令牌（join token）是 SPIRE 服务器和代理之间的预共享密钥。服务器可以在安装后生成加入令牌，该令牌可用于在代理启动时对其进行验证。为帮助防止滥用，加入令牌在使用后立即过期。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用现有的 X.509 证书&lt;/strong&gt;—— 有关配置节点证明器的信息，请参阅 &lt;a href=&#34;https://spiffe.io/docs/latest/deploying/spire_server/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 服务器配置参考&lt;/a&gt;和 &lt;a href=&#34;https://spiffe.io/docs/latest/deploying/spire_agent/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 代理配置参考&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&#34;节点解析&#34;&gt;节点解析&lt;/h4&gt;
&lt;p&gt;一旦验证了单个节点的身份，“节点解析器”插件就会扩展一组选择器，这些选择器可用于通过验证节点的其他属性来识别节点（例如，如果节点是特定 AWS 安全组的成员） ，或具有与之关联的特定标签）。只有服务器参与节点解析。SPIRE 在证明之后直接运行一次节点解析器。&lt;/p&gt;
&lt;h4 id=&#34;节点解析器&#34;&gt;节点解析器&lt;/h4&gt;
&lt;p&gt;服务器支持以下平台的节点解析器插件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;亚马逊网络服务（AWS）&lt;/li&gt;
&lt;li&gt;微软 Azure&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;工作负载证明&#34;&gt;工作负载证明&lt;/h3&gt;
&lt;p&gt;工作负载证明提出了一个问题：“这是谁的进程？”代理通过询问本地可用的权限（例如节点的操作系统内核，或在同一节点上运行的本地 kubelet）来回答这个问题，以确定调用工作负载 API 的进程的属性。&lt;/p&gt;
&lt;p&gt;然后，当你使用选择器注册工作负载的属性时，将这些属性与提供给服务器的信息进行比较。&lt;/p&gt;
&lt;p&gt;这些类型的信息可能包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;底层操作系统如何调度进程。在基于 Unix 的系统上，这可能是用户 ID (uid)、组 ID (gid)、文件系统路径等。）&lt;/li&gt;
&lt;li&gt;进程是如何由 Kubernetes 等编排系统调度的。在这种情况下，工作负载可能由运行它的 Kubernetes 服务账户或命名空间来描述。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;虽然代理和服务器都在节点证明中发挥作用，但只有代理参与工作负载证明。&lt;/p&gt;
&lt;p&gt;下图说明了工作负载证明的步骤：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-工作负载证明&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/workload-attestation.svg&#34; alt=&#34;工作负载证明&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      工作负载证明
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 id=&#34;步骤摘要工作负载证明&#34;&gt;步骤摘要：工作负载证明&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;工作负载调用工作负载 API 以请求 SVID。在 Unix 系统上，这被暴露为 Unix 域套接字。&lt;/li&gt;
&lt;li&gt;代理询问节点的内核以识别调用者的进程 ID。然后，它调用任何已配置的工作负载证明器插件，为它们提供工作负载的进程 ID。&lt;/li&gt;
&lt;li&gt;工作负载证明者使用进程 ID 来发现有关工作负载的其他信息，并根据需要查询相邻平台特定的组件，例如 Kubernetes kubelet。通常，这些组件也与代理驻留在同一节点上。&lt;/li&gt;
&lt;li&gt;证明者将发现的信息以选择器的形式返回给代理。&lt;/li&gt;
&lt;li&gt;代理通过将发现的选择器与注册条目进行比较来确定工作负载的身份，并将正确的缓存 SVID 返回给工作负载。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;工作负载证明者&#34;&gt;工作负载证明者&lt;/h4&gt;
&lt;p&gt;SPIRE 包括适用于 Unix、Kubernetes 和 Docker 的工作负载证明器插件。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SPIRE 嵌套架构：将 SPIRE 服务器链接为同一信任域</title>
      <link>https://lib.jimmysong.io/spiffe-and-spire/architecture/nested/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/spiffe-and-spire/architecture/nested/</guid>
      <description>&lt;p&gt;嵌套 SPIRE 允许将 SPIRE 服务器“链接”在一起，并且所有 SPIRE 服务器都可以在同一信任域中发放身份，这意味着在同一信任域中标识的所有工作负载都可以使用根密钥验证其身份文档。&lt;/p&gt;
&lt;p&gt;嵌套拓扑结构通过将一个 SPIRE 代理与每个下游 SPIRE 服务器“链接”在一起来实现。下游 SPIRE 服务器通过 Workload API 获得凭证，然后直接与上游 SPIRE 服务器进行身份验证，以获取一个中间 CA。&lt;/p&gt;
&lt;p&gt;为了演示嵌套拓扑中的 SPIRE 部署，我们使用 Docker Compose 创建了一个场景，其中包括一个根 SPIRE 部署和两个嵌套的 SPIRE 部署。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/Nested_SPIRE_Diagram.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;嵌套拓扑结构非常适合多云部署。由于可以混合匹配节点验证者，下游 SPIRE 服务器可以位于不同的云提供商环境中，并为工作负载和 SPIRE 代理提供身份。&lt;/p&gt;
&lt;p&gt;在本教程中，你将学习以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在嵌套拓扑中配置 SPIRE&lt;/li&gt;
&lt;li&gt;配置 UpstreamAuthority 插件&lt;/li&gt;
&lt;li&gt;为嵌套 SPIRE 服务器创建注册条目&lt;/li&gt;
&lt;li&gt;测试在整个信任域中创建的 SVID 是否有效&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;先决条件&#34;&gt;先决条件&lt;/h2&gt;
&lt;p&gt;本教程的所需文件可以在 &lt;a href=&#34;https://github.com/spiffe/spire-tutorials&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/spiffe/spire-tutorials&lt;/a&gt; 的 &lt;code&gt;docker-compose/nested-spire&lt;/code&gt; 目录中找到。如果尚未克隆存储库，请现在进行克隆。&lt;/p&gt;
&lt;p&gt;在继续之前，请查看以下系统要求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;64 位 Linux 或 macOS 环境&lt;/li&gt;
&lt;li&gt;已安装 &lt;a href=&#34;https://docs.docker.com/get-docker/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Docker&lt;/a&gt; 和 &lt;a href=&#34;https://docs.docker.com/compose/install/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Docker Compose&lt;/a&gt;（macOS Docker Desktop 包含 Docker Compose）&lt;/li&gt;
&lt;li&gt;已安装 &lt;a href=&#34;https://golang.org/dl/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go&lt;/a&gt; 1.14.4 或更高版本&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;第一部分运行服务&#34;&gt;第一部分：运行服务&lt;/h2&gt;
&lt;p&gt;本教程的“nested-spire”主目录包含三个子目录，分别用于存放 SPIRE 部署的配置文件：&lt;code&gt;root&lt;/code&gt;、&lt;code&gt;nestedA&lt;/code&gt;和&lt;code&gt;nestedB&lt;/code&gt;。这些目录包含用于验证 Agents 在 Servers 上的身份的私钥和证书。这些私钥和证书是在场景初始化时使用 Go 应用程序创建的，其详细信息超出了本教程的范围。&lt;/p&gt;
&lt;h3 id=&#34;创建共享目录&#34;&gt;创建共享目录&lt;/h3&gt;
&lt;p&gt;首先，需要一个本地目录，在服务上进行卷挂载，以在根 SPIRE Agent 和嵌套 SPIRE Servers 之间共享工作负载 API。本教程使用&lt;code&gt;.../spire-tutorials/docker-compose/nested-spire/sharedRootSocket&lt;/code&gt;作为共享目录。&lt;/p&gt;
&lt;h3 id=&#34;配置根-spire-部署&#34;&gt;配置根 SPIRE 部署&lt;/h3&gt;
&lt;p&gt;根 SPIRE 服务器和代理的配置文件与默认的&lt;code&gt;server.conf&lt;/code&gt;和&lt;code&gt;agent.conf&lt;/code&gt;文件没有改动，但值得注意的是 SPIRE 代理定义绑定工作负载 API socket 的位置：&lt;code&gt;socket_path =&amp;quot;/opt/spire/sockets/workload_api.sock&amp;quot;&lt;/code&gt;。稍后将使用此路径来配置卷，以便与嵌套 SPIRE Servers 共享工作负载 API。&lt;/p&gt;
&lt;p&gt;我们在&lt;a href=&#34;https://github.com/spiffe/spire-tutorials/blob/main/docker-compose/nested-spire/docker-compose.yaml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;docker-compose.yaml&lt;/a&gt;文件中定义了本教程中的所有服务。在&lt;code&gt;root-agent&lt;/code&gt;服务定义中，我们将 SPIRE Agent 容器中的&lt;code&gt;/opt/spire/sockets&lt;/code&gt;目录挂载到新的本地目录&lt;code&gt;sharedRootSocket&lt;/code&gt;上。在下一节中，当定义嵌套 SPIRE Server 服务时，我们将使用此目录将&lt;code&gt;root-agent&lt;/code&gt;套接字挂载到 SPIRE Server 容器上。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;services&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Root&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;root-server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ghcr.io/spiffe/spire-server:1.5.1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hostname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;root-server&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;./root/server:/opt/spire/conf/server&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;-config&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/opt/spire/conf/server/server.conf&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;root-agent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Share the host pid namespace so this agent can attest the nested servers&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;pid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;host&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ghcr.io/spiffe/spire-agent:1.5.1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;depends_on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;root-server&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hostname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;root-agent&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Share root agent socket to be accessed by nestedA and nestedB servers&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;./sharedRootSocket:/opt/spire/sockets&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;./root/agent:/opt/spire/conf/agent&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;/var/run/:/var/run/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;-config&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/opt/spire/conf/agent/agent.conf&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;配置嵌套-a-spire-部署&#34;&gt;配置嵌套 A SPIRE 部署&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;nestedB&lt;/code&gt; SPIRE 部署需要相同的一组配置，但本文不描述这些更改，以避免重复。&lt;/p&gt;
&lt;p&gt;SPIRE Agent 和 Server 可以通过各种&lt;a href=&#34;https://spiffe.io/spire/docs/extending/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;插件&lt;/a&gt;进行扩展。&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/spire_server.md#built-in-plugins&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;UpstreamAuthority 插件&lt;/a&gt;类型允许 SPIRE Server 与现有 PKI 系统集成。UpstreamAuthority 插件可以使用从磁盘加载的 CA 进行证书签名，第三方工具如 AWS 和 Vault 等。嵌套 SPIRE 部署需要使用&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_upstreamauthority_spire.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;spire UpstreamAuthority 插件&lt;/a&gt;，该插件使用同一信任域中的上游 SPIRE Server 获取 SPIRE Server 的中间签名证书。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;*&lt;a href=&#34;https://github.com/spiffe/spire-tutorials/blob/main/docker-compose/nested-spire/nestedA/server/server.conf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;nestedA-server 的配置文件&lt;/a&gt;*包括&lt;code&gt;spire&lt;/code&gt; UpstreamAuthority 插件定义，其中&lt;code&gt;root-server&lt;/code&gt;被定义为其上游 SPIRE Server。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;na&#34;&gt;UpstreamAuthority &amp;#34;spire&amp;#34; {&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 	   &lt;span class=&#34;na&#34;&gt;plugin_data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt; 	       server_address      = &amp;#34;root-server&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt; 	       server_port         = 8081
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt; 	       workload_api_socket = &amp;#34;/opt/spire/sockets/workload_api.sock&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt; 	   }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    }&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在&lt;a href=&#34;https://github.com/spiffe/spire-tutorials/blob/main/docker-compose/nested-spire/docker-compose.yaml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;docker-compose.yaml&lt;/a&gt;文件中，&lt;code&gt;nestedA-server&lt;/code&gt;服务的 Docker Compose 定义将新的本地目录&lt;code&gt;sharedRootSocket&lt;/code&gt;作为卷进行挂载。请记住，前一节中将&lt;code&gt;root-agent&lt;/code&gt;套接字挂载在该目录上。这样，&lt;code&gt;nestedA-server&lt;/code&gt;就可以访问&lt;code&gt;root-agent&lt;/code&gt;的工作负载 API 并获取其 SVID。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;nestedA-server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Share the host pid namespace so this server can be attested by the root agent&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;pid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;host&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ghcr.io/spiffe/spire-server:1.5.1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hostname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;nestedA-server&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# label to attest nestedA-server against root-agent&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;org.example.name=nestedA&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Add root agent socket&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;./shared/rootSocket:/opt/spire/sockets&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;./nestedA/server:/opt/spire/conf/server&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;-config&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/opt/spire/conf/server/server.conf&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;创建下游注册项&#34;&gt;创建下游注册项&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;nestedA-server&lt;/code&gt;必须在&lt;code&gt;root-server&lt;/code&gt;中注册，以获取其身份，该身份将用于生成 SVID。我们通过在根 SPIRE Server 中创建一个注册项来实现为&lt;code&gt;nestedA-server&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker-compose &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -T root-server &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    /opt/spire/bin/spire-server entry create &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -parentID &lt;span class=&#34;s2&#34;&gt;&amp;#34;spiffe://example.org/spire/agent/x509pop/&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;fingerprint root/agent/agent.crt.pem&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -spiffeID &lt;span class=&#34;s2&#34;&gt;&amp;#34;spiffe://example.org/nestedA&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -selector &lt;span class=&#34;s2&#34;&gt;&amp;#34;docker:label:org.example.name:nestedA-server&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -downstream
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;parentID&lt;/code&gt;标志包含&lt;code&gt;root-agent&lt;/code&gt;的 SPIFFE ID。&lt;code&gt;root-agent&lt;/code&gt;的 SPIFFE ID 是由&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_nodeattestor_x509pop.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;x509pop Node Attestor 插件&lt;/a&gt;创建的，该插件将 SPIFFE ID 定义为&lt;code&gt;spiffe://&amp;lt;trust domain&amp;gt;/spire/agent/x509pop/&amp;lt;fingerprint&amp;gt;&lt;/code&gt;。shell 脚本中的&lt;code&gt;fingerprint()&lt;/code&gt;函数计算证书的 SHA1 指纹。另一个要注意的是&lt;code&gt;downstream&lt;/code&gt;选项。设置此选项时，表示该条目描述的是下游 SPIRE Server。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;运行场景&#34;&gt;运行场景&lt;/h3&gt;
&lt;p&gt;使用&lt;code&gt;set-env.sh&lt;/code&gt;脚本来运行构成场景的所有服务。该脚本使用之前描述的配置选项启动&lt;code&gt;root&lt;/code&gt;、&lt;code&gt;nestedA&lt;/code&gt;和&lt;code&gt;nestedB&lt;/code&gt;服务。&lt;/p&gt;
&lt;p&gt;确保当前工作目录是&lt;code&gt;.../spire-tutorials/docker-compose/nested-spire&lt;/code&gt;，然后运行以下命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;bash scripts/set-env.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;脚本完成后，在另一个终端中运行以下命令以查看所有服务的日志：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker-compose logs -f -t
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;第二部分测试部署&#34;&gt;第二部分：测试部署&lt;/h2&gt;
&lt;p&gt;现在 SPIRE 部署已准备就绪，让我们测试所配置的场景。&lt;/p&gt;
&lt;h3 id=&#34;创建工作负载注册项&#34;&gt;创建工作负载注册项&lt;/h3&gt;
&lt;p&gt;为了测试场景，我们创建两个工作负载注册项，一个用于每个嵌套 SPIRE Server（&lt;code&gt;nestedA&lt;/code&gt;和&lt;code&gt;nestedB&lt;/code&gt;）。测试的目标是演示在嵌套配置中创建的 SVID 在整个信任域中都有效，而不仅仅在生成 SVID 的 SPIRE Server 的范围内。以下命令演示了我们将用于创建这两个工作负载注册项的命令行选项，但你可以使用下面显示的&lt;code&gt;create-workload-registration-entries.sh&lt;/code&gt;脚本运行这些命令。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# nestedA部署的工作负载&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker-compose &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -T nestedA-server &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    /opt/spire/bin/spire-server entry create &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -parentID &lt;span class=&#34;s2&#34;&gt;&amp;#34;spiffe://example.org/spire/agent/x509pop/&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;fingerprint nestedA/agent/agent.crt.pem&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -spiffeID &lt;span class=&#34;s2&#34;&gt;&amp;#34;spiffe://example.org/nestedA/workload&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -selector &lt;span class=&#34;s2&#34;&gt;&amp;#34;unix:uid:1001&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# nestedB部署的工作负载&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker-compose &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -T nestedB-server &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    /opt/spire/bin/spire-server entry create &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -parentID &lt;span class=&#34;s2&#34;&gt;&amp;#34;spiffe://example.org/spire/agent/x509pop/&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;fingerprint nestedB/agent/agent.crt.pem&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -spiffeID &lt;span class=&#34;s2&#34;&gt;&amp;#34;spiffe://example.org/nestedB/workload&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -selector &lt;span class=&#34;s2&#34;&gt;&amp;#34;unix:uid:1001&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;示例再次使用&lt;code&gt;fingerprint path/to/nested-agent-cert&lt;/code&gt;的形式，以显示&lt;code&gt;-parentID&lt;/code&gt;标志指定了嵌套 SPIRE Agent 的 SPIFFE ID。最后，在两种情况下，Unix 选择器将 SPIFFE ID 分配给 uid 为 1001 的任何进程。&lt;/p&gt;
&lt;p&gt;使用以下 Bash 脚本使用刚才描述的选项创建注册条目：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;bash scripts/create-workload-registration-entries.sh
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;运行测试&#34;&gt;运行测试&lt;/h3&gt;
&lt;p&gt;一旦两个工作负载注册条目被传播，我们可以测试在嵌套配置中创建的 SVID 是否在整个信任域中有效，而不仅仅在生成 SVID 的 SPIRE Server 的范围内。&lt;/p&gt;
&lt;p&gt;该测试包括从&lt;code&gt;nestedA-agent&lt;/code&gt; SPIRE Agent 获取 JWT-SVID，并使用&lt;code&gt;nestedB-agent&lt;/code&gt;对其进行验证。在两种情况下，Docker Compose 使用 uid 1001 运行进程，以匹配在上一节中创建的工作负载注册条目。&lt;/p&gt;
&lt;p&gt;输入以下命令从&lt;code&gt;nestedA&lt;/code&gt; SPIRE Agent 获取 JWT-SVID，并从 JWT-SVID 中提取令牌：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;token&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;docker-compose &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -u &lt;span class=&#34;m&#34;&gt;1001&lt;/span&gt; -T nestedA-agent &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    /opt/spire/bin/spire-agent api fetch jwt -audience nested-test -socketPath /opt/spire/sockets/workload_api.sock &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sed -n &lt;span class=&#34;s1&#34;&gt;&amp;#39;2p&amp;#39;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行以下命令在&lt;code&gt;nestedB&lt;/code&gt; SPIRE Agent 上验证&lt;code&gt;nestedA&lt;/code&gt;的令牌：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker-compose &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -u &lt;span class=&#34;m&#34;&gt;1001&lt;/span&gt; -T nestedB-agent &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    /opt/spire/bin/spire-agent api validate jwt -audience nested-test  -svid &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;token&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      -socketPath /opt/spire/sockets/workload_api.sock
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;nestedB&lt;/code&gt; SPIRE Agent 输出如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    SVID is valid.
    SPIFFE ID : spiffe://example.org/nestedA/workload
    Claims    : {&amp;#34;aud&amp;#34;:[&amp;#34;nested-test&amp;#34;],&amp;#34;exp&amp;#34;:1595814190,&amp;#34;iat&amp;#34;:1595813890,&amp;#34;sub&amp;#34;:&amp;#34;spiffe://example.org/nestedA/workload&amp;#34;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;输出表示 JWT-SVID 是有效的。此外，尽管 SPIFFE ID 注册在&lt;code&gt;nestedA&lt;/code&gt;而不是&lt;code&gt;nestedB&lt;/code&gt;上，但该 SPIFFE ID 在&lt;code&gt;nestedB&lt;/code&gt; SPIRE Agent 上仍然有效，因为 SPIRE Agents 在嵌套 SPIRE 拓扑中处于相同的信任域。&lt;/p&gt;
&lt;p&gt;在 SPIRE 中，这是通过将每个 JWT-SVID 公共签名密钥传播到整个拓扑来实现的。在 X509-SVID 的情况下，由于 X.509 的链式语义，这很容易实现。&lt;/p&gt;
&lt;h2 id=&#34;清理&#34;&gt;清理&lt;/h2&gt;
&lt;p&gt;完成本教程后，你可以使用以下 Bash 脚本停止所有容器：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;bash scripts/clean-env.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>X.509 SPIFFE 可验证身份文档</title>
      <link>https://lib.jimmysong.io/spiffe-and-spire/standard/x509-svid/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/spiffe-and-spire/standard/x509-svid/</guid>
      <description>&lt;p&gt;SPIFFE 标准提供了一种框架的规范，能够在异构环境和组织边界中引导和发放服务的身份。它定义了一种称为 SPIFFE 可验证身份文档（SVID）的身份文档。&lt;/p&gt;
&lt;p&gt;SVID 本身并不代表一种新的文档类型。相反，我们提出了一个规范，定义了如何将 SVID 信息编码到现有文档类型中。&lt;/p&gt;
&lt;p&gt;本文档定义了一种标准，其中将 X.509 证书用作 SVID。假设读者对 X.509 有基本的了解。关于 X.509 的具体信息，请参考&lt;a href=&#34;https://tools.ietf.org/html/rfc5280&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 5280&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;
&lt;p&gt;SPIFFE 的最重要的功能之一是保护进程间通信。核心标准允许进行身份验证，但利用加密身份来构建安全的通信通道也是非常有益的。由于 TLS 被广泛采用，并且使用基于 X.509 的身份验证，将 X.509 用作 SPIFFE SVID 显然是有优势的。&lt;/p&gt;
&lt;p&gt;本规范讨论了将 SVID 信息编码到 X.509 证书中的约束条件，以及如何验证 X.509 SVID。&lt;/p&gt;
&lt;h2 id=&#34;spiffe-id&#34;&gt;SPIFFE ID&lt;/h2&gt;
&lt;p&gt;在 X.509 SVID 中，对应的 SPIFFE ID 被设置为主题备用名称扩展（SAN 扩展，参见&lt;a href=&#34;https://tools.ietf.org/html/rfc5280#section-4.2.1.6&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 5280 第 4.2.1.6 节&lt;/a&gt;）。一个 X.509 SVID 必须恰好包含一个 URI SAN，因此也只包含一个 SPIFFE ID。包含多个 SPIFFE ID 的 SVID 会引入与审计和授权逻辑相关的挑战，包含多个 URI SAN 的 SVID 会引入与 SPIFFE ID 验证相关的挑战。遇到包含多个 URI SAN 的 SVID 的验证器必须拒绝该 SVID。有关更多信息，请参见验证部分。&lt;/p&gt;
&lt;p&gt;一个 X.509 SVID 可以包含任意数量的其他 SAN 字段类型，包括 DNS SAN。&lt;/p&gt;
&lt;h2 id=&#34;层级关系&#34;&gt;层级关系&lt;/h2&gt;
&lt;p&gt;本节讨论了叶证书、根证书和中间证书之间的关系，以及对每个证书的要求。&lt;/p&gt;
&lt;h3 id=&#34;叶证书&#34;&gt;叶证书&lt;/h3&gt;
&lt;p&gt;叶证书是用于标识调用方或资源的 SVID，适用于身份验证过程。叶证书（相对于签名证书，第 3.2 节）是唯一能够用于标识资源或调用方的类型。&lt;/p&gt;
&lt;p&gt;叶证书的 SPIFFE ID 必须具有非根路径组件。如果省略了主题字段，则不需要主题字段，但如果省略了主题字段，则 URI SAN 扩展必须标记为关键扩展，根据&lt;a href=&#34;https://tools.ietf.org/html/rfc5280&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 5280 第 4.1.2.6 节&lt;/a&gt;的规定。有关区分叶证书和签名证书的 X.509 特定属性的信息，请参见第 4.1 节。&lt;/p&gt;
&lt;h3 id=&#34;签名证书&#34;&gt;签名证书&lt;/h3&gt;
&lt;p&gt;X.509 SVID 签名证书是具有在密钥用途扩展中设置&lt;code&gt;keyCertSign&lt;/code&gt;的证书。它还在基本约束扩展中将&lt;code&gt;CA&lt;/code&gt;标志设置为&lt;code&gt;true&lt;/code&gt;（参见第 4.1 节）。也就是说，它是一个 CA 证书。&lt;/p&gt;
&lt;p&gt;签名证书应该本身是一个 SVID。如果存在，签名证书的 SPIFFE ID 必须没有路径组件，并且可以位于其发行的任何叶 SVID 的信任域中。签名证书可以用于在相同或不同的信任域中发行进一步的签名证书。&lt;/p&gt;
&lt;p&gt;签名证书不能用于身份验证目的。它们只作为验证材料，并且可以像&lt;a href=&#34;https://tools.ietf.org/html/rfc5280&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 5280&lt;/a&gt;中描述的那样以典型的 X.509 方式链接在一起。请参见第 4.3 节和第 4.4 节以获取有关签名证书的 X.509 特定限制的更多信息。&lt;/p&gt;
&lt;h2 id=&#34;约束和用途&#34;&gt;约束和用途&lt;/h2&gt;
&lt;p&gt;叶证书和签名证书具有不同的 X.509 属性 - 一些用于安全目的，一些用于支持其特殊的功能。本节描述了两种类型 X.509 SVID 的约束和密钥用法配置。&lt;/p&gt;
&lt;h3 id=&#34;基本约束&#34;&gt;基本约束&lt;/h3&gt;
&lt;p&gt;基本约束 X.509 扩展标识证书是否为签名证书，以及包括该证书在内的有效证书路径的最大深度。它在&lt;a href=&#34;https://tools.ietf.org/html/rfc5280#section-4.2.1.9&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 5280 第 4.2.1.9 节&lt;/a&gt;中定义。&lt;/p&gt;
&lt;p&gt;有效的 X.509 SVID 签名证书可以设置&lt;code&gt;pathLenConstraint&lt;/code&gt;字段。签名证书必须将&lt;code&gt;cA&lt;/code&gt;字段设置为&lt;code&gt;true&lt;/code&gt;，而叶证书必须将&lt;code&gt;cA&lt;/code&gt;字段设置为&lt;code&gt;false&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;名称约束&#34;&gt;名称约束&lt;/h3&gt;
&lt;p&gt;名称约束指示了一个命名空间，其中后续证书中的所有 SPIFFE ID 必须位于其中。它们用于将受损的签名证书的影响范围限制在命名的信任域内，并在&lt;a href=&#34;https://tools.ietf.org/html/rfc5280#section-4.2.1.10&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 5280 第 4.2.1.10 节&lt;/a&gt;中定义。本节仅适用于签名证书。&lt;/p&gt;
&lt;p&gt;名称约束的类型与主题备用名称相同。由于 SVID 关心的仅是 SPIFFE ID，并且 SPIFFE ID 被定义为 SAN 类型 URI，因此我们只定义 URI 类型名称约束的语义。&lt;/p&gt;
&lt;p&gt;目前，对 URI 类型名称约束的支持相对较少。不支持它们的库将拒绝此类证书，阻止路径验证成功。虽然名称约束是 SPIFFE 希望使用的 X.509 功能，但作者认识到广泛支持的缺乏可能会给实现和/或部署带来重大痛苦。因此，X.509 SVID 签名证书可以根据实现者的意愿应用 URI 名称约束，但在此领域应谨慎使用。SPIFFE 社区正在努力在各种平台上启用对 URI 名称约束的支持，并且应该预期在未来的版本中，随着广泛支持的实现，本节中定义的要求将变得更加严格。&lt;/p&gt;
&lt;h3 id=&#34;密钥用法&#34;&gt;密钥用法&lt;/h3&gt;
&lt;p&gt;密钥用法扩展定义了证书中包含的密钥的用途。当要限制可以用于多个操作的密钥时，可以使用此用法限制。密钥用法扩展在&lt;a href=&#34;https://tools.ietf.org/html/rfc5280#section-4.2.1.3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 5280 第 4.2.1.3 节&lt;/a&gt;中定义。&lt;/p&gt;
&lt;p&gt;密钥用法扩展必须在所有 SVID 上设置，并且必须标记为关键扩展。&lt;/p&gt;
&lt;p&gt;SVID 签名证书必须设置&lt;code&gt;keyCertSign&lt;/code&gt;。它们可以设置&lt;code&gt;cRLSign&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;叶 SVID 必须设置&lt;code&gt;digitalSignature&lt;/code&gt;。它们可以设置&lt;code&gt;keyEncipherment&lt;/code&gt;和/或&lt;code&gt;keyAgreement&lt;/code&gt;；这些对于 RSA 密钥的证书来说通常只有在需要的情况下才有意义，即使在那种情况下通常也不需要。叶 SVID 不能设置&lt;code&gt;keyCertSign&lt;/code&gt;或&lt;code&gt;cRLSign&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;扩展密钥用途&#34;&gt;扩展密钥用途&lt;/h3&gt;
&lt;p&gt;该扩展指示证书中包含的密钥可以用于的一个或多个目的，除了或代替密钥用途扩展中指示的基本目的之外。它在&lt;a href=&#34;https://tools.ietf.org/html/rfc5280#section-4.2.1.2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 5280，第 4.2.1.2 节&lt;/a&gt;中定义。&lt;/p&gt;
&lt;p&gt;Leaf SVID 应包括此扩展，并且可以将其标记为关键。当包含时，字段&lt;code&gt;id-kp-serverAuth&lt;/code&gt;和&lt;code&gt;id-kp-clientAuth&lt;/code&gt;必须设置。&lt;/p&gt;
&lt;p&gt;签名证书可以包括扩展密钥用途。请注意，X.509 证书验证库中间 CA 证书中扩展密钥用途的处理方式因实现而异。有些 X.509 实现会对信任链中其下的所有证书都施加中间 CA 证书中的扩展密钥用途约束，而其他实现则不会。&lt;/p&gt;
&lt;h2 id=&#34;验证&#34;&gt;验证&lt;/h2&gt;
&lt;p&gt;本节描述了如何验证 X.509 SVID。该过程使用标准的 X.509 验证，以及一系列 SPIFFE 特定的验证步骤。&lt;/p&gt;
&lt;h3 id=&#34;路径验证&#34;&gt;路径验证&lt;/h3&gt;
&lt;p&gt;对给定 SVID 的信任验证基于标准的 X.509 路径验证，并且必须遵循&lt;a href=&#34;https://tools.ietf.org/html/rfc5280&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 5280&lt;/a&gt;的路径验证语义。&lt;/p&gt;
&lt;p&gt;证书路径验证需要提供叶子 SVID 证书和一个或多个 SVID 签名证书。用于验证的签名证书集合称为 CA 捆绑包。实体检索相关 CA 捆绑包的机制不在本文档范围内，而是在 SPIFFE 工作负载 API 规范中定义。&lt;/p&gt;
&lt;h3 id=&#34;叶子验证&#34;&gt;叶子验证&lt;/h3&gt;
&lt;p&gt;在验证资源或调用方时，需要进行超出 X.509 标准范围的验证。即，我们必须确保 1）证书是叶子证书，2）签发机构有权签发它。&lt;/p&gt;
&lt;p&gt;在验证用于身份验证目的的 X.509 SVID 时，验证器必须确保基本约束扩展中的&lt;code&gt;CA&lt;/code&gt;字段设置为&lt;code&gt;false&lt;/code&gt;，并且密钥用途扩展中未设置&lt;code&gt;keyCertSign&lt;/code&gt;和&lt;code&gt;cRLSign&lt;/code&gt;。验证器还必须确保 SPIFFE ID 的方案设置为&lt;code&gt;spiffe://&lt;/code&gt;。包含多个 URI SAN 的 SVID 必须被拒绝。&lt;/p&gt;
&lt;p&gt;随着 URI 名称约束的支持越来越广泛，本文档的未来版本可能会更新本节中设定的要求，以便更好地利用名称约束验证。&lt;/p&gt;
&lt;h2 id=&#34;在-spiffe-捆绑包中的表示&#34;&gt;在 SPIFFE 捆绑包中的表示&lt;/h2&gt;
&lt;p&gt;本节描述了如何将 X509-SVID CA 证书发布到 SPIFFE 捆绑包中，并从中使用。有关 SPIFFE 捆绑包的更多信息，请参阅 SPIFFE 信任域和捆绑包规范。&lt;/p&gt;
&lt;h3 id=&#34;发布-spiffe-捆绑包元素&#34;&gt;发布 SPIFFE 捆绑包元素&lt;/h3&gt;
&lt;p&gt;给定信任域的 X509-SVID CA 证书在 SPIFFE 捆绑包中表示为&lt;a href=&#34;https://tools.ietf.org/html/rfc7517&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 7517 兼容&lt;/a&gt;的 JWK 条目，每个 CA 证书一个条目。&lt;/p&gt;
&lt;p&gt;每个 JWK 条目的&lt;code&gt;use&lt;/code&gt;参数必须设置为&lt;code&gt;x509-svid&lt;/code&gt;。另外，每个 JWK 条目的&lt;code&gt;kid&lt;/code&gt;参数不能设置。&lt;/p&gt;
&lt;p&gt;除了&lt;a href=&#34;https://tools.ietf.org/html/rfc7517&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 7517&lt;/a&gt;要求的参数之外，表示 X509-SVID CA 证书的每个条目必须包含具有与该条目表示的基于 Base64 编码的 DER CA 证书相等的值的&lt;code&gt;x5c&lt;/code&gt;参数。该值必须包含且仅包含一个 CA 证书，并且该证书应为自签名。&lt;/p&gt;
&lt;h3 id=&#34;使用-spiffe-捆绑包&#34;&gt;使用 SPIFFE 捆绑包&lt;/h3&gt;
&lt;p&gt;从外部信任域使用 SPIFFE 捆绑包时，需要提取 X509-SVID CA 证书以供实际使用。SPIFFE 捆绑包可以包含许多不同类型的 SVID 条目，因此第一步是识别表示 X509-SVID CA 证书的条目。&lt;/p&gt;
&lt;p&gt;对于捆绑包中&lt;code&gt;use&lt;/code&gt;参数设置为&lt;code&gt;x509-svid&lt;/code&gt;的每个 JWK 条目，请检查&lt;code&gt;x5c&lt;/code&gt;参数是否设置并且至少具有一个值。如果&lt;code&gt;x5c&lt;/code&gt;未设置或为空，则必须忽略该条目。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;x5c&lt;/code&gt;参数的第一个值是该条目表示的 Base64 DER 编码的 CA 证书。如果&lt;code&gt;x5c&lt;/code&gt;参数包含多个值，则除第一个值外的所有值都必须被忽略。然后，X509-SVID CA 捆绑包是从&lt;code&gt;x509-svid&lt;/code&gt; JWK 条目中提取的 CA 证书的并集。如果捆绑包中不存在&lt;code&gt;x509-svid&lt;/code&gt; JWK 条目，则信任域不支持 X509-SVID。&lt;/p&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;
&lt;p&gt;本文档提出了 X.509 基于 SPIFFE 可验证身份文档的约定和标准。它构成了现实世界 SPIFFE 服务身份验证和 SVID 验证的基础。通过遵守 X.509 SVID 标准，可以构建一个可互操作且与平台无关的身份和身份验证系统。&lt;/p&gt;
&lt;h2 id=&#34;附录-a-x509-字段参考&#34;&gt;附录 A. X.509 字段参考&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;扩展&lt;/th&gt;
&lt;th&gt;字段&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;主题备用名称&lt;/td&gt;
&lt;td&gt;uniformResourceIdentifier&lt;/td&gt;
&lt;td&gt;此字段设置为 SPIFFE ID。仅允许一个此字段的实例。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;基本约束&lt;/td&gt;
&lt;td&gt;CA&lt;/td&gt;
&lt;td&gt;如果 SVID 是签名证书，则必须将此字段设置为 true。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;基本约束&lt;/td&gt;
&lt;td&gt;pathLenConstraint&lt;/td&gt;
&lt;td&gt;如果实现者希望执行有限的 CA 层次结构深度约束（例如，从现有私钥基础设施（PKI）继承），则可以设置此字段。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;名称约束&lt;/td&gt;
&lt;td&gt;permittedSubtrees&lt;/td&gt;
&lt;td&gt;如果实现者希望使用 URI 名称约束，则可以设置此字段。这将在本文档的未来版本中要求。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;密钥用途&lt;/td&gt;
&lt;td&gt;keyCertSign&lt;/td&gt;
&lt;td&gt;如果 SVID 是签名证书，则必须设置此字段。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;密钥用途&lt;/td&gt;
&lt;td&gt;cRLSign&lt;/td&gt;
&lt;td&gt;如果 SVID 是签名证书，则可以设置此字段。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;密钥用途&lt;/td&gt;
&lt;td&gt;keyAgreement&lt;/td&gt;
&lt;td&gt;如果 SVID 是叶子证书，则可以设置此字段。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;密钥用途&lt;/td&gt;
&lt;td&gt;keyEncipherment&lt;/td&gt;
&lt;td&gt;如果 SVID 是叶子证书，则可以设置此字段。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;密钥用途&lt;/td&gt;
&lt;td&gt;digitalSignature&lt;/td&gt;
&lt;td&gt;如果 SVID 是叶子证书，则必须设置此字段。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;扩展密钥用途&lt;/td&gt;
&lt;td&gt;id-kp-serverAuth&lt;/td&gt;
&lt;td&gt;此字段可为叶子证书或签名证书设置。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;扩展密钥用途&lt;/td&gt;
&lt;td&gt;id-kp-clientAuth&lt;/td&gt;
&lt;td&gt;此字段可为叶子证书或签名证书设置。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>安装 SPIRE 服务器</title>
      <link>https://lib.jimmysong.io/spiffe-and-spire/installation/install-server/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/spiffe-and-spire/installation/install-server/</guid>
      <description>&lt;p&gt;本文指导你如何在 Linux 和 Kubernetes 上安装 SPIRE 服务器。&lt;/p&gt;
&lt;h2 id=&#34;步骤-1获取-spire-二进制文件&#34;&gt;步骤 1：获取 SPIRE 二进制文件&lt;/h2&gt;
&lt;p&gt;预构建的 SPIRE 发行版可在 &lt;a href=&#34;https://spiffe.io/downloads/#spire-releases&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 下载页面&lt;/a&gt;找到。tarball 包含服务器和代理二进制文件。&lt;/p&gt;
&lt;p&gt;如果需要，你也可以&lt;a href=&#34;https://github.com/spiffe/spire/blob/main/CONTRIBUTING.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;从源代码构建 SPIRE&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;步骤-2安装服务器和代理&#34;&gt;步骤 2：安装服务器和代理&lt;/h2&gt;
&lt;p&gt;本入门指南描述了如何在同一节点上安装服务器和代理。在典型的生产部署中，服务器将安装在一个节点上，而一个或多个代理将安装在不同的节点上。&lt;/p&gt;
&lt;p&gt;要安装服务器和代理，请执行以下操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;从 &lt;a href=&#34;https://spiffe.io/downloads/#spire-releases&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 下载页面&lt;/a&gt;获取最新的 tarball，然后使用以下命令将其解压缩到 &lt;code&gt;/opt/spire&lt;/code&gt; 目录中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;wget https://github.com/spiffe/spire/releases/download/v1.8.2/spire-1.8.2-linux-amd64-musl.tar.gz
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;tar zvxf spire-1.8.2-linux-amd64-musl.tar.gz
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo cp -r spire-1.8.2/. /opt/spire/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为了方便起见，将 &lt;code&gt;spire-server&lt;/code&gt; 和 &lt;code&gt;spire-agent&lt;/code&gt; 添加到你的 &lt;code&gt;$PATH&lt;/code&gt; 中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ln -s /opt/spire/bin/spire-server /usr/bin/spire-server
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ln -s /opt/spire/bin/spire-agent /usr/bin/spire-agent
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;步骤-3配置服务器&#34;&gt;步骤 3：配置服务器&lt;/h2&gt;
&lt;p&gt;要在 Linux 上配置服务器，你需要：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;配置信任域&lt;/li&gt;
&lt;li&gt;配置服务器证书颁发机构（CA），可能包括配置 UpstreamAuthority 插件&lt;/li&gt;
&lt;li&gt;配置节点认证插件&lt;/li&gt;
&lt;li&gt;配置用于持久化数据的默认 &lt;code&gt;.data&lt;/code&gt; 目录&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;但是，为了简单起见，仅需完成步骤 1、2 和 3 即可快速部署演示目的。&lt;/p&gt;
&lt;p&gt;要配置步骤 1、2 和 4 中的项，请编辑服务器的配置文件，位于 &lt;code&gt;/opt/spire/conf/server/server.conf&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;有关如何配置 SPIRE 的详细信息，请参阅&lt;a href=&#34;https://spiffe.io/docs/latest/spire/using/configuring/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;配置 SPIRE&lt;/a&gt;，特别是节点认证和工作负载认证。&lt;/p&gt;
&lt;p&gt;注意，SPIRE 服务器在修改配置后必须重新启动才能生效。&lt;/p&gt;
&lt;p&gt;请参阅&lt;a href=&#34;https://spiffe.io/docs/latest/spire/installing/install-agents/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;安装 SPIRE 代理&lt;/a&gt;，了解如何安装 SPIRE 代理。&lt;/p&gt;
&lt;h1 id=&#34;如何在-kubernetes-上安装-spire-服务器&#34;&gt;如何在 Kubernetes 上安装 SPIRE 服务器&lt;/h1&gt;
&lt;p&gt;本节将逐步向你介绍在 Kubernetes 集群中运行服务器并配置工作负载容器以访问 SPIRE 的方法。&lt;/p&gt;
&lt;p&gt;你必须从包含用于配置的 &lt;code&gt;.yaml&lt;/code&gt; 文件的目录中运行所有命令。&lt;/p&gt;
&lt;h2 id=&#34;步骤-1获取所需文件&#34;&gt;步骤 1：获取所需文件&lt;/h2&gt;
&lt;p&gt;要获取所需的.yaml 文件，请克隆 &lt;a href=&#34;https://github.com/spiffe/spire-tutorials&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/spiffe/spire-tutorials&lt;/a&gt; 并从 &lt;code&gt;spire-tutorials/k8s/quickstart&lt;/code&gt; 子目录复制 &lt;code&gt;.yaml&lt;/code&gt; 文件。&lt;/p&gt;
&lt;h2 id=&#34;步骤-2为-spire-组件配置-kubernetes-命名空间&#34;&gt;步骤 2：为 SPIRE 组件配置 Kubernetes 命名空间&lt;/h2&gt;
&lt;p&gt;按照以下步骤配置部署 SPIRE 服务器和 SPIRE 代理的 spire 命名空间。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建命名空间：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -f spire-namespace.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行以下命令，并验证输出中是否列出了&lt;em&gt;spire&lt;/em&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl get namespaces
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;步骤-3配置-spire-服务器&#34;&gt;步骤 3：配置 SPIRE 服务器&lt;/h2&gt;
&lt;p&gt;要在 Kubernetes 上配置 SPIRE 服务器，你需要：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建服务器服务帐户&lt;/li&gt;
&lt;li&gt;创建服务器捆绑包 ConfigMap&lt;/li&gt;
&lt;li&gt;创建服务器 ConfigMap&lt;/li&gt;
&lt;li&gt;创建服务器 StatefulSet&lt;/li&gt;
&lt;li&gt;创建服务器服务&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;有关详细信息，请参阅以下各节。&lt;/p&gt;
&lt;h3 id=&#34;创建服务器服务帐户&#34;&gt;创建服务器服务帐户&lt;/h3&gt;
&lt;p&gt;通过应用 server-account.yaml 配置文件来配置名为 spire-server 的服务帐户：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ kubectl apply -f server-account.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过运行以下命令确认成功创建，并验证该服务帐户是否出现在以下命令的输出中：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ kubectl get serviceaccount --namespace spire
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;创建服务器捆绑包-configmap角色和-clusterrolebinding&#34;&gt;创建服务器捆绑包 ConfigMap、角色和 ClusterRoleBinding&lt;/h3&gt;
&lt;p&gt;为了使服务器能够为代理提供证书以用于在建立连接时验证服务器的身份，服务器需要具备在 spire 命名空间中获取和修补 ConfigMap 对象的功能。&lt;/p&gt;
&lt;p&gt;在这种部署中，代理和服务器共享同一集群，SPIRE 可以配置为定期生成这些证书并将证书内容更新到 ConfigMap 中。为此，服务器需要能够在 Kubernetes RBAC 中获取和修补 ConfigMap 对象。&lt;/p&gt;
&lt;p&gt;通过应用 &lt;code&gt;spire-bundle-configmap.yaml&lt;/code&gt; 配置文件来创建名为 &lt;code&gt;spire-bundle&lt;/code&gt; 的 ConfigMap：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -f spire-bundle-configmap.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过运行以下命令确认成功创建，并验证 &lt;code&gt;spire-bundle&lt;/code&gt; ConfigMap 是否列在以下命令的输出中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl get configmaps --namespace spire &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep spire
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了允许服务器读取和写入此 ConfigMap，必须创建一个 ClusterRole，授予 Kubernetes RBAC 相应的特权，并将 ClusterRoleBinding 与前一步创建的服务帐户关联。&lt;/p&gt;
&lt;p&gt;通过应用 &lt;code&gt;server-cluster-role.yaml&lt;/code&gt; 配置文件来创建名为 &lt;code&gt;spire-server-trust-role&lt;/code&gt; 的 ClusterRole 和相应的 ClusterRoleBinding：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -f server-cluster-role.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过运行以下命令确认成功创建，并验证 &lt;code&gt;spire-server-trust-role&lt;/code&gt; ClusterRole 是否出现在以下命令的输出中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl get clusterroles --namespace spire &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep spire
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;创建服务器-configmap&#34;&gt;创建服务器 ConfigMap&lt;/h3&gt;
&lt;p&gt;服务器在 Kubernetes ConfigMap 中进行配置，该 ConfigMap 在 &lt;code&gt;server-configmap.yaml&lt;/code&gt; 中指定了一些重要的目录，特别是 &lt;code&gt;/run/spire/data和/run/spire/config&lt;/code&gt;。这些卷在部署服务器容器时绑定。&lt;/p&gt;
&lt;p&gt;请参阅&lt;a href=&#34;https://spiffe.io/docs/latest/spire/using/configuring/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;配置 SPIRE&lt;/a&gt;部分，了解如何配置 SPIRE 服务器的详细信息，特别是节点认证和工作负载认证。&lt;/p&gt;
&lt;p&gt;注意，SPIRE 服务器在修改配置后必须重新启动才能生效。&lt;/p&gt;
&lt;p&gt;使用以下命令将服务器 ConfigMap 应用到你的集群：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -f server-configmap.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;创建服务器-statefulset&#34;&gt;创建服务器 StatefulSet&lt;/h3&gt;
&lt;p&gt;通过应用 &lt;code&gt;server-statefulset.yaml&lt;/code&gt; 配置文件来部署服务器：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -f server-statefulset.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这将在 spire 命名空间中创建一个名为 &lt;code&gt;spire-server&lt;/code&gt; 的 StatefulSet，并启动一个 &lt;code&gt;spire-server&lt;/code&gt; 的 Pod，如以下两个命令的输出所示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl get statefulset --namespace spire
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NAME           READY   AGE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;spire-server   1/1     86m
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl get pods --namespace spire
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NAME                           READY   STATUS    RESTARTS   AGE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;spire-server-0                 1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          86m
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当你部署服务器时，它会自动在 SPIRE 服务器的 gRPC 端口上配置 livenessProbe，以确保容器的可用性。&lt;/p&gt;
&lt;p&gt;服务器部署时，绑定到以下表中总结的卷：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;卷&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;挂载位置&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;spire-config&lt;/td&gt;
&lt;td&gt;引用在前一步中创建的 spire-server ConfigMap&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/run/spire/config&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;spire-data&lt;/td&gt;
&lt;td&gt;服务器的 SQLite 数据库和密钥文件的 hostPath&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/run/spire/data&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;创建服务器服务&#34;&gt;创建服务器服务&lt;/h3&gt;
&lt;p&gt;通过应用 server-service.yaml 配置文件来创建服务器服务：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -f server-service.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过运行以下命令确认成功创建，并验证 spire 命名空间现在是否有一个名为 &lt;code&gt;spire-server&lt;/code&gt; 的服务：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl get services --namespace spire
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NAME           TYPE       CLUSTER-IP      EXTERNAL-IP   PORT&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;S&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;          AGE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;spire-server   NodePort   10.107.205.29   &amp;lt;none&amp;gt;        8081:30337/TCP   88m
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>注册工作负载</title>
      <link>https://lib.jimmysong.io/spiffe-and-spire/configuration/registering/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/spiffe-and-spire/configuration/registering/</guid>
      <description>&lt;p&gt;本文将指导你在 SPIRE 服务器中使用 SPIFFE ID 注册工作负载。&lt;/p&gt;
&lt;h2 id=&#34;如何创建注册条目&#34;&gt;如何创建注册条目&lt;/h2&gt;
&lt;p&gt;注册条目包含以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SPIFFE ID&lt;/li&gt;
&lt;li&gt;一个或多个选择器集合&lt;/li&gt;
&lt;li&gt;父级 ID&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;服务器将向代理发送所有有权在该节点上运行的工作负载的注册条目列表。代理缓存这些注册条目并保持其更新。&lt;/p&gt;
&lt;p&gt;在工作负载认证期间，代理会发现选择器并将其与缓存的注册条目中的选择器进行比较，以确定应该为工作负载分配哪些 SVID。&lt;/p&gt;
&lt;p&gt;你可以通过在命令行中发出 &lt;code&gt;spire-server entry create&lt;/code&gt; 命令或直接调用 Entry API 来注册工作负载，具体方法请参阅 &lt;a href=&#34;https://github.com/spiffe/spire-api-sdk/blob/v1.8.2/proto/spire/api/server/entry/v1/entry.proto&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Entry API 文档&lt;/a&gt;。可以使用 &lt;code&gt;spire-server entry update&lt;/code&gt; 命令修改现有条目。&lt;/p&gt;
&lt;p&gt;在 Kubernetes 上运行时，调用 SPIRE 服务器的常见方法是通过在运行 SPIRE 服务器的 Pod 上使用&lt;code&gt;kubectl exec&lt;/code&gt;命令。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -n spire spire-server-0 -- &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    /opt/spire/bin/spire-server entry create &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -spiffeID spiffe://example.org/ns/default/sa/default &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -parentID spiffe://example.org/ns/spire/sa/spire-agent &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -selector k8s:ns:default &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;有关 &lt;code&gt;spire-server entry create&lt;/code&gt; 和 &lt;code&gt;spire-server entry update&lt;/code&gt; 命令和选项的更多信息，请参阅 &lt;a href=&#34;https://spiffe.io/docs/latest/deploying/spire_server/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 服务器参考指南&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;如何注册工作负载&#34;&gt;如何注册工作负载&lt;/h2&gt;
&lt;p&gt;通过在 SPIRE 服务器中创建一个或多个注册条目来注册工作负载。要注册工作负载，需要告诉 SPIRE：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;分配给在工作负载有权运行的节点上运行的代理的 SPIFFE ID。&lt;/li&gt;
&lt;li&gt;运行在这些机器上的工作负载本身的属性。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;1-定义代理的-spiffe-id&#34;&gt;1. 定义代理的 SPIFFE ID&lt;/h3&gt;
&lt;p&gt;分配给代理的 SPIFFE ID 可能是作为节点认证过程的一部分自动分配的 ID。例如，当代理经过 AWS IID 节点认证时，会自动分配形式为 &lt;code&gt;spiffe://example.org/agent/aws_iid/ACCOUNT_ID/REGION/INSTANCE_ID&lt;/code&gt; 的 SPIFFE ID。&lt;/p&gt;
&lt;p&gt;或者，可以通过创建一个指定了选择器的&lt;a href=&#34;https://spiffe.io/docs/latest/deploying/registering/#create-registration-entry&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;注册条目&lt;/a&gt;来为一个或多个代理分配 SPIFFE ID。例如，可以通过创建以下注册条目将 SPIFFE ID  &lt;code&gt;spiffe://acme.com/web-cluster&lt;/code&gt; 分配给在标记 &lt;code&gt;app&lt;/code&gt; 设置为 &lt;code&gt;webserver&lt;/code&gt; 的一组 EC2 实例上运行的任何 SPIRE 代理：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;spire-server entry create &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -node &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -spiffeID spiffe://acme.com/web-cluster &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -selector tag:app:webserver
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;选择器是 SPIRE 可以在发出身份之前验证的节点或工作负载的本机属性。单个注册条目可以包含节点选择器或工作负载选择器，但不能同时包含两者。请注意上述命令中的 &lt;code&gt;-node&lt;/code&gt; 标志，它表示此命令正在指定节点选择器。&lt;/p&gt;
&lt;p&gt;根据工作负载应用程序运行的平台或架构，提供了不同的选择器。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;平台&lt;/th&gt;
&lt;th&gt;请访问&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Kubernetes&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_nodeattestor_k8s_sat.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AWS&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_nodeattestor_aws_iid.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Azure&lt;/td&gt;
&lt;td&gt;GitHub&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;2-定义工作负载的-spiffe-id&#34;&gt;2. 定义工作负载的 SPIFFE ID&lt;/h3&gt;
&lt;p&gt;一旦代理或代理有一个分配的 SPIFFE ID，就可以创建另一个注册条目来标识在调用该代理公开的工作负载 API 时的特定工作负载。&lt;/p&gt;
&lt;p&gt;例如，要创建一个注册条目，以匹配在标识为 &lt;code&gt;spiffe://acme.com/web-cluster&lt;/code&gt; 的代理上运行的 Unix 组 ID 1000 下运行的 Linux 进程，可以使用以下命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;spire-server entry create &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -parentID spiffe://acme.com/web-cluster &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -spiffeID spiffe://acme.com/webapp  &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -selector unix:gid:1000
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;平台&lt;/th&gt;
&lt;th&gt;请访问&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Unix&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_agent_workloadattestor_unix.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Kubernetes&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_agent_workloadattestor_k8s.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Docker&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_agent_workloadattestor_docker.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;如何列出注册条目&#34;&gt;如何列出注册条目&lt;/h2&gt;
&lt;p&gt;要列出所有现有的注册条目，请使用命令 &lt;code&gt;spire-server entry show&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;要将注册条目筛选为与特定 SPIFFE ID、父级 SPIFFE ID 或注册条目 ID 匹配的条目，请分别使用 &lt;code&gt;-spiffeID&lt;/code&gt;、&lt;code&gt;-parentID&lt;/code&gt;、&lt;code&gt;-selector&lt;/code&gt; 或 &lt;code&gt;-entryID&lt;/code&gt; 标志。&lt;/p&gt;
&lt;p&gt;请注意，每个注册条目都有一个唯一的注册条目 ID，但是多个注册条目可以指定相同的 SPIFFE ID。&lt;/p&gt;
&lt;p&gt;例如，要列出与标记 &lt;code&gt;app&lt;/code&gt; 设置为 &lt;code&gt;webserver&lt;/code&gt; 的一组 EC2 实例匹配的所有注册条目，请运行以下命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;spire-server entry show -selector tag:app:webserver
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;有关 &lt;code&gt;spire-server entry show&lt;/code&gt; 命令和选项的更多信息，请参阅&lt;a href=&#34;https://spiffe.io/docs/latest/deploying/spire_server/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 服务器参考指南&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;如何删除注册条目&#34;&gt;如何删除注册条目&lt;/h2&gt;
&lt;p&gt;要永久删除现有的注册条目，请使用 &lt;code&gt;spire-server entry delete&lt;/code&gt; 命令，并指定相关的注册条目 ID。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;spire-server entry delete -entryID 92f4518e-61c9-420d-b984-074afa7c7002
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;有关 &lt;code&gt;spire-server entry delete&lt;/code&gt; 命令和选项的更多信息，请参阅  &lt;a href=&#34;https://spiffe.io/docs/latest/deploying/spire_server/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 服务器参考指南&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;将工作负载映射到多个节点&#34;&gt;将工作负载映射到多个节点&lt;/h2&gt;
&lt;p&gt;工作负载注册条目可以有一个父级 ID。这可以是特定节点的 SPIFFE ID（即通过节点认证获得的代理的 SPIFFE ID），也可以是节点注册条目（有时称为节点别名/集合）的 SPIFFE ID。节点别名（或集合）是具有相似特征的一组节点，它们被赋予了一个共享的身份。节点注册条目具有节点选择器，要求节点至少具有这些选择器才能符合共享的身份。这意味着具有至少与节点注册条目中定义的选择器相同的任何节点都被赋予该别名（或属于该节点集）。当工作负载注册条目使用节点别名的 SPIFFE ID 作为父级时，具有该别名的任何节点都有权为该工作负载获取 SVID&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SPIFFE 的历史和动机</title>
      <link>https://lib.jimmysong.io/spiffe/history-and-motivation-for-spiffe/</link>
      <pubDate>Fri, 07 Oct 2022 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/spiffe/history-and-motivation-for-spiffe/</guid>
      <description>&lt;p&gt;本章介绍了 SPIFFE 的动机和它是如何诞生的。&lt;/p&gt;
&lt;h2 id=&#34;压倒性的动机和需要&#34;&gt;压倒性的动机和需要&lt;/h2&gt;
&lt;p&gt;我们到达今天的位置，首先要经历一些成长的痛苦。&lt;/p&gt;
&lt;p&gt;当互联网在 1981 年首次广泛使用时，它只有 213 个不同的服务器，而安全问题&lt;a href=&#34;https://tools.ietf.org/html/rfc1296&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;几乎没有被考虑到&lt;/a&gt;。随着互联计算机数量的增加，安全问题仍然是一个弱点：容易被利用的漏洞导致了大规模的攻击，如&lt;a href=&#34;https://spaf.cerias.purdue.edu/tech-reps/823.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;莫里斯蠕虫病毒&lt;/a&gt;，它在 1988 年占领了互联网上的大多数 Unix 服务器，或 &lt;a href=&#34;https://www.caida.org/publications/papers/2003/sapphire/sapphire.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Slammer 蠕虫病毒&lt;/a&gt;，它在 2003 年在数十万台 Windows 服务器上传播。&lt;/p&gt;
&lt;p&gt;随着时间的推移，过去的传统周边防御模式已经不能很好地适应不断发展的计算架构和现代技术的边界。各种解决方案和技术层出不穷，以掩盖基础网络安全概念未能跟上现代化趋势而出现的越来越大的裂缝。&lt;/p&gt;
&lt;p&gt;那么，为什么周边模式如此普遍，怎样才能解决这些缺陷？&lt;/p&gt;
&lt;p&gt;多年来，我们观察到三大的趋势，突出了传统的周边模式对网络未来的限制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;软件不再在组织控制的单个服务器上运行。自 2015 年以来，新的软件通常被构建为微服务的集合，可以单独扩展或转移到云主机供应商。如果你不能在需要安全的服务周围画出一条精确的线，就不可能在它们周围筑起一道墙。&lt;/li&gt;
&lt;li&gt;你不能相信一切，即使是公司内的软件。曾经，我们认为软件漏洞就像苍蝇，我们可以单独拍打；现在，它们似乎更像一群蜜蜂。平均而言，国家漏洞数据库每年报告超过 &lt;a href=&#34;https://nvd.nist.gov/vuln/search/statistics&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;15000 个新的软件漏洞&lt;/a&gt;。如果你编写或购买了一个软件，它在某些时候可能会有一些漏洞。&lt;/li&gt;
&lt;li&gt;你也不能相信人，他们会犯错，会心烦意乱，再加上他们可以完全接触到内部服务。首先，每年有&lt;a href=&#34;https://www.comparitech.com/blog/vpn-privacy/phishing-statistics-facts/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;数以万计的攻击是基于网络钓鱼&lt;/a&gt;或窃取有效的员工凭证。其次，随着云计算应用和移动工作队伍的出现，员工可以合法地从许多不同的网络访问资源。当人们为了工作而不得不不断地来回穿越这堵墙时，建造一堵墙就不再有意义了。正如你所看到的，对于当今的组织来说，周界安全不再是一个现实的解决方案。当周界安全被严格执行时，阻碍了组织使用微服务和云；当周界安全松懈时，它给了入侵者可乘之机。2004 年，Jericho 论坛认识到需要一个周界安全的继承者。十年后的 2014 年，谷歌发布了一个&lt;a href=&#34;https://research.google/pubs/pub43231/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;关于 BeyondCorp 安全架构的案例研究&lt;/a&gt;。然而，两者都没有被广泛的采用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;网络曾经是友好的只要我们保持自律&#34;&gt;网络曾经是友好的，只要我们保持自律&lt;/h2&gt;
&lt;p&gt;最初的互联网使用案例集中在学术界，目的是分享信息，而不是组织意外访问。当其他组织开始将联网的计算机系统用于商业敏感的场景时，他们在很大程度上依赖于物理周界和物理证明，以保证访问网络的个人得到授权。当时还不存在受信任的内部威胁的概念。随着网络从学术用途发展到商业用途，软件从单体发展到微服务，安全成为增长的障碍。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-11网络的演变从大学校园的范围到全球网络的范围&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f1-1.jpg&#34; alt=&#34;图 1.1：网络的演变从大学校园的范围到全球网络的范围。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 1.1：网络的演变从大学校园的范围到全球网络的范围。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;最初，通过防火墙、网络分段、私有地址空间和 ACL 来模拟墙和警卫来保护计算机的物理访问的传统方法。这在当时是有意义的，特别是考虑到需要控制的点的数量有限。&lt;/p&gt;
&lt;p&gt;随着网络的扩散，以及用户和商业伙伴访问点的增加，通过安全地交换和管理密钥、凭证和令牌，物理身份验证（常见于墙和警卫）变得虚拟化，随着技术和需求的发展，所有这些都变得越来越有问题。&lt;/p&gt;
&lt;h2 id=&#34;采用公共云&#34;&gt;采用公共云&lt;/h2&gt;
&lt;p&gt;从传统的内部部署和数据中心运作迁移到公共云，放大了现有问题。&lt;/p&gt;
&lt;p&gt;随着人们获得了在云中创建计算资源的自由，企业内的开发团队和运维团队开始更紧密地合作，并围绕着专注于软件自动化部署和管理的 DevOps 概念形成新的团队。公共云快速发展的动态环境使团队能够更频繁地进行部署 —— 从每几个月部署一次，到每天部署多次。按需配置和部署资源的能力使人们能够高速创建专门的、有针对性的、可独立部署的服务套件，其责任范围较小，俗称为&lt;strong&gt;微服务&lt;/strong&gt;。这反过来又增加了跨部署集群识别和访问服务的需要。&lt;/p&gt;
&lt;p&gt;这种高度动态和弹性的环境打破了公认的边界安全概念，需要更好的服务水平互动，与基础网络无关。传统的边界执行使用 IP 和端口进行认证、授权和审计，在云计算范式下，这不再是干净地映射到工作负载。&lt;/p&gt;
&lt;p&gt;公共云的参与所激发的模式，如 API 网关或用于多服务工作负载的管理的负载均衡器，强调了对不依赖网络拓扑或路径的身份的需求。保护这些服务间的通信的完整性变得更加重要，特别是对于需要跨工作负载统一性的团队。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-12随着企业网络的复杂性增加加上云计算saas-和移动负载建立和维护周边安全变得越来越难&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f1-2.jpg&#34; alt=&#34;图 1.2：随着企业网络的复杂性增加，加上云计算、SaaS 和移动负载，建立和维护周边安全变得越来越难。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 1.2：随着企业网络的复杂性增加，加上云计算、SaaS 和移动负载，建立和维护周边安全变得越来越难。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;休斯顿我们有一个问题&#34;&gt;休斯顿，我们有一个问题&lt;/h2&gt;
&lt;p&gt;随着企业采用新技术，如容器、微服务、云计算和无服务器功能，有一个趋势是明确的：更多更小的软件。这既增加了攻击者可以利用的潜在漏洞的数量，也使得管理周边防御越来越不现实。&lt;/p&gt;
&lt;p&gt;这种趋势正在加快，这意味着越来越多的组件被部署在自动化基础设施上，往往牺牲了安全和保障。绕过手动流程，如防火墙规则票或安全组的变化，并非闻所未闻。在这个新的现代世界里，无论部署环境如何，面向网络的访问控制都会迅速过时，需要不断维护。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-13随着新技术创新的激增基础设施环境和相关的操作需求也越来越复杂&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f1-3.jpg&#34; alt=&#34;图 1.3：随着新技术创新的激增，基础设施环境和相关的操作需求也越来越复杂。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 1.3：随着新技术创新的激增，基础设施环境和相关的操作需求也越来越复杂。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;这些规则和例外情况的管理可以自动化，然而，它们需要迅速发生，这在较大的基础设施中可能是一个挑战。此外，网络拓扑结构，如网络地址转换（NAT），会使其变得困难。随着基础设施变得越来越大，越来越动态，依靠人力的系统根本无法扩展。毕竟，没有人愿意花钱请一个整天玩弄防火墙规则的团队，而他们仍然无法跟上需求的进度。&lt;/p&gt;
&lt;p&gt;依靠特定地点的细节，如服务器名称、DNS 名称、网络接口细节，在一个动态调度和弹性扩展的应用世界里有几个缺点。虽然网络结构的使用很普遍，但该模型是软件身份的一个无效的模拟。在应用层，使用传统的用户名和密码组合或其他硬编码的凭证，可以赋予一定程度的身份，但更多的是处理授权而不是认证。&lt;/p&gt;
&lt;p&gt;在软件开发生命周期的早期整合安全并引入反馈，使开发人员能够对其工作负载的识别和信息交换机制进行更多的操作控制。有了这种变化，授权政策的决定可以委托给个别服务或产品所有者，他们最适合做出与有关组件相关的决定。&lt;/p&gt;
&lt;h2 id=&#34;重新认识访问控制&#34;&gt;重新认识访问控制&lt;/h2&gt;
&lt;p&gt;在采用公有云之前，企业所经历的问题不断增加，而采用公有云后，企业又痛苦地出现了问题，这就推动了传统的周界是不够的，需要有更好的解决方案的概念。最终，去边界化意味着企业需要弄清楚如何识别他们的软件并实现服务对服务的访问控制。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决方案之一：秘密&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;像密码和 API 密钥这样的共享秘密为分布式系统的访问控制提供了一个简单的选择。但这种解决方案也带来了许多问题。密码和 API 密钥很容易被泄露（试着在 GitHub 上搜索 &amp;ldquo;client_secret&amp;rdquo; 这样的短语，看看会发生什么）。在大型组织中，秘密可能很难因泄露而轮换，因为每个服务都需要以一种协调的方式意识到变化（而错过一个服务可能会导致停工）。&lt;/p&gt;
&lt;p&gt;诸如 HashiCorp Vault 这样的工具和秘密存储库已经被开发出来，以帮助缓解秘密管理和生命周期的困难。虽然也有许多其他工具试图解决这个问题，但它们往往提供了一个更加有限的解决方案，效果平平（见 &lt;a href=&#34;https://www.youtube.com/watch?v%3D15H5uCj1hlE&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Secrets at Scale: Automated Bootstrapping of Secrets &amp;amp; Identity in the Cloud&lt;/a&gt;）。有了所有这些选择，我们最终还是回到了同一个问题上：工作负载应该如何获得对这个秘密库的访问？仍然需要一些 API 密钥、密码或其他秘密。&lt;/p&gt;
&lt;p&gt;所有这些解决方案最终都会出现“乌龟下面还有一只乌龟&amp;quot; 的问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;启用对资源的访问控制，如数据库或其他资源。&lt;/li&gt;
&lt;li&gt;服务需要一个秘密，如 API 密钥或密码。&lt;/li&gt;
&lt;li&gt;该钥匙或密码需要被保护，所以你可以保护它，比如说用加密。但是，你仍然担心密码的解密密钥。&lt;/li&gt;
&lt;li&gt;该解密密钥可以被放入秘密库，但这样你仍然需要一些凭证，如密码或 API 密钥来访问秘密库。&lt;/li&gt;
&lt;li&gt;最终，为了保护对秘密的访问会产生需要保护的一个新秘密。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了打破这个循环，我们需要找到一个底层乌龟，也就是说，一些秘密提供了对我们所需的认证和访问控制的其他秘密的访问。一种选择是在服务部署时手动提供秘密。然而，这在高度动态的生态系统中是无法扩展的。随着企业转向具有快速部署管道和自动扩展资源的云计算，随着新计算单元的创建，手动配置秘密变得不可行。而当一个秘密被破坏时，使旧的凭证失效会带来使整个系统崩溃的风险。&lt;/p&gt;
&lt;p&gt;在应用程序中嵌入一个秘密，这样它就不需要手动配置了，其安全属性甚至更差。嵌入到源代码中的秘密有一个习惯，那就是出现在公共存储库中（你试过我建议的 GitHub 搜索吗）。虽然秘密可以在构建时被嵌入到机器镜像中，但这些镜像最终还是会被意外地推送到公共镜像库中，或者作为杀毒链的第二步从内部镜像库中提取。&lt;/p&gt;
&lt;p&gt;我们希望有一种解决方案，不包括长期存在的秘密（这些秘密很容易被破坏，也很难轮换），也不需要人工向工作负载提供秘密。为了实现这一点，无论是在硬件还是在云提供商，都&lt;strong&gt;必须有一个信任的根&lt;/strong&gt;，&lt;strong&gt;在此基础上建立一个以软件（工作负载）身份为中心的自动化解决方案&lt;/strong&gt;。然后，这种身份构成了所有需要认证和授权的互动的基础。为了避免产生另一个底层乌龟，工作负载需要能够在没有秘密或其他凭证的情况下获得这一身份。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-14有了健全的身份基石就不再是一路乌龟了&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f1-4.jpg&#34; alt=&#34;图 1.4：有了健全的身份基石，就不再是一路乌龟了。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 1.4：有了健全的身份基石，就不再是一路乌龟了。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;迈向未来&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;自 2010 年以来，业界为解决软件身份问题进行了多种努力。谷歌的低开销认证服务（LOAS），后来被命名为&lt;a href=&#34;https://cloud.google.com/security/encryption-in-transit/application-layer-transport-security/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;应用层传输安全（ALTS）&lt;/a&gt;，建立了一个新的身份格式和有线协议，用于从运行时环境接收软件身份，并将其应用于所有网络通信。它被称为&lt;strong&gt;拨号音安全（dial tone security）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在另一个例子中，Netflix 的内部开发的解决方案（代号为 &lt;a href=&#34;https://www.usenix.org/sites/default/files/conference/protected-files/enigma_haken_slides.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Metatron&lt;/a&gt;）通过利用云 API 来证明实例上运行的机器镜像，并通过 CI/CD 集成来产生机器镜像和代码身份之间的加密绑定，从而在每个实例基础上建立软件身份。这种软件身份采取 X.509 证书的形式，对服务间的通信进行相互认证，包括访问作为该解决方案一部分开发的&lt;strong&gt;秘密服务&lt;/strong&gt;，在此基础上实现秘密管理。&lt;/p&gt;
&lt;p&gt;业界的其他一些努力，包括来自 &lt;a href=&#34;https://engineering.fb.com/security/service-encryption/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Facebook 等公司的努力&lt;/a&gt;，证明了对这样一个系统的需要，并强调了实施的难度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;普适安全生产身份框架（SPIFFE）的愿景&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在成立通用的解决方案之前，需要建立一个框架编码原则。Kubernetes 的创始工程师 Joe Beda 在过去的工作中接触过各种技术，这些技术使工程团队的生活更加轻松，他在 2016 年开始呼吁为生产身份创建一个解决方案，作为一个专门的解决方案，旨在以一种通用的方式解决问题，可以在许多不同类型的系统中利用，而不是以艰难的方式进行 PKI 的中间解决方案。这种公司之间的大规模合作努力，为基于 PKI 的服务身份开发了一个新的标准，这就是 SPIFFE 的开始。&lt;/p&gt;
&lt;p&gt;2016 年 Beda 在 &lt;a href=&#34;https://engineering.fb.com/security/service-encryption/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GlueCon 上发表的论文&lt;/a&gt;展示了一个具有这些参数的难题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过利用基于内核的自省来获得关于调用者的信息，而无需调用者出示凭证，从而解决零号秘密的问题。&lt;/li&gt;
&lt;li&gt;使用 X.509，因为大多数软件已经兼容，而且&lt;/li&gt;
&lt;li&gt;有效地将身份的概念从网络定位器中剥离出来。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在引入 SPIFFE 概念之后，Netflix 服务认证方面的专家举行了一次会议，讨论原始 SPIFFE 提案的最终形态和可行性。许多成员已经实施了、继续改进并重新解决了工作负载识别问题，突出了社区合作的机会。参加会议的成员希望获得彼此之间的互操作性。这些专家意识到他们已经实施了类似的解决方案来解决同样的问题，可以建立一个共同的标准。&lt;/p&gt;
&lt;p&gt;解决工作负载身份问题的最初目标是建立一个开放的规范和相应的生产实现。该框架需要在不同的实现和现成的软件之间提供互操作性，其核心是在一个不信任的环境中建立信任的根基，驱除隐性信任。最后，摆脱以网络为中心的身份，以实现灵活性和更好的扩展特性。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-15起源2016-年在-netflix-的会议上安全专家们开始勾勒出-spiffe-的蓝图&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f1-5.jpg&#34; alt=&#34;图 1.5：起源：2016 年在 Netflix 的会议上，安全专家们开始勾勒出 SPIFFE 的蓝图。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 1.5：起源：2016 年在 Netflix 的会议上，安全专家们开始勾勒出 SPIFFE 的蓝图。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>出版信息</title>
      <link>https://lib.jimmysong.io/kubernetes-hardening-guidance/publication-information/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/kubernetes-hardening-guidance/publication-information/</guid>
      <description>&lt;p&gt;&lt;strong&gt;作者&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Cybersecurity and Infrastructure Security Agency (CISA)&lt;/p&gt;
&lt;p&gt;National Security Agency (NSA) Cybersecurity Directorate Endpoint Security&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;联系信息&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;客户要求 / 一般网络安全问题。&lt;/p&gt;
&lt;p&gt;网络安全需求中心，410-854-4200，&lt;a href=&#34;mailto:Cybersecurity_Requests@nsa.gov&#34;&gt;Cybersecurity_Requests@nsa.gov&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;媒体咨询&lt;/strong&gt; / &lt;strong&gt;新闻台&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;媒体关系，443-634-0721，&lt;a href=&#34;mailto:MediaRelations@nsa.gov&#34;&gt;MediaRelations@nsa.gov&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;关于事件响应资源，请联系 CISA：&lt;a href=&#34;mailto:CISAServiceDesk@cisa.dhs.gov&#34;&gt;CISAServiceDesk@cisa.dhs.gov&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;中文版&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;关于本书中文版的信息请联系 Jimmy Song：&lt;a href=&#34;mailto:jimmysong@jimmysong.io&#34;&gt;jimmysong@jimmysong.io&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;宗旨&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;国家安全局和 CISA 制定本文件是为了促进其各自的网络安全，包括其制定和发布网络安全规范和缓解措施的责任。这一信息可以被广泛分享，以触达所有适当的利益相关者。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用 Envoy 和 JWT-SVID 进行安全的微服务通信</title>
      <link>https://lib.jimmysong.io/spiffe-and-spire/examples/envoy-jwt/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/spiffe-and-spire/examples/envoy-jwt/</guid>
      <description>&lt;p&gt;本教程在&lt;a href=&#34;https://github.com/spiffe/spire-tutorials/blob/main/envoy-x509/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE Envoy-X.509 教程&lt;/a&gt;的基础上构建，演示如何使用 SPIRE 代替 X.509 SVID 进行工作负载的 JWT SVID 身份验证。在这个教程中展示了实现 JWT SVID 身份验证所需的更改，因此你应该首先运行或至少阅读 X.509 教程。&lt;/p&gt;
&lt;p&gt;为了说明 JWT 身份验证，我们在 Envoy X.509 教程中使用的每个服务中添加了 sidecar。每个 sidecar 都充当 Envoy 的&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/v1.25.1/intro/arch_overview/security/ext_authz_filter#arch-overview-ext-authz&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;外部授权过滤器&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/SPIRE-Envoy_JWT-SVID_diagram.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;如图所示，前端服务通过 Envoy 实例连接到后端服务，这些服务之间通过 Envoy 建立的 mTLS 连接进行通信。Envoy 通过携带的 JWT-SVID 进行身份验证的 HTTP 请求通过 mTLS 连接发送，并由 SPIRE Agent 提供和验证。&lt;/p&gt;
&lt;p&gt;在本教程中，你将学习如何：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将 Envoy JWT Auth Helper gRPC 服务添加到 Envoy X.509 教程中现有的前端和后端服务中&lt;/li&gt;
&lt;li&gt;将外部授权过滤器添加到 Envoy 配置中，将 Envoy 连接到 Envoy JWT Auth Helper&lt;/li&gt;
&lt;li&gt;在 SPIRE Server 上为 Envoy JWT Auth Helper 实例创建注册条目&lt;/li&gt;
&lt;li&gt;使用 SPIRE 测试成功的 JWT 身份验证&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;先决条件&#34;&gt;先决条件&lt;/h1&gt;
&lt;h2 id=&#34;支持外部-ip&#34;&gt;支持外部 IP&lt;/h2&gt;
&lt;p&gt;此教程需要一个可以分配外部 IP（例如&lt;a href=&#34;https://metallb.universe.tf/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;metallb&lt;/a&gt;）的负载均衡器。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.13.7/config/manifests/metallb-native.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;等待 metallb 启动：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl &lt;span class=&#34;nb&#34;&gt;wait&lt;/span&gt; --namespace metallb-system &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;                --for&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;condition&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;ready pod &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;                --selector&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;metallb &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;                --timeout&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;90s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;应用 metallb 配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -f ../envoy-x509/metallb-config.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;auth-helper-镜像&#34;&gt;Auth helper 镜像&lt;/h2&gt;
&lt;p&gt;使用 Envoy-jwt-auth-helper 实现了一个外部授权过滤器，提供了一个脚本来方便地使用 &lt;code&gt;kind&lt;/code&gt; 或 &lt;code&gt;minikube&lt;/code&gt; 构建和导入。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ bash ./scripts/build-helper.sh kind
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;之前的-spire-安装&#34;&gt;之前的 SPIRE 安装&lt;/h2&gt;
&lt;p&gt;在继续之前，请查看以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你需要访问通过 SPIRE Envoy-X.509 教程*配置的 Kubernetes 环境。你也可以使用下面描述的 &lt;code&gt;pre-set-env.sh&lt;/code&gt; 脚本创建 Kubernetes 环境。&lt;/li&gt;
&lt;li&gt;本教程所需的 YAML 文件可以在 &lt;a href=&#34;https://github.com/spiffe/spire-tutorials&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/spiffe/spire-tutorials&lt;/a&gt; 的 &lt;code&gt;k8s/envoy-jwt&lt;/code&gt; 目录中找到。如果你尚未克隆&lt;em&gt;SPIRE Envoy-X.509 教程&lt;/em&gt;的存储库，请立即克隆它。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果 Kubernetes 的&lt;em&gt;SPIRE Envoy-X.509 教程&lt;/em&gt;环境不可用，你可以使用以下脚本创建它，并将其作为本教程的起点。从 &lt;code&gt;k8s/envoy-jwt&lt;/code&gt; 目录中运行以下命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ bash scripts/pre-set-env.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该脚本将创建集群中 SPIRE Server 和 SPIRE Agent 所需的所有资源，然后将为 SPIRE Envoy X.509 教程创建所有资源，这是本 SPIRE Envoy JWT 教程的基本场景。&lt;/p&gt;
&lt;h1 id=&#34;第-1-部分部署更新和新资源&#34;&gt;第 1 部分：部署更新和新资源&lt;/h1&gt;
&lt;p&gt;假设 SPIRE Envoy X.509 教程是一个起点，需要更新一些资源并创建其他资源。目标是通过 JWT SVID 对工作负载进行身份验证。Envoy 实例之间已经建立了 mTLS 连接，可以在请求头中传输 JWT SVID。因此，缺失的部分是如何获取 JWT 并将其插入请求中，以及在另一侧进行验证。本教程中应用的解决方案包括在 Envoy 上配置外部授权过滤器，该过滤器根据配置模式注入或验证 JWT SVID。关于此示例服务器的详细信息，请参见&lt;a href=&#34;https://spiffe.io/docs/latest/microservices/envoy-jwt/readme/#about-envoy-jwt-auth-helper&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;关于 Envoy JWT Auth Helper&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;关于-envoy-jwt-auth-helper&#34;&gt;关于 Envoy JWT Auth Helper&lt;/h2&gt;
&lt;p&gt;Envoy JWT Auth Helper（&lt;code&gt;auth-helper&lt;/code&gt; 服务）是一个简单的 gRPC 服务，实现了 Envoy 的 External Authorization Filter。它是为本教程开发的，以演示如何注入或验证 JWT SVID。&lt;/p&gt;
&lt;p&gt;对于发送到 Envoy 转发代理的每个 HTTP 请求，Envoy JWT Auth Helper 从 SPIRE Agent 获取 JWT-SVID，并将其作为新的请求头注入，然后发送给 Envoy。另一方面，当 HTTP 请求到达反向代理时，Envoy External Authorization 模块将请求发送到 Envoy JWT Auth Helper，后者从标头中提取 JWT-SVID，然后连接到 SPIRE Agent 执行验证。验证成功后，请求将返回给 Envoy。如果验证失败，则拒绝请求。&lt;/p&gt;
&lt;p&gt;在内部，Envoy JWT Auth Helper 利用&lt;a href=&#34;https://github.com/spiffe/go-spiffe/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;go-spiffe&lt;/a&gt;库，该库公开了获取和验证 JWT SVID 所需的所有功能。以下是代码的主要部分：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 使用 SPIRE 提供的 Unix 域套接字创建配置源的选项。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;clientOptions&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;workloadapi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;WithClientOptions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workloadapi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;WithAddr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SocketPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 创建 workloadapi.JWTSource 实例以从工作负载 API 中获取最新的 JWT 批。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;jwtSource&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;workloadapi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;NewJWTSource&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Background&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;clientOptions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Fatalf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;无法创建JWTSource：%v&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;defer&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;jwtSource&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 获取将添加到请求头中的 JWT-SVID。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;jwtSVID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;jwtSource&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;FetchJWTSVID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;jwtsvid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Params&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nx&#34;&gt;Audience&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;audience&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;forbiddenResponse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;PERMISSION_DENIED&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 解析并验证令牌与 jwtSource 获取的批对比。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;jwtsvid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ParseAndValidate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;token&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;jwtSource&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;audience&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;forbiddenResponse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;PERMISSION_DENIED&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意：&lt;code&gt;workloadapi&lt;/code&gt; 和 &lt;code&gt;jwtsvid&lt;/code&gt; 是从 &lt;code&gt;go-spiffe&lt;/code&gt; 库导入的。&lt;/p&gt;
&lt;h2 id=&#34;更新部署&#34;&gt;更新部署&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;auth-helper&lt;/code&gt; 服务使得 Envoy 能够注入或验证携带 JWT-SVID 的身份验证头，如上所述。在这些部分中，&lt;code&gt;k8s/backend/config/envoy.yaml&lt;/code&gt; 中的 YAML 文件片段说明了将 JWT 身份验证添加到在&lt;a href=&#34;https://github.com/spiffe/spire-tutorials/blob/main/envoy-x509/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE Envoy-X.509 教程&lt;/a&gt;中定义的 &lt;code&gt;backend&lt;/code&gt; 服务所需的更改。其他 YAML 文件也对其他两个服务（&lt;code&gt;frontend&lt;/code&gt; 和 &lt;code&gt;frontend-2&lt;/code&gt;）应用了相同的更改，但是本文档中不会详细描述这些更改，以避免不必要的重复。你无需手动对 YAML 文件进行这些更改。新文件已包含在 &lt;code&gt;k8s/envoy-jwt/k8s&lt;/code&gt; 目录中。必须将此新的 &lt;code&gt;auth-helper&lt;/code&gt; 服务作为 sidecar 添加，并且必须配置它与 SPIRE Agent 通信。通过挂载卷来共享 SPIRE Agent 提供的 Unix 域套接字来实现这一目标。通过新的第二个卷，可以访问使用服务配置定义的 configmap。下面是来自 &lt;code&gt;containers&lt;/code&gt; 部分的代码片段，描述了这些更改：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;auth-helper&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;envoy-jwt-auth-helper:latest&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;imagePullPolicy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;IfNotPresent&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;-config&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/run/envoy-jwt-auth-helper/config/envoy-jwt-auth-helper.conf&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;containerPort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;9010&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumeMounts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;envoy-jwt-auth-helper-config&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mountPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/run/envoy-jwt-auth-helper/config&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;readOnly&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;spire-agent-socket&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mountPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/run/spire/sockets&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;readOnly&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;spire-agent-socket&lt;/code&gt; 卷已在部署中定义，无需再次添加。要将 configmap &lt;code&gt;envoy-jwt-auth-helper-config&lt;/code&gt; 添加到 &lt;code&gt;volumes&lt;/code&gt; 部分，可以使用以下代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;envoy-jwt-auth-helper-config&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;configMap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;be-envoy-jwt-auth-helper-config&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;添加外部授权过滤器&#34;&gt;添加外部授权过滤器&lt;/h2&gt;
&lt;p&gt;接下来，在 Envoy 配置中需要一个外部授权过滤器，该过滤器连接到新的服务。这个新的 HTTP 过滤器调用了刚刚添加到部署中的 &lt;code&gt;auth-helper&lt;/code&gt; 服务：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;http_filters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;envoy.filters.http.ext_authz&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;typed_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;@type&amp;#34;: &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;transport_api_version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;V3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;grpc_service&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;envoy_grpc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cluster_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ext-authz&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;timeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;5s&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这是外部授权过滤器的相应集群配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ext-authz&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;connect_timeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;1s&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;strict_dns&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;http2_protocol_options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;load_assignment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cluster_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ext-authz&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;endpoints&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;lb_endpoints&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;endpoint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;socket_address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;127.0.0.1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;9010&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;应用新资源&#34;&gt;应用新资源&lt;/h2&gt;
&lt;p&gt;为了使新的配置生效，需要重新部署服务。让我们删除 &lt;code&gt;backend&lt;/code&gt; 和 &lt;code&gt;frontend&lt;/code&gt; 部署以便更新它们：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl delete deployment backend
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl delete deployment frontend
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;确保当前工作目录是 &lt;code&gt;.../spire-tutorials/k8s/envoy-jwt&lt;/code&gt;，然后使用以下命令部署新资源：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -k k8s/.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;configmap/backend-envoy configured
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;configmap/be-envoy-jwt-auth-helper-config created
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;configmap/fe-envoy-jwt-auth-helper-config created
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;configmap/frontend-envoy configured
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;deployment.apps/backend configured
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;deployment.apps/frontend configured
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;创建注册条目&#34;&gt;创建注册条目&lt;/h2&gt;
&lt;p&gt;为了获取或验证由 SPIRE 发行的 JWT SVID，需要对 &lt;code&gt;auth-helper&lt;/code&gt; 实例在 SPIRE 服务器上进行身份验证。可以使用以下 Bash 脚本为每个实例创建注册条目：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ bash create-registration-entries.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;脚本运行后，将显示新的注册条目列表。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;...
Creating registration entry for the backend - auth-server...
Entry ID      : ecb140ab-50a7-4590-9fe0-d715ada67f29
SPIFFE ID     : spiffe://example.org/ns/default/sa/default/backend
Parent ID     : spiffe://example.org/ns/spire/sa/spire-agent
TTL           : 3600
Selector      : k8s:ns:default
Selector      : k8s:sa:default
Selector      : k8s:pod-label:app:backend
Selector      : k8s:container-name:auth-helper

Creating registration entry for the frontend - auth-server...
Entry ID      : 59a127fa-328c-4115-883e-5ee20b86714f
SPIFFE ID     : spiffe://example.org/ns/default/sa/default/frontend
Parent ID     : spiffe://example.org/ns/spire/sa/spire-agent
TTL           : 3600
Selector      : k8s:ns:default
Selector      : k8s:sa:default
Selector      : k8s:pod-label:app:frontend
Selector      : k8s:container-name:auth-helper
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;请注意，新服务的选择器指向 &lt;code&gt;auth-helper&lt;/code&gt; 容器：&lt;code&gt;k8s:container-name:auth-helper&lt;/code&gt;。这是为了对 &lt;code&gt;auth-helper&lt;/code&gt; 服务进行身份验证，以便它可以获取或验证配置为每个请求的身份验证标头的 JWT SVID。&lt;/p&gt;
&lt;p&gt;有意地，&lt;code&gt;frontend-2&lt;/code&gt; 服务没有注册条目。稍后将添加它，以演示在请求标头中没有 JWT-SVID 时，外部授权过滤器将拒绝请求。&lt;/p&gt;
&lt;h1 id=&#34;第二部分测试连接&#34;&gt;第二部分：测试连接&lt;/h1&gt;
&lt;p&gt;既然服务已经部署并在 SPIRE 中注册，让我们来测试我们配置的授权机制。&lt;/p&gt;
&lt;h2 id=&#34;测试有效和无效的-jwt-svid&#34;&gt;测试有效和无效的 JWT-SVID&lt;/h2&gt;
&lt;p&gt;第一组测试将演示如何通过有效的 JWT-SVID 来显示关联数据，以及如何通过无效的 JWT-SVID 阻止关联数据的显示。为了运行这些测试，我们需要找到组成用于访问数据的 URL 的 IP 地址和端口。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl get services
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NAME            TYPE           CLUSTER-IP    EXTERNAL-IP      PORT&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;S&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;          AGE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;backend-envoy   ClusterIP      None            &amp;lt;none&amp;gt;           9001/TCP         10m
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;frontend        LoadBalancer   10.96.226.176   172.18.255.200   3000:32314/TCP   10m
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;frontend-2      LoadBalancer   10.96.33.198    172.18.255.201   3002:31797/TCP   10m
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubernetes      ClusterIP      10.96.0.1       &amp;lt;none&amp;gt;           443/TCP          55m
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;frontend&lt;/code&gt; 服务将在 &lt;code&gt;EXTERNAL-IP&lt;/code&gt; 值和端口 &lt;code&gt;3000&lt;/code&gt; 上提供。在上面显示的示例输出中，要访问的 URL 是 &lt;code&gt;http://172.18.255.200:3000&lt;/code&gt;。打开浏览器，并在你的环境中的 &lt;code&gt;frontend&lt;/code&gt; 的 IP 地址后面添加端口 &lt;code&gt;:3000&lt;/code&gt;。页面加载完成后，你将看到用户&lt;em&gt;Jacob Marley&lt;/em&gt;的帐户详细信息。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/frontend_view.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;另一方面，当你连接到 &lt;code&gt;frontend-2&lt;/code&gt; 服务的 URL（例如 &lt;code&gt;http://172.18.255.201:3002&lt;/code&gt;）时，浏览器只显示标题而没有任何帐户详细信息。这是因为 &lt;code&gt;frontend-2&lt;/code&gt; 服务没有在请求中包含 JWT 令牌。请求中缺少有效的令牌使得位于 &lt;code&gt;backend&lt;/code&gt; 前面的 Envoy 实例拒绝该请求。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/frontend-2_view_no_details.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;让我们来看看 &lt;code&gt;auth-helper&lt;/code&gt; 容器的日志，以了解幕后发生了什么。以下是与 &lt;code&gt;frontend&lt;/code&gt; 服务并行运行的 &lt;code&gt;auth-helper&lt;/code&gt; 实例的日志。在这种情况下，&lt;code&gt;auth-helper&lt;/code&gt; 服务器配置为以注入模式运行。对于每个请求，它将 JWT-SVID 作为新的请求头注入并将其返回给将其转发给 &lt;code&gt;backend&lt;/code&gt; 的 Envoy 实例。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl logs -f --selector&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;frontend -c auth-helper
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Envoy JWT Auth Helper running in jwt_injection mode
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Starting gRPC Server at &lt;span class=&#34;m&#34;&gt;9011&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;JWT-SVID injected. Sending response with &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; new headers
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;JWT-SVID injected. Sending response with &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; new headers
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;JWT-SVID injected. Sending response with &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; new headers
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;另一方面，位于 &lt;code&gt;backend&lt;/code&gt; 服务前面的 &lt;code&gt;auth-helper&lt;/code&gt; 实例配置为以验证模式运行，因此它将检查请求标头中的 JWT-SVID。它提取令牌并对其进行验证。在这种情况下，前三个请求的令牌是有效的，然后将其发送回 Envoy 实例。这些请求来自 &lt;code&gt;frontend&lt;/code&gt; 服务。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl logs -f --selector&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;backend -c auth-helper
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Envoy JWT Auth Helper running in jwt_svid_validator mode
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Starting gRPC Server at &lt;span class=&#34;m&#34;&gt;9010&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Token is valid
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Token is valid
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Token is valid
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Invalid or unsupported authorization header: &lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Invalid or unsupported authorization header: &lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Invalid or unsupported authorization header: &lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当请求来自 &lt;code&gt;frontend-2&lt;/code&gt; 服务时（最后 3 条日志记录），&lt;code&gt;auth-helper&lt;/code&gt; 无法从请求中获取 JWT-SVID 并将其拒绝。这就是为什么在 &lt;code&gt;frontend-2&lt;/code&gt; 服务的浏览器中不显示帐户详细信息的原因。&lt;/p&gt;
&lt;h2 id=&#34;使用有效的-jwt-svid-重新测试-frontend-2&#34;&gt;使用有效的 JWT-SVID 重新测试 frontend-2&lt;/h2&gt;
&lt;p&gt;为了使 &lt;code&gt;frontend-2&lt;/code&gt; 能够成功进行 JWT-SVID 身份验证，我们将更新 Kubernetes 环境，使 &lt;code&gt;frontend-2&lt;/code&gt; 具有与 &lt;code&gt;frontend&lt;/code&gt; 类似的设置。这包括为 &lt;code&gt;auth-helper&lt;/code&gt; 服务创建一个新的容器，为 &lt;code&gt;auth-helper&lt;/code&gt; 创建一个新的 configmap，以及使用外部授权过滤器更新 &lt;code&gt;frontend-2-envoy&lt;/code&gt; 的 configmap。让我们先删除 &lt;code&gt;frontend-2&lt;/code&gt; 的部署，以准备新的配置。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl delete deployment frontend-2
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;要更新 &lt;code&gt;frontend-2&lt;/code&gt; 的 Envoy 配置和服务部署，请使用 &lt;code&gt;k8s/frontend-2/kustomization.yaml&lt;/code&gt; 文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -k k8s/frontend-2/.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;configmap/fe-2-envoy-jwt-auth-helper-config created
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;configmap/frontend-2-envoy configured
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;deployment.apps/frontend-2 created
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来，通过为 &lt;code&gt;auth-helper&lt;/code&gt; 服务在 SPIRE Server 中创建一个新的注册条目来对其进行身份验证：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ bash k8s/frontend-2/create-registration-entry.sh
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Creating registration entry &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; the frontend-2 - auth-server...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Entry ID      : bd0acd51-0d36-42be-8999-fccdcf1f33da
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SPIFFE ID     : spiffe://example.org/ns/default/sa/default/frontend-2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Parent ID     : spiffe://example.org/ns/spire/sa/spire-agent
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;TTL           : &lt;span class=&#34;m&#34;&gt;3600&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Selector      : k8s:ns:default
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Selector      : k8s:sa:default
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Selector      : k8s:pod-label:app:frontend-2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Selector      : k8s:container-name:auth-helper
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;等待一些时间，让部署传播后再次尝试在浏览器中查看 &lt;code&gt;frontend-2&lt;/code&gt; 服务。一旦 Pod 准备好并且注册条目传播完毕，请使用 &lt;code&gt;frontend-2&lt;/code&gt; 服务的正确 URL（例如 &lt;code&gt;http://35.222.190.182:3002&lt;/code&gt;）刷新浏览器。结果，现在页面显示用户&lt;em&gt;Alex Fergus&lt;/em&gt;的帐户详细信息。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/frontend-2_view.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h1 id=&#34;清理&#34;&gt;清理&lt;/h1&gt;
&lt;p&gt;完成本教程后，你可以使用以下命令删除用于配置 Envoy 代表工作负载执行 JWT SVID 身份验证的所有资源。此命令将删除：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为 SPIRE - Envoy JWT 集成教程创建的所有资源。&lt;/li&gt;
&lt;li&gt;为 SPIRE - Envoy X.509 集成教程创建的所有资源。&lt;/li&gt;
&lt;li&gt;SPIRE 代理、SPIRE 服务器和命名空间的所有部署和配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ bash scripts/clean-env.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>JWT SPIFFE 可验证身份文档</title>
      <link>https://lib.jimmysong.io/spiffe-and-spire/standard/jwt-svid/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/spiffe-and-spire/standard/jwt-svid/</guid>
      <description>&lt;p&gt;JWT-SVID 是 SPIFFE 规范集中的第一个基于令牌的 SVID。旨在在解决跨第 7 层边界断言身份时提供即时价值，与现有应用程序和库的兼容性是核心要求。&lt;/p&gt;
&lt;p&gt;JWT-SVID 是一种带有一些限制的标准 JWT 令牌。JOSE 在安全实现上一直存在困难，在安全社区中被认为是一项可能在部署和实现中引入漏洞的技术。JWT-SVID 采取措施尽量减轻这些问题，同时不破坏与现有应用程序和库的兼容性。&lt;/p&gt;
&lt;p&gt;JWT-SVID 是使用 JWS 紧凑序列化的 JSON Web Signature (JWS) 数据结构。不得使用 JWS JSON 序列化。&lt;/p&gt;
&lt;h2 id=&#34;jose-头&#34;&gt;JOSE 头&lt;/h2&gt;
&lt;p&gt;历史上，JOSE 头的密码灵活性引入了一系列流行的 JWT 实现中的漏洞。为了避免这样的陷阱，本规范限制了一些最初允许的内容。本节描述了允许的注册头以及其值。JWT-SVID JOSE 头中未描述的任何头部，无论是注册的还是私有的，都不得包含在其中。&lt;/p&gt;
&lt;p&gt;只支持 JWS。&lt;/p&gt;
&lt;h3 id=&#34;算法&#34;&gt;算法&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;alg&lt;/code&gt; 头必须设置为 &lt;a href=&#34;https://tools.ietf.org/html/rfc7518&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 7518&lt;/a&gt; 第 &lt;a href=&#34;https://tools.ietf.org/html/rfc7518#section-3.3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;3.3&lt;/a&gt;、&lt;a href=&#34;https://tools.ietf.org/html/rfc7518#section-3.4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;3.4&lt;/a&gt; 或 &lt;a href=&#34;https://tools.ietf.org/html/rfc7518#section-3.5&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;3.5&lt;/a&gt; 节定义的值之一。接收到 &lt;code&gt;alg&lt;/code&gt; 参数设置为其他值的令牌的验证器必须拒绝该令牌。&lt;/p&gt;
&lt;p&gt;支持的 &lt;code&gt;alg&lt;/code&gt; 值为：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;alg 参数值&lt;/th&gt;
&lt;th&gt;数字签名算法&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;RS256&lt;/td&gt;
&lt;td&gt;使用 SHA-256 的 RSASSA-PKCS1-v1_5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RS384&lt;/td&gt;
&lt;td&gt;使用 SHA-384 的 RSASSA-PKCS1-v1_5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RS512&lt;/td&gt;
&lt;td&gt;使用 SHA-512 的 RSASSA-PKCS1-v1_5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ES256&lt;/td&gt;
&lt;td&gt;使用 P-256 和 SHA-256 的 ECDSA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ES384&lt;/td&gt;
&lt;td&gt;使用 P-384 和 SHA-384 的 ECDSA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ES512&lt;/td&gt;
&lt;td&gt;使用 P-521 和 SHA-512 的 ECDSA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PS256&lt;/td&gt;
&lt;td&gt;使用 SHA-256 和 SHA-256 MGF1 的 RSASSA-PSS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PS384&lt;/td&gt;
&lt;td&gt;使用 SHA-384 和 SHA-384 MGF1 的 RSASSA-PSS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PS512&lt;/td&gt;
&lt;td&gt;使用 SHA-512 和 SHA-512 MGF1 的 RSASSA-PSS&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;密钥-id&#34;&gt;密钥 ID&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;kid&lt;/code&gt; 头是可选的。&lt;/p&gt;
&lt;h3 id=&#34;类型&#34;&gt;类型&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;typ&lt;/code&gt; 头是可选的。如果设置，其值必须是 &lt;code&gt;JWT&lt;/code&gt; 或 &lt;code&gt;JOSE&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;jwt-声明&#34;&gt;JWT 声明&lt;/h2&gt;
&lt;p&gt;JWT-SVID 规范没有引入任何新的声明，但它对 &lt;a href=&#34;https://tools.ietf.org/html/rfc7519&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 7519&lt;/a&gt; 定义的注册声明设置了一些限制。未在本文档中描述的注册声明，以及私有声明，可以根据实现者的需求使用。但应注意，在未定义的声明上依赖可能会影响互操作性，因为生成和使用令牌的应用程序必须独立协商。在引入其他声明时，实现者应谨慎行事，并仔细考虑其对 SVID 互操作性的影响，特别是在实现者无法控制生产者和消费者的环境中。如果绝对有必要使用其他声明，建议按照 &lt;a href=&#34;https://tools.ietf.org/html/rfc7519&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 7519&lt;/a&gt; 的建议使其抗冲突。&lt;/p&gt;
&lt;p&gt;本节概述了 JWT-SVID 规范对现有注册声明所施加的要求和限制。&lt;/p&gt;
&lt;h3 id=&#34;主题&#34;&gt;主题&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;sub&lt;/code&gt; 声明必须设置为其所属工作负载的 SPIFFE ID。这是对工作负载身份进行断言的主要声明。&lt;/p&gt;
&lt;h3 id=&#34;受众&#34;&gt;受众&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;aud&lt;/code&gt; 声明必须存在，包含一个或多个值。验证器必须拒绝没有设置 &lt;code&gt;aud&lt;/code&gt; 声明的令牌，或者验证器所识别的值不存在作为 &lt;code&gt;aud&lt;/code&gt; 元素。强烈建议在正常情况下将值的数量限制为一个。有关更多信息，请参见安全注意事项部分。&lt;/p&gt;
&lt;p&gt;所选择的值是特定于站点的，并且应该限定在要呈现给的服务范围内。例如，&lt;code&gt;reports&lt;/code&gt; 或 &lt;code&gt;spiffe://example.org/reports&lt;/code&gt; 是适用于向报告服务呈现的令牌的合适值。不建议使用 &lt;code&gt;production&lt;/code&gt; 或 &lt;code&gt;spiffe://example.org/&lt;/code&gt; 等值，因为它们的范围很广，如果 &lt;code&gt;production&lt;/code&gt; 中的单个服务受到损害，则可能导致冒充。&lt;/p&gt;
&lt;h3 id=&#34;过期时间&#34;&gt;过期时间&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;exp&lt;/code&gt; 声明必须设置，验证器必须拒绝没有此声明的令牌。鼓励实施者将有效期保持尽可能小，但本规范对其值没有设置任何硬上限。&lt;/p&gt;
&lt;h2 id=&#34;令牌签名和验证&#34;&gt;令牌签名和验证&lt;/h2&gt;
&lt;p&gt;JWT-SVID 的签名和验证语义与常规 JWT/JWS 相同。验证器在处理之前必须确保 &lt;code&gt;alg&lt;/code&gt; 头设置为支持的值。&lt;/p&gt;
&lt;p&gt;JWT-SVID 的签名是根据 &lt;a href=&#34;https://tools.ietf.org/html/rfc7519#section-7&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 7519 第 7 节&lt;/a&gt; 中概述的步骤进行计算和验证的。&lt;code&gt;aud&lt;/code&gt; 和 &lt;code&gt;exp&lt;/code&gt; 声明必须存在，并根据 &lt;a href=&#34;https://tools.ietf.org/html/rfc7519&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 7519&lt;/a&gt; 第 &lt;a href=&#34;https://tools.ietf.org/html/rfc7519#section-4.1.3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;4.1.3&lt;/a&gt; 和 &lt;a href=&#34;https://tools.ietf.org/html/rfc7519#section-4.1.4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;4.1.4&lt;/a&gt; 节进行处理。接收到没有设置 &lt;code&gt;aud&lt;/code&gt; 和 &lt;code&gt;exp&lt;/code&gt; 声明的令牌的验证器必须拒绝该令牌。&lt;/p&gt;
&lt;h2 id=&#34;令牌传输&#34;&gt;令牌传输&lt;/h2&gt;
&lt;p&gt;本节描述了 JWT-SVID 可以从一个工作负载传输到另一个工作负载的方式。&lt;/p&gt;
&lt;h3 id=&#34;序列化&#34;&gt;序列化&lt;/h3&gt;
&lt;p&gt;JWT-SVID 必须使用 &lt;a href=&#34;https://tools.ietf.org/html/rfc7515#section-3.1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 7515 第 3.1 节&lt;/a&gt; 中描述的紧凑序列化方法进行序列化，正如 &lt;a href=&#34;https://tools.ietf.org/html/rfc7519#section-1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 7519 第 1 节&lt;/a&gt; 所要求的那样。请注意，这排除了使用 JWS 未保护的头部，正如 JOSE 头 部分所规定的那样。&lt;/p&gt;
&lt;h3 id=&#34;http&#34;&gt;HTTP&lt;/h3&gt;
&lt;p&gt;通过 HTTP 传输的 JWT-SVID 应该在“Authorization”头部（HTTP/2 的“authorization”）中使用“Bearer”身份验证方案进行传输，该方案在 &lt;a href=&#34;https://tools.ietf.org/html/rfc6750#section-2.1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 6750 第 2.1 节&lt;/a&gt; 中定义。例如，在 HTTP/1.1 中使用 &lt;code&gt;Authorization: Bearer &amp;lt;serialized_token&amp;gt;&lt;/code&gt;，在 HTTP/2 中使用 &lt;code&gt;authorization: Bearer &amp;lt;serialized_token&amp;gt;&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;grpc&#34;&gt;gRPC&lt;/h3&gt;
&lt;p&gt;gRPC 协议使用 HTTP/2。因此，HTTP 部分 中的 HTTP 传输指南同样适用。具体而言，gRPC 实现应该使用值为 &lt;code&gt;Bearer &amp;lt;serialized_token&amp;gt;&lt;/code&gt; 的元数据键 &lt;code&gt;authorization&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;在-spiffe-bundle-中的表示&#34;&gt;在 SPIFFE Bundle 中的表示&lt;/h2&gt;
&lt;p&gt;本节描述了 JWT-SVID 签名密钥如何发布到和从 SPIFFE Bundle 中消费。有关 SPIFFE Bundle 的更多信息，请参见 SPIFFE 信任域和 Bundle 规范。&lt;/p&gt;
&lt;h3 id=&#34;发布-spiffe-bundle-元素&#34;&gt;发布 SPIFFE Bundle 元素&lt;/h3&gt;
&lt;p&gt;给定信任域的 JWT-SVID 签名密钥在 SPIFFE Bundle 中表示为符合 &lt;a href=&#34;https://tools.ietf.org/html/rfc7517&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 7517&lt;/a&gt; 的 JWK 条目，每个签名密钥一个条目。&lt;/p&gt;
&lt;p&gt;每个 JWK 条目的 &lt;code&gt;use&lt;/code&gt; 参数必须设置为 &lt;code&gt;jwt-svid&lt;/code&gt;。此外，每个 JWK 条目的 &lt;code&gt;kid&lt;/code&gt; 参数必须设置。&lt;/p&gt;
&lt;h3 id=&#34;使用-spiffe-bundle&#34;&gt;使用 SPIFFE Bundle&lt;/h3&gt;
&lt;p&gt;SPIFFE Bundle 可能包含许多不同类型的 JWK 条目。在使用这些条目进行验证之前，实现必须提取 JWT-SVID 特定的密钥。可以通过其 &lt;code&gt;use&lt;/code&gt; 参数的值来识别表示 JWT-SVID 签名密钥的条目，该值必须为 &lt;code&gt;jwt-svid&lt;/code&gt;。如果没有具有 &lt;code&gt;jwt-svid&lt;/code&gt; 使用值的条目，则表示 Bundle 的信任域不支持 JWT-SVID。&lt;/p&gt;
&lt;p&gt;提取 JWK 条目后，可以根据 &lt;a href=&#34;https://tools.ietf.org/html/rfc7517&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 7517&lt;/a&gt; 描述的方式直接用于 JWT-SVID 验证。&lt;/p&gt;
&lt;h2 id=&#34;安全注意事项&#34;&gt;安全注意事项&lt;/h2&gt;
&lt;p&gt;本节概述了在使用 JWT-SVID 时实施者和用户应考虑的安全注意事项。&lt;/p&gt;
&lt;h3 id=&#34;重放保护&#34;&gt;重放保护&lt;/h3&gt;
&lt;p&gt;作为承载令牌，JWT-SVID 容易受到重放攻击的影响。通过要求设置 &lt;code&gt;aud&lt;/code&gt; 和 &lt;code&gt;exp&lt;/code&gt; 声明，本规范已经采取措施改善了这种情况，但在保留与 &lt;a href=&#34;https://tools.ietf.org/html/rfc7519&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 7515&lt;/a&gt; 的验证兼容性的同时无法完全解决。理解这个风险非常重要。建议设置较短的 &lt;code&gt;exp&lt;/code&gt; 声明值。某些用户可能希望利用 &lt;code&gt;jti&lt;/code&gt; 声明，尽管增加了额外的开销。虽然本规范允许使用 &lt;code&gt;jti&lt;/code&gt; 声明，但应注意，JWT-SVID 验证器不必跟踪 &lt;code&gt;jti&lt;/code&gt; 的唯一性。&lt;/p&gt;
&lt;h3 id=&#34;受众-1&#34;&gt;受众&lt;/h3&gt;
&lt;p&gt;赋予 JWT-SVID 接收方隐式信任。发送到一个受众的令牌可以被重播到另一个受众，如果存在多个受众。例如，如果 Alice 有一个包含 Bob 和 Chuck 作为受众的令牌，并将该令牌传输给 Chuck，那么 Chuck 可以通过将相同的令牌发送给 Bob 来冒充 Alice。因此，在发行具有多个受众的 JWT-SVID 时应格外小心。强烈建议使用单个受众的 JWT-SVID 令牌，以限制重放的范围。&lt;/p&gt;
&lt;h3 id=&#34;传输安全&#34;&gt;传输安全&lt;/h3&gt;
&lt;p&gt;JWT-SVID 与其他承载令牌方案存在相同的风险，即令牌被拦截后，攻击者可以利用其可重放性获得 JWT-SVID 所授予的完全权限。虽然通过 &lt;code&gt;exp&lt;/code&gt; 声明强制令牌过期可以减轻风险，但总会存在一个漏洞窗口。因此，在传输 JWT-SVID 的通信渠道上的每个跳跃/链接都应提供机密性（例如，从工作负载到负载均衡器，从负载均衡器到另一个工作负载）。值得注意的例外是非网络链接，其具有合理的安全假设，例如在同一主机上的两个进程之间的 Unix 域套接字。&lt;/p&gt;
&lt;h2 id=&#34;附录-a-验证参考&#34;&gt;附录 A. 验证参考&lt;/h2&gt;
&lt;p&gt;以下表格为正在实施 JWT-SVID 验证器的任何人提供快速参考。如果使用现成的库，则实施者有责任确保采取了以下验证步骤。&lt;/p&gt;
&lt;p&gt;此外，请参阅 JWT-SVID Schema 获取更正式的参考。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;字段&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;要求&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;alg&lt;/td&gt;
&lt;td&gt;Header&lt;/td&gt;
&lt;td&gt;设置为算法表中的一个值。否则拒绝。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;aud&lt;/td&gt;
&lt;td&gt;Claim&lt;/td&gt;
&lt;td&gt;至少有一个值存在。用户应提前配置至少一个可接受的值。否则拒绝。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;exp&lt;/td&gt;
&lt;td&gt;Claim&lt;/td&gt;
&lt;td&gt;必须设置。不能过期（允许有一小段宽限期）。否则拒绝。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>SPIRE 联邦：验证来自不同 SPIRE 服务器的工作负载</title>
      <link>https://lib.jimmysong.io/spiffe-and-spire/architecture/federation/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/spiffe-and-spire/architecture/federation/</guid>
      <description>&lt;p&gt;本教程展示了如何对由两个不同 SPIRE 服务器识别的两个 SPIFFE 标识的工作负载进行身份验证。&lt;/p&gt;
&lt;p&gt;本文的第一部分演示了如何通过显示 SPIRE 配置文件更改和 &lt;code&gt;spire-server&lt;/code&gt; 命令来配置 SPIFFE 联邦，以设置股票报价 web 应用的前端和服务后端为例。本文的第二部分列出了你可以在此教程目录中包含的 Docker Compose 文件中运行的步骤，以显示场景的实际操作。&lt;/p&gt;
&lt;p&gt;在本教程中，你将学到如何：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;配置每个 SPIRE 服务器以使用 SPIFFE 身份验证和 Web PKI 身份验证公开其 SPIFFE 联邦捆绑点。&lt;/li&gt;
&lt;li&gt;配置 SPIRE 服务器以从彼此检索信任捆绑点。&lt;/li&gt;
&lt;li&gt;使用不同的信任域引导两个 SPIRE 服务器之间的联合。&lt;/li&gt;
&lt;li&gt;为工作负载创建注册条目，以便它们可以与其他信任域进行联合。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;先决条件&#34;&gt;先决条件&lt;/h2&gt;
&lt;p&gt;SPIFFE 联邦的基线组件包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运行版本为 1.5.1 的两个 SPIRE 服务器实例。&lt;/li&gt;
&lt;li&gt;运行版本为 1.5.1 的两个 SPIRE 代理。一个连接到一个 SPIRE 服务器，另一个连接到另一个 SPIRE 服务器。&lt;/li&gt;
&lt;li&gt;两个需要通过 mTLS 进行通信的工作负载，并使用工作负载 API 获取 SVID 和信任捆绑点。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;场景&#34;&gt;场景&lt;/h2&gt;
&lt;p&gt;假设我们有一个股票 broker（经纪人）的 web 应用程序，它希望从股票 market web 服务提供商那里获取股票报价并显示。情景如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户在浏览器中输入 broker web 应用的股票报价 URL。&lt;/li&gt;
&lt;li&gt;Web 应用的工作负载接收到请求并使用 mTLS 向股票 market 服务发出获取报价的 HTTP 请求。&lt;/li&gt;
&lt;li&gt;股票 market 服务收到请求并在响应中发送报价。&lt;/li&gt;
&lt;li&gt;Web 应用呈现使用返回的报价的股票报价页面并将其发送到浏览器。&lt;/li&gt;
&lt;li&gt;浏览器向用户显示报价。Web 应用包括一些 JavaScript 以便每隔 1 秒刷新页面，因此每秒都会执行这些步骤。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下图详细描绘了本场景。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-联邦场景&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/federation-scenario.svg&#34; alt=&#34;联邦场景&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      联邦场景
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;除了上述内容，本教程的其余部分中，我们将假设以下 &lt;a href=&#34;https://spiffe.io/docs/latest/spiffe/concepts/#trust-domain&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;信任域&lt;/a&gt; 名称用于这些示例 SPIRE 安装：&lt;code&gt;broker.example&lt;/code&gt; 和 &lt;code&gt;stockmarket.example&lt;/code&gt;。请注意，信任域不需要对应实际的 DNS 域名。此外，应用程序直接访问 WorkloadAPI 以获取 SVID 和信任捆绑点，这意味着在所描述的情景中没有代理。&lt;/p&gt;
&lt;h2 id=&#34;配置-spiffe-联邦捆绑点&#34;&gt;配置 SPIFFE 联邦捆绑点&lt;/h2&gt;
&lt;p&gt;为了使联邦工作，并且因为 web 应用程序和报价服务将使用 &lt;code&gt;mTLS&lt;/code&gt;，两个 SPIRE 服务器都需要彼此的信任捆绑点。在某种程度上，这是通过在每个 SPIRE 服务器上配置所谓的联邦捆绑点来完成的，该捆绑点提供了由其他信任域中的 SPIRE 服务器使用的 API，以获取他们要与之联合的信任域的信任捆绑点。&lt;/p&gt;
&lt;p&gt;由 SPIRE 服务器公开的联邦捆绑点可以配置为使用两种身份验证方法之一：SPIFFE 身份验证或 Web PKI 身份验证。&lt;/p&gt;
&lt;h3 id=&#34;使用-spiffe-身份验证配置联邦捆绑点&#34;&gt;使用 SPIFFE 身份验证配置联邦捆绑点&lt;/h3&gt;
&lt;p&gt;要配置 broker 的 SPIRE 服务器捆绑点端点，我们在 broker 的 SPIRE 服务器配置文件中使用了 &lt;code&gt;federation&lt;/code&gt; 部分（默认为 &lt;code&gt;server.conf&lt;/code&gt;）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-hcl&#34; data-lang=&#34;hcl&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;k&#34;&gt;server&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;     trust_domain&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;broker.example&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;k&#34;&gt;federation&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;k&#34;&gt;bundle_endpoint&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;             address&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0.0.0.0&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;             port&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;8443&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这将在运行 SPIRE 服务器的主机中的任何 IP 地址上的端口 8443 上发布联邦捆绑点。&lt;/p&gt;
&lt;p&gt;另一方面，股票 market 服务提供商的 SPIRE 服务器配置类似：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-hcl&#34; data-lang=&#34;hcl&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;k&#34;&gt;server&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;     trust_domain&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;stockmarket.example&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;k&#34;&gt;federation&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;k&#34;&gt;bundle_endpoint&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;             address&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0.0.0.0&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;             port&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;8443&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时，两个 SPIRE 服务器都暴露了它们的联邦捆绑点以提供它们的信任捆绑点，但它们都不知道如何到达彼此的联邦捆绑点。&lt;/p&gt;
&lt;h3 id=&#34;使用-web-pki-身份验证配置联邦捆绑点&#34;&gt;使用 Web PKI 身份验证配置联邦捆绑点&lt;/h3&gt;
&lt;p&gt;我们将假设仅 broker 的 SPIRE 服务器将使用 Web PKI 身份验证来配置其联邦捆绑点。股票 market SPIRE 服务器仍将使用 SPIFFE 身份验证。因此，股票 market SPIRE 服务器配置与前一节中所见相同。&lt;/p&gt;
&lt;p&gt;然后，要配置 broker 的 SPIRE 服务器捆绑点端点，我们将 &lt;code&gt;federation&lt;/code&gt; 部分配置如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-hcl&#34; data-lang=&#34;hcl&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;k&#34;&gt;server&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;     trust_domain&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;broker.example&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;k&#34;&gt;federation&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;k&#34;&gt;bundle_endpoint&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;             address&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0.0.0.0&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;             port&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;443&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;k&#34;&gt;acme&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;                 domain_name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;broker.example&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;                 email&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;some@email.com&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;                 tos_accepted&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这将在任何 IP 地址上的端口 443 上发布联邦捆绑点。我们使用端口 443，因为我们演示了使用 Let&amp;rsquo;s Encrypt 作为我们的 ACME 提供商（如果你要使用其他提供商，则必须设置 &lt;code&gt;directory_url&lt;/code&gt; 可配置）。请注意，&lt;code&gt;tos_accepted&lt;/code&gt; 设置为 &lt;code&gt;true&lt;/code&gt;，这意味着我们接受了我们的 ACME 提供商的服务条款，这在使用 Let&amp;rsquo;s Encrypt 时是必要的。&lt;/p&gt;
&lt;p&gt;要使使用 Web PKI 的 SPIFFE 联邦正常工作，你必须拥有为 &lt;code&gt;domain_name&lt;/code&gt;（在我们的示例中为 &lt;code&gt;broker.example&lt;/code&gt;）指定的 DNS 域名，并且该域名必须解析到公开联邦捆绑点的 SPIRE 服务器 IP 地址。&lt;/p&gt;
&lt;h2 id=&#34;配置-spire-服务器以从彼此检索信任捆绑点&#34;&gt;配置 SPIRE 服务器以从彼此检索信任捆绑点&lt;/h2&gt;
&lt;p&gt;在配置联邦端点后，启用 SPIFFE 联邦的下一步是配置 SPIRE 服务器以查找其他信任域的信任捆绑点。在 &lt;code&gt;server.conf&lt;/code&gt; 中的 &lt;code&gt;federates_with&lt;/code&gt; 配置选项是你指定另一个信任域的端点的地方。在使用不同的身份验证方法时，该部分的配置有一些细微的差异，根据每个端点配置文件的要求。&lt;/p&gt;
&lt;h3 id=&#34;使用-spiffe-身份验证配置信任捆绑点位置https_spiffe&#34;&gt;使用 SPIFFE 身份验证配置信任捆绑点位置（https_spiffe）&lt;/h3&gt;
&lt;p&gt;如前所述，股票 market 服务提供商的 SPIRE 服务器将其联邦端点监听在任何 IP 地址的端口 &lt;code&gt;8443&lt;/code&gt; 上。我们还假设 &lt;code&gt;spire-server-stock&lt;/code&gt; 是一个解析为股票 market 服务的 SPIRE 服务器 IP 地址的 DNS 名称。 （这里的 Docker Compose 演示使用主机名 &lt;code&gt;spire-server-stock&lt;/code&gt;，但在典型的使用中，你会指定一个 FQDN。）然后，broker 的 SPIRE 服务器必须配置以下 &lt;code&gt;federates_with&lt;/code&gt; 部分：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-hcl&#34; data-lang=&#34;hcl&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;k&#34;&gt;server&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;     trust_domain&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;broker.example&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;k&#34;&gt;federation&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;k&#34;&gt;bundle_endpoint&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;             address&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0.0.0.0&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;             port&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;8443&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;k&#34;&gt;federates_with&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;stockmarket.example&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;             bundle_endpoint_url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://spire-server-stock:8443&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;k&#34;&gt;bundle_endpoint_profile&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https_spiffe&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;                 endpoint_spiffe_id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;spiffe://stockmarket.example/spire/server&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在，broker 的 SPIRE 服务器知道在哪里找到可以用于验证包含来自 &lt;code&gt;stockmarket.example&lt;/code&gt; 信任域的身份的信任捆绑点。&lt;/p&gt;
&lt;p&gt;另一方面，股票 market 服务提供商的 SPIRE 服务器必须以类似的方式进行配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-hcl&#34; data-lang=&#34;hcl&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;k&#34;&gt;server&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;     trust_domain&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;stockmarket.example&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;k&#34;&gt;federation&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;k&#34;&gt;bundle_endpoint&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;             address&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0.0.0.0&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;             port&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;8443&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;k&#34;&gt;federates_with&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;broker.example&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;             bundle_endpoint_url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://spire-server-broker:8443&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;k&#34;&gt;bundle_endpoint_profile&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https_spiffe&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;                 endpoint_spiffe_id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;spiffe://broker.example/spire/server&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;请注意，指定了 &amp;ldquo;https_spiffe&amp;rdquo; 配置文件，指示了联邦捆绑点的预期 SPIFFE ID。指定 &lt;code&gt;server.conf&lt;/code&gt; 的 &lt;code&gt;federation&lt;/code&gt; 部分和 &lt;code&gt;federates_with&lt;/code&gt; 子部分是配置 SPIFFE 联邦所需的全部内容。要完成启用 SPIFFE 联邦，我们需要使用下面描述的 &lt;code&gt;spire-server&lt;/code&gt; 命令来引导信任捆绑点和注册工作负载。&lt;/p&gt;
&lt;h3 id=&#34;使用-web-pki-身份验证配置信任捆绑点位置https_web&#34;&gt;使用 Web PKI 身份验证配置信任捆绑点位置（https_web）&lt;/h3&gt;
&lt;p&gt;如前所述，在这种备选方案中，我们假设只有 broker 的 SPIRE 服务器将使用 Web PKI 身份验证来配置其联邦端点，因此 broker 服务器的 &lt;code&gt;federates_with&lt;/code&gt; 配置与前一节中所见相同。然而，股票 market 服务提供商的 SPIRE 服务器需要一个不同的配置，它使用 &amp;ldquo;https_web&amp;rdquo; 配置文件而不是 &amp;ldquo;https_spiffe&amp;rdquo;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-hcl&#34; data-lang=&#34;hcl&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;k&#34;&gt;server&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;     trust_domain&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;stockmarket.example&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;k&#34;&gt;federation&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;k&#34;&gt;bundle_endpoint&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;             address&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0.0.0.0&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;             port&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;8443&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;k&#34;&gt;federates_with&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;broker.example&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;             bundle_endpoint_url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://spire-server-broker:8443&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;k&#34;&gt;bundle_endpoint_profile&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https_web&amp;#34;&lt;/span&gt; {}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以注意到 &amp;ldquo;https_web&amp;rdquo; 配置文件不需要额外的配置设置。端点使用安装在操作系统中的相同公共 CA 证书进行身份验证。&lt;/p&gt;
&lt;h2 id=&#34;引导联邦&#34;&gt;引导联邦&lt;/h2&gt;
&lt;p&gt;我们已经配置了 SPIRE 服务器的联邦端点地址，但这并不足以使联邦正常工作。为了使 SPIRE 服务器能够从彼此获取信任捆绑点，它们首先需要彼此的信任捆绑点，因为它们必须对试图访问联邦端点的联合服务器的 SPIFFE 身份进行身份验证。一旦联邦被引导，就可以使用当前信任捆绑点通过联邦端点 API 获取信任捆绑点更新。&lt;/p&gt;
&lt;p&gt;引导工作是通过使用 SPIRE Server 命令 &lt;code&gt;bundle show&lt;/code&gt; 和 &lt;code&gt;bundle set&lt;/code&gt; 来完成的。&lt;/p&gt;
&lt;h3 id=&#34;获取引导信任捆绑点&#34;&gt;获取引导信任捆绑点&lt;/h3&gt;
&lt;p&gt;假设我们想要获取 broker 的 SPIRE 服务器信任捆绑点。在运行 broker 的 SPIRE 服务器的节点上运行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;broker&amp;gt; spire-server bundle show -format spiffe &amp;gt; broker.example.bundle
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这会将信任捆绑点保存在 &lt;code&gt;broker.example.bundle&lt;/code&gt; 文件中。然后，broker 必须将此文件的副本提供给股票 market 服务人员，以便他们可以将此信任捆绑点存储在他们的 SPIRE 服务器上，并将其与 &lt;code&gt;broker.example&lt;/code&gt; 信任域关联起来。要做到这一点，股票 market 服务人员必须在他们运行 SPIRE 服务器的节点上运行以下命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;stock-market&amp;gt; spire-server bundle &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; -format spiffe -id spiffe://broker.example -path /some/path/broker.example.bundle
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时，股票 market 服务的 SPIRE 服务器可以验证具有 &lt;code&gt;broker.example&lt;/code&gt; 信任域的 SPIFFE ID 的 SVID。但是，broker 的 SPIRE 服务器尚无法验证具有 &lt;code&gt;stockmarket.example&lt;/code&gt; 信任域的 SPIFFE ID 的 SVID。要使此成为可能，股票 market 人员必须在他们运行 SPIRE 服务器的节点上运行以下命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;stock-market&amp;gt; spire-server bundle show -format spiffe &amp;gt; stockmarket.example.bundle
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后，股票 market 人员必须将此文件的副本提供给 broker，以便他们可以将此信任捆绑点存储在他们的 SPIRE 服务器上，并将其与 &lt;code&gt;stockmarket.example&lt;/code&gt; 信任域关联起来。要做到这一点，broker 必须在他们运行 SPIRE 服务器的节点上运行以下命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;broker&amp;gt; spire-server bundle &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; -format spiffe -id spiffe://stockmarket.example -path /some/path/stockmarket.example.bundle
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在，两台 SPIRE 服务器都可以验证具有彼此信任域的 SPIFFE ID 的 SVID，因此两者可以开始从彼此的联邦端点获取信任捆绑点更新。此外，从现在起，他们可以创建用于联合的注册条目，如下一节所示。&lt;/p&gt;
&lt;p&gt;请注意，在 broker 的 SPIRE 服务器为其联邦捆绑点使用 Web PKI 身份验证时，不需要创建 &lt;code&gt;broker.example.bundle&lt;/code&gt; 文件（后来由股票 market 服务导入）。&lt;/p&gt;
&lt;h2 id=&#34;为联邦创建注册条目&#34;&gt;为联邦创建注册条目&lt;/h2&gt;
&lt;p&gt;现在，SPIRE 服务器具有了彼此的信任捆绑点，让我们看看它们如何创建用于联合的注册条目。&lt;/p&gt;
&lt;p&gt;为简化起见，我们假设股票 market Web 应用程序和行情服务都在运行在 Linux 主机上，一个属于股票 market 组织，另一个属于 broker。由于它们使用 SPIRE，每个 Linux 主机上还安装了一个 SPIRE 代理。除此之外，Web 应用程序是使用 &lt;code&gt;webapp&lt;/code&gt; 用户运行的，行情服务是使用 &lt;code&gt;quotes-service&lt;/code&gt; 用户运行的。&lt;/p&gt;
&lt;p&gt;在 broker 的 SPIRE Server 节点上，broker 必须创建一个注册条目。&lt;code&gt;-federatesWith&lt;/code&gt; 标志是必需的，以启用 SPIFFE 联邦：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;broker&amp;gt; spire-server entry create &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;   -parentID &amp;lt;SPIRE 代理的 SPIFFE ID&amp;gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;   -spiffeID spiffe://broker.example/webapp &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;   -selector unix:user:webapp &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;   -federatesWith &lt;span class=&#34;s2&#34;&gt;&amp;#34;spiffe://stockmarket.example&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过指定 &lt;code&gt;-federatesWith&lt;/code&gt; 标志，创建了此注册条目后，当 Web 应用程序的 SPIRE 服务器请求 SVID 时，它将从 broker 的 SPIRE 服务器获取一个具有 &lt;code&gt;spiffe://broker.example/webapp&lt;/code&gt; 身份的 SVID，并附带与 &lt;code&gt;stockmarket.example&lt;/code&gt; 信任域关联的信任捆绑点。&lt;/p&gt;
&lt;p&gt;在股票 market 服务的一侧，他们必须创建一个注册条目，如下所示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;stock-market&amp;gt; spire-server entry create &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;   -parentID &amp;lt;SPIRE 代理的 SPIFFE ID&amp;gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;   -spiffeID spiffe://stockmarket.example/quotes-service &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;   -selector unix:user:quotes-service &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;   -federatesWith &lt;span class=&#34;s2&#34;&gt;&amp;#34;spiffe://broker.example&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;类似地，创建了此注册条目后，当行情服务请求 SVID 时，它将获得一个具有 &lt;code&gt;spiffe://stockmarket.example/quotes-service&lt;/code&gt; 身份的 SVID，并附带与 &lt;code&gt;broker.example&lt;/code&gt; 信任域关联的信任捆绑点。&lt;/p&gt;
&lt;p&gt;以上就是全部内容。现在，所有的组件都已就绪，可以使联邦正常工作，并演示 Web 应用程序如何在具有不同信任域的身份的情况下与行情服务通信。&lt;/p&gt;
&lt;h2 id=&#34;使用-spiffe-身份验证的联邦示例&#34;&gt;使用 SPIFFE 身份验证的联邦示例&lt;/h2&gt;
&lt;p&gt;本节将解释如何使用 Docker Compose 尝试此教程中描述的 SPIFFE 身份验证场景的示例实现。&lt;/p&gt;
&lt;p&gt;尽管此处没有显示出来，但你可以对 Web PKI 身份验证部分中显示的更改进行更改以尝试 Web PKI 场景。请记住，要配置 Web PKI，&lt;code&gt;domain_name&lt;/code&gt; 指定的 FQDN 必须由你拥有，并且可以通过 DNS 通过互联网进行解析。&lt;/p&gt;
&lt;h3 id=&#34;要求&#34;&gt;要求&lt;/h3&gt;
&lt;p&gt;本教程的所需文件可以在 &lt;a href=&#34;https://github.com/spiffe/spire-tutorials&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/spiffe/spire-tutorials&lt;/a&gt; 的 &lt;code&gt;docker-compose/federation&lt;/code&gt; 目录中找到。如果你尚未克隆该存储库，请立即执行此操作。&lt;/p&gt;
&lt;p&gt;在继续之前，请查看以下系统要求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;64 位 Linux 或 macOS 环境&lt;/li&gt;
&lt;li&gt;安装了 &lt;a href=&#34;https://docs.docker.com/get-docker/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Docker&lt;/a&gt; 和 &lt;a href=&#34;https://docs.docker.com/compose/install/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Docker Compose&lt;/a&gt;（Docker Compose 包含在 macOS Docker Desktop 中）&lt;/li&gt;
&lt;li&gt;安装了 &lt;a href=&#34;https://golang.org/dl/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go&lt;/a&gt; 1.14.4 或更高版本&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;构建&#34;&gt;构建&lt;/h3&gt;
&lt;p&gt;确保当前工作目录是 &lt;code&gt;.../spire-tutorials/docker-compose/federation&lt;/code&gt;，并运行以下命令以创建 Docker Compose 所需的文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ ./build.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;运行&#34;&gt;运行&lt;/h3&gt;
&lt;p&gt;运行以下命令以启动 SPIRE 服务器和应用程序：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ docker-compose up -d
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;启动-spire-agents&#34;&gt;启动 SPIRE Agents&lt;/h3&gt;
&lt;p&gt;运行以下命令以启动 SPIRE Agents：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ ./1-start-spire-agents.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;引导联邦-1&#34;&gt;引导联邦&lt;/h3&gt;
&lt;p&gt;运行以下命令以引导联邦：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ ./2-bootstrap-federation.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;创建工作负载注册条目&#34;&gt;创建工作负载注册条目&lt;/h3&gt;
&lt;p&gt;运行以下命令以创建工作负载注册条目：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ ./3-create-registration-entries.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行此脚本后，应用程序可能需要几秒钟才能收到其 SVID（SPIFFE 身份验证信息）和信任捆绑包。&lt;/p&gt;
&lt;h3 id=&#34;在浏览器中查看场景工作&#34;&gt;在浏览器中查看场景工作&lt;/h3&gt;
&lt;p&gt;在浏览器中打开 http://localhost:8080/quotes，你应该看到一个显示每秒更新的随机生成的虚假股票报价的网格。&lt;/p&gt;
&lt;h3 id=&#34;查看配置&#34;&gt;查看配置&lt;/h3&gt;
&lt;p&gt;要查看经纪人的 SPIRE 服务器配置，可以运行以下命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ docker-compose &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; spire-server-broker cat conf/server/server.conf
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你应该会看到：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-hcl&#34; data-lang=&#34;hcl&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;k&#34;&gt;server&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;     bind_address&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0.0.0.0&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;     bind_port&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;8081&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;     socket_path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/tmp/spire-server/private/api.sock&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;     trust_domain&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;broker.example&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;     data_dir&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/opt/spire/data/server&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;     log_level&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;DEBUG&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;     log_file&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/opt/spire/server.log&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;     default_svid_ttl&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;1h&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;     ca_subject&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;         country&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;US&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;         organization&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SPIFFE&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;         common_name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;k&#34;&gt;federation&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;k&#34;&gt;bundle_endpoint&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;             address&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0.0.0.0&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;             port&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;8443&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;k&#34;&gt;federates_with&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;stockmarket.example&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;             bundle_endpoint_url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;https://spire-server-stock:8443&amp;gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;k&#34;&gt;bundle_endpoint_profile&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https_spiffe&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;                 endpoint_spiffe_id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;spiffe://stockmarket.example/spire/server&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;k&#34;&gt;plugins&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;k&#34;&gt;DataStore&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;sql&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;k&#34;&gt;plugin_data&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;             database_type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;sqlite3&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;             connection_string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/opt/spire/data/server/datastore.sqlite3&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;k&#34;&gt;NodeAttestor&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;x509pop&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;k&#34;&gt;plugin_data&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;       ca_bundle_path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/opt/spire/conf/server/agent-cacert.pem&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;k&#34;&gt;KeyManager&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;memory&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;         plugin_data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; {}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;要查看股票 market 的 SPIRE 服务器配置，可以运行以下命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ docker-compose &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; spire-server-stock cat conf/server/server.conf
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你应该会看到：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-hcl&#34; data-lang=&#34;hcl&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;k&#34;&gt;server&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;     bind_address&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0.0.0.0&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;     bind_port&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;8081&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;     socket_path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/tmp/spire-server/private/api.sock&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;     trust_domain&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;stockmarket.example&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;     data_dir&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/opt/spire/data/server&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;     log_level&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;DEBUG&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;     log_file&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/opt/spire/server.log&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;     default_svid_ttl&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;1h&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;     ca_subject&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;         country&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;US&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;         organization&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SPIFFE&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;         common_name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;k&#34;&gt;federation&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;k&#34;&gt;bundle_endpoint&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;             address&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0.0.0.0&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;             port&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;8443&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;k&#34;&gt;federates_with&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;broker.example&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;             bundle_endpoint_url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://spire-server-broker:8443&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;k&#34;&gt;bundle_endpoint_profile&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https_spiffe&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;                 endpoint_spiffe_id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;spiffe://broker.example/spire/server&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;k&#34;&gt;plugins&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;k&#34;&gt;DataStore&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;sql&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;k&#34;&gt;plugin_data&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;             database_type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;sqlite3&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;             connection_string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/opt/spire/data/server/datastore.sqlite3&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;k&#34;&gt;NodeAttestor&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;x509pop&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;k&#34;&gt;plugin_data&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;       ca_bundle_path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/opt/spire/conf/server/agent-cacert.pem&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;k&#34;&gt;KeyManager&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;memory&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;         plugin_data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; {}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;查看注册条目&#34;&gt;查看注册条目&lt;/h3&gt;
&lt;p&gt;要查看经纪人的 SPIRE 服务器注册条目，可以运行以下命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ docker-compose &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; spire-server-broker bin/spire-server entry show
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你应该会看到类似以下内容：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; Found 1 entry
 Entry ID      : 2d799235-ddca-4088-ba6f-bf54d2af918f
 SPIFFE ID     : spiffe://broker.example/webapp
 Parent ID     : spiffe://broker.example/spire/agent/x509pop/4f9238aaa7a93cf96ca3d6060abe27bc51a267e7
 Revision      : 0
 TTL           : 3600
 Selector      : unix:user:root
 FederatesWith : spiffe://stockmarket.example
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;要查看股票 market 的 SPIRE 服务器注册条目，可以运行以下命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ docker-compose &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; spire-server-stock bin/spire-server entry show
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你应该会看到类似以下内容：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; Found 1 entry
 Entry ID      : e42e8d6b-0a0a-4e38-b544-08510c35cbbe
 SPIFFE ID     : spiffe://stockmarket.example/quotes-service
 Parent ID     : spiffe://stockmarket.example/spire/agent/x509pop/50686366996ece3ca8e528765af685fe81f81435
 Revision      : 0
 TTL           : 3600
 Selector      : unix:user:root
 FederatesWith : spiffe://broker.example
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;清理&#34;&gt;清理&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; $ docker-compose down
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>安装 SPIRE 代理</title>
      <link>https://lib.jimmysong.io/spiffe-and-spire/installation/install-agent/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/spiffe-and-spire/installation/install-agent/</guid>
      <description>&lt;p&gt;本文指导你如何在 Linux 和 Kubernetes 上安装 SPIRE Agent。&lt;/p&gt;
&lt;h2 id=&#34;步骤-1获取-spire-二进制文件&#34;&gt;步骤 1：获取 SPIRE 二进制文件&lt;/h2&gt;
&lt;p&gt;可以在 &lt;a href=&#34;https://spiffe.io/downloads/#spire-releases&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 下载页面&lt;/a&gt; 找到预构建的 SPIRE 发行版。tarball 包含服务器和 Agent 二进制文件。&lt;/p&gt;
&lt;p&gt;如果愿意，也可以从源代码 &lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/CONTRIBUTING.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;构建 SPIRE&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;步骤-2安装服务器和-agent&#34;&gt;步骤 2：安装服务器和 Agent&lt;/h2&gt;
&lt;p&gt;本入门指南描述了如何在同一节点上安装服务器和 Agent。在典型的生产部署中，服务器安装在一个节点上，而一个或多个 Agent 安装在不同的节点上。&lt;/p&gt;
&lt;p&gt;要安装服务器和 Agent：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;从 &lt;a href=&#34;https://spiffe.io/downloads/#spire-releases&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 下载页面&lt;/a&gt; 获取最新的 tarball，然后使用以下命令将其解压到 &lt;code&gt;/opt/spire&lt;/code&gt; 目录中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;wget https://github.com/spiffe/spire/releases/download/v1.8.2/spire-1.8.2-linux-amd64-musl.tar.gz
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;tar zvxf spire-1.8.2-linux-amd64-musl.tar.gz
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo cp -r spire-1.8.2/. /opt/spire/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为了方便起见，将 &lt;code&gt;spire-server&lt;/code&gt; 和 &lt;code&gt;spire-agent&lt;/code&gt; 添加到 &lt;code&gt;$PATH&lt;/code&gt; 中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ln -s /opt/spire/bin/spire-server /usr/bin/spire-server
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ln -s /opt/spire/bin/spire-agent /usr/bin/spire-agent
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;步骤-3配置-agent&#34;&gt;步骤 3：配置 Agent&lt;/h2&gt;
&lt;p&gt;安装 SPIRE Agent 后，需要根据你的环境进行配置。有关如何配置 SPIRE 的详细信息，请参阅 &lt;a href=&#34;https://spiffe.io/docs/latest/spire/using/configuring/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;配置 SPIRE&lt;/a&gt;，特别是节点验证和工作负载验证。&lt;/p&gt;
&lt;p&gt;请注意，SPIRE Agent 在修改其配置后必须重新启动，以使更改生效。&lt;/p&gt;
&lt;p&gt;如果尚未安装 SPIRE Server，请参阅 &lt;a href=&#34;../install-server/&#34;&gt;安装 SPIRE Server&lt;/a&gt; 了解如何安装 SPIRE Server。&lt;/p&gt;
&lt;h2 id=&#34;在-kubernetes-上安装-spire-agents&#34;&gt;在 Kubernetes 上安装 SPIRE Agents&lt;/h2&gt;
&lt;p&gt;必须从包含用于配置的 .yaml 文件的目录中运行所有命令。有关详细信息，请参阅 SPIRE Server 安装指南的 &lt;a href=&#34;https://spiffe.io/docs/latest/spire/installing/install-server/#section-1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Obtain the Required Files&lt;/a&gt; 部分。&lt;/p&gt;
&lt;p&gt;要在 Kubernetes 上安装 SPIRE Agents，你需要执行以下操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建 Agent 服务账号&lt;/li&gt;
&lt;li&gt;创建 Agent ConfigMap&lt;/li&gt;
&lt;li&gt;创建 Agent DaemonSet&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;有关详细信息，请参阅以下各节。&lt;/p&gt;
&lt;h3 id=&#34;步骤-1创建-agent-服务账号&#34;&gt;步骤 1：创建 Agent 服务账号&lt;/h3&gt;
&lt;p&gt;将 &lt;code&gt;agent-account.yam&lt;/code&gt;l 配置文件应用于在 spire 命名空间中创建名为 spire-agent 的服务账号：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -f agent-account.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了允许代理读取 kubelet API 以执行工作负载验证，必须创建一个 ClusterRole，授予 Kubernetes RBAC 适当的权限，并将 ClusterRoleBinding 关联到上一步创建的服务账号。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;通过应用 &lt;code&gt;agent-cluster-role.yaml&lt;/code&gt; 配置文件来创建名为 &lt;code&gt;spire-agent-cluster-role&lt;/code&gt; 的 ClusterRole 和相应的 ClusterRoleBinding：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -f agent-cluster-role.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为了确认成功创建，请验证 ClusterRole 是否出现在以下命令的输出中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl get clusterroles --namespace spire &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep spire
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;步骤-2创建-agent-configmap&#34;&gt;步骤 2：创建 Agent ConfigMap&lt;/h3&gt;
&lt;p&gt;将 &lt;code&gt;agent-configmap.yaml&lt;/code&gt; 配置文件应用于创建代理 ConfigMap。这将作为 &lt;code&gt;agent.conf&lt;/code&gt; 文件挂载，用于确定 SPIRE Agent 的配置。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -f agent-configmap.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;agent-configmap.yaml&lt;/code&gt; 文件指定了许多重要的目录，特别是 &lt;code&gt;/run/spire/sockets&lt;/code&gt; 和 &lt;code&gt;/run/spire/config&lt;/code&gt;。这些目录在部署代理容器时绑定。&lt;/p&gt;
&lt;p&gt;请参阅 &lt;a href=&#34;https://spiffe.io/docs/latest/spire/using/configuring/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;配置 SPIRE&lt;/a&gt; 部分，详细了解如何配置 SPIRE Agent，特别是节点验证和工作负载验证。&lt;/p&gt;
&lt;p&gt;请注意，一旦修改了 SPIRE Agent 的配置，必须重新启动该 Agent 才能使更改生效。&lt;/p&gt;
&lt;h3 id=&#34;步骤-3创建-agent-daemonset&#34;&gt;步骤 3：创建 Agent DaemonSet&lt;/h3&gt;
&lt;p&gt;代理以 DaemonSet 形式部署，每个 Kubernetes 工作节点上运行一个代理。&lt;/p&gt;
&lt;p&gt;通过应用 &lt;code&gt;agent-daemonset.yaml&lt;/code&gt; 配置来部署 SPIRE 代理。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -f agent-daemonset.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这将在 spire 命名空间中创建一个名为 spire-agent 的 DaemonSet，并在 spire-server 旁边启动一个 spire-agent pod，如以下两个命令的输出所示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl get daemonset --namespace spire
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NAME          DESIRED   CURRENT   READY   UP-TO-DATE   AVAILABLE   NODE SELECTOR   AGE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;spire-agent   &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;         &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;         &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;       &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;            &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;           &amp;lt;none&amp;gt;          6m45s
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl get pods --namespace spire
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NAME                           READY   STATUS    RESTARTS   AGE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;spire-agent-88cpl              1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          6m45s
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;spire-server-0                 1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          103m
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当代理部署时，绑定以下表格中总结的卷：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;卷&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;挂载位置&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;spire-config&lt;/td&gt;
&lt;td&gt;在步骤 2 中创建的 spire-agent configmap。&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/run/spire/config&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;spire-sockets&lt;/td&gt;
&lt;td&gt;hostPath，将与在同一工作节点上运行的所有其他 pod 共享。它包含一个 UNIX 域套接字，用于工作负载与代理 API 通信。&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/run/spire/sockets&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>使用 SVID</title>
      <link>https://lib.jimmysong.io/spiffe-and-spire/configuration/svids/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/spiffe-and-spire/configuration/svids/</guid>
      <description>&lt;p&gt;本文指导你如何编写与 SPIFFE SVID 相关的代码。&lt;/p&gt;
&lt;p&gt;SPIRE 等符合 SPIFFE 的身份提供者将通过 SPIFFE Workload API 公开 SPIFFE 可验证身份文档（SVID）。工作负载可以使用从此 API 检索到的 SVID 来验证消息的来源或在两个工作负载之间建立相互 TLS 安全通道。&lt;/p&gt;
&lt;h2 id=&#34;与-workload-api-交互&#34;&gt;与 Workload API 交互&lt;/h2&gt;
&lt;p&gt;开发需要与 SPIFFE 进行交互的新工作负载的开发人员可以直接与 SPIFFE Workload API 进行交互，以便：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;检索工作负载的身份，描述为 SPIFFE ID，例如 &lt;code&gt;spiffe://prod.acme.com/billing/api&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;代表工作负载生成短期密钥和证书，具体包括：
&lt;ul&gt;
&lt;li&gt;与该 SPIFFE ID 相关联的私钥，可用于代表工作负载签署数据。&lt;/li&gt;
&lt;li&gt;对应的短期 X.509 证书 - 一种称为 X509-SVID 的证书。该证书可用于建立 TLS 或以其他方式对其他工作负载进行身份验证。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一组证书 - 称为信任捆绑包（trust bundle） - 工作负载可以使用它来验证同一信任域或联合信任域中的另一个工作负载呈现的 X.509-SVID。&lt;/li&gt;
&lt;li&gt;生成或验证代表工作负载或同一信任域或联合信任域中另一个工作负载的 JSON Web Token（JWT-SVID）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Workload API 不需要任何显式的身份验证（如密钥）。相反，SPIFFE 规范将身份验证工作留给 SPIFFE Workload API 的实现来确定。在 SPIRE 的情况下，这是通过检查 SPIRE 代理在工作负载调用 API 时收集的 Unix 内核元数据来实现的。&lt;/p&gt;
&lt;p&gt;该 API 是基于 gRPC 的 API，派生自 &lt;a href=&#34;https://github.com/spiffe/go-spiffe/blob/main/v2/proto/spiffe/workload/workload.proto&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;protobuf&lt;/a&gt;。&lt;a href=&#34;https://grpc.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC 项目&lt;/a&gt; 提供了从 protobuf 生成各种语言的客户端库的工具。&lt;/p&gt;
&lt;h3 id=&#34;在-go-中使用-svid&#34;&gt;在 Go 中使用 SVID&lt;/h3&gt;
&lt;p&gt;如果你在使用 Go 进行开发，SPIFFE 项目维护了一个 Go 客户端库，提供以下功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个命令行实用程序，用于解析和验证 X.509 证书中编码的 SPIFFE 身份，如 SPIFFE 标准中所述。&lt;/li&gt;
&lt;li&gt;一个客户端库，提供与 SPIFFE Workload API 的交互界面。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你可以在 &lt;a href=&#34;https://github.com/spiffe/go-spiffe&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt; 上找到该库以及 GoDoc 的链接。&lt;/p&gt;
&lt;h2 id=&#34;使用-spiffe-helper-实用程序&#34;&gt;使用 SPIFFE Helper 实用程序&lt;/h2&gt;
&lt;p&gt;SPIFFE Helper 实用程序是一个通用实用程序，用于构建或与无法直接写入 Workload API 的应用程序集成时非常有用。大体上，该实用程序能够：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;获取用于验证 X.509-SVID 的 X.509-SVID、密钥和信任捆绑包（证书链），并将它们写入磁盘上的特定位置。&lt;/li&gt;
&lt;li&gt;启动一个子进程，该子进程可以使用这些密钥和证书。&lt;/li&gt;
&lt;li&gt;主动监视其过期时间，并根据需要从 Workload API 请求刷新的证书和密钥。&lt;/li&gt;
&lt;li&gt;一旦获取到更换的证书，向任何已启动的子进程发送信号。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;使用-spire-agent&#34;&gt;使用 SPIRE Agent&lt;/h2&gt;
&lt;p&gt;SPIRE Agent 二进制文件可用作作为 SPIFFE Workload API 的实现时的 SPIRE 部署的一部分，但它也可以作为 Workload API 的客户端运行，并提供一些简单的实用程序与其进行交互以检索 SPIFFE 凭据。&lt;/p&gt;
&lt;p&gt;例如，运行以下命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo -u webapp ./spire-agent api fetch x509 -socketPath /run/spire/sockets/agent.sock -write /tmp/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;将会：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;连接到 Unix 域套接字 &lt;code&gt;/run/spire/sockets/agent.sock&lt;/code&gt; 上的 Workload API（即使 SPIRE 不提供 API）。&lt;/li&gt;
&lt;li&gt;检索与该进程所运行的用户相关联的任何身份（在此示例中为 &lt;code&gt;webapp&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;将每个身份关联的 X.509-SVID、私钥写入 &lt;code&gt;/tmp/&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;将用于验证在该信任域下颁发的 X.509-SVID 的信任捆绑包（证书链）写入 &lt;code&gt;/tmp/&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;有关相关命令的完整列表，请参阅 &lt;a href=&#34;https://spiffe.io/docs/latest/deploying/spire_agent/#command-line-options&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE Agent 文档&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>收益</title>
      <link>https://lib.jimmysong.io/spiffe/benefits/</link>
      <pubDate>Fri, 07 Oct 2022 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/spiffe/benefits/</guid>
      <description>&lt;p&gt;本章从业务和技术的角度解释了在基础设施中部署 SPIFFE 和 SPIRE 的好处。&lt;/p&gt;
&lt;h2 id=&#34;任何人任何地方都适用&#34;&gt;任何人任何地方都适用&lt;/h2&gt;
&lt;p&gt;SPIFFE 和 SPIRE 旨在加强对软件组件的识别，以一种通用的方式，任何人在任何地方都可以在分布式系统中加以利用。现代基础设施的技术环境是错综复杂的。环境在硬件和软件投资的混合下变得越来越不一样。通过对系统定义、证明和维护软件身份标准化的方式来维护软件安全，无论系统部署在哪里，也无论谁来部署这些系统，都会带来许多好处。&lt;/p&gt;
&lt;p&gt;对于专注于提高业务便利性和回报的企业领导人来说，SPIFFE 和 SPIRE 可以大大降低管理和签发加密身份文件（如 X.509 证书）的开销，开发人员无需了解服务间通信所需的身份和认证技术，从而加速开发和部署。&lt;/p&gt;
&lt;p&gt;对于专注于提供强大、安全和可互操作产品的服务提供商和软件供应商来说，SPIFFE 和 SPIRE 解决了在将许多解决方案互连到最终产品时普遍存在的关键身份问题。例如，SPIFFE 可以作为产品的 TLS 功能和用户管理/认证功能的基础，一举两得。还有，SPIFFE 可以取代管理和发行平台访问的 API 令牌的需要，&lt;strong&gt;免费&lt;/strong&gt;带来令牌轮换，并消除存储和管理访问所述令牌的客户负担。&lt;/p&gt;
&lt;p&gt;对于希望不仅加强传输中的数据安全，而且实现监管合规并解决其信任根源问题的安全从业人员来说，SPIFFE 和 SPIRE 致力于在不信任的环境中提供相互认证，而不需要交换秘密。安全和管理边界可以很容易地划定，并且在策略允许的情况下，可以跨越这些边界进行通信。&lt;/p&gt;
&lt;p&gt;对于需要身份管理抽象的开发人员、运维和 DevOps 从业人员，以及需要与现代云原生服务和解决方案互操作的工作负载和应用程序，SPIFFE 和 SPIRE 在整个软件开发生命周期中与许多其他工具兼容，以提供可靠的产品。开发人员可以继续他们的工作，直接进入业务逻辑，而不必担心证书、私钥和 JavaScript Web Token（JWT）等烦人的问题。&lt;/p&gt;
&lt;h2 id=&#34;对于企业领导人&#34;&gt;对于企业领导人&lt;/h2&gt;
&lt;h3 id=&#34;现代的组织有现代的需求&#34;&gt;现代的组织有现代的需求&lt;/h3&gt;
&lt;p&gt;在今天的商业环境中，通过差异化的应用和服务快速提供创新的客户体验是保持竞争优势的必要条件。因此，企业见证了应用程序和服务的架构、构建和部署方式的变化。诸如云和容器等新技术帮助企业更快、更大规模地发布。服务需要高速构建并部署在大量的平台上。随着开发速度的加快，这些系统变得越来越相互依赖和相互联系，以提供一致的客户体验。&lt;/p&gt;
&lt;p&gt;组织在实现高速发展和获得市场份额或任务保证方面可能会受到抑制，主要原因是合规性、专业知识的储备以及团队 / 组织之间和现有解决方案内的互操作性挑战。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;互操作性的影响&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;随着系统的发展，对互操作性的需求也在无限地增长。脱节的团队建立的服务是孤立的，互不相识，尽管他们最终需要意识到彼此的存在。收购发生时，新的或从未见过的系统需要被整合到现有的系统中。商业关系的建立，需要与可能存在于堆栈深处的服务建立新的沟通渠道。所有这些挑战都围绕着“我如何以安全的方式将所有这些服务连接在一起，每个服务都有自己独特的属性和历史？”&lt;/p&gt;
&lt;p&gt;当不同的技术栈必须结合在一起进行互操作时，由于组织融合而产生的技术整合可能是一个挑战。为系统与系统之间的通信与身份和认证制定一个共同的、行业认可的标准，可以简化跨多个堆栈的完全互操作性和整合的技术问题。&lt;/p&gt;
&lt;p&gt;SPIFFE 带来了对构成软件身份的共识。通过进一步利用 SPIFFE Federation，不同组织或团队的不同系统中的组件可以建立信任，安全地进行通信，而不需要增加诸如 VPN 隧道、one-off 证书或用于这些系统之间的共享凭证等结构的开销。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;合规性和可审计性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SPIRE 实施中的可审计性保证了执行行动的身份不会因为在环境中执行相互认证而被否定。此外，SPIFFE/SPIRE 发布的身份文件使相互认证的 TLS 得到广泛使用，有效地解决了与这种性质的项目相关的最困难的挑战之一。相互认证的 TLS 的其他好处包括对服务之间传输的数据进行本地加密，不仅保护了通信的完整性，还保证了敏感或专有数据的保密性。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-21-使用-spiffe-无缝地满足合规和监管目标&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f2-1.jpg&#34; alt=&#34;图 2.1: 使用 SPIFFE 无缝地满足合规和监管目标。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 2.1: 使用 SPIFFE 无缝地满足合规和监管目标。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;另一个常见的合规要求是由《通用数据保护条例》（GDPR）带来的 —— 特别是要求欧盟（EU）的数据完全停留在欧盟内部，而不是在其管辖范围之外的实体中转或被处理。有了多个信任根基，全球组织可以确保欧盟实体只与其他欧盟实体沟通。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;专业知识库&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;确保开发、安全和运营团队具备正确的知识和经验，以适当地处理安全敏感系统，仍然是一项重大挑战。企业需要雇用具有基于标准的技能组合的开发人员，以减少入职时间，并在减少风险的情况下改善产品效率。&lt;/p&gt;
&lt;p&gt;解决以自动方式向每个软件实例提供加密身份的问题，并从根本上实现凭证轮换，是一项重大挑战。对于安全和运维团队来说，具有的实施此类系统所需的专业知识少之又少。在不依靠社区或行业知识的情况下维持日常运营会使问题恶化，导致中断和指责。&lt;/p&gt;
&lt;p&gt;不能合理地期望开发人员了解或获得安全的实际问题的专业知识，特别是在组织环境中适用于服务身份。此外，在开发、运维和工作负载执行方面具有深度知识的安全从业人员的储备是非常少的。利用一个开放的标准和开放的规范来解决关键的身份问题，允许没有个人经验的人通过一个得到良好支持的、不断增长的 SPIFFE/SPIRE 终端用户和从业人员社区来扩展知识。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;节约&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;采用 SPIFFE/SPIRE 可以在许多方面节省成本，包括减少云 / 平台锁定，提高开发人员的效率，以及减少对专业知识的依赖，等等。&lt;/p&gt;
&lt;p&gt;通过将云提供商的身份接口抽象为一套建立在开放标准上的定义明确的通用 API，SPIFFE 大大减轻了开发和维护&lt;strong&gt;云感知&lt;/strong&gt;应用的负担。由于 SPIFFE 是平台无关的，它几乎可以在任何地方部署。当需要改变平台技术时，这种差异化可以节省时间和金钱，甚至可以加强与现有平台供应商的谈判地位。从历史上看，身份和访问管理服务是由每个组织自己的部署指挥和控制平台 —— 云服务提供商知道这一点，并利用这一制约因素作为主要的锁定机制，与他们的平台完全整合。&lt;/p&gt;
&lt;p&gt;在提高开发人员的效率方面也有很大的节省。SPIFFE/SPIRE 有两个重要方面可以节省开支：加密身份及其相关生命周期的完全自动化发布和管理，以及认证和服务间通信加密的统一性和加载性。通过消除与前者相关的手动流程，以及在后者中花费的研究和试验 / 错误时间，开发人员可以更好地专注于对他们重要的事情：业务逻辑。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;提高开发人员的生产力&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;开发人员在获取证书和配置每个应用组件的认证 / 保密协议方面花费的平均时间（小时）。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;减少开发人员在每个应用组件上对应的证书所花费的时间。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;95%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;开发人员在学习和实施特定 API 网关、秘密存储等控制方面花费的平均时间（小时）&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;减少了开发人员学习和实施特定 API 网关、秘密存储等控制的时间。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;75%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;本年度开发的新应用组件的数量&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;200&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;预计因提高开发人员生产力而节省的时间&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;530&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;正如我们在历史上看到的那样，财富 50 强的技术组织雇用了高度熟练和专业的工程师，花了几十年时间来解决这个身份问题。将 SPIFFE/SPIRE 添加到企业的云原生解决方案目录中，可以让你在多年的超专业安全和开发人才的基础上构建，而不需要相应的成本。&lt;/p&gt;
&lt;p&gt;凭借强大的社区支持几十个到几十万个节点的部署，SPIFFE/SPIRE 在复杂、大规模环境中的运作经验可以满足组织的需求。&lt;/p&gt;
&lt;h2 id=&#34;对于服务提供商和软件供应商&#34;&gt;对于服务提供商和软件供应商&lt;/h2&gt;
&lt;p&gt;减少客户在使用产品过程中的负担，始终是所有优秀产品经理的首要目标。了解那些表面上看起来无害的功能的实际意义是很重要的。例如，如果一个数据库产品需要支持 TLS，因为这是客户的要求，很简单，在产品中添加一些配置就可以了。&lt;/p&gt;
&lt;p&gt;不幸的是，这给客户带来了一些重大的挑战。即使是看似简单的用户管理也面临类似的挑战。考虑一下这两个常见的功能在默认情况下引入的以下客户痛点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;谁生成证书和密码，以及如何生成？&lt;/li&gt;
&lt;li&gt;它们如何被安全地分配给需要的应用程序？&lt;/li&gt;
&lt;li&gt;如何限制对私钥和密码的访问？&lt;/li&gt;
&lt;li&gt;这些秘密是如何存储的，才能让它们不会泄漏到备份中？&lt;/li&gt;
&lt;li&gt;当证书过期，或必须改变密码时，会发生什么？这个过程是否具有破坏性？&lt;/li&gt;
&lt;li&gt;在这些任务中，有多少是必须要有人类操作的？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在这些功能从客户的角度来看是可行的之前，所有这些问题都需要得到回答。通常，客户发明或安装的解决方案在操作上是很痛苦的。&lt;/p&gt;
&lt;p&gt;这些客户的负担是非常真实的。有些组织有整个团队专门负责管理这些负担。通过简单地支持 SPIFFE，上述所有的担忧都会得到缓解。该产品可以集成进现有的基础设施，并&lt;strong&gt;免费&lt;/strong&gt;增加 TLS 支持。此外，由 SPIFFE 赋予的客户（用户）身份可以直接取代管理用户凭证（如密码）的需要。&lt;/p&gt;
&lt;h3 id=&#34;平台访问管理&#34;&gt;平台访问管理&lt;/h3&gt;
&lt;p&gt;访问一个服务或平台（如 SaaS 服务）也涉及类似的挑战。归根结底，这些挑战为凭证管理所带来的固有困难，尤其是当凭证是一个共享的秘密时。&lt;/p&gt;
&lt;p&gt;考虑一下 API 令牌 —— 在 SaaS 提供商中，使用 API 令牌来验证非人类的 API 调用者是很普遍的。它们实际上是密码，而且每一个都必须由客户仔细管理。上面列出的所有挑战都适用于此。支持 SPIFFE 认证的平台大大减轻了与访问平台有关的客户负担，一次性解决了存储、发行和生命周期问题。利用 SPIFFE，问题被简化为简单地授予给定工作负载所需的权限。&lt;/p&gt;
&lt;h2 id=&#34;对于安全从业人员&#34;&gt;对于安全从业人员&lt;/h2&gt;
&lt;p&gt;技术创新不能成为安全产品的抑制因素。开发、分发和部署工具需要与安全产品和方法无缝集成，不影响软件开发的自主性或为组织带来负担。组织需要易于使用的软件产品，并为现有工具增加额外的安全性。&lt;/p&gt;
&lt;p&gt;SPIRE 不是所有安全问题的最终解决方案。它并不否定对强大的安全实践和深度防御或分层安全的需要。然而，利用 SPIFFE/SPIRE 提供跨不信任网络的信任根，使组织能够在通往&lt;a href=&#34;https://csrc.nist.gov/publications/detail/sp/800-207/final&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;零信任架构&lt;/a&gt;的道路上迈出有意义的一步，作为全面安全战略的一部分。&lt;/p&gt;
&lt;h3 id=&#34;默认安全&#34;&gt;默认安全&lt;/h3&gt;
&lt;p&gt;SPIRE 可以帮助减轻 &lt;a href=&#34;https://owasp.org/www-project-top-ten/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OWASP 的几个主要威胁&lt;/a&gt;。为了减少通过凭证泄露的可能性，SPIRE 为整个基础设施的认证提供了一个强有力的证明身份。保持证明的自动化使平台默认安全，消除了开发团队的额外配置负担。&lt;/p&gt;
&lt;p&gt;对于希望从根本上解决其产品或服务中的信任和身份问题的组织来说，SPIFFE/SPIRE 还通过实现普遍的相互 TLS 认证来解决客户的安全需求，以便在工作负载之间安全地进行通信，无论它们部署在何处。此外，与每个开源产品一样，代码库背后的社区和贡献者提供了更多双眼睛来审查合并前和合并后的代码。这个 &lt;a href=&#34;https://en.wikipedia.org/wiki/Linus%27s_law&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;莱纳斯法则（Linus Law）&lt;/a&gt;的实施超越了&lt;strong&gt;四只眼睛&lt;/strong&gt;的原则，以确保任何潜在的错误或已知的安全问题在进入发布阶段之前被发现。&lt;/p&gt;
&lt;h3 id=&#34;策略执行&#34;&gt;策略执行&lt;/h3&gt;
&lt;p&gt;SPIRE 的 API 为安全团队提供了一种机制，以便以易于使用的方式在各平台和业务部门执行一致的认证策略。当与定义明确的策略相结合时，服务之间的互动可以保持在最低限度，确保只有授权的工作负载可以相互通信。这限制了恶意实体的潜在攻击面，并可以在策略引擎的默认拒绝规则中触发警报。&lt;/p&gt;
&lt;p&gt;SPIRE 利用一个强大的多因素证明引擎，该引擎实时运行，可以肯定地确定加密身份的发放。它还自动发放、分配和更新短期凭证，以确保组织的身份架构准确反映工作负载的运行状态。&lt;/p&gt;
&lt;h3 id=&#34;零信任&#34;&gt;零信任&lt;/h3&gt;
&lt;p&gt;在架构中采用零信任模式，可以减少漏洞发生时的爆炸半径。相互认证和信任撤销可以阻止被破坏的前端应用服务器从网络上或集群内可能存在的不相关数据库中渗出数据。虽然不可能发生在网络安全严密的组织中，但 SPIFFE/SPIRE 肯定会增加额外的防御层，以减轻错误配置的防火墙或不变的默认登录带来的漏洞和暴露点。它还将安全决策从 IP 地址和端口号（可以用不可察觉的方式进行操纵）转移到享有完整性保护的加密标识符上。&lt;/p&gt;
&lt;h3 id=&#34;记录和监控&#34;&gt;记录和监控&lt;/h3&gt;
&lt;p&gt;SPIRE 可以帮助改善基础设施的可观测性。关键的 SPIRE 事件，如身份请求和发放，是可记录的事件，有助于提供一个更完整的基础设施视图。SPIRE 还将生成各种行动的事件，包括身份注册、取消注册、验证尝试、身份发放和轮换。然后，这些事件可以被汇总并发送到组织的安全信息和事件管理（SIEM）解决方案，以便进行统一监控。&lt;/p&gt;
&lt;h2 id=&#34;对于开发运维和-devops-来说&#34;&gt;对于开发、运维和 DevOps 来说&lt;/h2&gt;
&lt;p&gt;即使你可以通过采用和支持 SPIFFE/SPIRE 而不考虑环境，量化对开发人员甚至运维生产力的改善，但最终，它通过在日常工作中重新引入焦点、流程和快乐，缓解了团队所经历的大部分劳累。&lt;/p&gt;
&lt;h3 id=&#34;聚焦&#34;&gt;聚焦&lt;/h3&gt;
&lt;p&gt;不能让安全成为技术创新的障碍。安全工具和控制需要与现代产品和方法进行无摩擦的整合，不影响开发的自主性或给运维团队带来负担。&lt;/p&gt;
&lt;p&gt;SPIFFE 和 SPIRE 提供了一个统一的服务身份控制平面，可通过一致的 API 跨平台和跨域使用，因此团队可以专注于交付应用程序和产品，而不必担心或为目的地进行特殊配置。每个开发人员都可以利用这个 API，安全、轻松地进行跨平台和跨域的认证。&lt;/p&gt;
&lt;p&gt;开发人员还可以请求并接收一个身份，然后可用于为所提供的身份建立额外的应用程序特定控制，而运维和 DevOps 团队可以以自动化的方式管理和扩展身份，同时实施和执行消耗这些身份的策略。此外，团队可以使用 OIDC 联盟将 SPIFFE 身份与各种云认证系统（如 AWS IAM）相关联，从而减少对复杂的秘密管理需求。&lt;/p&gt;
&lt;h3 id=&#34;流程&#34;&gt;流程&lt;/h3&gt;
&lt;p&gt;每一个曾经生成的凭证都面临着同样的问题：在某些时候，它将不得不被改变或撤销。这个过程往往是手动的和痛苦的 —— 就像部署一样，越是不经常发生就越是痛苦。对过程的不熟悉和因缺乏及时性或不方便的更新程序而引起的中断是正常的。&lt;/p&gt;
&lt;p&gt;当需要轮换时，常要求运维和开发人员进行昂贵的上下文切换。SPIFFE/SPIRE 通过将轮换作为一个关键的核心功能来解决这个问题。它是完全自动化的，并且定期发生，无需人工干预。轮换的频率由运维选择，而且涉及到权衡；然而，SPIFFE 证书每小时轮换一次的情况并不少见。这种频繁和自动化的轮换方式最大限度地减少了与证书生命周期管理有关的运维和开发人员的中断。&lt;/p&gt;
&lt;p&gt;值得注意的是，不仅仅轮换是自动化的。证书的最初发放（最常见的是 X.509 证书的形式）也是完全自动化的。这有助于简化开发人员的流程，将生成或采购凭证的任务从启动新服务的检查清单中剔除。&lt;/p&gt;
&lt;h3 id=&#34;互操作性&#34;&gt;互操作性&lt;/h3&gt;
&lt;p&gt;开发人员和集成商不再需要为组织的安全身份和认证解决方案缺乏互操作性而感到沮丧。SPIRE 提供了一个插件模型，允许开发人员和集成商扩展 SPIRE 以满足他们的需求。如果企业需要一套专有的 API 来生成 SPIRE 的密钥，或者 SPIRE 的中间签名密钥应该存在于特定的专有密钥管理服务（KMS）中，那么这种能力就特别重要。开发人员也不需要担心为即将上线的新工作负载开发定制的包装器，因为该组织正在遵守一个开放的规范。&lt;/p&gt;
&lt;p&gt;许多团队不敢改变或删除允许网络间追踪的防火墙规则，因为这可能会对关键系统的可用性产生不利影响。运维可以将身份及其相关策略的范围扩大到应用而不是全局。运维将有信息更改本地范围的身份和策略，而不必担心对下游的影响。&lt;/p&gt;
&lt;h3 id=&#34;改善日常工作&#34;&gt;改善日常工作&lt;/h3&gt;
&lt;p&gt;如果没有一个强大的软件身份系统，服务之间的访问管理通常是通过使用网络层面的控制（例如，基于 IP / 端口的策略）来完成的。不幸的是，这种方法产生了大量与管理网络访问控制列表（ACL）相关的操作。随着弹性基础设施的增减，以及网络拓扑结构的变化，这些 ACL 需要不间断的维护。它们甚至会妨碍新基础设施的启用，因为现有的系统现在需要被告知新组件的存在。&lt;/p&gt;
&lt;p&gt;SPIFFE 和 SPIRE 致力于减少这种辛劳，因为与网络上的主机和工作负载的安排相比，软件身份的概念相对稳定。此外，它们还为将授权决策委托给服务所有者本身铺平了道路，因为他们最终处于做出这种决策的最佳位置。例如，希望向新的消费者授予访问权的服务所有者，他们不需要关心网络层面的细节就可以创建访问策略 —— 他们可以简单地声明他们希望授予访问权的服务名称，然后继续。&lt;/p&gt;
&lt;p&gt;SPIFFE/SPIRE 还致力于提高可观测性、监测以及最终对服务水平目标（SLO）的遵守。通过在许多不同类型的系统中规范软件身份（不一定只是容器化或云原生），并提供身份发布和使用的审计跟踪，SPIFFE/SPIRE 可以在事件发生之前、期间和之后极大地提高态势感知。更成熟的团队甚至会发现，它可以提高预测影响服务可用性问题的能力。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>执行摘要</title>
      <link>https://lib.jimmysong.io/kubernetes-hardening-guidance/executive-summary/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/kubernetes-hardening-guidance/executive-summary/</guid>
      <description>&lt;p&gt;Kubernetes® 是一个开源系统，可以自动部署、扩展和管理在容器中运行的应用程序，并且通常托管在云环境中。与传统的单体软件平台相比，使用这种类型的虚拟化基础设施可以提供一些灵活性和安全性的好处。然而，安全地管理从微服务到底层基础设施的所有方面，会引入其他的复杂性。本报告中详述的加固指导旨在帮助企业处理相关风险并享受使用这种技术的好处。&lt;/p&gt;
&lt;p&gt;Kubernetes 中三个常见的破坏源是供应链风险、恶意威胁者和内部威胁。&lt;/p&gt;
&lt;p&gt;供应链风险往往是具有挑战性的，可以在容器构建周期或基础设施收购中出现。恶意威胁者可以利用 Kubernetes 架构的组件中的漏洞和错误配置，如控制平面、工作节点或容器化应用程序。内部威胁可以是管理员、用户或云服务提供商。对组织的 Kubernetes 基础设施有特殊访问权的内部人员可能会滥用这些特权。&lt;/p&gt;
&lt;p&gt;本指南描述了与设置和保护 Kubernetes 集群有关的安全挑战。包括避免常见错误配置的加固策略，并指导国家安全系统的系统管理员和开发人员如何部署 Kubernetes，并提供了建议的加固措施和缓解措施的配置示例。本指南详细介绍了以下缓解措施：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;扫描容器和 Pod 的漏洞或错误配置。&lt;/li&gt;
&lt;li&gt;以尽可能少的权限运行容器和 Pod。&lt;/li&gt;
&lt;li&gt;使用网络隔离来控制漏洞可能造成的损害程度。&lt;/li&gt;
&lt;li&gt;使用防火墙来限制不需要的网络连接，并使用加密技术来保护机密。&lt;/li&gt;
&lt;li&gt;使用强大的认证和授权来限制用户和管理员的访问，以及限制攻击面。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用日志审计，以便管理员可以监控活动，并对潜在的恶意活动发出警告。&lt;/p&gt;
&lt;p&gt;定期审查所有 Kubernetes 设置，并使用漏洞扫描，以帮助确保风险得到适当考虑并应用安全补丁。&lt;/p&gt;
&lt;p&gt;有关其他安全加固指导，请参见互联网安全中心 Kubernetes 基准、Docker 和 Kubernetes 安全技术实施指南、网络安全和基础设施安全局（CISA）分析报告以及 Kubernetes 文档。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SPIFFE 工作负载 API</title>
      <link>https://lib.jimmysong.io/spiffe-and-spire/standard/spiffe-workload-api/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/spiffe-and-spire/standard/spiffe-workload-api/</guid>
      <description>&lt;p&gt;对于互联网工作负载而言，可移植和互操作的网络工作负载的加密身份可能是 SPIFFE 的核心用例。为了完全满足这个需求，社区必须达成一致，采用一种标准化的方式来检索、验证和与 SPIFFE 身份进行交互。本规范概述了要支持基于 SPIFFE 的身份验证系统所需的 API 签名和客户端/服务器行为。&lt;/p&gt;
&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;
&lt;p&gt;SPIFFE 工作负载 API 是一个 API，它提供了信息和服务，使工作负载或计算进程能够利用 SPIFFE 身份和基于 SPIFFE 的身份验证系统。它由 SPIFFE 工作负载端点提供，并由一些服务或“概要”组成。&lt;/p&gt;
&lt;p&gt;目前，有两个概要：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;X.509-SVID 概要&lt;/li&gt;
&lt;li&gt;JWT-SVID 概要&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这两个概要是强制性的，并且 SPIFFE 实现必须支持它们。但是，运营商可以在部署中禁用特定的概要。&lt;/p&gt;
&lt;p&gt;本规范的未来版本可能会引入其他概要或使一个或多个概要成为可选项。&lt;/p&gt;
&lt;h2 id=&#34;可扩展性&#34;&gt;可扩展性&lt;/h2&gt;
&lt;p&gt;SPIFFE 工作负载 API 不能超出本规范进行扩展。希望提供扩展功能的实现者可以通过引入新的 gRPC 服务来实现，这是根据 SPIFFE 工作负载端点规范中概述的可扩展性方法来实现的。&lt;/p&gt;
&lt;h2 id=&#34;服务定义&#34;&gt;服务定义&lt;/h2&gt;
&lt;p&gt;SPIFFE 工作负载 API 由一份协议缓冲区（版本 3）服务定义来定义。完整的定义可以在 workloadapi.proto 中找到。&lt;/p&gt;
&lt;p&gt;概要作为单个&lt;code&gt;WorkloadAPI&lt;/code&gt;服务中的一组相关的 RPC 实现。&lt;/p&gt;
&lt;h2 id=&#34;客户端和服务器行为&#34;&gt;客户端和服务器行为&lt;/h2&gt;
&lt;h3 id=&#34;身份标识调用者&#34;&gt;身份标识调用者&lt;/h3&gt;
&lt;p&gt;SPIFFE 工作负载 API 支持任意数量的本地客户端，使其能够引导任何能够访问它的进程的身份标识。通常，希望为每个进程分配身份标识，其中某些进程被授予特定的身份标识。为了做到这一点，SPIFFE 工作负载 API 实现必须能够确定调用者的身份标识。&lt;/p&gt;
&lt;p&gt;SPIFFE 工作负载端点规范规定了不直接进行客户端身份验证的要求，而是依赖于带外真实性检查。因此，SPIFFE 工作负载端点实现有责任识别调用者。然后，SPIFFE 工作负载 API 可以利用有关调用者的信息来确定要提供的适当内容。有关详细信息，请参阅 SPIFFE 工作负载端点规范中的身份验证部分。&lt;/p&gt;
&lt;h3 id=&#34;连接生命周期&#34;&gt;连接生命周期&lt;/h3&gt;
&lt;p&gt;SPIFFE 工作负载 API 的客户端应尽可能保持打开连接的状态，等待流上接收服务器的响应消息。连接可以随时由服务器或客户端终止。在这种情况下，客户端应立即建立新连接。这有助于确保工作负载保持最新的身份相关材料。SPIFFE 工作负载 API 服务器实现者可以假设此属性，如果未能及时接收到消息，则工作负载可能过时，可能会影响其可用性。&lt;/p&gt;
&lt;h3 id=&#34;流式响应&#34;&gt;流式响应&lt;/h3&gt;
&lt;p&gt;SPIFFE 工作负载 API 包括使用 gRPC 服务器端流式传输的 RPC，以促进快速传播更新，例如吊销和 CA 证书引入。这使得客户端可以循环遍历服务器响应，接受发生的更新。&lt;/p&gt;
&lt;p&gt;服务器发送的每个流式响应消息都必须包含完整的信息集，而不仅仅是发生更改的信息。这避免了在客户端和服务器实现上进行状态跟踪的复杂性，包括对反熵机制的需求。&lt;/p&gt;
&lt;p&gt;服务器响应消息的确切定时是特定于实现的，并且应由更改响应的事件（例如 SVID 旋转、CRL 更新等）来决定。从客户端接收到请求消息被视为生成响应的事件。换句话说，服务器响应流的第一个响应消息（基于连接的基础上）应尽快发送，不延迟。&lt;/p&gt;
&lt;p&gt;最后，SPIFFE 工作负载 API 服务器的实现者应小心地推送更新的响应消息。一些软件可能会在接收到新信息后自动重新加载，如果所有实例同时重新加载，可能会导致一段时间的不可用。&lt;/p&gt;
&lt;h2 id=&#34;默认值和删除的信息&#34;&gt;默认值和删除的信息&lt;/h2&gt;
&lt;p&gt;SPIFFE Workload API 响应消息是对先前发送的响应消息的完整更新。当响应消息包含设置为默认值或空值的字段时，客户端必须将这些字段的值解释为已设置为它们的默认值或空值；在接收到字段的默认值或空值之后，先前接收到的非默认值或非空值不应由客户端保留。例如，如果客户端在&lt;code&gt;federated_bundles&lt;/code&gt;字段中接收到默认值，则应舍弃先前接收到的&lt;code&gt;federated_bundles&lt;/code&gt;值。&lt;/p&gt;
&lt;p&gt;由于每个消息必须包含完整的信息集（请参阅 Stream Responses 部分），客户端应将数据的缺失解释为删除。例如，如果客户端加载了&lt;code&gt;spiffe://foo.bar&lt;/code&gt;的 bundle，并接收到不包含&lt;code&gt;spiffe://foo.bar&lt;/code&gt;的 bundle 的消息，则应卸载该 bundle。&lt;/p&gt;
&lt;h3 id=&#34;强制字段&#34;&gt;强制字段&lt;/h3&gt;
&lt;p&gt;为了执行 profile RPC，交换的消息由强制和可选字段组成。服务器在接收到具有默认值的强制字段的消息时，应使用“InvalidArgument”gRPC 状态代码进行响应（有关更多信息，请参阅 SPIFFE Workload Endpoint 规范中的错误代码部分）。当客户端接收到具有默认值的强制字段的消息时，应报告错误并丢弃该消息。&lt;/p&gt;
&lt;h3 id=&#34;联邦-bundle&#34;&gt;联邦 Bundle&lt;/h3&gt;
&lt;p&gt;在此规范中定义的各种 RPC 可以返回来自外部信任域的信任 Bundle。包含外部 Bundle 可以使工作负载在信任域之间进行通信，并且是启用联邦的主要机制。代表外部信任域的 Bundle 称为&lt;em&gt;联邦 Bundle&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;在验证客户端时，验证器会选择代表客户端所呈现的信任域的 Bundle 进行验证。同样，在验证服务器时，客户端会使用代表服务器所在的信任域的 Bundle。如果在使用的 SVID 的 SVID 中不存在匹配的 Bundle，则对等方是不受信任的。这种方法是必需的，以解决常见 X.509 库中对 SAN URI Name Constraints 的广泛支持的缺乏。&lt;/p&gt;
&lt;h2 id=&#34;x509-svid-profile&#34;&gt;X.509-SVID Profile&lt;/h2&gt;
&lt;p&gt;SPIFFE Workload API 的 X.509-SVID 配置文件提供了一组 gRPC 方法，工作负载可以使用这些方法来检索 X.509-SVIDs 及其相关的信任捆绑包。该配置文件概述了这些方法的签名，以及相关的客户端和服务器行为。&lt;/p&gt;
&lt;h3 id=&#34;配置文件定义&#34;&gt;配置文件定义&lt;/h3&gt;
&lt;p&gt;下面定义了 X.509-SVID 配置文件中的 RPC 和相关的消息。有关完整的 Workload API 服务定义，请参见 workloadapi.proto。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-protobuf&#34; data-lang=&#34;protobuf&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;service&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SpiffeWorkloadAPI&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;/////////////////////////////////////////////////////////////////////////
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// X509-SVID配置文件
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;/////////////////////////////////////////////////////////////////////////
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 获取工作负载有权访问的所有SPIFFE标识的X.509-SVID，以及与之相关的信任捆绑包和CRL。随着信息的更改，后续的消息将从服务器流式传输。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;rpc&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FetchX509SVID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;X509SVIDRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;returns&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stream&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;X509SVIDResponse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 获取信任捆绑包和CRL。对于仅需要验证SVID而不获取SVID自身的客户端非常有用。随着信息的更改，后续的消息将从服务器流式传输。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;rpc&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FetchX509Bundles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;X509BundlesRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;returns&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stream&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;X509BundlesResponse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// ... 其他配置文件的RPC ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// X509SVIDRequest消息传递请求X.509-SVID的参数。目前没有此类参数。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;X509SVIDRequest&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// X509SVIDResponse消息携带X.509-SVID和相关信息，包括用于与外部信任域联合的全局CRL集合和捆绑列表。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;X509SVIDResponse&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 必需。X509SVID消息列表，每个消息包括单个X.509-SVID、其私钥和信任域的捆绑。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;repeated&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;X509SVID&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;svids&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 可选。ASN.1 DER编码的证书吊销列表。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;repeated&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bytes&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;crl&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 可选。工作负载应该信任的外部信任域的CA证书捆绑，按照外部信任域的SPIFFE ID进行索引。捆绑包是ASN.1 DER编码的。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;federated_bundles&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// X509SVID消息携带单个SVID和所有相关信息，包括信任域的X.509捆绑包。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;X509SVID&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 必需。此条目中的SVID的SPIFFE ID
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;spiffe_id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 必需。ASN.1 DER编码的证书链。可以包括中间证书，但必须首先是叶子证书（或SVID本身）。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;bytes&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x509_svid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 必需。ASN.1 DER编码的PKCS#8私钥。必须是未加密的。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;bytes&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x509_svid_key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 必需。信任域的ASN.1 DER编码的X.509捆绑包。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;bytes&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bundle&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 可选。操作员指定的字符串，用于在返回多个SVID时为工作负载提供其使用方式的指导。例如，`internal`和`external`分别表示内部或外部使用的SVID。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hint&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// X509BundlesRequest消息传递请求X.509捆绑包的参数。目前没有这样的参数。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;X509BundlesRequest&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// X509BundlesResponse消息携带一组全局CRL和工作负载应该信任的信任域的映射的CA证书捆绑包。由SPIFFE ID的信任域键控。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;X509BundlesResponse&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 可选。ASN.1 DER编码的证书吊销列表。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;repeated&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bytes&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;crl&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 必需。工作负载应该信任的信任域的CA证书捆绑包，由SPIFFE ID的信任域键控。捆绑包是ASN.1 DER编码的。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bundles&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;profile-rpcs&#34;&gt;Profile RPCs&lt;/h3&gt;
&lt;h3 id=&#34;fetchx509svid&#34;&gt;FetchX509SVID&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;FetchX509SVID&lt;/code&gt; RPC 流式返回 X509-SVID 和信任域以及外部信任域的 X.509 捆绑包。这些捆绑包只能用于验证 X509-SVID。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;X509SVIDRequest&lt;/code&gt;请求消息当前为空，是将来扩展的占位符。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;X509SVIDResponse&lt;/code&gt;响应由一个必需的&lt;code&gt;svids&lt;/code&gt;字段组成，该字段必须包含一个或多个&lt;code&gt;X509SVID&lt;/code&gt;消息（每个授予客户端的标识一个）。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;X509SVID&lt;/code&gt;消息中的所有字段都是必需的，除了&lt;code&gt;hint&lt;/code&gt;字段。当设置&lt;code&gt;hint&lt;/code&gt;字段时（即非空），SPIFFE Workload API 服务器必须确保其值在任何给定的&lt;code&gt;X509SVIDResponse&lt;/code&gt;消息中是唯一的。如果 SPIFFE Workload API 客户端遇到具有相同设置的&lt;code&gt;hint&lt;/code&gt;值的多个&lt;code&gt;X509SVID&lt;/code&gt;消息，则应选择列表中的第一个消息。&lt;/p&gt;
&lt;p&gt;如果客户端没有权限接收任何 X509-SVID，则服务器应以“PermissionDenied”gRPC 状态代码响应（有关更多信息，请参见 SPIFFE Workload Endpoint 规范中的“错误代码”部分）。在这种情况下，客户端可以在退避后尝试重新连接到&lt;code&gt;FetchX509SVID&lt;/code&gt; RPC 的另一个调用。&lt;/p&gt;
&lt;p&gt;如流式响应所述，每个 FetchX509SVID 流返回的 X509SVIDResponse 消息都包含客户端在那个时间点上的授权 SVID 和 bundle 的完整集合。因此，如果服务器从后续响应中删除了 SVID（或全部 SVID，即返回“PermissionDenied”gRPC 状态代码），客户端应停止使用已删除的 SVID。&lt;/p&gt;
&lt;h3 id=&#34;fetchx509bundles&#34;&gt;FetchX509Bundles&lt;/h3&gt;
&lt;p&gt;FetchX509Bundles RPC 流返回服务器所在的信任域和外部信任域的 X.509 bundles。这些 bundles 只用于验证 X509-SVID。&lt;/p&gt;
&lt;p&gt;X509BundlesRequest 请求消息目前为空，是未来扩展的占位符。&lt;/p&gt;
&lt;p&gt;X509BundlesResponse 响应消息有一个强制性的 bundles 字段，必须至少包含服务器所在信任域的信任 bundle。crl 字段是可选的。&lt;/p&gt;
&lt;p&gt;如果客户端无权接收任何 X.509 bundles，那么服务器应以“PermissionDenied”gRPC 状态代码响应（有关更多信息，请参见 SPIFFE Workload Endpoint 规范中的错误代码部分）。客户端可以在退避后尝试重新连接 FetchX509Bundles RPC。&lt;/p&gt;
&lt;p&gt;如流式响应所述，每个 X509BundleResponse 响应在那个时间点上包含客户端的授权 X.509 bundles 的完整集合。因此，如果服务器从后续响应中删除了 bundles（或全部 bundles，即返回“PermissionDenied”gRPC 状态代码），客户端应停止使用已删除的 bundles。&lt;/p&gt;
&lt;h3 id=&#34;默认身份&#34;&gt;默认身份&lt;/h3&gt;
&lt;p&gt;通常情况下，工作负载不知道它应该扮演什么身份。决定何时扮演何种身份是特定于站点的问题，因此，SPIFFE 规范不涉及如何做到这一点。&lt;/p&gt;
&lt;p&gt;为了支持最广泛的用例，X.509-SVID 配置文件支持发出多个身份，并定义了默认身份。预计了解多个身份的工作负载可以自行进行决策。不了解如何利用多个身份的工作负载可以使用默认身份。默认身份是在 X509SVIDResponse 消息中返回的&lt;code&gt;svids&lt;/code&gt;列表中的第一个。协议缓冲区确保列表的顺序得到保留。&lt;/p&gt;
&lt;p&gt;了解如何使用多个身份的工作负载可以利用可选的&lt;code&gt;hint&lt;/code&gt;字段，该字段可用于消除身份的歧义，并告知工作负载应该为何目的使用哪个身份。例如，&lt;code&gt;internal&lt;/code&gt;和&lt;code&gt;external&lt;/code&gt;分别表示用于内部或外部使用的 SVID。SPIFFE Workload API 实现不应支持超过 1024 字节长度的值。&lt;code&gt;hint&lt;/code&gt;字段的确切值是操作员的选择，除此规范外并无限制。&lt;/p&gt;
&lt;p&gt;工作负载有责任处理预期提示的缺失或意外存在（例如，失败、警告等）。&lt;/p&gt;
&lt;h2 id=&#34;jwt-svid-配置文件&#34;&gt;JWT-SVID 配置文件&lt;/h2&gt;
&lt;p&gt;SPIFFE Workload API 的 JWT-SVID 配置文件提供了一组 gRPC 方法，可以用于工作负载获取 JWT-SVID 及其相关的信任包。该配置文件概述了这些方法的签名，以及相关的客户端和服务器行为。&lt;/p&gt;
&lt;h3 id=&#34;配置文件定义-1&#34;&gt;配置文件定义&lt;/h3&gt;
&lt;p&gt;JWT-SVID 配置文件的 RPC 和相关消息如下所定义。有关完整的 Workload API 服务定义，请参见 workloadapi.proto。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-protobuf&#34; data-lang=&#34;protobuf&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;service&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SpiffeWorkloadAPI&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;/////////////////////////////////////////////////////////////////////////
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// JWT-SVID配置文件
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;/////////////////////////////////////////////////////////////////////////
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 获取工作负载有权访问的所有SPIFFE标识的JWT-SVID，用于请求的受众。如果请求了可选的SPIFFE ID，则仅返回该SPIFFE ID的JWT-SVID。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;rpc&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FetchJWTSVID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;JWTSVIDRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;returns&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;JWTSVIDResponse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 获取以JWKS文档格式表示的JWT信任包，由信任域的SPIFFE ID作为键。随着这些信息的更改，后续的消息将从服务器流式传输。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;rpc&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FetchJWTBundles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;JWTBundlesRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;returns&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stream&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;JWTBundlesResponse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 根据请求的受众验证JWT-SVID。返回JWT-SVID的SPIFFE ID和JWT声明。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;rpc&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ValidateJWTSVID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ValidateJWTSVIDRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;returns&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ValidateJWTSVIDResponse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// ... 其他配置文件的RPC ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;JWTSVIDRequest&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 必填。工作负载打算进行身份验证的受众。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;repeated&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;audience&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 可选。请求的JWT-SVID的SPIFFE ID。如果未设置，则返回工作负载有权访问的所有标识的JWT-SVID。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;spiffe_id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// JWTSVIDResponse消息传递JWT-SVID。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;JWTSVIDResponse&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 必填。返回的JWT-SVID列表。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;repeated&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;JWTSVID&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;svids&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// JWTSVID消息携带JWT-SVID令牌和相关元数据。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;JWTSVID&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 必填。JWT-SVID的SPIFFE ID。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;spiffe_id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 必填。使用JWS紧凑序列化的编码JWT。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;svid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 可选。操作员指定的字符串，用于在返回多个SVID时为工作负载提供如何使用此标识的指导。例如，`internal`和`external`分别表示用于内部或外部使用的SVID。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hint&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// JWTBundlesRequest消息传递请求JWT信任包的参数。目前没有请求参数。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;JWTBundlesRequest&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// JWTBundlesReponse传递JWT信任包。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;JWTBundlesResponse&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 必填。以信任域的SPIFFE ID为键的JWK编码的JWT信任包。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bundles&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// ValidateJWTSVIDRequest消息传递JWT-SVID验证的请求参数。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ValidateJWTSVIDRequest&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 必填。验证方的受众。JWT-SVID必须包含一个包含此值的受众声明才能成功验证。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;audience&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 必填。要验证的JWT-SVID，使用JWS紧凑序列化进行编码。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;svid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// ValidateJWTSVIDReponse消息传递JWT-SVID验证结果。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ValidateJWTSVIDResponse&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 必填。验证的JWT-SVID的SPIFFE ID。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;spiffe_id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 必填。验证的JWT-SVID有效载荷中包含的声明。包括SPIFFE所需和非所需的声明。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;google.protobuf.Struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;claims&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;配置文件-rpc&#34;&gt;配置文件 RPC&lt;/h3&gt;
&lt;h3 id=&#34;获取-jwtsvid&#34;&gt;获取 JWTSVID&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;FetchJWTSVID&lt;/code&gt; RPC 允许客户端请求一个或多个特定受众的短期 JWT-SVID。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;JWTSVIDRequest&lt;/code&gt; 请求消息包含一个必填的&lt;code&gt;audience&lt;/code&gt;字段，该字段必须包含要嵌入返回的 JWT-SVID 中的受众声明的值。&lt;code&gt;spiffe_id&lt;/code&gt;字段是可选的，用于请求特定 SPIFFE ID 的 JWT-SVID。如果未指定，服务器必须返回授权给客户端的所有身份的 JWT-SVID。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;JWTSVIDResponse&lt;/code&gt; 响应消息由一个必填的&lt;code&gt;svids&lt;/code&gt;字段组成，该字段必须包含一个或多个&lt;code&gt;JWTSVID&lt;/code&gt;消息。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;JWTSVID&lt;/code&gt;消息中的所有字段都是必填的，除了&lt;code&gt;hint&lt;/code&gt;字段。当设置了&lt;code&gt;hint&lt;/code&gt;字段（即非空）时，SPIFFE Workload API 服务器必须确保其值在给定的&lt;code&gt;JWTSVIDResponse&lt;/code&gt;消息中的返回的 SVID 集合中是唯一的。如果 SPIFFE Workload API 客户端遇到具有相同&lt;code&gt;hint&lt;/code&gt;值设置的多个&lt;code&gt;JWTSVID&lt;/code&gt;消息，则应选择列表中的第一个消息。&lt;/p&gt;
&lt;p&gt;如果客户端没有授权任何身份，或者未经授权访问&lt;code&gt;spiffe_id&lt;/code&gt;字段请求的特定身份，则服务器应使用“PermissionDenied”gRPC 状态代码进行响应（有关更多信息，请参见 SPIFFE Workload 端点规范中的错误代码部分）。&lt;/p&gt;
&lt;h3 id=&#34;获取-jwt-bundles&#34;&gt;获取 JWT Bundles&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;FetchJWTBundles&lt;/code&gt; RPC 返回服务器所在的信任域和外部信任域的 JWT bundles。这些 bundles 必须仅用于认证 JWT-SVID。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;JWTBundlesRequest&lt;/code&gt;请求消息目前为空，是未来扩展的占位符。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;JWTBundlesResponse&lt;/code&gt;响应消息由一个必填的&lt;code&gt;bundles&lt;/code&gt;字段组成，该字段必须至少包含服务器所在信任域的 JWT bundle。&lt;/p&gt;
&lt;p&gt;返回的 bundles 以&lt;a href=&#34;https://tools.ietf.org/html/rfc7517&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 7517&lt;/a&gt;定义的标准 JWK Set 格式进行编码，其中包含信任域的 JWT-SVID 签名密钥。这些密钥可能仅表示 SPIFFE 信任域中的密钥子集。服务器不得在返回的 JWT bundles 中包含其他用途的密钥。&lt;/p&gt;
&lt;p&gt;如果客户端无权接收任何 JWT bundles，则服务器应使用“PermissionDenied”gRPC 状态代码进行响应（有关更多信息，请参见 SPIFFE Workload 端点规范中的错误代码部分）。客户端可以在退避后尝试重新连接到&lt;code&gt;FetchJWTBundles&lt;/code&gt; RPC 的另一个调用。&lt;/p&gt;
&lt;p&gt;如流式响应中所述，每个&lt;code&gt;JWTBundleResponse&lt;/code&gt;响应在当前时间点包含客户端的所有授权 JWT bundles 的完整集合。因此，如果服务器从后续响应中删除 bundles（或所有 bundles，即返回“PermissionDenied”gRPC 状态代码），客户端应停止使用被删除的 bundles。&lt;/p&gt;
&lt;h3 id=&#34;验证-jwtsvid&#34;&gt;验证 JWTSVID&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ValidateJWTSVID&lt;/code&gt; RPC 代表客户端验证特定受众的 JWT-SVID。此外，服务器必须根据 JWT-SVID 规范中概述的规则解析和验证 JWT-SVID。JWT-SVID 负载中嵌入的声明应在&lt;code&gt;ValidateJWTSVIDResponse&lt;/code&gt;中的&lt;code&gt;claims&lt;/code&gt;字段中提供；本规范中定义的声明是必需的，但实现可能会在将它们返回给客户端之前过滤非 SPIFFE 声明。SPIFFE 声明对于互操作性是必需的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ValidateJWTSVIDRequest&lt;/code&gt;和&lt;code&gt;ValidateJWTSVIDResponse&lt;/code&gt;消息中的所有字段都是必填的。&lt;/p&gt;
&lt;h3 id=&#34;jwt-svid-验证&#34;&gt;JWT-SVID 验证&lt;/h3&gt;
&lt;p&gt;如果客户端支持，Workload API 客户端应使用&lt;code&gt;ValidateJWTSVID&lt;/code&gt;方法进行 JWT 验证，允许 SPIFFE Workload API 代表其执行验证。这样做可以避免工作负载实现验证逻辑，从而减少出错的可能性。&lt;/p&gt;
&lt;p&gt;当与传统的 JWT 验证器进行交互时，可以使用&lt;code&gt;FetchJWTBundles&lt;/code&gt;方法获取 JWKS bundles，用于验证 JWT-SVID 的签名。例如，如果 SPIFFE Workload API 可用，但 JWT 验证软件不知道 Workload API（因此无法调用&lt;code&gt;ValidateJWTSVID&lt;/code&gt;），则实现可以单独检索每个 bundle 并将其提供给传统工作负载进行验证。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;FetchJWTBundles&lt;/code&gt;方法返回以信任域的 SPIFFE ID 为键的 bundles。在验证 JWT-SVID 时，验证器必须使用与主题的信任域对应的 bundle。如果指定信任域的 JWT bundle 不存在，则令牌是不可信的。&lt;/p&gt;
&lt;h2 id=&#34;附录-a-示例实现状态机&#34;&gt;附录 A. 示例实现状态机&lt;/h2&gt;
&lt;p&gt;为了提供清晰度，作者认为包括 SPIFFE Workload API 的客户端和服务器实现的示例状态图可能是有用的。应注意，有许多实现方式可以符合本规范，此特定实现仅供参考。&lt;/p&gt;
&lt;h3 id=&#34;服务器状态机&#34;&gt;服务器状态机&lt;/h3&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-服务器状态机&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/workload_api_server_diagram.png&#34; alt=&#34;服务器状态机&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      服务器状态机
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;SPIFFE Workload 端点侦听器正在启动。&lt;/li&gt;
&lt;li&gt;使用 SPIFFE Workload API 处理程序启动 gRPC 服务器，现在可以接受连接。&lt;/li&gt;
&lt;li&gt;正在验证传入的 FetchX509SVIDRequest。这包括检查强制性的安全头，并确保调用方可用身份。&lt;/li&gt;
&lt;li&gt;Workload API 正在向客户端发送 FetchX509SVIDResponse。&lt;/li&gt;
&lt;li&gt;Workload API 处于等待状态。从等待状态过渡需要中断或取消。中断等待状态的典型原因是响应中的信息已更新（例如，SVID 已旋转或 CRL 已更改）。&lt;/li&gt;
&lt;li&gt;对待处理的响应执行验证。确保客户端仍有权使用身份，并且请求尚未取消。&lt;/li&gt;
&lt;li&gt;服务器正在关闭流，为客户端提供正确的错误代码以表示遇到的条件。&lt;/li&gt;
&lt;li&gt;服务器遇到致命错误，必须停止。这可能发生在无法创建侦听器或 gRPC 服务器遇到致命错误的情况下。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;客户端状态机&#34;&gt;客户端状态机&lt;/h3&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-客户端状态机&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/workload_api_client_diagram.png&#34; alt=&#34;客户端状态机&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      客户端状态机
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Workload API 客户端正在拨号 SPIFFE Workload 端点。&lt;/li&gt;
&lt;li&gt;客户端正在调用 FetchX509SVID RPC 调用，向服务器发送请求。&lt;/li&gt;
&lt;li&gt;客户端正在阻塞等待从服务器接收 X509SVIDResponse 消息。&lt;/li&gt;
&lt;li&gt;客户端正在使用从服务器响应中接收的 SVIDs、CRLs 和 bundles 更新其配置。此时，它可以将接收到的信息与当前配置进行比较，确定是否需要重新加载。&lt;/li&gt;
&lt;li&gt;客户端遇到致命错误，必须退出。&lt;/li&gt;
&lt;li&gt;客户端正在执行指数回退。&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>SPIRE Agent 配置参考</title>
      <link>https://lib.jimmysong.io/spiffe-and-spire/configuration/agent/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/spiffe-and-spire/configuration/agent/</guid>
      <description>&lt;p&gt;本文描述 SPIRE Agent 的命令行选项、agent.conf 设置和内置插件。&lt;/p&gt;
&lt;p&gt;本文档是 SPIRE Agent 的配置参考。它包括有关插件类型、内置插件、代理配置文件、插件配置和 &lt;code&gt;spire-agent&lt;/code&gt; 命令的命令行选项的信息。&lt;/p&gt;
&lt;h2 id=&#34;插件类型&#34;&gt;插件类型&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;KeyManager&lt;/td&gt;
&lt;td&gt;生成并存储代理的私钥。对于将密钥绑定到硬件等很有用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NodeAttestor&lt;/td&gt;
&lt;td&gt;收集用于向服务器证明代理身份的信息。一般与同类型的服务器插件搭配使用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WorkloadAttestor&lt;/td&gt;
&lt;td&gt;内省工作负载以确定其属性，生成一组与其关联的选择器。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SVIDStore&lt;/td&gt;
&lt;td&gt;将 X509-SVID（私钥、叶证书和中间体（如果有））、捆绑包和联合捆绑包存储到信任存储中。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;内置插件&#34;&gt;内置插件&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;KeyManager&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_agent_keymanager_disk.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;disk&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;将私钥写入磁盘的密钥管理器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;KeyManager&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_agent_keymanager_memory.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;memory&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;不保留私钥的内存密钥管理器（必须在重新启动后重新证明）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NodeAttestor&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_agent_nodeattestor_aws_iid.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;aws_iid&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;使用 AWS 实例身份文档证明代理身份的节点证明者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NodeAttestor&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_agent_nodeattestor_azure_msi.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;azure_msi&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;使用 Azure MSI 令牌证明代理身份的节点证明者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NodeAttestor&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_agent_nodeattestor_gcp_iit.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gcp_iit&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;使用 GCP 实例身份令牌证明代理身份的节点证明者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NodeAttestor&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_agent_nodeattestor_jointoken.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;join_token&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;使用服务器生成的加入令牌的节点证明者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NodeAttestor&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_agent_nodeattestor_k8s_sat.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;k8s_sat&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;使用 Kubernetes 服务帐户令牌证明代理身份的节点证明者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NodeAttestor&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_agent_nodeattestor_k8s_psat.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;k8s_psat&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;使用 Kubernetes 投影服务帐户令牌证明代理身份的节点证明者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NodeAttestor&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_agent_nodeattestor_sshpop.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;sshpop&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;使用现有 ssh 证书证明代理身份的节点证明者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NodeAttestor&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_agent_nodeattestor_x509pop.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; x509pop&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;使用现有 X.509 证书证明代理身份的节点证明者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WorkloadAttestor&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_agent_workloadattestor_docker.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;docker&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;工作负载证明器允许基于 docker 构造的选择器，例如 &lt;code&gt;label&lt;/code&gt; 和 &lt;code&gt;image_id&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WorkloadAttestor&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_agent_workloadattestor_k8s.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;k8s&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;工作负载证明器允许基于 Kubernetes 的选择器构造 &lt;code&gt;ns&lt;/code&gt; （命名空间）和 &lt;code&gt;sa&lt;/code&gt; （服务帐户）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WorkloadAttestor&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_agent_workloadattestor_unix.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;unix&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;一个工作负载证明器，可生成基于 Unix 的选择器，例如 &lt;code&gt;uid&lt;/code&gt; 和 &lt;code&gt;gid&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WorkloadAttestor&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_agent_workloadattestor_systemd.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;systemd&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;工作负载证明器，根据 systemd 单元属性（例如 &lt;code&gt;Id&lt;/code&gt; 和 &lt;code&gt;FragmentPath&lt;/code&gt; 生成选择器）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SVIDStore&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_agent_svidstore_aws_secretsmanager.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;aws_secretsmanager&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;SVIDstore 将机密存储在 AWS 机密管理器中，以及代理有权访问的条目的生成 X509-SVID。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SVIDStore&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_agent_svidstore_gcp_secretmanager.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gcp_secretmanager&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;SVIDStore 将机密存储在 Google Cloud Secret Manager 中，并包含代理有权访问的条目的结果 X509-SVID。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;代理配置文件&#34;&gt;代理配置文件&lt;/h2&gt;
&lt;p&gt;下表概述了 SPIRE 代理的配置选项。这些可以在配置文件的顶级 &lt;code&gt;agent { ... }&lt;/code&gt; 部分中设置。大多数选项都有一个相应的 CLI 标志，如果设置了该标志，则该标志优先于文件中定义的值。&lt;/p&gt;
&lt;p&gt;SPIRE 配置文件可以用 HCL 或 JSON 表示。请参阅示例配置文件部分以获取完整示例。&lt;/p&gt;
&lt;p&gt;如果 -expandEnv 标志传递给 SPIRE，则在解析之前扩展 &lt;code&gt;$VARIABLE&lt;/code&gt; 或 &lt;code&gt;${VARIABLE}&lt;/code&gt; 样式环境变量。这对于模板化配置文件可能很有用，例如跨不同的信任域，或者插入诸如加入令牌之类的秘密。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;配置&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;默认&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;admin_socket_path&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;绑定管理 API 套接字的位置（默认禁用）&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;allow_unauthenticated_verifiers&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;允许代理向未经身份验证的验证者发布信任包&lt;/td&gt;
&lt;td&gt;错误的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;allowed_foreign_jwt_claims&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;验证外部 JWTSVID 时要返回的可信声明列表&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;authorized_delegates&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;授权代表的 SPIFFE ID 列表。请参阅委托身份 API 了解更多信息&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;data_dir&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;代理可用于其运行时数据的目录&lt;/td&gt;
&lt;td&gt;$PWD&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;experimental&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;可能会更改或删除的实验选项（见下文）&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;insecure_bootstrap&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;如果为 true，代理将在不验证服务器身份的情况下进行引导&lt;/td&gt;
&lt;td&gt;错误的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;join_token&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;由 SPIRE 服务器生成的可选令牌&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;log_file&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将日志写入的文件&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;log_level&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;设置日志记录级别&lt;/td&gt;
&lt;td&gt;信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;log_format&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;日志格式，&lt;/td&gt;
&lt;td&gt;文本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;log_source_location&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;如果为 true，日志将包含源文件、行号和方法名称字段（增加一点运行时成本）&lt;/td&gt;
&lt;td&gt;错误的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;profiling_enabled&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;如果为 true，则启用 net/http/pprof 端点&lt;/td&gt;
&lt;td&gt;错误的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;profiling_freq&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将分析数据转储到磁盘的频率。仅当 &lt;code&gt;profiling_enabled&lt;/code&gt; 为 &lt;code&gt;true&lt;/code&gt; 且 &lt;code&gt;profiling_freq&lt;/code&gt; &amp;gt; 0 时启用。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;profiling_names&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将在每个分析标记上转储到磁盘的配置文件名称列表，请参阅分析名称&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;profiling_port&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;net/http/pprof 端点的端口号。仅当 &lt;code&gt;profiling_enabled&lt;/code&gt; 为 &lt;code&gt;true&lt;/code&gt; 时使用。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;server_address&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SPIRE 服务器的 DNS 名称或 IP 地址&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;server_port&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SPIRE 服务器的端口号&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;socket_path&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;绑定 SPIRE Agent API 套接字的位置（仅限 Unix）&lt;/td&gt;
&lt;td&gt;/tmp/spire-agent/public/api.sock&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;sds&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;可选的 SDS 配置部分&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;trust_bundle_path&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SPIRE 服务器 CA 捆绑包的路径&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;trust_bundle_url&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;下载初始 SPIRE 服务器信任包的 URL&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;trust_bundle_format&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;初始信任包的格式，pem 或 spiffe&lt;/td&gt;
&lt;td&gt;pem&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;trust_domain&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;该代理所属的信任域（不得超过 255 个字符）&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;workload_x509_svid_key_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;工作负载 X509 SVID 密钥类型&lt;/td&gt;
&lt;td&gt;ec-p256&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;实验性的&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;默认&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;named_pipe_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;用于绑定 SPIRE Agent API 命名管道的管道名称（仅限 Windows）&lt;/td&gt;
&lt;td&gt;\spire-agent\public\api&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;sync_interval&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;与指数退避的 SPIRE 服务器同步间隔&lt;/td&gt;
&lt;td&gt;5 秒&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;初始信任捆绑配置&#34;&gt;初始信任捆绑配置&lt;/h3&gt;
&lt;p&gt;代理需要初始信任捆绑才能安全连接到 SPIRE 服务器。有以下三种选择：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果使用 &lt;code&gt;trust_bundle_path&lt;/code&gt; 选项，代理将从该路径的文件中读取初始信任包。你需要在启动 SPIRE 代理之前复制或共享该文件。&lt;/li&gt;
&lt;li&gt;如果使用 &lt;code&gt;trust_bundle_url&lt;/code&gt; 选项，代理将从指定的 URL 读取初始信任包。为了安全起见，URL 必须以 &lt;code&gt;https://&lt;/code&gt; 开头，并且服务器必须具有有效的证书（通过系统信任存储区进行验证）。这可用于快速部署 SPIRE 代理，而无需手动共享文件。请记住，URL 的内容需要保持最新。&lt;/li&gt;
&lt;li&gt;如果 &lt;code&gt;insecure_bootstrap&lt;/code&gt; 选项设置为 &lt;code&gt;true&lt;/code&gt; ，则代理将不会使用初始信任捆绑包。它将连接到 SPIRE 服务器而不进行身份验证。这不是一个安全配置，因为中间人攻击者可以控制 SPIRE 基础设施。包含它是因为它对于测试和开发来说是一个有用的选项。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一次只能设置这三个选项之一。&lt;/p&gt;
&lt;h3 id=&#34;sds-配置&#34;&gt;SDS 配置&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;配置&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;默认&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;default_svid_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;用于 Envoy SDS 的默认 X509-SVID 的 TLS 证书资源名称&lt;/td&gt;
&lt;td&gt;default&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;default_bundle_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;用于 Envoy SDS 的默认 X.509 捆绑包的验证上下文资源名称&lt;/td&gt;
&lt;td&gt;ROOTCA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;default_all_bundles_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;用于 Envoy SDS 的所有捆绑包（包括联合捆绑包）的验证上下文资源名称&lt;/td&gt;
&lt;td&gt;ALL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;disable_spiffe_cert_validation&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;禁用 Envoy SDS 自定义验证&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;分析名称&#34;&gt;分析名称&lt;/h3&gt;
&lt;p&gt;这些是可以在 &lt;code&gt;profiling_freq&lt;/code&gt; 配置值中设置的可用配置文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;goroutine&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;threadcreate&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;heap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;block&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mutex&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;trace&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cpu&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;插件配置&#34;&gt;插件配置&lt;/h2&gt;
&lt;p&gt;代理配置文件还包含代理插件的配置。插件配置位于 &lt;code&gt;plugins { ... }&lt;/code&gt; 部分，其格式如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-hcl&#34; data-lang=&#34;hcl&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;plugins&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;pluginType&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;pluginName&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;plugin&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;configuration&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;options&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;here&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以下配置选项可用于配置插件：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;配置&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;plugin_cmd&lt;/td&gt;
&lt;td&gt;插件实现二进制文件的路径（可选，内置插件不需要）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;plugin_checksum&lt;/td&gt;
&lt;td&gt;插件二进制文件的可选 sha256（可选，内置不需要）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;enabled&lt;/td&gt;
&lt;td&gt;启用或禁用插件（默认启用）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;plugin_data&lt;/td&gt;
&lt;td&gt;插件特定数据&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;请参阅内置插件部分，了解有关开箱即用的插件的信息。&lt;/p&gt;
&lt;h2 id=&#34;遥测配置&#34;&gt;遥测配置&lt;/h2&gt;
&lt;p&gt;请参阅遥测配置指南，了解有关配置 SPIRE Agent 以发出遥测数据的更多信息。&lt;/p&gt;
&lt;h2 id=&#34;健康检查配置&#34;&gt;健康检查配置&lt;/h2&gt;
&lt;p&gt;代理可以公开可用于健康检查的其他端点。它可以通过设置 &lt;code&gt;listener_enabled = true&lt;/code&gt; 来启用。目前它公开了 2 条路径：一条用于活动（代理启动），一条用于准备（代理准备好服务请求）。默认情况下，健康检查端点将侦听 localhost:80，除非另有配置。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-hcl&#34; data-lang=&#34;hcl&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;health_checks&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;        listener_enabled&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;        bind_address&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;localhost&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;        bind_port&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;8080&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;        live_path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/live&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;        ready_path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/ready&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;命令行选项&#34;&gt;命令行选项&lt;/h2&gt;
&lt;h3 id=&#34;spire-agent-run&#34;&gt;&lt;code&gt;spire-agent run&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;上述所有配置文件选项都有相同的命令行对应项。此外，还可以使用以下标志：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;行动&lt;/th&gt;
&lt;th&gt;默认&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-allowUnauthenticatedVerifiers&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;允许代理向未经身份验证的验证者发布信任包&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-config&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SPIRE 配置文件的路径&lt;/td&gt;
&lt;td&gt;conf/代理/agent.conf&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-dataDir&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;代理可用于其运行时数据的目录&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-expandEnv&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;展开配置文件中的环境 $VARIABLES&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-joinToken&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;由 SPIRE 服务器生成的可选令牌&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-logFile&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将日志写入的文件&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-logFormat&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;日志格式，&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-logLevel&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;调试、信息、警告或错误&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-serverAddress&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SPIRE 服务器的 IP 地址或 DNS 名称&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-serverPort&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SPIRE 服务器的端口号&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-socketPath&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;绑定工作负载 API 套接字的位置&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-trustBundle&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SPIRE 服务器 CA 捆绑包的路径&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-trustBundleUrl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;下载 SPIRE 服务器 CA 捆绑包的 URL&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-trustDomain&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;该代理所属的信任域（不得超过 255 个字符）&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;将-spire-agent-作为-windows-服务运行&#34;&gt;将 SPIRE Agent 作为 Windows 服务运行&lt;/h4&gt;
&lt;p&gt;在 Windows 平台上，SPIRE Agent 可以选择作为 Windows 服务运行。作为 Windows 服务运行时，唯一支持的命令是 &lt;code&gt;run&lt;/code&gt; 命令。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;注意：SPIRE 不会自动在系统中创建该服务，必须由用户创建。启动服务时，使用 &lt;code&gt;run&lt;/code&gt; 命令执行 SPIRE Agent 的所有参数都必须作为服务参数传递。&lt;/em&gt;&lt;/p&gt;
&lt;h5 id=&#34;创建-spire-agent-windows-服务的示例&#34;&gt;创建 SPIRE Agent Windows 服务的示例&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; sc.exe create spire-agent &lt;span class=&#34;nv&#34;&gt;binpath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;c:&lt;span class=&#34;se&#34;&gt;\s&lt;/span&gt;pire&lt;span class=&#34;se&#34;&gt;\b&lt;/span&gt;in&lt;span class=&#34;se&#34;&gt;\s&lt;/span&gt;pire-agent.exe
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;运行-spire-agent-windows-服务的示例&#34;&gt;运行 SPIRE Agent Windows 服务的示例&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; sc.exe start spire-agent run -config c:&lt;span class=&#34;se&#34;&gt;\s&lt;/span&gt;pire&lt;span class=&#34;se&#34;&gt;\c&lt;/span&gt;onf&lt;span class=&#34;se&#34;&gt;\a&lt;/span&gt;gent&lt;span class=&#34;se&#34;&gt;\a&lt;/span&gt;gent.conf
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;spire-agent-api-fetch&#34;&gt;&lt;code&gt;spire-agent api fetch&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;调用工作负载 API 以获取 X509-SVID。该命令的别名为 &lt;code&gt;spire-agent api fetch x509&lt;/code&gt; 。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;行动&lt;/th&gt;
&lt;th&gt;默认&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-silent&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;抑制标准输出&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-socketPath&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SPIRE Agent API 套接字的路径&lt;/td&gt;
&lt;td&gt;/tmp/spire-agent/public/api.sock&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-timeout&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;等待回复的时间&lt;/td&gt;
&lt;td&gt;1s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-write&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将 SVID 数据写入指定路径&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;spire-agent-api-fetch-jwt&#34;&gt;&lt;code&gt;spire-agent api fetch jwt&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;调用工作负载 API 以获取 JWT-SVID。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;行动&lt;/th&gt;
&lt;th&gt;默认&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-audience&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;以逗号分隔的受众群体值列表&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-socketPath&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SPIRE Agent API 套接字的路径&lt;/td&gt;
&lt;td&gt;/tmp/spire-agent/public/api.sock&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-spiffeID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;正在请求的 JWT 的 SPIFFE ID（可选）&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-timeout&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;等待回复的时间&lt;/td&gt;
&lt;td&gt;1s&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;spire-agent-api-fetch-x509&#34;&gt;&lt;code&gt;spire-agent api fetch x509&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;调用工作负载 API 以获取 x.509-SVID。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;行动&lt;/th&gt;
&lt;th&gt;默认&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-silent&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;抑制标准输出&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-socketPath&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SPIRE Agent API 套接字的路径&lt;/td&gt;
&lt;td&gt;/tmp/spire-agent/public/api.sock&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-timeout&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;等待回复的时间&lt;/td&gt;
&lt;td&gt;1s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-write&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将 SVID 数据写入指定路径&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;spire-agent-api-validate-jwt&#34;&gt;&lt;code&gt;spire-agent api validate jwt&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;调用工作负载 API 以验证提供的 JWT-SVID。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;行动&lt;/th&gt;
&lt;th&gt;默认&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-audience&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;以逗号分隔的受众群体值列表&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-socketPath&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SPIRE Agent API 套接字的路径&lt;/td&gt;
&lt;td&gt;/tmp/spire-agent/public/api.sock&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-svid&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;待验证的 JWT-SVID&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-timeout&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;等待回复的时间&lt;/td&gt;
&lt;td&gt;1s&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;spire-agent-api-watch&#34;&gt;&lt;code&gt;spire-agent api watch&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;连接到工作负载 API 并监视 X509-SVID 更新，并在收到更新时打印详细信息。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;行动&lt;/th&gt;
&lt;th&gt;默认&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-socketPath&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SPIRE Agent API 套接字的路径&lt;/td&gt;
&lt;td&gt;/tmp/spire-agent/public/api.sock&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;spire-agent-healthcheck&#34;&gt;&lt;code&gt;spire-agent healthcheck&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;检查 SPIRE 代理的健康状况。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;行动&lt;/th&gt;
&lt;th&gt;默认&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-shallow&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;执行不太严格的健康检查&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-socketPath&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SPIRE Agent API 套接字的路径&lt;/td&gt;
&lt;td&gt;/tmp/spire-agent/public/api.sock&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-verbose&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;打印详细信息&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;spire-agent-validate&#34;&gt;&lt;code&gt;spire-agent validate&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;验证 SPIRE 代理配置文件。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;行动&lt;/th&gt;
&lt;th&gt;默认&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-config&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SPIRE 代理配置文件的路径&lt;/td&gt;
&lt;td&gt;代理配置文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-expandEnv&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;展开配置文件中的环境 $VARIABLES&lt;/td&gt;
&lt;td&gt;错误的&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;配置文件示例&#34;&gt;配置文件示例&lt;/h2&gt;
&lt;p&gt;本节包括用于格式化和语法参考的示例配置文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-hcl&#34; data-lang=&#34;hcl&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;agent&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;    trust_domain&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;example.org&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;    trust_bundle_path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/opt/spire/conf/initial_bundle.crt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;    data_dir&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/opt/spire/.data&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;    log_level&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;DEBUG&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;    server_address&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;spire-server&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;    server_port&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;8081&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;    socket_path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/tmp/spire-agent/public/api.sock&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;telemetry&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;Prometheus&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;        port&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1234&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;plugins&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;NodeAttestor&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;join_token&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;plugin_data&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;KeyManager&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;disk&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;plugin_data&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;            directory&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/opt/spire/.data&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;WorkloadAttestor&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;k8s&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;plugin_data&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;            kubelet_read_only_port&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;10255&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;WorkloadAttestor&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;unix&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;plugin_data&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;委托身份-api&#34;&gt;委托身份 API&lt;/h2&gt;
&lt;p&gt;委派身份 API 允许授权（即委派）工作负载代表无法由 SPIRE Agent 直接证明的工作负载获取 SVID 和捆绑包。授权工作负载通过向 SPIRE Agent 提供通常在工作负载证明期间获取的选择器来实现此目的。委派身份 API 通过管理 API 端点提供服务。&lt;/p&gt;
&lt;p&gt;要启用委派身份 API，请配置管理 API 端点地址和授权委派的 SPIFFE ID 列表。例如：&lt;/p&gt;
&lt;p&gt;Unix 系统：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-hcl&#34; data-lang=&#34;hcl&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;agent&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;    trust_domain&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;example.org&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;    admin_socket_path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/tmp/spire-agent/private/admin.sock&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;    authorized_delegates&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;spiffe://example.org/authorized_client1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;spiffe://example.org/authorized_client2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Windows：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-hcl&#34; data-lang=&#34;hcl&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;agent&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;    trust_domain&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;example.org&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;experimental&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;        admin_named_pipe_name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;\\spire-agent\\private\\admin&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;    authorized_delegates&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;spiffe://example.org/authorized_client1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;spiffe://example.org/authorized_client2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;envoy-sds-支持&#34;&gt;Envoy SDS 支持&lt;/h2&gt;
&lt;p&gt;SPIRE 代理支持 Envoy Secret Discovery Service (SDS)。SDS 通过与工作负载 API 相同的 Unix 域套接字提供服务。连接到 SDS 的 Envoy 进程被证明为工作负载。&lt;/p&gt;
&lt;p&gt;可以使用工作负载的 SPIFFE ID 作为资源名称（例如 &lt;code&gt;spiffe://example.org/database&lt;/code&gt; ）来获取包含 X509-SVID 的 &lt;code&gt;tlsv3.TlsCertificate&lt;/code&gt; 资源。或者，如果使用默认名称“default”，则会获取包含工作负载（即 Envoy）的默认 X509-SVID 的 &lt;code&gt;tlsv3.TlsCertificate&lt;/code&gt; 。默认名称是可配置的（请参阅 SDS 配置下的 &lt;code&gt;default_svid_name&lt;/code&gt; ）。&lt;/p&gt;
&lt;p&gt;可以使用所需信任域的 SPIFFE ID 作为资源名称（例如 &lt;code&gt;spiffe://example.org&lt;/code&gt; ）来获取包含受信任 CA 证书的 &lt;code&gt;tlsv3.CertificateValidationContext&lt;/code&gt; 资源。此外，还有另外两个特殊资源名称可用。第一个默认为“ROOTCA”，为代理所属的信任域提供 CA 证书。第二个默认为“ALL”，返回代理所属信任域以及适用于 Envoy 工作负载的任何联合信任域的可信 CA 证书。这些资源名称的默认名称可分别通过 &lt;code&gt;default_bundle_name&lt;/code&gt; 和 &lt;code&gt;default_all_bundles_name&lt;/code&gt; 进行配置。 “ALL”资源名称需要支持 SPIFFE 证书验证器扩展，该扩展仅从 Envoy 1.18 开始可用。默认名称是可配置的（请参阅 SDS 配置下的 &lt;code&gt;default_all_bundles_name&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;SPIFFE 证书验证器将 Envoy 配置为执行 SPIFFE 身份验证。SPIRE Agent 返回的验证上下文默认包含此扩展。然而，如果需要标准 X.509 链验证，SPIRE Agent 可以配置为省略扩展。可以通过在 SDS 配置中配置 &lt;code&gt;disable_spiffe_cert_validation&lt;/code&gt; 来更改默认行为。各个 Envoy 实例还可以通过在 Envoy 节点元数据中配置设置 &lt;code&gt;disable_spiffe_cert_validation&lt;/code&gt; 键来覆盖默认行为。&lt;/p&gt;
&lt;h2 id=&#34;openshift-支持&#34;&gt;OpenShift 支持&lt;/h2&gt;
&lt;p&gt;OpenShift 的默认安全配置文件禁止访问主机级资源。可以应用一组自定义策略来启用 Spire 在 OpenShift 中运行所需的访问级别。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;注意：需要具有 &lt;code&gt;cluster-admin&lt;/code&gt; 权限的用户才能应用这些策略。&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;安全上下文约束&#34;&gt;安全上下文约束&lt;/h3&gt;
&lt;p&gt;Pod 执行的操作由安全上下文约束 (SCC) 控制，并且根据条件范围为每个被接纳的 Pod 分配一个特定的 SCC。以下名为 &lt;code&gt;spire&lt;/code&gt; 的自定义 SCC 可用于启用 Spire Agent 所需的必要主机级访问&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;allowHostDirVolumePlugin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;allowHostIPC&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;allowHostNetwork&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;allowHostPID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;allowHostPorts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;allowPrivilegeEscalation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;allowPrivilegedContainer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;allowedCapabilities&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;security.openshift.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;defaultAddCapabilities&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;fsGroup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;MustRunAs&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;groups&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;SecurityContextConstraints&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;annotations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;include.release.openshift.io/self-managed-high-availability&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kubernetes.io/description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Customized policy for Spire to enable host level access.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;release.openshift.io/create-only&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;spire&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;priority&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;readOnlyRootFilesystem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;requiredDropCapabilities&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;KILL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;MKNOD&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;SETUID&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;SETGID&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;runAsUser&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;RunAsAny&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;seLinuxContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;MustRunAs&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;supplementalGroups&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;RunAsAny&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;users&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;hostPath&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;configMap&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;downwardAPI&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;emptyDir&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;persistentVolumeClaim&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;projected&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;secret&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;将安全约束与工作负载关联&#34;&gt;将安全约束与工作负载关联&lt;/h3&gt;
&lt;p&gt;通过将 SCC 与 pod 引用的服务帐户相关联，可以通过基于角色的访问控制策略授予工作负载对安全上下文约束的访问权限。&lt;/p&gt;
&lt;p&gt;为了利用 &lt;code&gt;spire&lt;/code&gt; SCC，必须创建一个利用引用 SCC 的 &lt;code&gt;use&lt;/code&gt; 动词的 ClusterRole：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ClusterRole&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;annotations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;include.release.openshift.io/self-managed-high-availability&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rbac.authorization.kubernetes.io/autoupdate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;system:openshift:scc:spire&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;apiGroups&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;security.openshift.io&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resourceNames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;spire&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;securitycontextconstraints&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;verbs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;use&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后，通过在 &lt;code&gt;spire&lt;/code&gt; 命名空间中创建 RoleBinding，将 &lt;code&gt;system:openshift:scc:spire&lt;/code&gt; ClusterRole 关联到 &lt;code&gt;spire-agent&lt;/code&gt; 服务帐户&lt;/p&gt;
&lt;p&gt;注意：如果在应用以下策略之前存在 &lt;code&gt;spire&lt;/code&gt; 命名空间，则创建该命名空间。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;RoleBinding&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;system:openshift:scc:spire&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;spire&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;roleRef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiGroup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ClusterRole&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;system:openshift:scc:spire&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;subjects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ServiceAccount&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;spire-agent&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;spire&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;由于 SCC 在 Pod 准入时应用，因此请删除任何现有的 Spire Agent Pod。所有新接纳的 pod 将利用 &lt;code&gt;spire&lt;/code&gt; SCC，以便在 OpenShift 中使用。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用 Envoy 和 X.509-SVID 进行 OPA 授权</title>
      <link>https://lib.jimmysong.io/spiffe-and-spire/examples/envoy-opa/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/spiffe-and-spire/examples/envoy-opa/</guid>
      <description>&lt;p&gt;通过 Envoy 与 X.509-SVIDs 实现安全通信并结合 Open Policy Agent（OPA）进行授权。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.openpolicyagent.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Open Policy Agent&lt;/a&gt;（OPA）是一个开源通用策略引擎，其提供的授权（AuthZ）是对 SPIRE 提供的认证（AuthN）的很好补充。&lt;/p&gt;
&lt;p&gt;本教程将在 SPIRE Envoy-X.509 教程 的基础上添加 &lt;a href=&#34;https://www.openpolicyagent.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Open Policy Agent&lt;/a&gt;（OPA）以演示如何将 SPIRE、Envoy 和 OPA 结合使用，实现 X.509 SVID 认证和请求授权。本教程将演示如何在现有教程的基础上实现使用 OPA 进行请求授权。&lt;/p&gt;
&lt;p&gt;为了便于说明，让我们通过将 OPA 代理实例作为后端服务的新侧车来扩展 Envoy X.509 教程中创建的场景。借助 Envoy 的外部授权过滤器功能，结合 OPA 作为授权服务，可以实现对传入后端服务的每个请求执行安全策略。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-spire-envoy-opa-集成图&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/SPIRE_Envoy_OPA_X509_diagram.png&#34; alt=&#34;SPIRE Envoy OPA 集成图&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      SPIRE Envoy OPA 集成图
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;如图所示，前端服务通过 Envoy 实例连接到后端服务，Envoy 实例使用 SPIRE 代理提供的 SDS 模块进行身份验证，从而建立了 mTLS 连接。Envoy 通过 mTLS 连接将 HTTP 请求发送到后端，后端通过 OPA 代理实例根据安全策略对 HTTP 请求进行授权或拒绝。&lt;/p&gt;
&lt;p&gt;在本教程中，你将学到：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将 OPA 代理添加到现有的 Envoy X.509 教程的后端服务中&lt;/li&gt;
&lt;li&gt;将外部授权过滤器添加到将 Envoy 连接到 OPA 的 Envoy 配置中&lt;/li&gt;
&lt;li&gt;使用 SPIRE 与 Envoy 进行 OPA 授权的测试&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;先决条件&#34;&gt;先决条件&lt;/h1&gt;
&lt;p&gt;在继续之前，请查看以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当通过 SPIRE Envoy-X.509 教程 进行配置时，你将需要访问 Kubernetes 环境。可选择使用 &lt;code&gt;pre-set-env.sh&lt;/code&gt; 脚本创建 Kubernetes 环境。&lt;/li&gt;
&lt;li&gt;本教程所需的 YAML 文件可以在 &lt;a href=&#34;https://github.com/spiffe/spire-tutorials&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/spiffe/spire-tutorials&lt;/a&gt; 的 &lt;code&gt;k8s/envoy-opa&lt;/code&gt; 目录中找到。如果尚未克隆 spire-tutorials 存储库，请立即执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果 Kubernetes 中的 &lt;em&gt;配置 Envoy 进行 X.509 SVID 认证&lt;/em&gt; 教程环境不可用，你可以使用以下脚本创建该环境，并将其用作本教程的起点。从 &lt;code&gt;k8s/envoy-opa&lt;/code&gt; 目录运行以下 Bash 脚本：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ bash scripts/pre-set-env.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该脚本将创建集群中所需的所有 SPIRE 服务器和 SPIRE 代理资源，然后将为 SPIRE Envoy X.509 教程创建所有资源，该教程是 SPIRE Envoy 和 OPA 教程的基本场景。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; 本教程中所需的配置更改已显示为教程中的代码段。但是，所有这些设置已经配置好了。你无需编辑任何配置文件。&lt;/p&gt;
&lt;h2 id=&#34;外部-ip-支持&#34;&gt;外部 IP 支持&lt;/h2&gt;
&lt;p&gt;本教程需要一个能够分配外部 IP（例如 &lt;a href=&#34;https://metallb.universe.tf/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;metallb&lt;/a&gt;）的负载均衡器。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.13.7/config/manifests/metallb-native.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;等待 metallb 启动：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl &lt;span class=&#34;nb&#34;&gt;wait&lt;/span&gt; --namespace metallb-system &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;                --for&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;condition&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;ready pod &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;                --selector&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;metallb &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;                --timeout&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;90s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;应用 metallb 配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -f ../envoy-x509/metallb-config.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;第一部分部署更新和新资源&#34;&gt;第一部分：部署更新和新资源&lt;/h1&gt;
&lt;p&gt;假设以 SPIRE Envoy X.509 教程为起点，需要更新一些资源并创建其他资源。目标是在请求到达 &lt;code&gt;backend&lt;/code&gt; 服务之前，通过 OPA 让其进行授权。Envoy 实例之间已经建立了 mTLS 连接，因此唯一缺&lt;/p&gt;
&lt;p&gt;失的部分是将 OPA 作为 sidecar 添加到部署中。可以通过以下方式将新容器添加到 &lt;a href=&#34;https://github.com/spiffe/spire-tutorials/blob/main/k8s/envoy-opa/k8s/backend/backend-deployment.yaml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;backend-deployment.yaml&lt;/code&gt;&lt;/a&gt; 中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;opa&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;openpolicyagent/opa:0.50.2-envoy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;imagePullPolicy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;IfNotPresent&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;opa-envoy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;containerPort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8182&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;protocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;TCP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;opa-api-port&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;containerPort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8181&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;protocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;TCP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;run&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;--server&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;--config-file=/run/opa/opa-config.yaml&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;/run/opa/opa-policy.rego&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumeMounts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;backend-opa-policy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mountPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/run/opa&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;readOnly&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;请注意使用了 &lt;code&gt;openpolicyagent/opa:0.50.2-envoy&lt;/code&gt; 镜像。该镜像通过在 OPA 中扩展了一个实现 Envoy 外部授权 API 的 gRPC 服务器，以便 OPA 可以与 Envoy 通信以做出策略决策。&lt;/p&gt;
&lt;p&gt;必须在 &lt;code&gt;volumes&lt;/code&gt; 部分中添加 ConfigMap &lt;code&gt;backend-opa-policy&lt;/code&gt;，如下所示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;backend-opa-policy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;configMap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;backend-opa-policy-config&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ConfigMap &lt;code&gt;backend-opa-policy&lt;/code&gt; 提供了两个资源，分别是在 &lt;a href=&#34;https://spiffe.io/docs/latest/microservices/envoy-opa/readme/#opa-configuration&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OPA Configuration&lt;/a&gt; 中描述的 &lt;code&gt;opa-config.yaml&lt;/code&gt; 和在 &lt;a href=&#34;https://spiffe.io/docs/latest/microservices/envoy-opa/readme/#opa-policy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Rego Policy&lt;/a&gt; 部分中解释的 &lt;code&gt;opa-policy.rego&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;opa-配置&#34;&gt;OPA 配置&lt;/h2&gt;
&lt;p&gt;在本教程中，我们将在 &lt;a href=&#34;https://github.com/spiffe/spire-tutorials/blob/main/k8s/envoy-opa/k8s/backend/config/opa-config.yaml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;opa-config.yaml&lt;/code&gt;&lt;/a&gt; 中创建以下 OPA 配置文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;decision_logs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;bash&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;plugins&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;envoy_ext_authz_grpc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8182&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;data.envoy.authz.allow&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这里，&lt;code&gt;decision_logs.bash: true&lt;/code&gt; 强制 OPA 在本地以 info 级别记录决策。稍后在教程中，我们将使用这些日志来检查不同请求的结果。&lt;/p&gt;
&lt;p&gt;接下来，让我们来查看 &lt;code&gt;envoy_ext_authz_grpc&lt;/code&gt; 插件的配置。首先，&lt;code&gt;addr&lt;/code&gt; 键设置了 Envoy 外部授权 gRPC 服务器的监听地址。这必须与 Envoy 过滤器资源中配置的值相匹配，后面的章节将详细介绍。&lt;code&gt;query&lt;/code&gt; 键定义了要查询的策略的名称。接下来的部分将重点介绍针对 &lt;code&gt;query&lt;/code&gt; 键指定的 &lt;code&gt;envoy.authz.allow&lt;/code&gt; 策略的详细信息。&lt;/p&gt;
&lt;h2 id=&#34;opa-策略&#34;&gt;OPA 策略&lt;/h2&gt;
&lt;p&gt;OPA 策略以一种称为 Rego 的高级声明性语言表达。在本教程中，我们创建了一个名为 &lt;code&gt;allow&lt;/code&gt; 的示例规则，其中包含三个表达式（参见 &lt;a href=&#34;https://github.com/spiffe/spire-tutorials/blob/main/k8s/envoy-opa/k8s/backend/config/opa-policy.rego&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;opa-policy.rego&lt;/code&gt;&lt;/a&gt;）。为了使规则成立，所有表达式都必须为 true。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;default allow = false

allow {
   valid_path
   http_request.method == &amp;#34;GET&amp;#34;
   svc_spiffe_id == &amp;#34;spiffe://example.org/ns/default/sa/default/frontend&amp;#34;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;让我们逐个查看每个表达式。&lt;code&gt;valid_path&lt;/code&gt; 是一个用户定义的函数，用于确保仅允许发送到允许资源的请求。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import input.attributes.request.http as http_request

valid_path {
   glob.match(&amp;#34;/balances/*&amp;#34;, [], http_request.path)
}

valid_path {
   glob.match(&amp;#34;/profiles/*&amp;#34;, [], http_request.path)
}

valid_path {
   glob.match(&amp;#34;/transactions/*&amp;#34;, [], http_request.path)
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;函数 &lt;code&gt;valid_path&lt;/code&gt; 利用了内置函数 &lt;code&gt;glob.match(&lt;/code&gt;&lt;em&gt;pattern&lt;/em&gt;, &lt;em&gt;delimiters&lt;/em&gt;, &lt;em&gt;match&lt;/em&gt;&lt;code&gt;)&lt;/code&gt;，其输出为 true，如果 &lt;em&gt;match&lt;/em&gt; 可以在以 &lt;em&gt;delimiters&lt;/em&gt; 分隔的 &lt;em&gt;pattern&lt;/em&gt; 中找到，然后在 Rego 中为了表示逻辑或，你定义具有相同名称的多个规则。这就是为什么有三个定义 &lt;code&gt;valid_path&lt;/code&gt; 的规则，每个规则对应一个有效资源。&lt;/p&gt;
&lt;p&gt;接下来的表达式定义了请求的 HTTP 方法必须等于 &lt;code&gt;GET&lt;/code&gt;：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;http_request.method == &amp;#34;GET&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最后一个表达式也是一个用户定义的函数：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;svc_spiffe_id == &amp;#34;spiffe://example.org/ns/default/sa/default/frontend&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;svc_spiffe_id&lt;/code&gt; 函数从请求中的 &lt;code&gt;x-forwarded-client-cert&lt;/code&gt;（XFCC）头中提取服务的 SPIFFE ID。XFCC 头是一个代理头，指示请求已通过的某些或所有客户端或代理的证书信息。&lt;code&gt;svc_spiffe_id&lt;/code&gt; 函数利用了来自 &lt;code&gt;envoy.yaml&lt;/code&gt; 的两个 Envoy 设置，这些设置修改了 HTTP 头：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;forward_client_cert_details: sanitize_set
set_current_client_cert_details:
   uri: true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当客户端连接为 mTLS 时，例如在此场景中，&lt;code&gt;forward_client_cert_details: sanitize_set&lt;/code&gt; 会将 XFCC 头重置为客户端证书信息，&lt;code&gt;set_current_client_cert_details&lt;/code&gt; 指定要转发的客户端证书中的字段。&lt;/p&gt;
&lt;p&gt;XFCC 头值是一个以逗号（“,”）分隔的字符串。每个子字符串都是一个 XFCC 元素，每个 XFCC 元素都是一个以分号（“;”）分隔的字符串。每个子字符串都是一个键值对，由等号（“=”）组合在一起。Envoy 支持以下键：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;By&lt;/code&gt; 当前代理证书的主题可选名称（URI 类型）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Hash&lt;/code&gt; 当前客户端证书的 SHA 256 摘要。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Cert&lt;/code&gt; 整个客户端证书的 URL 编码 PEM 格式。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Subject&lt;/code&gt; 当前客户端证书的 Subject 字段。值总是被双引号引起来。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;URI&lt;/code&gt; 当前客户端证书的 URI 类型主题可选名称字段。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DNS&lt;/code&gt; 当前客户端证书的 DNS 类型主题可选名称字段。客户端证书可能包含多个 DNS 类型的主题可选名称，每个都将是一个单独的键值对。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下是带有示例值的 XFCC 头，为了便于阅读，该值分为两行：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;x-forwarded-client-cert: By=spiffe://example.org/ns/default/sa/default/backend;Hash=a9317919875e178ce6d6
1eaa023490a2091299753ca5cd01d5323e40696d690b;URI=spiffe://example.org/ns/default/sa/default/frontend
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在 &lt;code&gt;x-forwarded-client-cert&lt;/code&gt; 头中，&lt;code&gt;Hash&lt;/code&gt; 总是设置的，当客户端证书呈现 URI 类型的主题可选名称值时，&lt;code&gt;By&lt;/code&gt; 也总是设置的，这在使用 X.509 SVIDs 时是真的。然后 &lt;code&gt;set_current_client_cert_details: uri: true&lt;/code&gt; 确保了 URI 类型的主题可选名称（SAN）字段被转发。&lt;/p&gt;
&lt;p&gt;了解了 XFCC 头的这些细节，并知道 X.509 SVID &lt;strong&gt;必须&lt;/strong&gt; 包含一个 URI SAN，SPIFFE ID 设置为 SAN 扩展中的 URI 类型，那么就可以使用以下函数从 Envoy 设置的 XFCC 头中提取 SPIFFE ID：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;svc_spiffe_id = spiffe_id {
   [_, _, uri_type_san] := split(http_request.headers[&amp;#34;x-forwarded-client-cert&amp;#34;], &amp;#34;;&amp;#34;)
   [_, spiffe_id] := split(uri_type_san, &amp;#34;=&amp;#34;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;因此，只有当请求发送到有效的资源（/balances/，/profiles/ 或者 /transactions/）时，使用 &lt;code&gt;GET&lt;/code&gt; 方法，并且请求来自 SPIFFE ID 等于 &lt;code&gt;spiffe://example.org/ns/default/sa/default/frontend&lt;/code&gt; 的工作负载时，策略才会评估为真。在所有其他情况下，请求都不会被 OPA 授权，因此会被 Envoy 拒绝。&lt;/p&gt;
&lt;h2 id=&#34;添加外部授权过滤器&#34;&gt;添加外部授权过滤器&lt;/h2&gt;
&lt;p&gt;最后，此设置需要添加一个连接到 OPA 实例的外部授权过滤器。这个新的 HTTP 过滤器与 OPA 一起作为授权服务使用，以通过 Envoy 接收的 API 请求来执行安全策略。这是通过在 &lt;code&gt;envoy.yaml&lt;/code&gt; 中添加一个新的 HTTP 过滤器来实现的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;envoy.ext_authz&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;typed_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;@type&amp;#34;: &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;transport_api_version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;V3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;with_request_body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;max_request_bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8192&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;allow_partial_message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;failure_mode_allow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;grpc_service&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;google_grpc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;target_uri&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;127.0.0.1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8182&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;stat_prefix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ext_authz&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;timeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;5s&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;请注意，&lt;code&gt;target_uri&lt;/code&gt; 配置为与前一步中定义的 OPA 服务通信。如果你感兴趣，完整的配置文件位于 &lt;a href=&#34;https://github.com/spiffe/spire-tutorials/blob/main/k8s/envoy-opa/k8s/backend/config/envoy.yaml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;k8s/backend/config/envoy.yaml&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;应用新资源&#34;&gt;应用新资源&lt;/h2&gt;
&lt;p&gt;为了使新配置生效，需要应用 OPA 配置的 ConfigMap，并更新 Envoy 配置。确保当前工作目录是 &lt;code&gt;.../spire-tutorials/k8s/envoy-opa&lt;/code&gt;，并使用以下命令应用新配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -k k8s/.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;configmap/backend-envoy configured
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;configmap/backend-opa-policy-config configured
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;deployment.apps/backend configured
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来，需要重启 &lt;code&gt;backend&lt;/code&gt; pod 以获取新配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl scale deployment backend --replicas&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl scale deployment backend --replicas&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;第-2-部分测试连接&#34;&gt;第 2 部分：测试连接&lt;/h1&gt;
&lt;p&gt;现在，服务已经部署并在 SPIRE 中注册了，让我们测试一下我们已经配置的授权。&lt;/p&gt;
&lt;h2 id=&#34;测试有效请求&#34;&gt;测试有效请求&lt;/h2&gt;
&lt;p&gt;第一个测试将演示满足策略的请求允许显示关联的数据。要运行此测试，我们需要找到构成用于访问数据的 URL 的 IP 地址和端口。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl get services
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NAME            TYPE           CLUSTER-IP    EXTERNAL-IP      PORT&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;S&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;          AGE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;backend-envoy   ClusterIP      None          &amp;lt;none&amp;gt;           9001/TCP         6m53s
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;frontend        LoadBalancer   10.8.14.117   35.222.164.221   3000:32586/TCP   6m52s
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;frontend-2      LoadBalancer   10.8.7.57     35.222.190.182   3002:32056/TCP   6m53s
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubernetes      ClusterIP      10.8.0.1      &amp;lt;none&amp;gt;           443/TCP          59m
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;frontend&lt;/code&gt; 服务将在 &lt;code&gt;EXTERNAL-IP&lt;/code&gt; 值和端口 &lt;code&gt;3000&lt;/code&gt; 上可用，这是我们为容器配置的。在上面显示的示例输出中，要导航到的 URL 是 &lt;code&gt;http://35.222.164.221:3000&lt;/code&gt;。打开浏览器，导航到环境中显示的 &lt;code&gt;frontend&lt;/code&gt; 的 IP 地址，添加端口 &lt;code&gt;:3000&lt;/code&gt;。一旦页面加载，你将看到用户 &lt;em&gt;Jacob Marley&lt;/em&gt; 的账户详细信息。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-前端视图&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/frontend_view.png&#34; alt=&#34;前端视图&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      前端视图
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;让我们看一下 OPA 代理的日志，看看后台正在发生什么。使用以下 Bash 脚本获取运行在 &lt;code&gt;backend&lt;/code&gt; 服务旁边的 OPA 实例的日志，并使用 &lt;code&gt;[jq](&amp;lt;https://stedolan.github.io/jq/&amp;gt;)&lt;/code&gt; 处理输出：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ bash scripts/backend-opa-logs.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出显示了每个请求的决定。例如，对 &lt;code&gt;frontend&lt;/code&gt; 服务的请求可能会产生类似于以下的日志条目：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;decision_id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;207b7b54-0ec0-4ffb-a531-c86a9f05c38d&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;input&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;attributes&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;err&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;#34;request&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;#34;http&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;nt&#34;&gt;&amp;#34;headers&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;:authority&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;localhost:3003&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;:method&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;GET&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;:path&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/profiles/2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;accept-encoding&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;gzip&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;content-length&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;user-agent&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Go-http-client/1.1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;x-forwarded-client-cert&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;By=spiffe://example.org/ns/default/sa/default/backend;Hash=a9317919875e178ce6d61eaa023490a2091299753ca5cd01d5323e40696d690b;URI=spiffe://example.org/ns/default/sa/default/frontend&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;x-forwarded-proto&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;http&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;x-request-id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;e0939bcf-8beb-4910-a980-be0468ec023f&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;nt&#34;&gt;&amp;#34;method&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;GET&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;nt&#34;&gt;&amp;#34;path&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/profiles/2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;nt&#34;&gt;&amp;#34;protocol&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;HTTP/1.1&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;err&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;err&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;err&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;msg&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Decision Log&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;query&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;data.envoy.authz.allow&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;requested_by&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;result&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;2020-06-11T18:58:47Z&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;timestamp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;2020-06-11T18:58:47.840319148Z&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;openpolicyagent.org/decision_logs&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这种情况下，OPA &lt;code&gt;result&lt;/code&gt; 决定为真，意味着请求被允许通过过滤器并到达 &lt;code&gt;backend&lt;/code&gt; 服务，因为满足了 &lt;code&gt;opa-policy.rego&lt;/code&gt; Rego 策略中定义的所有以下条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从 &lt;code&gt;x-forwarded-client-cert&lt;/code&gt;（XFCC）头中提取的 SPIFFE ID URI 匹配预期的 SPIFFE ID：&lt;code&gt;spiffe://example.org/ns/default/sa/default/frontend&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;请求的路径匹配：&lt;code&gt;/profiles/2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;HTTP 方法匹配：&lt;code&gt;GET&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;测试无效请求&#34;&gt;测试无效请求&lt;/h2&gt;
&lt;p&gt;另一方面，按照相同的步骤，我们可以确认不满足策略的请求阻止了相关数据的显示。在此情况下，&lt;code&gt;frontend-2&lt;/code&gt;服务无法与&lt;code&gt;backend&lt;/code&gt;服务通信，因为其 SPIFFE ID 不满足 OPA Agent 的策略。因此，当你连接到&lt;code&gt;frontend-2&lt;/code&gt;服务的 URL（例如&lt;code&gt;http://35.222.190.182:3002&lt;/code&gt;），浏览器只显示标题，没有任何帐户详细信息。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-浏览器视图&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/frontend-2_view_no_details.png&#34; alt=&#34;浏览器视图&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      浏览器视图
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;尝试显示&lt;code&gt;frontend-2&lt;/code&gt;数据后，你可以使用与上一节相同的&lt;code&gt;scripts/backend-opa-logs.sh&lt;/code&gt;脚本来验证 OPA 做出的决定。由于 SPIFFE ID 不匹配，&lt;code&gt;frontend-2&lt;/code&gt;服务有类似的日志条目，但结果等于&lt;code&gt;false&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;使用新策略重新测试-frontend-2&#34;&gt;使用新策略重新测试 frontend-2&lt;/h2&gt;
&lt;p&gt;让我们更新 Rego 策略以匹配&lt;code&gt;frontend-2&lt;/code&gt;的 SPIFFE ID，然后再进行测试。我们可以利用一个 Bash 脚本来完成这个任务。执行后，它将打开由你的&lt;code&gt;KUBE_EDITOR&lt;/code&gt;或&lt;code&gt;EDITOR&lt;/code&gt;环境变量定义的编辑器，或者在 Linux 上回退到&lt;code&gt;vi&lt;/code&gt;，在 Windows 上回退到 Notepad。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ bash scripts/backend-update-policy.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打开编辑器后，寻找指定 SPIFFE ID 的以下行：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;svc_spiffe_id == &amp;#34;spiffe://example.org/ns/default/sa/default/frontend&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;更新该行以匹配&lt;code&gt;frontend-2&lt;/code&gt;工作负载的 SPIFFE ID：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;svc_spiffe_id == &amp;#34;spiffe://example.org/ns/default/sa/default/frontend-2&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;保存更改并退出。&lt;code&gt;backend-update-policy.sh&lt;/code&gt;脚本恢复。该脚本应用 ConfigMap 的新版本，然后重新启动&lt;code&gt;backend&lt;/code&gt;pod 以获取新的规则。等待几秒钟，等待部署传播，然后再尝试在浏览器中查看&lt;code&gt;frontend-2&lt;/code&gt;服务。一旦 pod 准备就绪，刷新浏览器，使用&lt;code&gt;frontend-2&lt;/code&gt;服务的正确 URL（例如&lt;code&gt;http://35.222.190.182:3002&lt;/code&gt;）。结果，现在页面显示了用户&lt;em&gt;Alex Fergus&lt;/em&gt;的帐户详细信息。&lt;/p&gt;
&lt;p&gt;另一方面，如果你现在连接到&lt;code&gt;frontend&lt;/code&gt;服务的 URL（例如&lt;code&gt;http://35.222.164.221:3000&lt;/code&gt;），浏览器只显示标题，没有任何帐户详细信息。这是预期的行为，因为策略已经更新，现在&lt;code&gt;frontend&lt;/code&gt;服务的 SPIFFE ID 不再满足策略。&lt;/p&gt;
&lt;h1 id=&#34;清理&#34;&gt;清理&lt;/h1&gt;
&lt;p&gt;当你完成时，你可以使用以下命令清理为教程创建的环境。它将删除：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为此 SPIRE - Envoy 与 OPA 集成教程创建的所有资源&lt;/li&gt;
&lt;li&gt;为 SPIRE - Envoy X.509 集成教程创建的所有资源&lt;/li&gt;
&lt;li&gt;SPIRE Agent，SPIRE Server 和命名空间的所有部署和配置&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ bash scripts/clean-env.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>身份背后的通用概念</title>
      <link>https://lib.jimmysong.io/spiffe/general-concepts-behind-identity/</link>
      <pubDate>Fri, 07 Oct 2022 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/spiffe/general-concepts-behind-identity/</guid>
      <description>&lt;p&gt;本章解释了什么是身份，以及分配、管理和使用身份的基本知识。这些是你需要知道的概念，以便了解 SPIFFE 和 SPIRE 的工作方式。&lt;/p&gt;
&lt;h2 id=&#34;什么是身份&#34;&gt;什么是身份？&lt;/h2&gt;
&lt;p&gt;对于人类来说，身份是复杂的。人类是独特的个体，不能被克隆，也不能用代码取代他们的思想，而且一生中可能会有多种社会身份。软件服务也同样复杂。&lt;/p&gt;
&lt;p&gt;一个单一的程序可能会扩展到成千上万的节点，或者在构建系统推送新的更新时，一天内多次改变其代码。在这样一个快速变化的环境中，一个身份必须代表服务的特定逻辑目的（例如，客户计费数据库）和与已建立的权威或信任根（例如，&lt;code&gt;my-company.example.org&lt;/code&gt; 或生产工作负载的发行机构）的关联。&lt;/p&gt;
&lt;p&gt;一旦为一个组织中的所有服务发布了身份，它们就可以被用于&lt;strong&gt;认证&lt;/strong&gt;：证明一个服务是它所声称的那样。一旦服务经过相互认证，它们就可以使用身份进行&lt;strong&gt;授权&lt;/strong&gt;，或控制谁可以访问这些服务，以及&lt;strong&gt;保密性&lt;/strong&gt;，或保持它们相互传输的数据的秘密。虽然 SPIFFE 本身并不包括认证、授权或保密性，但它发出的身份可用于所有这些。&lt;/p&gt;
&lt;p&gt;为一个组织指定服务身份与设计该组织基础设施的任何其他部分类似：它密切依赖于该组织的需求。当一个服务扩大规模、改变代码或移动位置时，它保持相同的身份可能是合乎逻辑的。&lt;/p&gt;
&lt;h3 id=&#34;值得信赖的身份&#34;&gt;值得信赖的身份&lt;/h3&gt;
&lt;p&gt;现在我们已经定义了身份，那么我们如何表示这种身份？我们如何知道，当一个软件（或工作负载）声称自己的身份时，这个声称是值得信赖的？为了开始探索这些问题，我们必须首先讨论身份是如何建立的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;人类的身份&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;请允许我们用大家共同的东西来解释这些概念：现实世界中的身份。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;身份证件&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;如果一个名字是一个人的身份，那么这个身份的证明就是一个身份文件。护照是允许一个人证明其身份的文件，所以它是一个身份文件。像不同国家的护照一样，不同类型的软件身份文件可能看起来不同，而且不总是包含相同的信息。但为了有用，它们通常至少都包含一些共同的信息，如姓名。&lt;/p&gt;
&lt;p&gt;护照和写有你名字的餐巾纸之间的区别是什么？&lt;/p&gt;
&lt;p&gt;最重要的区别是来源。对于护照，我们相信&lt;strong&gt;签发机构&lt;/strong&gt;已经核实了你的身份，而且我们有能力核实护照是由该受信任的机构签发的（验证）。对于那张餐巾纸，我们不知道它来自哪里，也没有办法验证它是否来自你说的那家餐馆。我们也无法相信餐厅在餐巾纸上写了正确的名字，或者在你传达你的名字时验证了它的准确性。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;信任一个发行机构&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;我们相信护照，因为我们隐含地相信签发护照的机构。我们信任他们签发这些身份文件的过程：他们有记录和控制，以确保他们只向正确的个人签发身份。我们信任这个过程的管理，所以我们知道该机构签发的护照是某人身份的忠实代表。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;核实身份文件&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;鉴于此，我们如何区分真护照和假护照？这就是验证的意义所在。组织需要一种方法来确定身份文件是否是由我们信任的权威机构签发的。这通常是通过难以复制但容易验证的水印来实现的。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;对出示身份证件的人进行认证&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;护照记录了关于身份所代表的人的几项信息。首先，它们包括一个人的照片，可以用来验证出示者是护照上的同一个人。它们还可能包括此人的其他身体特征 —— 例如，他们的身高、体重和眼睛颜色。&lt;/p&gt;
&lt;p&gt;所有这些属性都可以用来&lt;strong&gt;验证&lt;/strong&gt;出示护照的人。&lt;/p&gt;
&lt;p&gt;简而言之，护照是我们的&lt;strong&gt;身份文件&lt;/strong&gt;，我们用它来确认彼此的身份，因为我们信任&lt;strong&gt;签发机构&lt;/strong&gt;，并且有办法&lt;strong&gt;验证&lt;/strong&gt;该文件来自该机构。最后，我们可以通过交叉参考护照的内容和持有护照的人，来&lt;strong&gt;验证&lt;/strong&gt;出示护照的人。&lt;/p&gt;
&lt;h3 id=&#34;数字世界中的身份加密身份&#34;&gt;数字世界中的身份：加密身份&lt;/h3&gt;
&lt;p&gt;绕回工作负载身份，上述概念如何映射到计算机系统？计算机使用的是&lt;strong&gt;数字身份文件&lt;/strong&gt;，而不是护照。X.509 证书、签名的 JSON 网络令牌（JWT）和 Kerberos 票据，都是数字身份文件的例子。数字身份文件可以使用加密技术进行验证。然后，计算机系统可以被验证，就像一个拥有护照的人一样。&lt;/p&gt;
&lt;p&gt;做到这一点的最有用和最普遍的技术之一是&lt;strong&gt;公钥基础设施（PKI）&lt;/strong&gt;。PKI 被定义为一套创建、管理、分发、使用、存储和撤销数字证书以及管理公钥加密所需的角色、策略、硬件、软件和程序。有了 PKI，数字身份文件可以在本地进行验证，即根据一组小的、静态的根信任包进行验证。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;X.509 的简要概述&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当&lt;a href=&#34;https://www.itu.int/en/ITU-T/about/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;国际电信联盟电信标准化部门（ITU-T）&lt;/a&gt;于 1988 年首次发布 X.509 标准的 PKI 时，这在当时是非常雄心勃勃的，现在仍然被认为是如此。该标准最初设想为人类、服务器和其他设备提供证书，形成一个巨大的全球一体化安全通信系统。虽然 X.509 从未达到其最初的预期，但它是几乎所有安全通信协议的基础。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;X.509 是如何在单一机构中工作的&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Bob 的计算机需要一个证书。他生成了一个随机的&lt;strong&gt;私钥&lt;/strong&gt;，还有一个&lt;strong&gt;证书签名请求&lt;/strong&gt;（CSR），其中包括他的计算机的基本信息，比如它的名字；我们称之为 &lt;code&gt;bobsbox&lt;/code&gt;。CSR 有点像护照申请。&lt;/li&gt;
&lt;li&gt;Bob 将他的 CSR 发送给一个&lt;strong&gt;证书颁发机构&lt;/strong&gt;（CA）。CA 验证 Bob 是否真的是 Bob。这种验证的具体方式可能有所不同 —— 它可能涉及一个人检查 Bob 的文件，或自动检查。&lt;/li&gt;
&lt;li&gt;然后，CA 通过对 CSR 中提出的信息进行编码来创建&lt;strong&gt;证书&lt;/strong&gt;，并添加数字签名，以断言 CA 已经验证了其中包含的信息是真实和正确的。它把证书送回给 Bob。&lt;/li&gt;
&lt;li&gt;当 Bob 想与 Alice 建立安全通信时，他的计算机可以出示他的证书，并以密码学方式证明它拥有 Bob 的私钥（而不需要实际与任何人分享该私钥的内容）。&lt;/li&gt;
&lt;li&gt;Alice 的计算机可以通过检查证书颁发机构是否签署了 Bob 的证书来检查 Bob 的证书是否真的是 Bob 的证书。她相信证书颁发机构在签署证书之前正确检查了 Bob 的身份。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-31bob-向证书颁发机构申请证书并用它来向-alice-证明他的身份&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f3-1.jpg&#34; alt=&#34;图 3.1：Bob 向证书颁发机构申请证书，并用它来向 Alice 证明他的身份。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 3.1：Bob 向证书颁发机构申请证书，并用它来向 Alice 证明他的身份。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-32pki-简况&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f3-2.jpg&#34; alt=&#34;图 3.2：PKI 简况。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 3.2：PKI 简况。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-33中间证书颁发机构的说明&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f3-3.jpg&#34; alt=&#34;图 3.3：中间证书颁发机构的说明。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 3.3：中间证书颁发机构的说明。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;em&gt;带有中间证书机构的 X.509&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;在许多情况下，签署了某一特定证书的 CA &lt;strong&gt;并不&lt;/strong&gt;广为人知。相反，该 CA 有自己的密钥和证书，而该证书是由另一个 CA 签署的。通过签署该 CA 证书，上级 CA 证明了下级 CA 被授权签发数字身份。这种由高阶 CA 对低阶 CA 的授权被称为&lt;strong&gt;委托（delegation）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;委托可以重复发生，低阶 CA 进一步委托他们的权力，形成一个任意高的证书授权树。最高等级的 CA 被称为&lt;strong&gt;根 CA&lt;/strong&gt;，必须有一个知名的证书。链中的每一个其他 CA 都被称为 &lt;strong&gt;中间 CA&lt;/strong&gt;。这种方法的好处是，需要知名的密钥较少，允许列表的变化不那么频繁。&lt;/p&gt;
&lt;p&gt;这导致了 X.509 的一个关键弱点：&lt;strong&gt;任何 CA 可以签署任何证书，没有任何限制&lt;/strong&gt;。如果一个黑客决定建立自己的中间 CA，并能得到任何一个现有中间 CA 的批准，那么他就可以有效地签发他想要的任何身份。至关重要的是，每个知名的 CA 都是&lt;strong&gt;完全&lt;/strong&gt;值得信赖的，而且他们委托的每个中间 CA 也是&lt;strong&gt;完全&lt;/strong&gt;值得信赖的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;证书和身份的生命周期&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 PKI 中有几个额外的功能，使数字身份的管理和认证更容易和更安全。权限委托、身份撤销和有限的身份文件寿命是其中的几个例子。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;身份发放&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;首先，必须能够发布一个新的身份。人类的诞生，新软件服务的编写，在每一种情况下，我们都必须在以前没有身份的地方颁发一个身份。&lt;/p&gt;
&lt;p&gt;首先，一项服务需要申请一个新的身份。对于人来说，这可能是一个纸质表格。对于软件来说，它是一个 X.509 文件，称为&lt;strong&gt;证书签名请求（CSR）&lt;/strong&gt;，它是用一个相应的私钥创建的。CSR 类似于证书，但由于它没有被任何证书颁发机构签署，没有人会承认它是有效的。然后，该服务将 CSR 安全地发送给证书颁发机构。&lt;/p&gt;
&lt;p&gt;接下来，证书颁发机构根据申请证书的服务检查 CSR 的每个细节。最初，这本来是一个手工过程：人类检查文书工作，并在个人基础上作出决定。今天，检查和签署过程通常是完全自动化的。如果你使用过流行的 LetsEncrypt 证书颁发机构，那么你就会熟悉完全自动化的证书颁发机构签署过程。&lt;/p&gt;
&lt;p&gt;一旦满意，证书颁发机构将其数字签名附加到 CSR 上，将其变成一个完全成熟的证书。它把证书返回给服务。与它先前生成的私钥一起，该服务可以让他人安全地识别自己。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;证书撤销&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;那么，如果一项服务被破坏了，会发生什么？如果 Bob 的笔记本电脑被黑了，或者 Bob 离开了公司，不应该再有访问权，怎么办？&lt;/p&gt;
&lt;p&gt;这种取消信任的过程被称为&lt;strong&gt;证书撤销（Certificate Revocation）&lt;/strong&gt;。证书颁发机构维护一个名为 **&amp;ldquo;证书撤销列表&amp;rdquo;（CRL）**的文件，其中包含被撤销的证书的唯一 ID，并将该文件的签名副本分发给任何要求的人。&lt;/p&gt;
&lt;p&gt;撤销是很棘手的，有几个原因。首先，CRL 必须由某个端点托管和提供，这就给确保端点的正常运行和可达带来了挑战。当该端点不可用时，PKI 是否停止工作？在实践中，大多数软件将&lt;strong&gt;无法打开&lt;/strong&gt;，在 CRL 不可用时继续信任证书，使它们实际上没有用处。&lt;/p&gt;
&lt;p&gt;第二，CRL 可能会变得庞大而不方便。被撤销的证书必须保留在 CRL 中，直到它过期为止，而证书的寿命一般都很长（在几年的时间内）。这可能导致服务、下载和处理清单本身的性能问题。&lt;/p&gt;
&lt;p&gt;已经开发了几种不同的技术，试图使证书撤销更简单、更可靠，如在线证书状态协议（OCSP）。各种各样的方法使证书撤销成为一个持续的挑战。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;证书过期&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;每个证书都有一个内置的过期日期。过期日期是 X.509 安全的一个重要部分，有几个不同的原因：管理过时，限制证书显示的身份变化的可能性，限制 CRL 的大小，以及减少秘钥被盗的可能性。&lt;/p&gt;
&lt;p&gt;证书已经存在了很长时间了。当它们刚被开发出来时，许多 CA 使用 1989 年的 MD2 散列算法，这种算法很快被发现是不安全的。如果这些证书仍然有效，攻击者可以伪造它们。&lt;/p&gt;
&lt;p&gt;有限的证书寿命的另一个重要方面是，CA 只有一次机会来验证申请者的身份，但这些信息不能保证长期保持正确。例如，域名经常改变所有权，是证书中一般包括的比较关键的信息之一。&lt;/p&gt;
&lt;p&gt;如果使用了证书撤销列表，那么每个仍然有效的证书都有可能被撤销。如果证书永远持续下去，那么证书撤销列表就会无止境地增长。为了保持证书撤销列表的小规模，证书需要过期。&lt;/p&gt;
&lt;p&gt;最后，证书的有效期越长，其证书的私钥或任何通往根的证书被盗的风险就越大。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;频繁的证书更新&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;解决撤销所带来的挑战的一个折中办法是更多地依靠证书过期。如果证书的有效期很短（也许只有几个小时），那么 CA 就可以经常重新执行它最初做的所有检查。如果证书的更新足够频繁，那么 CRL 可能甚至没有必要，因为等待证书过期可能会更快。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;身份寿命的权衡&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;更短的寿命&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;更长的寿命&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;如果文件被盗，它的有效期会缩短&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;减少了证书颁发机构的负担（人和程序）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;CRL 比较短，也许没有必要&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;降低网络的负荷&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;一次性减少未结清的身份文件（更容易跟踪）&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;在一个节点因网络中断而无法更新其证书时，具有更好的弹性&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;em&gt;另一种加密身份：JSON 网络令牌（JWT）&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;另一个公钥身份文件，JSON 网络令牌（RFC7519），也表现为一个类似 PKI 的系统。它不使用证书，而是使用 JSON 令牌，并有一个称为 JSON Web Key Set 的结构，作为 CA 绑定来验证 JSON 令牌。证书和 JWT 之间有一些重要的区别，超出了本书的范围，但就像 X.509 证书一样，JWT 的真实性可以通过 PKI 来验证。&lt;/p&gt;
&lt;h3 id=&#34;外部身份的可信度&#34;&gt;外部身份的可信度&lt;/h3&gt;
&lt;p&gt;无论你使用哪种身份，都必须由一些受信任的机构来签发。在许多情况下，并不是每个人都信任相同的当局或其颁发的过程。Alice 的纽约州驾照在纽约是有效的身份证明，但它在伦敦是无效的，因为伦敦当局不信任纽约州的政府。然而，Bob 的美国护照在伦敦是有效的，因为英国当局信任美国政府，而伦敦当局信任英国当局。&lt;/p&gt;
&lt;p&gt;在数字身份文件领域，情况是相同的。Alice 和 Bob 可能拥有由完全不相关的 CA 签署的证书，但只要他们都信任这些 CA，他们就可以相互认证。这并不意味着 Alice 必须信任 Bob，只是她可以安全地识别他。&lt;/p&gt;
&lt;h2 id=&#34;如何使用软件身份&#34;&gt;如何使用软件身份&lt;/h2&gt;
&lt;p&gt;一旦一个软件有了数字身份文件，它就可以被用于许多不同的目的。我们已经讨论了使用身份文件进行认证。它们还可以用于相互 TLS、授权、可观测性和计量。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;认证&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;身份文件最常见的用途是作为认证的基础。对于软件身份，存在几种不同的认证协议，使用 X.509 证书或 JWT 来证明一个服务对另一个服务的身份。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;保密性和完整性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;保密性意味着攻击者不能看到信息的内容，而完整性意味着他们不能在传输过程中改变信息。传输层安全（TLS）是一个广泛使用的协议，用于建立安全连接，在使用 X.509 证书的不受信任的网络连接之上提供认证、保密性和消息完整性。&lt;/p&gt;
&lt;p&gt;TLS 的一个特点是，连接的&lt;strong&gt;任何一方都&lt;/strong&gt;可以使用证书进行认证。例如，当你连接到你的银行网站时，你的网络浏览器使用银行提供的 X.509 证书来验证你的银行，但你的浏览器并没有向银行提供证书。(你用用户名和密码登录，而不是用证书）。&lt;/p&gt;
&lt;p&gt;当两个软件进行通信时，连接的&lt;strong&gt;双方&lt;/strong&gt;通常都有 X.509 证书并相互认证。这被称为相互认证的 TLS。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;授权&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一旦数字身份得到认证，它就可以被用来授权访问服务。通常情况下，每个服务都有一个允许其他服务对其提出请求的列表。授权只有在认证之后才能发生。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可观测性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;身份识别对于提高你的组织的基础设施内的可观测性也很有用。在大型组织中，旧的或未维护的服务以神秘的、未记录的方式进行通信是非常普遍的。每个服务的独特身份可以与可观测性工具一起解决这个问题。对于日志记录来说，如果以后出了问题，请求者的可反驳身份是很有用的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;计量&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在微服务架构中，一个常见的需求是对请求进行节流，以便快速的微服务不至于压倒慢的微服务。如果每个微服务都有一个独特的身份，就可以用来管理每秒的请求配额来解决这个问题，或者完全拒绝访问。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;人类和软件都有身份，而且都可以使用身份文件来证明自己的身份。对人类来说，护照是身份文件的一种典型形式。对于软件来说，最常见的数字身份文件形式是 X.509 证书。&lt;/p&gt;
&lt;p&gt;证书是由证书颁发机构颁发的。证书颁发机构需要注意正确验证他们为之创建证书的人或事，并管理证书的寿命。证书颁发后，无论谁使用它，都需要信任颁发它的证书机构。&lt;/p&gt;
&lt;p&gt;一旦有了可信的数字身份文件，它们有许多不同的用途。其中最常见的是创建一个相互认证的 TLS 连接，其中包括认证、保密性和完整性。另一个常见的用途是用于授权。有了认证、保密性、完整性和授权，服务之间的连接是安全的。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>勘误</title>
      <link>https://lib.jimmysong.io/kubernetes-hardening-guidance/corrigendum/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/kubernetes-hardening-guidance/corrigendum/</guid>
      <description>&lt;p&gt;&lt;strong&gt;勘误 1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PDF 原文第 4 页，kubelet 端口，默认应为 10250，而不是 10251。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SPIFFE 工作负载端点</title>
      <link>https://lib.jimmysong.io/spiffe-and-spire/standard/spiffe-workload-endpoint/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/spiffe-and-spire/standard/spiffe-workload-endpoint/</guid>
      <description>&lt;p&gt;对于网络工作负载而言，可移植且互操作的加密身份可能是 SPIFFE 的核心用例之一。为了完全满足这一要求，社区必须达成一致，以标准化检索身份和在运行时使用身份相关服务的方式。&lt;/p&gt;
&lt;p&gt;SPIFFE 工作负载终端点规范通过定义一个终端点来提供 SPIFFE 可验证身份文档（SVIDs）和相关服务。具体而言，它概述了如何定位终端点以及如何服务或使用它。这个终端点所暴露的服务集合超出了本文档的范围，但有一个例外，即 SPIFFE 工作负载 API。&lt;/p&gt;
&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;
&lt;p&gt;SPIFFE 工作负载终端点是一个 API 终端点，工作负载或正在运行的计算进程可以通过它在运行时访问与身份相关的服务（如身份签发或身份验证）。这个终端点可以暴露任意数量的与身份相关的服务，但至少，符合规范的环境中运行的工作负载可以期望 SPIFFE 工作负载 API 可用。&lt;/p&gt;
&lt;p&gt;本文档详细介绍了 SPIFFE 工作负载终端点的可访问性和范围、传输协议、身份验证过程以及可扩展性/发现机制。&lt;/p&gt;
&lt;h2 id=&#34;可访问性&#34;&gt;可访问性&lt;/h2&gt;
&lt;p&gt;SPIFFE 工作负载终端点通常用作初始身份引导的机制，包括传递和管理信任根的过程。由于在早期阶段，工作负载可能对自己的身份或应该信任的对象没有任何先验知识，因此很难确保对终端点的访问安全。因此，SPIFFE 工作负载终端点应通过本地终端点公开，并且实现者不应将同一终端点实例公开给多个主机。将终端点和相关流量限制在单个主机上可以减轻与初始身份验证和签发安全相关的引导问题。更多详细信息，请参见 传输 和 身份验证 部分。&lt;/p&gt;
&lt;h2 id=&#34;传输&#34;&gt;传输&lt;/h2&gt;
&lt;p&gt;SPIFFE 工作负载终端点必须通过 gRPC 进行提供，并且符合规范的客户端必须支持 gRPC。它可以作为 Unix 域套接字（Unix Domain Socket，UDS）或 TCP 监听套接字公开。实现者应优先选择 Unix 域套接字传输，但如果 Unix 域套接字不可行或不可能，也可以支持 TCP 传输。除非底层网络允许工作负载终端点服务器根据源 IP 地址（例如通过本地主机或链路本地网络）或其他强网络级断言（例如通过 SDN 策略）对工作负载进行强身份验证，否则不得使用 TCP 传输。&lt;/p&gt;
&lt;p&gt;为了防止 &lt;a href=&#34;https://www.owasp.org/index.php/Server_Side_Request_Forgery&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;服务器端请求伪造&lt;/a&gt;（SSRF）攻击，每个客户端请求 SPIFFE 工作负载终端点时，都必须包含静态的 gRPC 元数据键 &lt;code&gt;workload.spiffe.io&lt;/code&gt;，其值为 &lt;code&gt;true&lt;/code&gt;（区分大小写）。未包含此元数据键/值的请求必须被 SPIFFE 工作负载终端点拒绝（有关详细信息，请参见 错误代码 部分）。这样可以防止攻击者利用 SSRF 漏洞访问 SPIFFE 工作负载终端点，除非该漏洞还使攻击者能够控制出站 gRPC 元数据。&lt;/p&gt;
&lt;h3 id=&#34;传输安全&#34;&gt;传输安全&lt;/h3&gt;
&lt;p&gt;尽管 gRPC 强烈推荐使用传输层安全（Transport Layer Security，TLS），但不得要求 SPIFFE 工作负载终端点。由于 SPIFFE 工作负载终端点通常传递和管理信任根，我们不能指望工作负载具有对活跃根的先进知识。因此，在早期阶段，工作负载可能无法验证所呈现身份的真实性，除非通过 Workload API 实现的特权位置。这是 SPIFFE 工作负载终端点实例不应公开给多个主机的另一个原因。有关更多信息，请参见 身份验证 部分。&lt;/p&gt;
&lt;h2 id=&#34;定位终端点&#34;&gt;定位终端点&lt;/h2&gt;
&lt;p&gt;客户端可以显式配置套接字位置，也可以使用名为 &lt;code&gt;SPIFFE_ENDPOINT_SOCKET&lt;/code&gt; 的众所周知的环境变量。如果没有显式配置，符合规范的客户端必须回退到环境变量。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SPIFFE_ENDPOINT_SOCKET&lt;/code&gt; 环境变量的值结构化为 &lt;a href=&#34;https://www.ietf.org/rfc/rfc3986.txt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 3986&lt;/a&gt; URI。方案（scheme）必须设置为 &lt;code&gt;unix&lt;/code&gt; 或 &lt;code&gt;tcp&lt;/code&gt;，分别表示终端点通过 Unix 域套接字或 TCP 监听套接字提供服务。&lt;/p&gt;
&lt;p&gt;如果方案设置为 &lt;code&gt;unix&lt;/code&gt;，则授权组件不得设置，路径组件必须设置为 SPIFFE 工作负载终端点 Unix 域套接字的绝对路径（例如 &lt;code&gt;unix:///path/to/endpoint.sock&lt;/code&gt;）。方案和路径组件是强制的，不得设置其他组件。&lt;/p&gt;
&lt;p&gt;如果方案设置为 &lt;code&gt;tcp&lt;/code&gt;，则授权的主机组件必须设置为 IP 地址，授权的端口组件必须设置为 SPIFFE 工作负载终端点 TCP 监听套接字的 TCP 端口号。方案、主机和端口组件是强制的，不得设置其他组件。例如，&lt;code&gt;tcp://127.0.0.1:8000&lt;/code&gt; 是有效的，而 &lt;code&gt;tcp://127.0.0.1:8000/foo&lt;/code&gt; 是无效的。&lt;/p&gt;
&lt;h2 id=&#34;身份验证&#34;&gt;身份验证&lt;/h2&gt;
&lt;p&gt;SPIFFE 工作负载终端点通常用作初始身份引导的机制。因此，预期工作负载没有任何可用于自身身份验证的“秘密”材料。为了适应这一非常重要的用例，SPIFFE 工作负载终端点不得要求直接对其客户端进行身份验证。&lt;/p&gt;
&lt;p&gt;实现者应该执行带外真实性检查，而不是直接的客户端身份验证。这可以包括内核检查或编排工具询问等技术。例如，可以通过检查内核套接字状态来了解调用 API 的进程是哪个。另一种方法是允许编排工具将 Unix 域套接字放入特定容器中，向 SPIFFE 工作负载终端点实现传递容器的属性/身份信息。然后可以将此信息用作身份验证机制。&lt;/p&gt;
&lt;p&gt;应注意，虽然如何实现这一点的方法是特定于实现的，但所选择的方法不得要求工作负载积极参与其中。&lt;/p&gt;
&lt;h2 id=&#34;错误代码&#34;&gt;错误代码&lt;/h2&gt;
&lt;p&gt;在与 SPIFFE Workload 端点交互时，客户端可能会遇到多种错误条件。例如，客户端请求可能省略了必需的安全头部（请参阅传输部分获取更多信息），或者 SPIFFE Workload 端点实现可能仍在初始化或无法使用。&lt;/p&gt;
&lt;p&gt;如果收到不包含必需安全头部的客户端请求，实现必须使用 gRPC 状态码 &amp;ldquo;InvalidArgument&amp;rdquo; 进行响应。如果客户端收到 &amp;ldquo;InvalidArgument&amp;rdquo; 状态码，不应重试，因为这表示客户端实现有误，不可恢复。&lt;/p&gt;
&lt;p&gt;如果 SPIFFE Workload 端点实现正在运行但不可用，例如仍在初始化或执行负载均衡，客户端将收到 gRPC 状态码 &amp;ldquo;Unavailable&amp;rdquo;。如果客户端收到这个状态码，或者无法到达 SPIFFE Workload 端点，可以使用指数退避重试。&lt;/p&gt;
&lt;p&gt;最后，如果给定调用者/客户端没有为 SPIFFE Workload 端点服务定义身份，服务应使用 gRPC 状态码 &amp;ldquo;PermissionDenied&amp;rdquo; 进行响应。如果客户端收到这个状态码，可以使用指数退避重试，因为在实现最终一致性的情况下可能会遇到此类响应。&lt;/p&gt;
&lt;p&gt;请参阅 附录 A 获取错误条件和代码的摘要。&lt;/p&gt;
&lt;h2 id=&#34;可扩展性和提供的服务&#34;&gt;可扩展性和提供的服务&lt;/h2&gt;
&lt;p&gt;SPIFFE Workload 端点可以提供多种与身份相关的服务，例如身份发放或身份验证。通过使用 gRPC/Protobuf 服务原语来公开单个服务。为了扩展 SPIFFE Workload 端点，必须引入一个新的（唯一命名的）服务。&lt;/p&gt;
&lt;p&gt;由于本规范承诺提供强大的可移植性，作者认为允许扩展现有逻辑服务与 SPIFFE 的精神相悖。如果通过向现有逻辑服务添加端点来提供附加功能，那么在从一个符合 SPIFFE 的环境移动到另一个环境时，无法保证可移植性。因此，不能直接扩展现有的 gRPC 逻辑服务，如 SPIFFE Workload API。相反，可以通过添加 SPIFFE 规范集中未描述的独立逻辑服务来增强端点。&lt;/p&gt;
&lt;p&gt;虽然所有 SPIFFE Workload 端点实现都必须公开 SPIFFE Workload API，但有时很难知道给定环境中支持哪些附加服务。因此，端点实现者应该包含对 &lt;a href=&#34;https://github.com/grpc/grpc/blob/master/doc/server-reflection.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC Server Reflection&lt;/a&gt; 的支持。如果客户端遇到不支持 gRPC Server Reflection 的端点，应假设唯一可用的服务是 SPIFFE Workload API 中定义的那些。&lt;/p&gt;
&lt;h2 id=&#34;附录-a-错误代码列表&#34;&gt;附录 A. 错误代码列表&lt;/h2&gt;
&lt;p&gt;本节列出了 SPIFFE Workload 端点实现可能返回的各种错误代码、返回条件以及如何处理它们。请参阅 错误代码 部分和 &lt;a href=&#34;https://godoc.org/google.golang.org/grpc/codes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC Code package 文档&lt;/a&gt; 以获取有关这些代码的更多信息。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;代码&lt;/th&gt;
&lt;th&gt;条件&lt;/th&gt;
&lt;th&gt;客户端行为&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;InvalidArgument&lt;/td&gt;
&lt;td&gt;客户端请求中未包含 gRPC 安全头部。请参阅 传输部分 获取更多信息。&lt;/td&gt;
&lt;td&gt;报告错误，不要重试。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Unavailable&lt;/td&gt;
&lt;td&gt;SPIFFE Workload 端点实现无法处理请求。&lt;/td&gt;
&lt;td&gt;使用指数退避重试。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PermissionDenied&lt;/td&gt;
&lt;td&gt;客户端无权执行请求的操作。根据实现的情况，这可能表示工作负载在身份或信任域被配置之前就已启动。&lt;/td&gt;
&lt;td&gt;使用指数退避重试。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>SPIRE Server 配置参考</title>
      <link>https://lib.jimmysong.io/spiffe-and-spire/configuration/server/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/spiffe-and-spire/configuration/server/</guid>
      <description>&lt;p&gt;本文描述了 SPIRE Server 的命令行选项、server.conf 设置和内置插件。&lt;/p&gt;
&lt;p&gt;本文档是 SPIRE Server 的配置参考。它包括有关插件类型、内置插件、服务器配置文件、插件配置和 &lt;code&gt;spire-server&lt;/code&gt; 命令的命令行选项的信息。&lt;/p&gt;
&lt;h2 id=&#34;插件类型&#34;&gt;插件类型&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;DataStore&lt;/td&gt;
&lt;td&gt;提供持久存储和 HA 功能。注意：不再支持数据存储的可插入性。只能使用内置的 SQL 插件。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;KeyManager&lt;/td&gt;
&lt;td&gt;为服务器的签名操作实现签名和密钥存储逻辑。对于利用基于硬件的关键操作很有用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NodeAttestor&lt;/td&gt;
&lt;td&gt;为尝试断言其身份的节点实现验证逻辑。一般与同类型的代理插件搭配使用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UpstreamAuthority&lt;/td&gt;
&lt;td&gt;允许 SPIRE 服务器与现有 PKI 系统集成。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Notifier&lt;/td&gt;
&lt;td&gt;由 SPIRE 服务器通知正在发生或已经发生的某些事件。对于正在发生的事件，通知者可以将结果告知 SPIRE 服务器。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;内置插件&#34;&gt;内置插件&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;DataStore&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_datastore_sql.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;sql&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;用于 SPIRE 数据存储的 SQLite、PostgreSQL 和 MySQL 数据库的 SQL 数据库存储&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;KeyManager&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_keymanager_aws_kms.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;aws_kms&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;管理 AWS KMS 中密钥的密钥管理器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;KeyManager&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_keymanager_disk.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;disk&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;管理保存在磁盘上的密钥的密钥管理器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;KeyManager&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_keymanager_memory.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;memory&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;管理内存中非持久密钥的密钥管理器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NodeAttestor&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_nodeattestor_aws_iid.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;aws_iid&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;使用 AWS 实例身份文档证明代理身份的节点证明者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NodeAttestor&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_nodeattestor_azure_msi.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;azure_msi&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;使用 Azure MSI 令牌证明代理身份的节点证明者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NodeAttestor&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_nodeattestor_gcp_iit.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gcp_iit&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;使用 GCP 实例身份令牌证明代理身份的节点证明者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NodeAttestor&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_nodeattestor_jointoken.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;join_token&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;节点证明器，用于验证使用服务器生成的加入令牌进行证明的代理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NodeAttestor&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_nodeattestor_k8s_sat.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;k8s_sat&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;使用 Kubernetes 服务帐户令牌证明代理身份的节点证明者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NodeAttestor&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_nodeattestor_k8s_psat.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;k8s_psat&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;使用 Kubernetes 投影服务帐户令牌证明代理身份的节点证明者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NodeAttestor&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_nodeattestor_sshpop.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;sshpop&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;使用现有 ssh 证书证明代理身份的节点证明者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NodeAttestor&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_nodeattestor_tpm_devid.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tpm_devid&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;节点证明者，使用已配置 DevID 证书的 TPM 证明代理身份&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NodeAttestor&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_nodeattestor_x509pop.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;x509pop&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;使用现有 X.509 证书证明代理身份的节点证明者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Notifier&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_notifier_gcs_bundle.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gcs_bundle&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;将最新信任包内容推送到 Google Cloud Storage 中的对象的通知程序。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Notifier&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_notifier_k8sbundle.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;k8sbundle&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;将最新信任包内容推送到 Kubernetes ConfigMap 的通知程序。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UpstreamAuthority&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_upstreamauthority_disk.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;disk&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;使用从磁盘加载的 CA 来签署 SPIRE 服务器中间证书。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UpstreamAuthority&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_upstreamauthority_aws_pca.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;aws_pca&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;使用 AWS Certificate Manager 中的私有证书颁发机构来签署 SPIRE 服务器中间证书。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UpstreamAuthority&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_upstreamauthority_awssecret.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;awssecret&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;使用从 AWS SecretsManager 加载的 CA 来签署 SPIRE 服务器中间证书。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UpstreamAuthority&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_upstreamauthority_gcp_cas.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gcp_cas&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;使用 GCP 证书颁发机构服务中的私有证书颁发机构来签署 SPIRE 服务器中间证书。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UpstreamAuthority&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_upstreamauthority_vault.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;vault&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;使用 HashiCorp Vault 中的 PKI 秘密引擎来签署 SPIRE 服务器中间证书。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UpstreamAuthority&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_upstreamauthority_spire.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;spire&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;使用同一信任域中的上游 SPIRE 服务器来获取 SPIRE 服务器的中间签名证书。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UpstreamAuthority&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_upstreamauthority_cert_manager.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cert-manager&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;使用引用的证书管理器颁发者来请求中间签名证书。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;服务器配置文件&#34;&gt;服务器配置文件&lt;/h2&gt;
&lt;p&gt;下表概述了 SPIRE 服务器的配置选项。这些可以在配置文件的顶级 &lt;code&gt;server { ... }&lt;/code&gt; 部分中设置。大多数选项都有一个相应的 CLI 标志，如果设置了该标志，则该标志优先于文件中定义的值。&lt;/p&gt;
&lt;p&gt;SPIRE 配置文件可以用 HCL 或 JSON 表示。请参阅示例配置文件部分以获取完整示例。&lt;/p&gt;
&lt;p&gt;如果 -expandEnv 标志传递给 SPIRE，则在解析之前扩展 &lt;code&gt;$VARIABLE&lt;/code&gt; 或 &lt;code&gt;${VARIABLE}&lt;/code&gt; 样式环境变量。这对于模板化配置文件（例如跨不同信任域）或插入数据库连接密码等机密可能很有用。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;配置&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;默认&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;admin_ids&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SPIFFE ID，当出现在呼叫者的 X509-SVID 中时，会授予该呼叫者管理员权限。管理 ID 必须驻留在服务器信任域或联合域中，并且不需要在服务器上有相应的管理注册条目。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;agent_ttl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;用于代理 SVID 的 TTL&lt;/td&gt;
&lt;td&gt;&lt;code&gt;default_x509_svid_ttl&lt;/code&gt; 的值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;audit_log_enabled&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;如果为 true，则启用审核日志记录&lt;/td&gt;
&lt;td&gt;错误的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bind_address&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SPIRE 服务器的 IP 地址或 DNS 名称&lt;/td&gt;
&lt;td&gt;0.0.0.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bind_port&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SPIRE 服务器的 HTTP 端口号&lt;/td&gt;
&lt;td&gt;8081&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ca_key_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;用于服务器 CA 的密钥类型（X509 和 JWT），&lt;code&gt;&amp;lt;rsa-2048|rsa-4096|ec-p256|ec-p384&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ec-p256（JWT 密钥类型可以被 &lt;code&gt;jwt_key_type&lt;/code&gt; 覆盖）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ca_subject&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;CA 证书应使用的主题（见下文）&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ca_ttl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;默认 CA/签名密钥 TTL&lt;/td&gt;
&lt;td&gt;24h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;data_dir&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;服务器运行时可以使用的目录&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;default_x509_svid_ttl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;默认 X509-SVID TTL&lt;/td&gt;
&lt;td&gt;1h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;default_jwt_svid_ttl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;默认 JWT-SVID TTL&lt;/td&gt;
&lt;td&gt;5m&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;experimental&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;可能会更改或删除的实验选项（见下文）&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;federation&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;用于联合的捆绑端点配置部分&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;jwt_key_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;用于服务器 CA (JWT) 的密钥类型，&lt;/td&gt;
&lt;td&gt;如果未定义，则为 &lt;code&gt;ca_key_type&lt;/code&gt; 或 ec-p256 的值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;jwt_issuer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;发行 JWT-SVID 时使用的发行者声明&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;log_file&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将日志写入的文件&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;log_level&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;设置日志记录级别&lt;/td&gt;
&lt;td&gt;信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;log_format&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;日志格式，text 或 json&lt;/td&gt;
&lt;td&gt;文本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;log_source_location&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;如果为 true，日志将包含源文件、行号和方法名称字段（增加一点运行时成本）&lt;/td&gt;
&lt;td&gt;错误的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;profiling_enabled&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;如果为 true，则启用 net/http/pprof 端点&lt;/td&gt;
&lt;td&gt;错误的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;profiling_freq&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将分析数据转储到磁盘的频率。仅当 &lt;code&gt;profiling_enabled&lt;/code&gt; 为 &lt;code&gt;true&lt;/code&gt; 且 &lt;code&gt;profiling_freq&lt;/code&gt; &amp;gt; 0 时启用。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;profiling_names&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将在每个分析标记上转储到磁盘的配置文件名称列表，请参阅分析名称&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;profiling_port&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;net/http/pprof 端点的端口号。仅当 &lt;code&gt;profiling_enabled&lt;/code&gt; 为 &lt;code&gt;true&lt;/code&gt; 时使用。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ratelimit&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;速率限制配置，通常在服务器位于负载均衡器后面时使用（见下文）&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;socket_path&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将 SPIRE 服务器 API 套接字绑定到的路径（仅限 Unix）&lt;/td&gt;
&lt;td&gt;/tmp/spire-server/private/api.sock&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;trust_domain&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;该服务器所属的信任域（不应超过 255 个字符）&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ca_subject&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;默认&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;country&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Country&lt;/code&gt; 值数组&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;organization&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Organization&lt;/code&gt; 值数组&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;common_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;CommonName&lt;/code&gt; 值&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;实验性的&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;默认&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cache_reload_interval&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;两次重新加载内存条目缓存之间的时间量。增加此值将减轻超大型部署的高数据库负载，但也会减慢新条目或更新条目向代理的传播速度。&lt;/td&gt;
&lt;td&gt;5s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;auth_opa_policy_engine&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;用于授权决策的 auth opa_policy 引擎&lt;/td&gt;
&lt;td&gt;默认 SPIRE 授权策略&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;named_pipe_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SPIRE Server API 命名管道的管道名称（仅限 Windows）&lt;/td&gt;
&lt;td&gt;\spire-server\private\api&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;速率限制&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;默认&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;attestation&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;是否对节点证明进行速率限制。如果为 true，则节点证明的速率限制为每个 IP 地址每秒一次尝试。&lt;/td&gt;
&lt;td&gt;真的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;signing&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;是否对 JWT 和 X509 签名进行速率限制。如果为 true，JWT 和 X509 签名的速率限制为每个 IP 地址每秒 500 个请求（单独）。&lt;/td&gt;
&lt;td&gt;真的&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;auth_opa_policy_engine&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;默认&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;local&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;授权策略的本地 OPA 配置。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;auth_opa_policy_engine.local&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;默认&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rego_path&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;用于检索 OPA rego 策略以进行授权的文件。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;policy_data_path&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;用于检索数据绑定以进行策略评估的文件。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;分析名称&#34;&gt;分析名称&lt;/h3&gt;
&lt;p&gt;这些是可以在 &lt;code&gt;profiling_freq&lt;/code&gt; 配置值中设置的可用配置文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;goroutine&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;threadcreate&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;heap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;block&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mutex&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;trace&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cpu&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;插件配置&#34;&gt;插件配置&lt;/h2&gt;
&lt;p&gt;服务器配置文件还包含各种 SPIRE 服务器插件的配置部分。插件配置位于顶级 &lt;code&gt;plugins { ... }&lt;/code&gt; 部分，其格式如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-hcl&#34; data-lang=&#34;hcl&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;plugins&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;pluginType&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;pluginName&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;plugin&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;configuration&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;options&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;here&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以下配置选项可用于配置插件：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;配置&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;插件命令&lt;/td&gt;
&lt;td&gt;插件实现二进制文件的路径（可选，内置插件不需要）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;插件校验和&lt;/td&gt;
&lt;td&gt;插件二进制文件的可选 sha256（可选，内置不需要）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;已启用&lt;/td&gt;
&lt;td&gt;启用或禁用插件（默认启用）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;插件数据&lt;/td&gt;
&lt;td&gt;插件特定数据&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;请参阅下面的内置插件部分，了解有关开箱即用的插件的信息。&lt;/p&gt;
&lt;h2 id=&#34;联邦配置&#34;&gt;联邦配置&lt;/h2&gt;
&lt;p&gt;SPIRE 服务器可以配置为与位于不同信任域中的其他 SPIRE 服务器联合。SPIRE 支持在 SPIRE 服务器配置文件中（静态关系）和通过信任域 API（动态关系）配置联合关系。本节介绍如何在配置文件中配置静态定义的关系。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;注意：静态关系优先于动态关系。如果需要配置动态关系，请参见 &lt;code&gt;federation&lt;/code&gt; 命令。静态关系不会反映在 &lt;code&gt;federation&lt;/code&gt; 命令中。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;配置联合信任域允许信任域对其他 SPIFFE 机构颁发的身份进行身份验证，从而允许一个信任域中的工作负载安全地对外部信任域中的工作负载进行身份验证。实现联合的一个关键要素是使用 SPIFFE 捆绑端点，这些资源（由 URL 表示）为信任域提供信任捆绑的副本。使用 &lt;code&gt;federation&lt;/code&gt; 部分，你将能够将 SPIRE 设置为 SPIFFE 捆绑包端点服务器，并配置此 SPIRE 服务器将从中获取捆绑包的联合信任域。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-hcl&#34; data-lang=&#34;hcl&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;server&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;federation&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;bundle_endpoint&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;            address&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0.0.0.0&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;            port&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;8443&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;            refresh_hint&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;10m&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;profile&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https_web&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;acme&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;                    domain_name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;example.org&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;                    email&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;mail@example.org&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;federates_with&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;domain1.test&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;            bundle_endpoint_url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://1.2.3.4:8443&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;bundle_endpoint_profile&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https_web&amp;#34;&lt;/span&gt; {}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;federates_with&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;domain2.test&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;            bundle_endpoint_url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://5.6.7.8:8443&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;bundle_endpoint_profile&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https_spiffe&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;                endpoint_spiffe_id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;spiffe://domain2.test/beserver&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;federation.bundle_endpoint&lt;/code&gt; 部分是可选的，用于在 SPIRE 服务器中设置 SPIFFE 捆绑端点服务器。 &lt;code&gt;federation.federates_with&lt;/code&gt; 部分也是可选的，用于配置与外部信任域的联合关系。此部分用于 SPIRE 服务器将定期获取捆绑包的每个联合信任域。&lt;/p&gt;
&lt;h3 id=&#34;federationbundle_endpoint-的配置选项&#34;&gt;&lt;code&gt;federation.bundle_endpoint&lt;/code&gt; 的配置选项&lt;/h3&gt;
&lt;p&gt;此可选部分包含 SPIRE 服务器用于公开捆绑端点的配置。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;配置&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;address&lt;/td&gt;
&lt;td&gt;该服务器将侦听 HTTP 请求的 IP 地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;port&lt;/td&gt;
&lt;td&gt;该服务器将侦听 HTTP 请求的 TCP 端口号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;refresh_hint&lt;/td&gt;
&lt;td&gt;允许手动指定刷新提示。如果未设置，则根据捆绑包中密钥的生命周期确定。小值允许及时检索信任包更新&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;profile &amp;ldquo;&amp;lt;https_web|https_spiffe&amp;gt;&amp;rdquo;&lt;/td&gt;
&lt;td&gt;允许配置捆绑配置文件&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;federationbundle_endpointprofile-的配置选项&#34;&gt;&lt;code&gt;federation.bundle_endpoint.profile&lt;/code&gt; 的配置选项&lt;/h3&gt;
&lt;p&gt;当设置 &lt;code&gt;bundle_endpoint&lt;/code&gt; 时，它是 &lt;code&gt;required&lt;/code&gt; 来指定捆绑配置文件。&lt;/p&gt;
&lt;p&gt;允许的配置文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;https_web&lt;/code&gt; 允许配置自动证书管理环境部分。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;https_spiffe&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;federationbundle_endpointprofile-https_webacme-的配置选项&#34;&gt;&lt;code&gt;federation.bundle_endpoint.profile &amp;quot;https_web&amp;quot;.acme&lt;/code&gt; 的配置选项&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;配置&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;默认&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;directory_url&lt;/td&gt;
&lt;td&gt;目录端点 URL&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://acme-v02.api.letsencrypt.org/directory&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://acme-v02.api.letsencrypt.org/directory&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;domain_name&lt;/td&gt;
&lt;td&gt;证书管理器尝试检索新证书的域&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;email&lt;/td&gt;
&lt;td&gt;联系电子邮件地址。Let&amp;rsquo;s Encrypt 等 CA 使用它来通知已颁发证书的问题&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tos_acceptted&lt;/td&gt;
&lt;td&gt;接受 ACME 服务条款。如果没有设置为 true，并且提供商要求接受，则证书检索将失败&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;federationbundle_endpointprofile-https_spiffe-的配置选项&#34;&gt;&lt;code&gt;federation.bundle_endpoint.profile &amp;quot;https_spiffe&amp;quot;&lt;/code&gt; 的配置选项&lt;/h3&gt;
&lt;p&gt;默认捆绑配置文件配置。&lt;/p&gt;
&lt;h3 id=&#34;federationfederates_withtrust-domainbundle_endpoint-的配置选项&#34;&gt;&lt;code&gt;federation.federates_with[&amp;quot;&amp;lt;trust domain&amp;gt;&amp;quot;].bundle_endpoint&lt;/code&gt; 的配置选项&lt;/h3&gt;
&lt;p&gt;可选的 &lt;code&gt;federates_with&lt;/code&gt; 部分是捆绑端点配置文件配置的映射，以该服务器想要联合的 &lt;code&gt;&amp;quot;&amp;lt;trust domain&amp;gt;&amp;quot;&lt;/code&gt; 的名称为键。此部分具有以下可配置项：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;配置&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;默认&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;bundle_endpoint_url&lt;/td&gt;
&lt;td&gt;提供要联合的信任捆绑包的 SPIFFE 捆绑包端点的 URL。必须使用 HTTPS 协议。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bundle_endpoint_profile &amp;ldquo;&amp;lt;https_web | https_spiffe&amp;gt;&amp;rdquo;&lt;/td&gt;
&lt;td&gt;SPIFFE 端点配置文件类型的配置。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;SPIRE 支持 &lt;code&gt;https_web&lt;/code&gt; 和 &lt;code&gt;https_spiffe&lt;/code&gt; 捆绑端点配置文件。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;https_web&lt;/code&gt; 配置文件不需要额外的设置。&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;https_spiffe&lt;/code&gt; 捆绑端点配置文件配置的信任域必须使用 &lt;code&gt;endpoint_spiffe_id&lt;/code&gt; 设置作为配置的一部分来指定远程 SPIFFE 捆绑端点服务器的预期 SPIFFE ID。&lt;/p&gt;
&lt;p&gt;有关 SPIFFE 中定义的不同配置文件的更多信息，以及设置 SPIFFE 联合的安全注意事项，请参阅 &lt;a href=&#34;../../standard/spiffe-federation/&#34;&gt;SPIFFE 联邦标准&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;遥测配置&#34;&gt;遥测配置&lt;/h2&gt;
&lt;p&gt;请参阅遥测配置指南，了解有关配置 SPIRE 服务器以发出遥测数据的更多信息。&lt;/p&gt;
&lt;h2 id=&#34;健康检查配置&#34;&gt;健康检查配置&lt;/h2&gt;
&lt;p&gt;服务器可以公开可用于健康检查的附加端点。它可以通过设置 &lt;code&gt;listener_enabled = true&lt;/code&gt; 来启用。目前它公开了 2 条路径：一条用于活动（服务器是否已启动？），另一条用于准备（服务器是否准备好服务请求？）。默认情况下，健康检查端点将侦听 localhost:80，除非另有配置。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-hcl&#34; data-lang=&#34;hcl&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;health_checks&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;        listener_enabled&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;        bind_address&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;localhost&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;        bind_port&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;8080&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;        live_path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/live&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;        ready_path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/ready&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;命令行选项&#34;&gt;命令行选项&lt;/h2&gt;
&lt;h3 id=&#34;spire-server-run&#34;&gt;&lt;code&gt;spire-server run&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;上面的大多数配置文件选项都有相同的命令行对应项。此外，还可以使用以下标志。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;行动&lt;/th&gt;
&lt;th&gt;默认&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-bindAddress&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SPIRE 服务器的 IP 地址或 DNS 名称&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-config&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SPIRE 配置文件的路径&lt;/td&gt;
&lt;td&gt;conf/服务器/服务器.conf&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-dataDir&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;存储运行时数据的目录&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-expandEnv&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;展开配置文件中的环境 $VARIABLES&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-logFile&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将日志写入的文件&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-logFormat&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;日志格式，&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-logLevel&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;调试、信息、警告或错误&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-serverPort&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SPIRE 服务器的端口号&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-socketPath&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将 SPIRE 服务器 API 套接字绑定到的路径&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-trustDomain&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;该服务器所属的信任域（不应超过 255 个字符）&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;将-spire-server-作为-windows-服务运行&#34;&gt;将 SPIRE Server 作为 Windows 服务运行&lt;/h4&gt;
&lt;p&gt;在 Windows 平台上，SPIRE Server 可以选择作为 Windows 服务运行。作为 Windows 服务运行时，唯一支持的命令是 &lt;code&gt;run&lt;/code&gt; 命令。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;注意：SPIRE 不会自动在系统中创建该服务，必须由用户创建。启动服务时，使用 &lt;code&gt;run&lt;/code&gt; 命令执行 SPIRE Server 的所有参数都必须作为服务参数传递。&lt;/em&gt;&lt;/p&gt;
&lt;h5 id=&#34;创建-spire-server-windows-服务的示例&#34;&gt;创建 SPIRE Server Windows 服务的示例&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; sc.exe create spire-server &lt;span class=&#34;nv&#34;&gt;binpath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;c:&lt;span class=&#34;se&#34;&gt;\s&lt;/span&gt;pire&lt;span class=&#34;se&#34;&gt;\b&lt;/span&gt;in&lt;span class=&#34;se&#34;&gt;\s&lt;/span&gt;pire-server.exe
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;运行-spire-server-windows-服务的示例&#34;&gt;运行 SPIRE Server Windows 服务的示例&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; sc.exe start spire-server run -config c:&lt;span class=&#34;se&#34;&gt;\s&lt;/span&gt;pire&lt;span class=&#34;se&#34;&gt;\c&lt;/span&gt;onf&lt;span class=&#34;se&#34;&gt;\s&lt;/span&gt;erver&lt;span class=&#34;se&#34;&gt;\s&lt;/span&gt;erver.conf
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;spire-server-token-generate&#34;&gt;&lt;code&gt;spire-server token generate&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;生成一个节点加入令牌并为其创建一个注册条目。该令牌可用于引导一个 spire-agent 安装。除了基于令牌的 ID 之外，可选的 &lt;code&gt;-spiffeID&lt;/code&gt; 可用于为令牌提供人类可读的注册条目名称。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;行动&lt;/th&gt;
&lt;th&gt;默认&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-socketPath&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SPIRE 服务器 API 套接字的路径&lt;/td&gt;
&lt;td&gt;/tmp/spire-server/private/api.sock&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-spiffeID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;用于分配令牌所有者的附加 SPIFFE ID（可选）&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-ttl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;令牌 TTL（以秒为单位）&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;spire-server-entry-create&#34;&gt;&lt;code&gt;spire-server entry create&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;创建注册条目。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;行动&lt;/th&gt;
&lt;th&gt;默认&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-admin&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;如果设置，此条目中的 SPIFFE ID 将被授予对服务器 API 的访问权限&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-data&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;包含 JSON 格式的注册数据的文件的路径（可选，如果指定，则必须省略与条目信息相关的其他标志）。如果设置为“-”，则从 stdin 读取 JSON。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-dns&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;DNS 名称将包含在基于此条目发布的 SVID 中（如果适用）。可以多次使用&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-downstream&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;布尔值，设置后表示该条目描述下游 SPIRE 服务器&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-entryExpiry&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;从数据存储中删除生成的注册条目的到期时间（以秒为单位）。请注意，这是一项数据管理功能，而不是安全功能（可选）。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-entryID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;新创建的注册条目的用户指定 ID（可选）。如果没有提供条目 ID，则会在创建时生成一个&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-federatesWith&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;代表与此注册条目联合的信任域的信任域 SPIFFE ID 列表。该信任域的捆绑包必须已存在&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-node&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;如果设置，此条目将应用于匹配节点而不是工作负载&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-parentID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;该记录父记录的 SPIFFE ID。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-selector&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;用于证明的冒号分隔的类型：值选择器。该参数可以多次使用，以指定必须满足的多个选择器。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-socketPath&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SPIRE 服务器 API 套接字的路径&lt;/td&gt;
&lt;td&gt;/tmp/spire-server/private/api.sock&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-spiffeID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;该记录代表的 SPIFFE ID 并将被设置为颁发的 SVID。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-x509SVIDTTL&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;作为此记录的结果而发出的任何 X509-SVID 的 TTL（以秒为单位）。覆盖 &lt;code&gt;-ttl&lt;/code&gt; 值。&lt;/td&gt;
&lt;td&gt;使用 &lt;code&gt;default_x509_svid_ttl&lt;/code&gt; 配置的 TTL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-jwtSVIDTTL&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;作为此记录的结果而发出的任何 JWT-SVID 的 TTL（以秒为单位）。覆盖 &lt;code&gt;-ttl&lt;/code&gt; 值。&lt;/td&gt;
&lt;td&gt;使用 &lt;code&gt;default_jwt_svid_ttl&lt;/code&gt; 配置的 TTL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-storeSVID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;一个布尔值，设置后表示必须通过 SVIDStore 插件存储从此条目生成的 SVID&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;spire-server-entry-update&#34;&gt;&lt;code&gt;spire-server entry update&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;更新注册条目。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;行动&lt;/th&gt;
&lt;th&gt;默认&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-admin&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;如果为 true，则此条目中的 SPIFFE ID 将被授予对服务器 API 的访问权限&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-data&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;包含 JSON 格式的注册数据的文件的路径（可选，如果指定，则必须省略与条目信息相关的其他标志）。如果设置为“-”，则从 stdin 读取 JSON。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-dns&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;DNS 名称将包含在基于此条目发布的 SVID 中（如果适用）。可以多次使用&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-downstream&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;布尔值，设置后表示该条目描述下游 SPIRE 服务器&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-entryExpiry&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;到期时间（以秒为单位），用于修剪生成的注册条目&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-entryID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要更新的记录的注册条目 ID&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-federatesWith&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;代表与此注册条目联合的信任域的信任域 SPIFFE ID 列表。该信任域的捆绑包必须已存在&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-parentID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;该记录父记录的 SPIFFE ID。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-selector&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;用于证明的冒号分隔的类型：值选择器。该参数可以多次使用，以指定必须满足的多个选择器。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-socketPath&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SPIRE 服务器 API 套接字的路径&lt;/td&gt;
&lt;td&gt;/tmp/spire-server/private/api.sock&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-spiffeID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;该记录代表的 SPIFFE ID 并将被设置为颁发的 SVID。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-x509SVIDTTL&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;作为此记录的结果而发出的任何 X509-SVID 的 TTL（以秒为单位）。覆盖 &lt;code&gt;-ttl&lt;/code&gt; 值。&lt;/td&gt;
&lt;td&gt;使用 &lt;code&gt;default_x509_svid_ttl&lt;/code&gt; 配置的 TTL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-jwtSVIDTTL&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;作为此记录的结果而发出的任何 JWT-SVID 的 TTL（以秒为单位）。覆盖 &lt;code&gt;-ttl&lt;/code&gt; 值。&lt;/td&gt;
&lt;td&gt;使用 &lt;code&gt;default_jwt_svid_ttl&lt;/code&gt; 配置的 TTL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;storeSVID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;一个布尔值，设置后表示必须通过 SVIDStore 插件存储从此条目生成的 SVID&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;spire-server-entry-count&#34;&gt;&lt;code&gt;spire-server entry count&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;显示注册条目总数。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;行动&lt;/th&gt;
&lt;th&gt;默认&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-socketPath&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SPIRE 服务器 API 套接字的路径&lt;/td&gt;
&lt;td&gt;/tmp/spire-server/private/api.sock&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;spire-server-entry-delete&#34;&gt;&lt;code&gt;spire-server entry delete&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;删除指定的注册条目。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;行动&lt;/th&gt;
&lt;th&gt;默认&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-entryID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要删除的记录的注册条目 ID&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-socketPath&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SPIRE 服务器 API 套接字的路径&lt;/td&gt;
&lt;td&gt;/tmp/spire-server/private/api.sock&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;spire-server-entry-show&#34;&gt;&lt;code&gt;spire-server entry show&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;显示配置的注册条目。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;行动&lt;/th&gt;
&lt;th&gt;默认&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-downstream&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;布尔值，设置后表示该条目描述下游 SPIRE 服务器&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-entryID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要显示的记录的条目 ID。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-federatesWith&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;与条目联合的信任域的 SPIFFE ID。可以多次使用&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-parentID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要显示的记录的父 ID。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-selector&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;以冒号分隔的类型：值选择器。可以多次使用来指定多个选择器。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-socketPath&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SPIRE 服务器 API 套接字的路径&lt;/td&gt;
&lt;td&gt;/tmp/spire-server/private/api.sock&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-spiffeID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要显示的记录的 SPIFFE ID。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;spire-server-bundle-count&#34;&gt;&lt;code&gt;spire-server bundle count&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;显示捆绑包的总数。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;行动&lt;/th&gt;
&lt;th&gt;默认&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-socketPath&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SPIRE 服务器 API 套接字的路径&lt;/td&gt;
&lt;td&gt;/tmp/spire-server/private/api.sock&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;spire-server-bundle-show&#34;&gt;&lt;code&gt;spire-server bundle show&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;显示服务器信任域的捆绑包。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;行动&lt;/th&gt;
&lt;th&gt;默认&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-format&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;显示捆绑包的格式。 &lt;code&gt;pem&lt;/code&gt; 或 &lt;code&gt;spiffe&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;pem&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-socketPath&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SPIRE 服务器 API 套接字的路径&lt;/td&gt;
&lt;td&gt;/tmp/spire-server/private/api.sock&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;spire-server-bundle-list&#34;&gt;&lt;code&gt;spire-server bundle list&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;显示联合捆绑包。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;行动&lt;/th&gt;
&lt;th&gt;默认&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-id&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要显示的捆绑包的信任域 SPIFFE ID。如果未设置，则显示所有信任包&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-format&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;显示联合捆绑包的格式。 &lt;code&gt;pem&lt;/code&gt; 或 &lt;code&gt;spiffe&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;pem&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-socketPath&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SPIRE 服务器 API 套接字的路径&lt;/td&gt;
&lt;td&gt;/tmp/spire-server/private/api.sock&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;spire-server-bundle-set&#34;&gt;&lt;code&gt;spire-server bundle set&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;创建或更新信任域的捆绑数据。此命令不能用于更改服务器信任域捆绑，只能用于其他信任域的捆绑。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;行动&lt;/th&gt;
&lt;th&gt;默认&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-id&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要设置的捆绑包的信任域 SPIFFE ID。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-path&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;包含捆绑数据的文件在磁盘上的路径。如果未设置，则从标准输入读取数据。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-socketPath&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SPIRE 服务器 API 套接字的路径&lt;/td&gt;
&lt;td&gt;/tmp/spire-server/private/api.sock&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-format&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要设置的捆绑包的格式。 &lt;code&gt;pem&lt;/code&gt; 或 &lt;code&gt;spiffe&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;pem&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;spire-server-bundle-delete&#34;&gt;&lt;code&gt;spire-server bundle delete&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;删除信任域的捆绑数据。该命令不能用于删除服务器信任域捆绑，只能删除其他信任域的捆绑。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;行动&lt;/th&gt;
&lt;th&gt;默认&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-id&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要删除的捆绑包的信任域 SPIFFE ID。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-mode&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;以下之一： &lt;code&gt;restrict&lt;/code&gt; 、 &lt;code&gt;dissociate&lt;/code&gt; 、 &lt;code&gt;delete&lt;/code&gt; 。 &lt;code&gt;restrict&lt;/code&gt; 如果捆绑包与注册条目关联（即联合），则防止该捆绑包被删除。 &lt;code&gt;dissociate&lt;/code&gt; 允许删除捆绑包并从注册条目中删除关联。 &lt;code&gt;delete&lt;/code&gt; 删除捆绑包以及关联的注册条目。&lt;/td&gt;
&lt;td&gt;&lt;code&gt;restrict&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-socketPath&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SPIRE 服务器 API 套接字的路径&lt;/td&gt;
&lt;td&gt;/tmp/spire-server/private/api.sock&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;spire-server-federation-create&#34;&gt;&lt;code&gt;spire-server federation create&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;创建与外部信任域的动态联合关系。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;行动&lt;/th&gt;
&lt;th&gt;默认&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-bundleEndpointProfile&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;端点配置文件类型。 &lt;code&gt;https_web&lt;/code&gt; 或 &lt;code&gt;https_spiffe&lt;/code&gt; 。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-bundleEndpointURL&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;提供信任捆绑包的 SPIFFE 捆绑包端点的 URL（必须使用 HTTPS 协议）。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-data&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;包含 JSON 格式的联合关系的文件的路径（可选，如果指定，则必须省略与联合关系信息相关的其他标志）。如果设置为“-”，则从 stdin 读取 JSON。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-endpointSpiffeID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SPIFFE 捆绑端点服务器的 SPIFFE ID。仅用于 &lt;code&gt;https_spiffe&lt;/code&gt; 配置文件。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-socketPath&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SPIRE 服务器 API 套接字的路径。&lt;/td&gt;
&lt;td&gt;/tmp/spire-server/private/api.sock&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-trustDomain&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要联合的信任域的名称（例如 example.org）&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-trustDomainBundleFormat&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;捆绑数据的格式（可选）。 &lt;code&gt;pem&lt;/code&gt; 或 &lt;code&gt;spiffe&lt;/code&gt; 。&lt;/td&gt;
&lt;td&gt;pem&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-trustDomainBundlePath&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;信任域捆绑数据的路径（可选）。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;spire-server-federation-delete&#34;&gt;&lt;code&gt;spire-server federation delete&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;删除动态联合关系。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;行动&lt;/th&gt;
&lt;th&gt;默认&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-id&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;关系的信任域的 SPIFFE ID。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-socketPath&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SPIRE 服务器 API 套接字的路径。&lt;/td&gt;
&lt;td&gt;/tmp/spire-server/private/api.sock&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;spire-server-federation-list&#34;&gt;&lt;code&gt;spire-server federation list&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;列出所有动态联合关系。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;行动&lt;/th&gt;
&lt;th&gt;默认&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-id&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;关系信任域的 SPIFFE ID&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-socketPath&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SPIRE 服务器 API 套接字的路径。&lt;/td&gt;
&lt;td&gt;/tmp/spire-server/private/api.sock&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;spire-server-federation-refresh&#34;&gt;&lt;code&gt;spire-server federation refresh&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;从指定的联合信任域刷新捆绑包。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;行动&lt;/th&gt;
&lt;th&gt;默认&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-id&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;关系信任域的 SPIFFE ID&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-socketPath&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SPIRE 服务器 API 套接字的路径。&lt;/td&gt;
&lt;td&gt;/tmp/spire-server/private/api.sock&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;spire-server-federation-show&#34;&gt;&lt;code&gt;spire-server federation show&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;显示动态的联邦关系。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;行动&lt;/th&gt;
&lt;th&gt;默认&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-socketPath&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SPIRE 服务器 API 套接字的路径。&lt;/td&gt;
&lt;td&gt;/tmp/spire-server/private/api.sock&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-trustDomain&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要显示的联合关系的信任域名（例如 example.org）&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;spire-server-federation-update&#34;&gt;&lt;code&gt;spire-server federation update&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;更新与外部信任域的动态联合关系。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;行动&lt;/th&gt;
&lt;th&gt;默认&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-bundleEndpointProfile&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;端点配置文件类型。 &lt;code&gt;https_web&lt;/code&gt; 或 &lt;code&gt;https_spiffe&lt;/code&gt; 。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-bundleEndpointURL&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;提供信任捆绑包的 SPIFFE 捆绑包端点的 URL（必须使用 HTTPS 协议）。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-data&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;包含 JSON 格式的联合关系的文件的路径（可选，如果指定，则必须省略与联合关系信息相关的其他标志）。如果设置为“-”，则从 stdin 读取 JSON。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-endpointSpiffeID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SPIFFE 捆绑端点服务器的 SPIFFE ID。仅用于 &lt;code&gt;https_spiffe&lt;/code&gt; 配置文件。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-socketPath&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SPIRE 服务器 API 套接字的路径。&lt;/td&gt;
&lt;td&gt;/tmp/spire-server/private/api.sock&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-trustDomain&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要联合的信任域的名称（例如 example.org）&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-trustDomainBundleFormat&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;捆绑数据的格式（可选）。 &lt;code&gt;pem&lt;/code&gt; 或 &lt;code&gt;spiffe&lt;/code&gt; 。&lt;/td&gt;
&lt;td&gt;pem&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-trustDomainBundlePath&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;信任域捆绑数据的路径（可选）。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;spire-server-agent-ban&#34;&gt;&lt;code&gt;spire-server agent ban&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;根据 spiffeID 禁止已证明的节点。被禁止的证明节点无法重新证明。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;行动&lt;/th&gt;
&lt;th&gt;默认&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-socketPath&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SPIRE 服务器 API 套接字的路径&lt;/td&gt;
&lt;td&gt;/tmp/spire-server/private/api.sock&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-spiffeID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要禁止的代理的 SPIFFE ID（代理身份）&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;spire-server-agent-count&#34;&gt;&lt;code&gt;spire-server agent count&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;显示已证明的节点总数。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;行动&lt;/th&gt;
&lt;th&gt;默认&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-socketPath&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SPIRE 服务器 API 套接字的路径&lt;/td&gt;
&lt;td&gt;/tmp/spire-server/private/api.sock&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;spire-server-agent-evict&#34;&gt;&lt;code&gt;spire-server agent evict&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;在给定 spiffeID 的情况下取消对已认证节点的认证。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;行动&lt;/th&gt;
&lt;th&gt;默认&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-socketPath&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SPIRE 服务器 API 套接字的路径&lt;/td&gt;
&lt;td&gt;/tmp/spire-server/private/api.sock&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-spiffeID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要驱逐的代理的 SPIFFE ID（代理身份）&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;spire-server-agent-list&#34;&gt;&lt;code&gt;spire-server agent list&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;显示已证明的节点。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;行动&lt;/th&gt;
&lt;th&gt;默认&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-socketPath&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SPIRE 服务器 API 套接字的路径&lt;/td&gt;
&lt;td&gt;/tmp/spire-server/private/api.sock&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;spire-server-agent-show&#34;&gt;&lt;code&gt;spire-server agent show&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;显示给定 spiffeID 的已证明节点的详细信息（包括节点选择器）。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;行动&lt;/th&gt;
&lt;th&gt;默认&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-socketPath&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SPIRE 服务器 API 套接字的路径&lt;/td&gt;
&lt;td&gt;/tmp/spire-server/private/api.sock&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-spiffeID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要显示的代理的 SPIFFE ID（代理身份）&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;spire-server-healthcheck&#34;&gt;&lt;code&gt;spire-server healthcheck&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;检查 SPIRE 服务器的健康状况。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;行动&lt;/th&gt;
&lt;th&gt;默认&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-shallow&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;执行不太严格的健康检查&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-socketPath&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SPIRE 服务器 API 套接字的路径&lt;/td&gt;
&lt;td&gt;/tmp/spire-server/private/api.sock&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-verbose&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;打印详细信息&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;spire-server-validate&#34;&gt;&lt;code&gt;spire-server validate&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;验证 SPIRE 服务器配置文件。参数与 &lt;code&gt;spire-server run&lt;/code&gt; 相同。通常，你可能至少需要：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;行动&lt;/th&gt;
&lt;th&gt;默认&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-config&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SPIRE 服务器配置文件的路径&lt;/td&gt;
&lt;td&gt;服务器配置文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-expandEnv&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;展开配置文件中的环境 $VARIABLES&lt;/td&gt;
&lt;td&gt;错误的&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;spire-server-x509-mint&#34;&gt;&lt;code&gt;spire-server x509 mint&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;铸造 X509-SVID。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;行动&lt;/th&gt;
&lt;th&gt;默认&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-dns&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将包含在 SVID 中的 DNS 名称。可以多次使用&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-socketPath&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SPIRE 服务器 API 套接字的路径&lt;/td&gt;
&lt;td&gt;/tmp/spire-server/private/api.sock&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-spiffeID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;X509-SVID 的 SPIFFE ID&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-ttl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;X509-SVID 的 TTL&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Entry.x509_svid_ttl&lt;/code&gt; 、 &lt;code&gt;Entry.ttl&lt;/code&gt; 、 &lt;code&gt;default_x509_svid_ttl&lt;/code&gt; 、 &lt;code&gt;1h&lt;/code&gt; 中的第一个非零值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-write&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将输出写入而不是 stdout 的目录&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;spire-server-jwt-mint&#34;&gt;&lt;code&gt;spire-server jwt mint&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;铸造 JWT-SVID。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;行动&lt;/th&gt;
&lt;th&gt;默认&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-audience&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;观众声称将包含在 SVID 中。可以多次使用&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-socketPath&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SPIRE 服务器 API 套接字的路径&lt;/td&gt;
&lt;td&gt;/tmp/spire-server/private/api.sock&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-spiffeID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;JWT-SVID 的 SPIFFE ID&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-ttl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;JWT-SVID 的 TTL&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Entry.jwt_svid_ttl&lt;/code&gt; 、 &lt;code&gt;Entry.ttl&lt;/code&gt; 、 &lt;code&gt;default_jwt_svid_ttl&lt;/code&gt; 、 &lt;code&gt;5m&lt;/code&gt; 中的第一个非零值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-write&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要写入令牌而不是标准输出的文件&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;-data-的-json-对象&#34;&gt;&lt;code&gt;-data&lt;/code&gt; 的 JSON 对象&lt;/h2&gt;
&lt;p&gt;传递给 &lt;code&gt;entry create/update&lt;/code&gt; 的 &lt;code&gt;-data&lt;/code&gt; 的 JSON 对象需要以下形式：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;entries&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;入口对象在公共 protobuf 文件中由 &lt;code&gt;RegistrationEntry&lt;/code&gt; 描述。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;注意：要创建节点条目，请将 &lt;code&gt;parent_id&lt;/code&gt; 设置为特殊值 &lt;code&gt;spiffe://&amp;lt;your-trust-domain&amp;gt;/spire/server&lt;/code&gt; 。这就是在 cli 上传递 &lt;code&gt;-node&lt;/code&gt; 标志时代码所做的事情。&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;配置文件示例&#34;&gt;配置文件示例&lt;/h2&gt;
&lt;p&gt;本节包括用于格式化和语法参考的示例配置文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-hcl&#34; data-lang=&#34;hcl&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;server&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;    trust_domain&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;example.org&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;    bind_address&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0.0.0.0&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;    bind_port&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;8081&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;    log_level&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;INFO&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;    data_dir&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/opt/spire/.data/&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;    default_x509_svid_ttl&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;6h&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;    default_jwt_svid_ttl&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;5m&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;    ca_ttl&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;72h&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;ca_subject&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;        country&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;US&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;        organization&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SPIRE&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;        common_name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;telemetry&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;Prometheus&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;        port&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1234&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;plugins&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;DataStore&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;sql&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;plugin_data&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;            database_type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;sqlite3&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;            connection_string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/opt/spire/.data/datastore.sqlite3&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;NodeAttestor&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;join_token&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;plugin_data&lt;/span&gt; {}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;KeyManager&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;disk&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;plugin_data&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;            keys_path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/opt/spire/.data/keys.json&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>使用 Envoy 和 JWT-SVIDs 进行 OPA 授权</title>
      <link>https://lib.jimmysong.io/spiffe-and-spire/examples/envoy-jwt-opa/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/spiffe-and-spire/examples/envoy-jwt-opa/</guid>
      <description>&lt;p&gt;本文指导你如何使用 Envoy 和 JWT-SVIDs 以及开放策略代理进行安全通信。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.openpolicyagent.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;开放策略代理&lt;/a&gt;（OPA）是一个开源的、通用的策略引擎。OPA 提供的授权（AuthZ）可以很好地补充 SPIRE 提供的认证（AuthN）。&lt;/p&gt;
&lt;p&gt;本教程基于 SPIRE Envoy-JWT 教程，演示如何结合 SPIRE、Envoy 和 OPA 进行 JWT SVID 认证和请求授权。实现 OPA 请求授权所需的更改在本教程中以增量形式展示，因此你应先运行或至少阅读 SPIRE Envoy-JWT 教程。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-架构图&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/SPIRE-Envoy_JWT_OPA_diagram.png&#34; alt=&#34;架构图&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      架构图
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;为了说明如何使用 OPA 进行请求授权，我们在 SPIRE Envoy JWT 教程中使用的后端服务中添加了一个新的 sidecar。新的 sidecar 充当 Envoy 的新&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/v1.25.1/intro/arch_overview/security/ext_authz_filter#arch-overview-ext-authz&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;外部授权过滤器&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;如图所示，前端服务通过由 Envoy 实例建立的 mTLS 连接连接到后端服务。Envoy 通过 mTLS 连接发送 HTTP 请求，其中携带了用于认证的 JWT-SVID。JWT-SVID 由 SPIRE Agent 提供并验证，然后，请求会根据安全策略由 OPA Agent 实例授权或拒绝。&lt;/p&gt;
&lt;p&gt;在本教程中，你将学习如何：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将 OPA Agent 添加到 SPIRE Envoy JWT 教程中现有的后端服务&lt;/li&gt;
&lt;li&gt;在连接 Envoy 到 OPA 的 Envoy 配置中添加一个外部授权过滤器&lt;/li&gt;
&lt;li&gt;测试成功的使用 SPIRE 和 OPA 授权的 JWT 认证&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;先决条件&#34;&gt;先决条件&lt;/h1&gt;
&lt;h2 id=&#34;外部-ip-支持&#34;&gt;外部 IP 支持&lt;/h2&gt;
&lt;p&gt;本教程需要一个负载均衡器，该负载均衡器能够分配外部 IP（例如，&lt;a href=&#34;https://metallb.universe.tf/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;metallb&lt;/a&gt;）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.13.7/config/manifests/metallb-native.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;等到 metallb 启动&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl &lt;span class=&#34;nb&#34;&gt;wait&lt;/span&gt; --namespace metallb-system &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;                --for&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;condition&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;ready pod &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;                --selector&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;metallb &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;                --timeout&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;90s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;应用 metallb 配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -f ../envoy-x509/metallb-config.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;授权助手镜像&#34;&gt;授权助手镜像&lt;/h2&gt;
&lt;p&gt;使用 Envoy-jwt-auth-helper 实现了一个外部授权过滤器，提供了一个脚本来简化使用&lt;code&gt;kind&lt;/code&gt;或&lt;code&gt;minikube&lt;/code&gt;的构建和导入&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ bash ./scripts/build-helper.sh kind
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;之前的-spire-安装&#34;&gt;之前的 SPIRE 安装&lt;/h2&gt;
&lt;p&gt;在开始之前，回顾以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你需要访问在完成 SPIRE Envoy-JWT 教程时配置的 Kubernetes 环境。或者，你可以使用下面描述的&lt;code&gt;pre-set-env.sh&lt;/code&gt;脚本创建 Kubernetes 环境。&lt;/li&gt;
&lt;li&gt;此教程所需的 YAML 文件可以在  &lt;a href=&#34;https://github.com/spiffe/spire-tutorials&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/spiffe/spire-tutorials&lt;/a&gt; 的 &lt;code&gt;k8s/envoy-jwt-opa&lt;/code&gt; 目录中找到。如果你还没有克隆 spire-tutorials 存储库，请立即这样做。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果 Kubernetes &lt;em&gt;配置 Envoy 以执行 JWT SVID 身份验证&lt;/em&gt;教程环境不可用，你可以使用以下脚本创建它，并将它用作本教程的起点。从&lt;code&gt;k8s/envoy-jwt-opa&lt;/code&gt;目录中，运行以下 Bash 脚本：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ bash scripts/pre-set-env.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该脚本将创建 SPIRE 服务器和 SPIRE 代理在集群中可用所需的所有资源，然后将为 SPIRE Envoy JWT 教程创建所有资源，这是此 SPIRE Envoy JWT 与 OPA 教程的基础场景。&lt;/p&gt;
&lt;p&gt;注意：本教程中显示的配置更改需要使 Envoy 和 OPA 与 SPIRE 一起工作。但是，所有这些设置已经配置好了。你不需要编辑任何配置文件。&lt;/p&gt;
&lt;h1 id=&#34;第一部分部署更新和新资源&#34;&gt;第一部分：部署更新和新资源&lt;/h1&gt;
&lt;p&gt;假定 SPIRE Envoy JWT 教程为起点，需要创建一些资源。目标是在请求到达&lt;code&gt;backend&lt;/code&gt;服务之前，由 OPA 代理对其进行授权。在 Envoy 实例之间建立了 mTLS 连接，其中 JWT SVID 在请求中作为&lt;code&gt;authorization&lt;/code&gt;头部传输。因此，缺少的部分是添加一个 OPA 代理以根据策略对请求进行授权。在本教程中应用的解决方案包括向运行在&lt;code&gt;backend&lt;/code&gt;服务前的 Envoy 实例添加新的外部授权过滤器。新的过滤器在请求通过 Envoy JWT Auth Helper（第一个过滤器）之后调用 OPA 代理，其作用是检查是否应授权或拒绝请求。&lt;/p&gt;
&lt;h2 id=&#34;更新部署&#34;&gt;更新部署&lt;/h2&gt;
&lt;p&gt;为了让 OPA 授权或拒绝发送到&lt;code&gt;backend&lt;/code&gt;服务的请求，我们需要将 OPA 添加为部署的 sidecar。我们使用&lt;code&gt;openpolicyagent/opa:0.50.2-envoy&lt;/code&gt;镜像，该镜像扩展了 OPA 并添加了一个实现 Envoy 外部授权 API 的 gRPC 服务器，因此 OPA 可以与 Envoy 通信策略决策。在 &lt;a href=&#34;https://github.com/spiffe/spire-tutorials/blob/main/k8s/envoy-jwt-opa/k8s/backend/backend-deployment.yaml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;backend-deployment.yaml&lt;/code&gt;&lt;/a&gt;中，添加并配置新的容器，如下所示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;opa&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;openpolicyagent/opa:0.50.2-envoy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;imagePullPolicy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;IfNotPresent&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;opa-envoy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;containerPort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8182&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;protocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;TCP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;opa-api-port&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;containerPort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8181&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;protocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;TCP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;run&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;--server&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;--config-file=/run/opa/opa-config.yaml&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;/run/opa/opa-policy.rego&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumeMounts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;backend-opa-policy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mountPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/run/opa&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;readOnly&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;需要将&lt;code&gt;backend-opa-policy&lt;/code&gt; ConfigMap 添加到&lt;code&gt;volumes&lt;/code&gt;部分，如下所示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;backend-opa-policy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;configMap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;backend-opa-policy-config&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;backend-opa-policy&lt;/code&gt; ConfigMap 提供了两个资源，&lt;code&gt;opa-config.yaml&lt;/code&gt;在&lt;a href=&#34;https://spiffe.io/docs/latest/microservices/envoy-jwt-opa/readme/#opa-configuration&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OPA 配置&lt;/a&gt;中描述，而&lt;code&gt;opa-policy.rego&lt;/code&gt;策略在&lt;a href=&#34;https://spiffe.io/docs/latest/microservices/envoy-jwt-opa/readme/#opa-policy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OPA 策略&lt;/a&gt;部分解释。&lt;/p&gt;
&lt;h2 id=&#34;opa-配置&#34;&gt;OPA 配置&lt;/h2&gt;
&lt;p&gt;对于本教程，我们在 &lt;a href=&#34;https://github.com/spiffe/spire-tutorials/blob/main/k8s/envoy-jwt-opa/k8s/backend/config/opa-config.yaml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;opa-config.yaml&lt;/code&gt;&lt;/a&gt; 中创建了以下 OPA 配置文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;decision_logs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;plugins&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;envoy_ext_authz_grpc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8182&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;data.envoy.authz.allow&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;选项&lt;code&gt;decision_logs.console: true&lt;/code&gt;强制 OPA 将决策在控制台上以信息级别本地记录。稍后在教程中，我们将使用这些日志来检查不同请求的结果。&lt;/p&gt;
&lt;p&gt;接下来，让我们回顾一下&lt;code&gt;envoy_ext_authz_grpc&lt;/code&gt;插件的配置。&lt;code&gt;addr&lt;/code&gt;键设置实现 Envoy 外部授权 API 的 gRPC 服务器的监听地址。这必须与接下来的部分中详细描述的 Envoy 过滤器资源中配置的值匹配。&lt;code&gt;query&lt;/code&gt;键定义要查询的策略决策的名称。下一部分将关注为&lt;code&gt;query&lt;/code&gt;键指定的&lt;code&gt;envoy.authz.allow&lt;/code&gt;策略的细节。&lt;/p&gt;
&lt;h2 id=&#34;opa-策略&#34;&gt;OPA 策略&lt;/h2&gt;
&lt;p&gt;OPA 政策使用高级声明性语言 Rego 表达。对于本教程，我们创建了一个名为&lt;code&gt;allow&lt;/code&gt;的样本规则，该规则包含三个表达式（请参见 &lt;a href=&#34;https://github.com/spiffe/spire-tutorials/blob/main/k8s/envoy-jwt-opa/k8s/backend/config/opa-policy.rego&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;opa-policy.rego&lt;/code&gt;&lt;/a&gt;）。所有表达式必须为真，该规则才为真。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package envoy.authz

default allow = false

allow {
    valid_path
    http_request.method == &amp;#34;GET&amp;#34;
    svc_spiffe_id == &amp;#34;spiffe://example.org/ns/default/sa/default/frontend&amp;#34;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;让我们逐一查看每个表达式。&lt;code&gt;valid_path&lt;/code&gt;是一个用户定义的函数，用于确保只允许发送给允许的资源的请求。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import input.attributes.request.http as http_request

valid_path {
   glob.match(&amp;#34;/balances/*&amp;#34;, [], http_request.path)
}

valid_path {
   glob.match(&amp;#34;/profiles/*&amp;#34;, [], http_request.path)
}

valid_path {
   glob.match(&amp;#34;/transactions/*&amp;#34;, [], http_request.path)
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;函数&lt;code&gt;valid_path&lt;/code&gt;利用内置函数&lt;code&gt;glob.match(&lt;/code&gt; &lt;em&gt;pattern, delimiters, match&lt;/em&gt;&lt;code&gt;)&lt;/code&gt;的输出，如果在由&lt;em&gt;delimiters&lt;/em&gt;分隔的&lt;em&gt;pattern&lt;/em&gt;中可以找到&lt;em&gt;match&lt;/em&gt;，则其输出为真。然后，要在 Rego 中表示逻辑 OR，你需要定义具有相同名称的多个规则。这就是为什么&lt;code&gt;valid_path&lt;/code&gt;有三个定义，每个有效资源一个。&lt;/p&gt;
&lt;p&gt;以下表达式定义了请求的 HTTP 方法必须等于&lt;code&gt;GET&lt;/code&gt;:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;http_request.method == &amp;#34;GET&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最后一个表达式也对应于一个用户定义的函数，只有当 JWT-SVID 中编码的 SPIFFE ID 等于分配给&lt;code&gt;frontend&lt;/code&gt;服务的 SPIFFE ID 时，该函数才会为真。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;svc_spiffe_id == &amp;#34;spiffe://example.org/ns/default/sa/default/frontend&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;函数&lt;code&gt;svc_spiffe_id&lt;/code&gt;从请求中的&lt;code&gt;authorization&lt;/code&gt;头中提取服务的 SPIFFE ID。因为请求已经通过了第一个 Envoy 筛选器（以验证模式运行的 Envoy JWT Auth Helper），我们知道它有一个有效的 JWT，我们可以解码来提取调用服务的 SPIFFE ID。OPA 提供了一个处理 JWT 的特殊代码，我们可以利用它来解码 JWT 并提取 SPIFFE ID：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;svc_spiffe_id = payload.sub {
   [_, encoded_token] := split(http_request.headers.authorization, &amp;#34; &amp;#34;)
   [_, payload, _] := io.jwt.decode(encoded_token)
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;因此，只有当请求被发送到一个有效的资源（/balances/，/profiles/或/transactions/）并且请求的方法为&lt;code&gt;GET&lt;/code&gt;，且请求来自一个用等于 &lt;code&gt;spiffe://example.org/ns/default/sa/default/frontend&lt;/code&gt; 的 SPIFFE ID 认证的工作负载时，策略才会评估为真。在所有其他情况下，请求都不会被 OPA 授权，因此会被 Envoy 拒绝。&lt;/p&gt;
&lt;h2 id=&#34;在-envoy-中添加一个新的外部授权过滤器&#34;&gt;在 Envoy 中添加一个新的外部授权过滤器&lt;/h2&gt;
&lt;p&gt;Envoy 需要知道如何联系刚刚配置的 OPA Agent，以执行每个请求的授权。为了完成设置，我们在&lt;a href=&#34;https://github.com/spiffe/spire-tutorials/blob/main/k8s/envoy-jwt-opa/k8s/backend/config/envoy.yaml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy 配置&lt;/a&gt;的&lt;code&gt;http_filters&lt;/code&gt;部分添加一个类型为 External Authorization Filter 的新过滤器，如下所示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;envoy.filters.http.ext_authz&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;typed_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;@type&amp;#34;: &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;with_request_body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;max_request_bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8192&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;allow_partial_message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;failure_mode_allow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;transport_api_version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;V3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;grpc_service&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;google_grpc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;target_uri&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;127.0.0.1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8182&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;stat_prefix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ext_authz&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;timeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;5s&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该配置告诉 Envoy 联系 OPA Agent，地址为 127.0.0.1，端口为 8182。这与在&lt;a href=&#34;https://spiffe.io/docs/latest/microservices/envoy-jwt-opa/readme/#opa-configuration&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OPA 配置&lt;/a&gt;部分解释的 OPA 配置相匹配。&lt;/p&gt;
&lt;h2 id=&#34;应用新资源&#34;&gt;应用新资源&lt;/h2&gt;
&lt;p&gt;确保当前的工作目录是&lt;code&gt;.../spire-tutorials/k8s/envoy-jwt-opa&lt;/code&gt;，并使用以下命令部署新资源：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -k k8s/.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;configmap/backend-envoy configured
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;configmap/backend-opa-policy-config created
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;deployment.apps/backend configured
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了使新配置生效，需要重启&lt;code&gt;backend&lt;/code&gt;服务。运行以下两个命令来强制重启：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl scale deployment backend --replicas&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl scale deployment backend --replicas&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;第二部分测试连接&#34;&gt;第二部分：测试连接&lt;/h1&gt;
&lt;p&gt;现在服务已经更新和部署，让我们测试我们已经配置的授权。&lt;/p&gt;
&lt;h2 id=&#34;测试有效请求&#34;&gt;测试有效请求&lt;/h2&gt;
&lt;p&gt;第一个测试将演示如何允许满足策略的请求显示关联数据。为了运行这个测试，我们需要找到组成用于访问数据的 URL 的 IP 地址和端口。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl get services
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NAME            TYPE           CLUSTER-IP    EXTERNAL-IP      PORT&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;S&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;          AGE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;backend-envoy   ClusterIP      None            &amp;lt;none&amp;gt;           9001/TCP         5m56s
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;frontend        LoadBalancer   10.96.194.108   172.18.255.200   3000:30824/TCP   5m56s
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;frontend-2      LoadBalancer   10.96.61.216    172.18.255.201   3002:31960/TCP   5m56s
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubernetes      ClusterIP      10.96.0.1       &amp;lt;none&amp;gt;           443/TCP          14m
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;frontend&lt;/code&gt;服务将在&lt;code&gt;EXTERNAL-IP&lt;/code&gt;值和端口&lt;code&gt;3000&lt;/code&gt;处可用，这是我们为容器配置的。在上面显示的示例输出中，导航到的 URL 是&lt;code&gt;http://172.18.255.200:3000&lt;/code&gt;。打开浏览器，并导航到你的环境中显示为&lt;code&gt;frontend&lt;/code&gt;的 IP 地址，添加端口&lt;code&gt;:3000&lt;/code&gt;。一旦页面加载，你将看到用户&lt;em&gt;Jacob Marley&lt;/em&gt;的账户详情。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-前端&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/frontend_view.png&#34; alt=&#34;前端&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      前端
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;让我们看看 OPA Agent 的日志，看看幕后发生了什么。使用以下 Bash 脚本获取运行在&lt;code&gt;backend&lt;/code&gt;服务旁的 OPA 实例的日志，并使用 &lt;a href=&#34;https://stedolan.github.io/jq/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;jq&lt;/a&gt; 处理输出：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ bash scripts/backend-opa-logs.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出显示了每个请求的决策。例如，对&lt;code&gt;frontend&lt;/code&gt;服务的请求可能会产生类似于以下的日志条目：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;decision_id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;96ed5a6c-c2d3-493a-bdd2-bf8b94036bfb&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;input&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;attributes&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;err&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;#34;request&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;#34;http&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;nt&#34;&gt;&amp;#34;headers&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;:authority&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;localhost:3001&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;:method&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;GET&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;:path&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/transactions/1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;accept-encoding&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;gzip&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;authorization&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6ImU2d3JsNkw3Nm5HS3VVVDlJdVhoVEpFbFVIaExSZFJrIiwidHlwIjoiSldUIn0.eyJhdWQiOlsic3BpZmZlOi8vZXhhbXBsZS5vcmcvbnMvZGVmYXVsdC9zYS9kZWZhdWx0L2JhY2tlbmQiXSwiZXhwIjoxNTk0MjM5NzQ3LCJpYXQiOjE1OTQyMzk0NDcsInN1YiI6InNwaWZmZTovL2V4YW1wbGUub3JnL25zL2RlZmF1bHQvc2EvZGVmYXVsdC9mcm9udGVuZCJ9.YiS52Y44iOGgaRPcXmhm_FRHgjGIPknx3HqHvVsQNiQw4uJx3eICPECQqTpFOh3flEqvDizlpehipHHdhKEy8TvZtJRnPQ69Jofce4aCx5wF0KQtOBZ79bx9H0Y0gcWWzIDb3YW3uNVfZnHvojlLnzqJb3axIhAqgNbURmlm4STTISxJxNzYcr24Zio6uTYSEJmLtQlFVShhUUQr0zFyj_tbyc9RRcX3MNWLFrkWS8eVIQvkvKBO2zYt2FA0GACBnSFDcR6u2G-5QCU7mzlOnqCrMZ6q4aaRp86v33fYbKZKSfghfcmAeOKc-aai92sTlSPSpWnv5qLKIs6GpT6H7A&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;content-length&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;user-agent&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Go-http-client/1.1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;x-forwarded-proto&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;http&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;x-request-id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;fad45df6-3cc1-4ce9-9cad-fb3b65eff037&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;nt&#34;&gt;&amp;#34;host&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;localhost:3001&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;nt&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;10476077497628160603&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;nt&#34;&gt;&amp;#34;method&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;GET&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;nt&#34;&gt;&amp;#34;path&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/transactions/1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;nt&#34;&gt;&amp;#34;protocol&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;HTTP/1.1&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;err&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;err&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;err&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;err&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;msg&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Decision Log&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;query&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;data.envoy.authz.allow&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;requested_by&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;result&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;2020-07-08T20:17:27Z&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;timestamp&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;2020-07-08T20:17:27.7568234Z&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;openpolicyagent.org/decision_logs&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意 &lt;code&gt;authorization&lt;/code&gt; 头中包含了 JWT。如 &lt;a href=&#34;https://spiffe.io/docs/latest/microservices/envoy-jwt-opa/readme/#opa-policy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OPA 策略&lt;/a&gt; 部分所解释的，这个 JWT 使用 OPA 提供的专用代码进行解码，然后提取 SPIFFE ID。我们已经知道，&lt;code&gt;frontend&lt;/code&gt; 服务的 SPIFFE ID 与为 OPA Agent 配置的 Rego 策略中定义的 SPIFFE ID 匹配。此外，请求的路径和方法也匹配规则，所以决策的 &lt;code&gt;result&lt;/code&gt; 为 &lt;code&gt;true&lt;/code&gt;，请求被允许通过过滤器并到达 &lt;code&gt;backend&lt;/code&gt; 服务。&lt;/p&gt;
&lt;h2 id=&#34;测试无效的请求&#34;&gt;测试无效的请求&lt;/h2&gt;
&lt;p&gt;另一方面，当你连接到 &lt;code&gt;frontend-2&lt;/code&gt; 服务的 URL (例如 &lt;code&gt;http://172.18.255.201:3002&lt;/code&gt;) 时，浏览器只显示标题，没有任何账户详情。这是因为 &lt;code&gt;frontend-2&lt;/code&gt; 服务的 SPIFFE ID（&lt;code&gt;spiffe://example.org/ns/default/sa/default/frontend-2&lt;/code&gt;）不满足 OPA Agent 的策略。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/frontend-2_view_no_details.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;在尝试显示 &lt;code&gt;frontend-2&lt;/code&gt; 数据后，你可以使用与前一节中执行的相同的 &lt;code&gt;scripts/backend-opa-logs.sh&lt;/code&gt; 脚本来验证 OPA 做出的决定。对于 &lt;code&gt;frontend-2&lt;/code&gt; 服务，有一个类似的日志条目，但是由于 SPIFFE ID 不匹配，&lt;code&gt;result&lt;/code&gt; 等于 &lt;code&gt;false&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;用新策略重新测试-frontend-2&#34;&gt;用新策略重新测试 frontend-2&lt;/h2&gt;
&lt;p&gt;让我们更新 Rego 策略以匹配 &lt;code&gt;frontend-2&lt;/code&gt; 服务的 SPIFFE ID，然后再测试。你可以利用一个 Bash 脚本来完成这个任务。一旦执行，它会打开你的 &lt;code&gt;KUBE_EDITOR&lt;/code&gt; 或 &lt;code&gt;EDITOR&lt;/code&gt; 环境变量定义的编辑器，或者回退到 Linux 的 &lt;code&gt;vi&lt;/code&gt; 或 Windows 的 Notepad。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ bash scripts/backend-update-policy.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打开编辑器后，寻找指定规则要匹配的 SPIFFE ID 的以下行：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;svc_spiffe_id == &amp;#34;spiffe://example.org/ns/default/sa/default/frontend&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;更新该行以匹配 &lt;code&gt;frontend-2&lt;/code&gt; 服务的 SPIFFE ID：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;svc_spiffe_id == &amp;#34;spiffe://example.org/ns/default/sa/default/frontend-2&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;保存更改并退出。&lt;code&gt;backend-update-policy.sh&lt;/code&gt; 脚本恢复。该脚本应用 ConfigMap 的新版本，然后重启 &lt;code&gt;backend&lt;/code&gt; pod 以获取新规则。在尝试再次在浏览器中查看 &lt;code&gt;frontend-2&lt;/code&gt; 服务之前，等待一些秒钟以便部署传播。一旦 pod 准备好，刷新使用 &lt;code&gt;frontend-2&lt;/code&gt; 服务的正确 URL（例如 &lt;code&gt;http://172.18.255.201:3002&lt;/code&gt;）的浏览器。结果，现在页面显示了用户 &lt;em&gt;Alex Fergus&lt;/em&gt; 的帐户详细信息。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/frontend-2_view.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;另一方面，如果你现在连接到 &lt;code&gt;frontend&lt;/code&gt; 服务的 URL（例如 &lt;code&gt;http://172.18.255.200:3000&lt;/code&gt;），浏览器只显示标题，没有任何账户详情。这是预期的行为，因为策略已经更新，现在 &lt;code&gt;frontend&lt;/code&gt; 服务的 SPIFFE ID 不再满足策略。&lt;/p&gt;
&lt;h1 id=&#34;清理&#34;&gt;清理&lt;/h1&gt;
&lt;p&gt;当你完成后，你可以使用以下命令清理为教程创建的环境。它将移除：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为这个 SPIRE - Envoy JWT 与 OPA 集成教程创建的所有资源&lt;/li&gt;
&lt;li&gt;为 SPIRE - Envoy JWT 集成教程创建的所有资源&lt;/li&gt;
&lt;li&gt;SPIRE Agent、SPIRE Server 和命名空间的所有部署和配置&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ bash scripts/clean-env.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>SPIFFE 和 SPIRE 概念介绍</title>
      <link>https://lib.jimmysong.io/spiffe/introduction-to-spiffe-and-spire-concepts/</link>
      <pubDate>Fri, 07 Oct 2022 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/spiffe/introduction-to-spiffe-and-spire-concepts/</guid>
      <description>&lt;p&gt;在第三章介绍的概念基础上，本章说明了 SPIFFE 标准。解释 SPIRE 实现的组成部分以及它们是如何结合在一起的。最后，讨论威胁模型以及如果特定组件被破坏会发生什么。&lt;/p&gt;
&lt;h2 id=&#34;什么是-spiffe&#34;&gt;什么是 SPIFFE？&lt;/h2&gt;
&lt;p&gt;普适安全生产身份框架（SPIFFE）是一套软件身份的开源标准。为了以一种与组织和平台无关的方式实现可互操作的软件身份，SPIFFE 定义了必要的接口和文件，以完全自动化的方式获得和验证加密身份。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-41spiffe-组件&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f4-1.jpg&#34; alt=&#34;图 4.1：SPIFFE 组件。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 4.1：SPIFFE 组件。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SPIFFE ID，代表软件服务的名称（或身份）。&lt;/li&gt;
&lt;li&gt;SPIFFE 可验证身份文件（SVID），这是一个可加密验证的文件，用于向对等者证明服务的身份。&lt;/li&gt;
&lt;li&gt;SPIFFE Workload API，这是一个简单的节点本地 API，服务用它来获得身份，而不需要认证。&lt;/li&gt;
&lt;li&gt;SPIFFE Trust Bundle（信任包），一种代表特定 SPIFFE 发行机构使用的公钥集合的格式。&lt;/li&gt;
&lt;li&gt;SPIFFE Federation，这是一个简单的机制，通过它可以共享 SPIFFE Trust Bundle。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;spiffe-不是什么&#34;&gt;SPIFFE 不是什么&lt;/h3&gt;
&lt;p&gt;SPIFFE 旨在识别服务器、服务和其他通过计算机网络通信的非人类实体。这些都有一个共同点，那就是这些身份必须是&lt;strong&gt;可以自动发出的&lt;/strong&gt;（没有人类在其中参与）。虽然有可能使用 SPIFFE 来识别人或其他野生动物物种，但该项目特意将这些用例排除在范围之外。除了机器人和机器之外，没有其他特别的考虑。&lt;/p&gt;
&lt;p&gt;SPIFFE 向服务提供身份和相关信息，同时管理该身份的生命周期，但&lt;strong&gt;它仅仅作为提供者&lt;/strong&gt;，因为它不直接利用其提供的身份。利用 SPIFFE 身份是服务的责任。在使用 SPIFFE 身份时，有多种解决方案可以实现认证层，如端到端加密通信或服务间授权和访问控制，但是，这些功能也被认为不属于 SPIFFE 项目的范围，SPIFFE 不会直接解决这些问题。&lt;/p&gt;
&lt;h3 id=&#34;spiffe-id&#34;&gt;SPIFFE ID&lt;/h3&gt;
&lt;p&gt;SPIFFE ID 是一个字符串，作为服务的唯一名称。它被模拟成一个 URI，由几个部分组成。前缀 &lt;code&gt;spiffe://&lt;/code&gt;（作为 URI 的方案），信任域的名称（作为主机部分），以及特定工作负载的名称或身份（作为路径部分）。&lt;/p&gt;
&lt;p&gt;一个简单的 SPIFFE ID 可能只是 &lt;code&gt;spiffe://example.com/myservice&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-42一个-spiffe-id-示例以及它的组成&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f4-2.jpg&#34; alt=&#34;图 4.2：一个 SPIFFE ID 示例，以及它的组成。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 4.2：一个 SPIFFE ID 示例，以及它的组成。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;SPIFFE ID 的第一个组成部分是 &lt;code&gt;spiffe:// &lt;/code&gt;URI 方案。虽然很普通，但包括它是一个重要的细节，因为它有助于将 SPIFFE ID 与 URL 或其他类型的 URL 区分开来。&lt;/p&gt;
&lt;p&gt;SPIFFE ID 的第二个组成部分是信任域名称（&lt;code&gt;example.com&lt;/code&gt;）。在某些情况下，整个组织只有一个信任域。在其他情况下，可能需要有许多信任域。信任域的语义将在本章后面介绍。&lt;/p&gt;
&lt;p&gt;最后一个组成部分是工作负载本身的名称部分，由 URI 路径表示。SPIFFE ID 的这一部分的具体格式和组成是因地制宜的。各机构可以自由选择对其最有意义的命名方案。例如，我们可以选择一个既能反映组织位置又能反映工作负载目的的命名方案，如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; spiffe://example.com/bizops/hr/taxrun/withholding
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;值得注意的是，SPIFFE ID 的主要目的是以一种灵活的方式来表示工作负载的身份，使人类和机器都能轻松使用。当试图在 SPIFFE ID 的格式中灌输太多的意义时，应该谨慎行事。例如，试图编纂后来被用作授权元数据的各个部分的属性，会导致互操作性和灵活性的挑战。相反，建议使用一个&lt;a href=&#34;https://en.wiktionary.org/wiki/lookaside&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;单独的数据库&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;spiffe-信任域&#34;&gt;SPIFFE 信任域&lt;/h3&gt;
&lt;p&gt;SPIFFE 规范引入了&lt;strong&gt;信任域&lt;/strong&gt;的概念。信任域被用来管理组织内部和组织之间的管理和安全边界，每个 SPIFFE ID 都有其信任域的名称，如上所述。具体来说，信任域是 SPIFFE ID 命名空间的一部分，在这个命名空间中，一组特定的公钥被认为是权威的。&lt;/p&gt;
&lt;p&gt;由于不同的信任域有不同的签发机构，一个信任域的破坏不会危及另一个信任域。这是一个重要的属性，使互不信任的各方之间能够进行安全通信，例如，在 staging 和生产之间或一个公司和另一个公司之间。&lt;/p&gt;
&lt;p&gt;跨越多个信任域验证 SPIFFE 身份的能力被称为 SPIFFE Federation，在本章后面介绍。&lt;/p&gt;
&lt;h3 id=&#34;spiffe-可验证身份文件svid&#34;&gt;SPIFFE 可验证身份文件（SVID）&lt;/h3&gt;
&lt;p&gt;SPIFFE 可验证身份文件（SVID）是一个可加密验证的&lt;strong&gt;身份文件&lt;/strong&gt;，用于向对等体证明一个服务的身份。SVID 包括一个单一的 SPIFFE ID，并由代表服务所在的信任域的签发机构签署。&lt;/p&gt;
&lt;p&gt;与其发明一种新的文件类型让软件支持，SPIFFE 选择利用那些已经被广泛使用并被充分理解的文件类型。在撰写本报告时，有两种身份文件被定义为 SPIFFE 规范中的 SVID 使用：X.509 和 JWT。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;X509-SVID&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;X509-SVID 将 SPIFFE 身份编码为&lt;a href=&#34;https://tools.ietf.org/html/rfc5280&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;标准 X.509 证书&lt;/a&gt;。相应的 SPIFFE ID 被设置为主题替代名称（SAN）扩展字段中的 URI 类型。虽然 X509-SVID 上只允许设置一个 URI SAN 字段，但证书可以包含任何数量的其他类型的 SAN 字段，包括 DNS SAN。&lt;/p&gt;
&lt;p&gt;建议尽可能使用 X509-SVID，因为它们比 JWT-SVID 有更好的安全属性。具体来说，当与 TLS 结合使用时，X.509 证书不能被中间人记录和重放。&lt;/p&gt;
&lt;p&gt;利用 X509-SVID 可能有额外的要求，请参考 &lt;a href=&#34;https://github.com/spiffe/spiffe/blob/master/standards/X509-SVID.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;X509-SVID 规范部分&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JWT-SVID&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;JWT-SVID 将 SPIFFE 身份编码为一个标准的 &lt;a href=&#34;https://tools.ietf.org/html/rfc7519&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JWT&lt;/a&gt;—— 特别是一个 &lt;a href=&#34;https://tools.ietf.org/html/rfc7515&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JWS&lt;/a&gt;。JWT-SVID 被用作承载令牌，在应用层向对等者证明身份。与 X509-SVID 不同，JWT-SVID 受到一类被称为 &lt;a href=&#34;https://en.wikipedia.org/wiki/Replay_attack&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;重放攻击&lt;/a&gt;的威胁，即令牌被未经授权的一方获得并重新使用。&lt;/p&gt;
&lt;p&gt;SPIFFE 规定了三种机制来缓解这种攻击媒介。首先，JWT-SVID 必须只通过安全通道传输。其次，受众声明（ &lt;code&gt;aud&lt;/code&gt; 声明）必须被设置为与令牌的目的方严格匹配的字符串。最后，所有的 JWT-SVID 必须包括一个过期时间，限制被盗令牌的有效期限。&lt;/p&gt;
&lt;p&gt;尤其需要注意的是，尽管有这些缓解措施，JWT-SVID 从根本上说仍然容易受到重放攻击，因此应该谨慎使用并小心处理。也就是说，它们是 SPIFFE 规范集的一个重要部分，因为它们允许 SPIFFE 认证在不可能建立端到端通信渠道的情况下发挥作用。&lt;/p&gt;
&lt;p&gt;利用 JWT-SVID 可能有额外的要求，请参考 &lt;a href=&#34;https://github.com/spiffe/spiffe/blob/master/standards/JWT-SVID.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JWT-SVID 规范部分&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;spiffe-信任包&#34;&gt;SPIFFE 信任包&lt;/h3&gt;
&lt;p&gt;SPIFFE 信任包是一个包含信任域公钥的文件。每种 SVID 类型都有一个特定的方式在这个包中表示出来（例如，对于 X509-SVID，包括代表公钥的 CA 证书）。每个 SPIFFE 信任域都有一个与之相关的捆绑包，该捆绑包中的材料被用来验证声称位于该信任域中的 SVID。&lt;/p&gt;
&lt;p&gt;由于信任包不包含任何秘密（只有公钥），它可以安全地与公众分享。尽管这一事实，它确实需要安全地分发，以保护其内容不被擅自修改。换句话说，保密性是不需要的，但完整性是需要的。&lt;/p&gt;
&lt;p&gt;SPIFFE 捆绑包的格式是 JWK Set（或 JWKS 文档），与现有的认证技术如 &lt;a href=&#34;https://openid.net/connect/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenID Connect&lt;/a&gt; 兼容。JWKS 是一种灵活且被广泛采用的格式，用于表示各种类型的加密密钥和文件，在新的 SVID 格式被定义的情况下，它提供了一些未来证明。&lt;/p&gt;
&lt;h3 id=&#34;spiffe-federation&#34;&gt;SPIFFE Federation&lt;/h3&gt;
&lt;p&gt;通常，允许在不同信任域的服务之间进行安全通信是可取的。在许多情况下，你不能把所有的服务放在一个信任域中。一个常见的例子是两个不同的组织需要相互通信。另一个例子可能是一个组织需要建立安全边界，也许是在信任度较低的云环境和高度信任的内部服务之间。&lt;/p&gt;
&lt;p&gt;为了能够实现这一点，每个服务必须拥有远程服务所来自的外部信任域的&lt;strong&gt;捆绑包（Bundle）&lt;/strong&gt;。因此，SPIFFE 信任域必须公开或以其他方式分享其捆绑包内容，使外部信任域中的服务能够验证来自本地信任域的身份。用于共享信任域的捆绑内容的机制被称为&lt;strong&gt;捆绑端点（Bundle Endpoint）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;捆绑端点是简单的 TLS 保护的 HTTP 服务。希望与外部信任域联合的运营商必须用外部信任域的名称和捆绑端点的 URL 来配置他们的 SPIFFE 实现，允许定期获取捆绑包的内容。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-43-有两个不同的信任域通过联邦连接的公司架构的说明每个-spire-服务器只能为自己的信任域签署-svid&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f4-3.jpg&#34; alt=&#34;图 4.3: 有两个不同的信任域通过联邦连接的公司架构的说明。每个 SPIRE 服务器只能为自己的信任域签署 SVID。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 4.3: 有两个不同的信任域通过联邦连接的公司架构的说明。每个 SPIRE 服务器只能为自己的信任域签署 SVID。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;spiffe-workload-api&#34;&gt;SPIFFE Workload API&lt;/h3&gt;
&lt;p&gt;SPIFFE Workload API 是一个本地的、非网络化的 API，工作负载用它来获取当前的身份文件、信任捆绑和相关信息。重要的是，这个 API 是&lt;strong&gt;未经认证的&lt;/strong&gt;，不要求工作负载拥有任何预先存在的证书。将这一功能作为本地 API 提供，允许 SPIFFE 实现者提出创造性的解决方案，在不需要直接认证的情况下识别调用者（例如，利用操作系统提供的功能）。Workload API 以 gRPC 服务器的形式公开，并使用双向流，允许根据需要将更新推入工作负载。&lt;/p&gt;
&lt;p&gt;Workload API 不要求调用的工作负载对自己的身份有任何了解，也不要求调用 API 时拥有任何凭证。这就避免了在工作负载旁边部署任何认证秘密的需要。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-44工作负载-api-提供信息和设施来利用-spiffe-的身份&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f4-4.jpg&#34; alt=&#34;图 4.4：工作负载 API 提供信息和设施来利用 SPIFFE 的身份。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 4.4：工作负载 API 提供信息和设施来利用 SPIFFE 的身份。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;SPIFFE 工作负载 API 向工作负载提供 SVID 和信任包，并在必要时对其进行轮换。&lt;/p&gt;
&lt;h2 id=&#34;什么是-spire&#34;&gt;什么是 SPIRE？&lt;/h2&gt;
&lt;p&gt;SPIFFE 运行环境（SPIRE）是 SPIFFE 规范中所有五个部分的一个生产可用的开源实现。&lt;/p&gt;
&lt;p&gt;SPIRE 项目（以及 SPIFFE）由云原生计算基金会主办，该基金会由许多领先的基础设施技术公司成立，为有利于云原生社区的开源项目提供一个中立的家园。&lt;/p&gt;
&lt;p&gt;SPIRE 有两个主要组成部分：服务器和代理。服务器负责验证代理和构建 SVID，而代理则负责为 SPIFFE Workload API 提供服务。这两个组件都是使用面向插件的架构编写的，因此它们可以很容易地被扩展，以适应大量不同的配置和平台。&lt;/p&gt;
&lt;h3 id=&#34;spire-架构&#34;&gt;SPIRE 架构&lt;/h3&gt;
&lt;p&gt;SPIRE 的架构由两个关键组件组成，即 SPIRE 服务器和 SPIRE 代理。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SPIRE 服务器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SPIRE 服务器管理和发布 SPIFFE 信任域中的所有身份。它使用一个数据存储来保存关于其代理和工作负载等的信息。SPIRE 服务器通过使用注册条目获知其管理的工作负载，注册条目是为节点和工作负载分配 SPIFFE ID 的灵活规则。&lt;/p&gt;
&lt;p&gt;该服务器可以通过 API 或命令行命令进行管理。需要注意的是，由于服务器掌握着 SVID 的签名密钥，它被认为是一个重要的安全组件。在决定它的位置时应特别考虑。这一点将在本书后面讨论。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;数据存储&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;SPIRE 服务器使用一个&lt;strong&gt;数据存储&lt;/strong&gt;来跟踪其当前的注册条目，以及它所发布的 SVID 的状态。目前，支持几种不同的 SQL 数据库。SPIRE 内置 SQLite，这是一个内存中的嵌入式数据库，用于开发和测试目的。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;上游机构&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;一个信任域中的所有 SVID 都由 SPIRE 服务器签署。默认情况下，SPIRE 服务器会生成一个自签名证书（用自己随机生成的私钥签名的证书）来签署 SVID，除非配置了一个 &lt;strong&gt;上游证书机构（Upstream Certificate Authority）&lt;/strong&gt; 插件接口。上游证书授权的插件接口允许 SPIRE 从另一个证书授权机构获得其签名证书。&lt;/p&gt;
&lt;p&gt;在许多简单的情况下，使用自签名的证书就可以了。然而，对于较大的安装，可能需要利用预先存在的证书颁发机构和 X.509 证书的分层性质，使多个 SPIRE 服务器（和其他生成 X.509 证书的软件）一起工作。&lt;/p&gt;
&lt;p&gt;在一些组织中，上游证书颁发机构可能是一个中央证书颁发机构，你的组织在其他方面使用它。如果你有许多不同种类的证书在使用，而且你希望它们在你的基础设施中都被信任，那么这就很有用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SPIRE 代理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SPIRE 代理只有一个功能，尽管是一个非常重要的功能：为 Workload API 服务。在完成这一壮举的过程中，它解决了一些相关的问题，如确定工作负载的身份，调用它，并安全地将自己介绍给 SPIRE 服务器。在这种安排中，它是执行所有重任的代理。&lt;/p&gt;
&lt;p&gt;代理不需要像 SPIRE 服务器那样的主动管理。虽然它们确实需要一个配置文件，但 SPIRE 代理从 SPIRE 服务器直接接收有关本地信任域和可能调用它的工作负载的信息。在给定的信任域中定义新的工作负载时，只需在 SPIRE 服务器中定义或更新记录，有关新工作负载的信息就会自动传播给相应的代理。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-45spire-代理暴露了-spiffe-workload-api并与-spire-服务器一起工作向调用代理的工作负载发布身份信息&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f4-5.jpg&#34; alt=&#34;图 4.5：SPIRE 代理暴露了 SPIFFE Workload API，并与 SPIRE 服务器一起工作，向调用代理的工作负载发布身份信息。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 4.5：SPIRE 代理暴露了 SPIFFE Workload API，并与 SPIRE 服务器一起工作，向调用代理的工作负载发布身份信息。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;em&gt;插件架构&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;SPIRE 是作为一套插件建立的，因此很容易扩展，以适应新的节点验证器、工作负载验证器和上游机构。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-46spire-支持的密钥插件接口说明服务器包括-node-attestorkeymanager-和-upstream-authority-插件而-agent-端包括-node-attestor-和-workload-attestor-插件&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f4-6.jpg&#34; alt=&#34;图 4.6：SPIRE 支持的密钥插件接口说明。服务器包括 Node Attestor、KeyManager 和 Upstream Authority 插件，而 Agent 端包括 Node Attestor 和 Workload Attestor 插件。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 4.6：SPIRE 支持的密钥插件接口说明。服务器包括 Node Attestor、KeyManager 和 Upstream Authority 插件，而 Agent 端包括 Node Attestor 和 Workload Attestor 插件。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SVID 管理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SPIRE 代理使用其在节点认证期间获得的身份，向 SPIRE 服务器进行认证，并获得其被授权管理的工作负载的 SVID。由于 SVID 是有时间限制的，代理还负责根据需要更新 SVID，并将这些更新传达给相关工作负载。信任捆绑也会轮换和接收捆绑包，这些更新由代理跟踪并传达给工作负载。代理维护所有这些信息的内存缓存，因此，即使 SPIRE 服务器停机，也可以提供 SVID，而且还可以确保 Workload API 响应的性能，因为当有人调用工作负载 API 时，不需要往返于服务器。&lt;/p&gt;
&lt;h3 id=&#34;证明&#34;&gt;证明&lt;/h3&gt;
&lt;p&gt;证明是一个过程，通过这个过程可以发现和断言有关工作负载及其环境的信息。换句话说，它是一个利用现有信息作为证据证明工作负载身份的过程。&lt;/p&gt;
&lt;p&gt;在 SPIRE 中，有两种类型的证明：节点和工作负载证明。节点证明主张描述节点的属性（例如，特定 AWS 自动扩展组的成员，或节点位于哪个 Azure 区域），而工作负载证明主张描述工作负载的属性（例如，它正在运行的 Kubernetes 服务账户，或磁盘上的二进制文件的路径）。这些属性在 SPIRE 中的表述被称为&lt;strong&gt;选择器（Selector）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;SPIRE 支持几十种开箱即用的选择器类型，而且这个列表还在继续增加。截至本文撰写之时，节点验证器列表包括对裸机、Kubernetes、亚马逊网络服务、谷歌云平台、Azure 等的支持。工作负载验证器包括对 Docker、Kubernetes、Unix 等的支持。&lt;/p&gt;
&lt;p&gt;此外，SPIRE 的可插拔架构允许运营商轻松扩展系统，以支持他们认为合适的其他选择器类型。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;节点证明&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;节点认证发生在代理首次启动时。在节点认证中，代理与 SPIRE 服务器联系并进行交流，服务器旨在积极识别代理正在运行的节点及其所有相关选择器。为了实现这一目标，在代理和服务器中都运行了一个特定平台的插件。例如，在 AWS 的情况下，代理插件从 AWS 收集只有该特定节点可以访问的信息（由 AWS 密钥签署的文件），并将其传递给服务器。然后，服务器插件验证 AWS 的签名，并进一步调用 AWS 的 API，以断定该声明的准确性，并收集有关该节点的额外选择器。&lt;/p&gt;
&lt;p&gt;成功的节点认证会导致其向有关的代理发放身份。然后，代理使用这个身份进行所有进一步的服务器通信。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-47在-aws-中运行的节点的节点证明&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f4-7.jpg&#34; alt=&#34;图 4.7：在 AWS 中运行的节点的节点证明。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 4.7：在 AWS 中运行的节点的节点证明。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;代理收集节点的身份证明，调用 AWS 的 API。&lt;/li&gt;
&lt;li&gt;代理将此身份证明发送给服务器。&lt;/li&gt;
&lt;li&gt;服务器通过调用 AWS API 验证步骤 2 中获得的身份证明，然后为代理创建一个 SPIFFE ID。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;工作负载证明&#34;&gt;工作负载证明&lt;/h3&gt;
&lt;p&gt;工作负载认证是确定工作负载身份的过程，它将导致身份文件的发布和交付。在工作负载调用并建立与 SPIFFE Workload API 的连接时（在工作负载对 API 的每一次 RPC 调用中），都会进行认证，而此后的过程则由 SPIRE 代理上的一组插件驱动。&lt;/p&gt;
&lt;p&gt;当代理收到来自调用工作负载的新连接时，代理将利用操作系统功能来确定到底是哪个进程打开了新连接。所利用的操作系统功能将取决于代理运行的操作系统。在 Linux 的情况下，代理将进行系统调用，以检索进程 ID，用户标识符，以及在特定套接字上调用的远程系统的全局唯一标识符。在 BSD 和 Windows 中，要求的内核元数据将是不同的。反过来，代理将向验证器插件提供调用工作负载的 ID。从这里开始，验证器在其插件中扇出，提供关于调用者的额外进程信息，并以选择器的形式将其返回给代理。&lt;/p&gt;
&lt;p&gt;每个验证器插件负责对调用者进行内省，生成一组描述调用者的选择器。例如，一个插件可以查看内核级别的细节，并生成选择器，如进程以何种身份运行的用户和组，而另一个插件可以与 Kubernetes 通信，并生成选择器，如进程运行的命名空间和服务账户。第三个插件可以与 Docker 守护进程通信，并生成 Docker 镜像 ID、Docker 标签和容器环境变量的选择器。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-48-工作负载证明&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f4-8.jpg&#34; alt=&#34;图 4.8: 工作负载证明。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 4.8: 工作负载证明。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;工作负载调用 Workload API 请求 SVID。&lt;/li&gt;
&lt;li&gt;代理询问节点的内核以获得调用进程的属性。&lt;/li&gt;
&lt;li&gt;代理得到发现的选择器。&lt;/li&gt;
&lt;li&gt;代理通过比较发现的选择器和注册条目来确定工作负载的身份，并向工作负载返回正确的 SVID。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;登记条目&#34;&gt;登记条目&lt;/h3&gt;
&lt;p&gt;为了让 SPIRE 发布工作负载身份，它必须首先了解其环境中预期或允许的工作负载；哪些工作负载应该在哪里运行，它们的 SPIFFE ID 和一般组成应该是什么。SPIRE 通过&lt;strong&gt;注册条目&lt;/strong&gt;了解这些信息，注册条目是使用 SPIRE API 创建和管理的对象，包含上述信息。&lt;/p&gt;
&lt;p&gt;对于每个注册条目，有三个核心属性。第一个被称为 Parent ID—— 这实际上是告诉 SPIRE 一个特定的工作负载应该在哪里运行（以及延伸到哪些代理被授权代表它询问 SVID）。第二个是 SPIFFE ID—— 当我们看到这个工作负载时，我们应该向它发出什么 SPIFFE ID？最后，SPIRE 需要一些信息来帮助它识别工作负载，这就是证明中选择器的作用。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-49注册条目的三个核心属性&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f4-9.jpg&#34; alt=&#34;图 4.9：注册条目的三个核心属性。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 4.9：注册条目的三个核心属性。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;注册条目将 SPIFFE ID 与它们所代表的节点和工作负载绑定。&lt;/p&gt;
&lt;p&gt;注册条目既可以描述一组节点，也可以描述一个工作负载，后者通常使用 Parent ID 来引用前者。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;节点条目&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;描述一个节点（或一组节点）的注册条目使用由节点认证产生的选择器来分配一个 SPIFFE ID，这在以后注册工作负载时可以被引用。一个节点可以被证明有一组与多个节点条目相匹配的选择器，从而允许它加入一个以上的组。在决定一个特定的工作负载被允许运行的确切位置时，这提供了很大的灵活性。&lt;/p&gt;
&lt;p&gt;SPIRE 自带各种节点验证器可供使用，每个验证器都会生成特定平台的选择器。虽然 SPIRE 服务器支持一次加载多个节点验证器插件，但 SPIRE 代理只支持加载一个。目前可用的节点选择器包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在谷歌云平台（GCP）上。&lt;/li&gt;
&lt;li&gt;在 Kubernetes 上，该节点所处的 Kubernetes 集群的名称。&lt;/li&gt;
&lt;li&gt;在亚马逊网络服务（AWS），节点的 AWS 安全组。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;节点条目的 Parent ID 被设置为 SPIRE 服务器的 SPIFFE ID，因为是服务器在进行验证，并断言有关节点确实符合条目定义的选择器。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;工作负载条目&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;描述工作负载的注册条目使用由工作负载证明产生的选择器，在满足一定条件的情况下为工作负载分配一个 SPIFFE ID。当 Parent ID 和选择器的条件得到满足时，工作负载可以得到一个 SPIFFE ID。&lt;/p&gt;
&lt;p&gt;工作负载条目的 Parent ID 描述了该工作负载被授权运行的地方。其值是一个节点或一组节点的 SPIFFE ID。在节点上运行的 SPIRE 代理会收到该工作负载条目的副本，包括在为该特定条目发出 SVID 之前必须证明的选择器。&lt;/p&gt;
&lt;p&gt;当工作负载调用代理时，代理进行工作负载验证，并将发现的选择器与条目中定义的选择器进行交叉对比。如果一个工作负载拥有整个定义的选择器集，那么条件就得到了满足，该工作负载就会得到一个带有定义的 SPIFFE ID 的 SVID。&lt;/p&gt;
&lt;p&gt;与节点认证不同，SPIRE 代理支持同时加载许多工作负载验证器插件。这允许在工作负载条目中混合匹配选择器。例如，工作负载条目可能要求工作负载在特定的 Kubernetes 命名空间中，在其 Docker 镜像上应用特定的标签，并具有特定的 SHA 和。&lt;/p&gt;
&lt;h2 id=&#34;spiffespire-应用的概念威胁模型&#34;&gt;SPIFFE/SPIRE 应用的概念威胁模型&lt;/h2&gt;
&lt;p&gt;SPIFFE 和 SPIRE 所面临的一系列具体威胁是情景性的。了解 SPIFFE/SPIRE 的一般威胁模式是断言你的具体需求可以得到满足的重要步骤，也是发现可能需要进一步缓解的地方。&lt;/p&gt;
&lt;p&gt;在本节中，我们将描述 SPIFFE 和 SPIRE 的安全边界，以及系统中每个组件被破坏的影响。在本书的后面，我们将介绍不同的 SPIRE 部署模式所带来的具体安全考虑。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;假设&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SPIFFE 和 SPIRE 旨在作为分布式身份和认证的基础，与&lt;a href=&#34;https://github.com/cncf/toc/blob/master/DEFINITION.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云原生&lt;/a&gt;设计架构一致。SPIRE 支持 Linux 和 BSD 系列（包括 MacOS）。目前不支持 Windows，尽管在这个领域已经做了一些早期的原型设计。&lt;/p&gt;
&lt;p&gt;SPIRE 坚持零信任网络安全模型，其中假定网络通信是敌对的或可能完全被破坏。也就是说，还假设 SPIRE 组件运行的硬件以及其操作人员是值得信赖的。如果硬件植入或内部威胁是威胁模型的一部分，应围绕 SPIRE 服务器的物理位置和其配置参数的安全性进行仔细考虑。&lt;/p&gt;
&lt;p&gt;根据所选择的节点和工作负载证明方法，可能进一步隐含对第三方平台或软件的信任。通过多个独立的机制来证明信任，可以提供更多的信任证明。例如，利用基于 AWS 或 GCP 的节点证明，意味着计算平台被认为是值得信赖的，而利用 Kubernetes 的工作负载证明，意味着 Kubernetes 的部署被认为是值得信赖的。由于完成证明的方式多种多样，而且 SPIRE 架构是完全可插拔的，因此本评估不考虑这些流程的安全性（和相关假设）。相反，它们应逐一进行评估。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-410作为威胁模型的一部分被考虑的组件&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f4-10.jpg&#34; alt=&#34;图 4.10：作为威胁模型的一部分被考虑的组件。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 4.10：作为威胁模型的一部分被考虑的组件。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;安全边界&#34;&gt;安全边界&lt;/h3&gt;
&lt;p&gt;安全边界在形式上被理解为两个不同信任程度的区域之间的交汇线。&lt;/p&gt;
&lt;p&gt;SPIFFE/SPIRE 定义了三个主要的安全边界：一个是工作负载和代理之间，一个是代理和服务器之间，还有一个是不同信任域的服务器之间。在这个模型中，工作负载是完全不受信任的，其他信任域中的服务器也是如此，如前所述，网络通信始终是完全不受信任的。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-411spiffespire-的安全边界&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f4-11.jpg&#34; alt=&#34;图 4.11：SPIFFE/SPIRE 的安全边界。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 4.11：SPIFFE/SPIRE 的安全边界。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;工作负载 | 代理边界&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;随着人们在系统中的移动和跨越这些边界，信任程度会慢慢增加。从工作负载开始，我们跨越安全边界进入代理。通常预计（尽管不是必须的），工作负载和代理之间存在超越 SPIRE 设计的安全机制，例如利用 Linux 用户权限和 / 或容器化。&lt;/p&gt;
&lt;p&gt;代理不相信工作负载会提供任何形式的输入。代理对工作负载身份的所有断言都是通过带外检查做出的。在工作负载证明的背景下，这是一个重要的细节 —— 任何选择器的值可以被工作负载本身操纵，这本身就是不安全的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代理 | 服务器边界&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下一个边界存在于代理和服务器之间。代理比工作负载更值得信任，但比服务器更不值得信任。SPIRE 的一个明确的设计目标是，它应该能够在节点受到威胁的情况下存活。由于工作负载是完全不可信的，我们在任何给定的时间点上离节点只有一到两次攻击威胁。代理有能力代表工作负载创建和管理身份，但也有必要将任何特定代理的权力限制在它完成任务所严格需要的范围内（遵循最小特权原则）。&lt;/p&gt;
&lt;p&gt;为了减轻节点（和代理）受到威胁的影响，SPIRE 需要了解特定工作负载被授权运行的地方（以 Parent ID 的形式）。代理必须能够证明注册条目的所有权，然后才能为其获得身份。因此，被攻击的代理不能获得任意的身份 —— 它们只能获得首先应该在节点上运行的工作负载的身份。&lt;/p&gt;
&lt;p&gt;值得注意的是，在节点认证过程中，SPIRE 服务器和 SPIRE 代理之间的通信可以在不同的时间点使用 TLS 和相互 TLS，这取决于节点是否尚未被认证，或者代理是否已经拥有有效的 SVID 并可以将其用于相互 TLS，此时服务器和代理之间的所有通信是安全的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;服务器 | 服务器边界&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最后的边界存在于不同信任域的服务器之间。SPIRE 服务器只被信任为在其直接管理的信任域内构造的 SVID。当 SPIRE 服务器相互联合并交换公钥信息时，它们收到的秘钥仍然是在它们所收到的信任域范围内的。与网络 PKI 不同，SPIFFE 不会简单地把所有的公钥扔到一个大的混合包里。其结果是，如果外部信任域的破坏不会导致本地信任域的 SVID 的构造能力。&lt;/p&gt;
&lt;p&gt;应该注意的是，SPIRE 服务器没有任何多方保护。信任域中的每个 SPIRE 服务器都可以访问签名密钥，它可以用这些密钥构造 SVID。服务器之间存在的安全边界严格限于不同信任域的服务器，不适用于同一信任域内的服务器。&lt;/p&gt;
&lt;h3 id=&#34;组件被破坏后的影响&#34;&gt;组件被破坏后的影响&lt;/h3&gt;
&lt;p&gt;虽然工作负载总是被认为是被破坏的，但预计代理一般不会被破坏。如果一个代理被破坏，攻击者将能够访问相应代理被授权管理的任何身份。在工作负载和代理之间存在 1:1 关系的部署中，这一点不太值得关注。在代理管理多个工作负载的部署中，这是一个需要理解的重要问题。&lt;/p&gt;
&lt;p&gt;当代理被引用为某一身份的父代时，它们被授权管理该身份。由于这个原因，在合理的范围内，将注册条目父身份的范围尽可能地缩小是一个好主意。&lt;/p&gt;
&lt;p&gt;在服务器被破坏的情况下，可以预计，攻击者将能够在该信任域内构造任意的身份。SPIRE 服务器无疑是整个系统中最敏感的组成部分。在管理和放置这些服务器时应小心谨慎。例如，SPIRE 解决了节点破坏的问题，因为工作负载不受信任，但如果 SPIRE 服务器与不受信任的工作负载在同一主机上运行，那么服务器就不再享有曾经由代理 / 服务器安全边界提供的保护。因此，强烈建议将 SPIRE 服务器放在与它们要管理的不受信任的工作负载不同的硬件上。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代理的注意事项&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SPIRE 通过将一个代理的权限限定在它直接被授权管理的身份上，来说明节点的破坏&amp;hellip;&amp;hellip; 但如果攻击者可以破坏多个代理，或者也许是所有的代理，情况就明显要糟糕得多。&lt;/p&gt;
&lt;p&gt;SPIRE 代理之间没有任何通信途径，大大限制了代理之间横向移动的可能性。这是一个重要的设计决定，旨在减轻可能的代理漏洞的影响。然而，应该理解的是，某些配置或部署选择可能部分或全部破坏这种缓解。例如，SPIRE 代理支持暴露一个 Prometheus 指标端点，然而，如果所有代理都暴露这个端点，并且那里存在漏洞，那么横向移动就变得轻而易举，除非有足够的网络级别控制。出于这个原因，我们强烈不建议将 SPIRE 代理暴露于传入的网络连接。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>简介</title>
      <link>https://lib.jimmysong.io/kubernetes-hardening-guidance/introduction/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/kubernetes-hardening-guidance/introduction/</guid>
      <description>&lt;p&gt;Kubernetes，经常被缩写为 &amp;ldquo;K8s&amp;rdquo;，是一个开源的容器或编排系统，用于自动部署、扩展和管理容器化应用程序。它管理着构成集群的所有元素，从应用中的每个微服务到整个集群。与单体软件平台相比，将容器化应用作为微服务使用可以提供更多的灵活性和安全优势，但也可能引入其他复杂因素。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-1kubernetes-集群组件的高层视图&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f1.jpg&#34; alt=&#34;图 1：Kubernetes 集群组件的高层视图&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 1：Kubernetes 集群组件的高层视图
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;本指南重点关注安全挑战，并尽可能提出适用于国家安全系统和关键基础设施管理员的加固策略。尽管本指南是针对国家安全系统和关键基础设施组织的，但也鼓励联邦和州、地方、部落和领土（SLTT）政府网络的管理员实施所提供的建议。Kubernetes 集群的安全问题可能很复杂，而且经常在利用其错误配置的潜在威胁中被滥用。以下指南提供了具体的安全配置，可以帮助建立更安全的 Kubernetes 集群。&lt;/p&gt;
&lt;h2 id=&#34;建议&#34;&gt;建议&lt;/h2&gt;
&lt;p&gt;每个部分的主要建议摘要如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kubernetes Pod 安全
&lt;ul&gt;
&lt;li&gt;使用构建的容器，以非 root 用户身份运行应用程序&lt;/li&gt;
&lt;li&gt;在可能的情况下，用不可变的文件系统运行容器&lt;/li&gt;
&lt;li&gt;扫描容器镜像，以发现可能存在的漏洞或错误配置&lt;/li&gt;
&lt;li&gt;使用 Pod 安全政策来执行最低水平的安全，包括：
&lt;ul&gt;
&lt;li&gt;防止有特权的容器&lt;/li&gt;
&lt;li&gt;拒绝经常被利用来突破的容器功能，如 &lt;code&gt;hostPID&lt;/code&gt;、&lt;code&gt;hostIPC&lt;/code&gt;、&lt;code&gt;hostNetwork&lt;/code&gt;、&lt;code&gt;allowedHostPath&lt;/code&gt; 等&lt;/li&gt;
&lt;li&gt;拒绝以 root 用户身份执行或允许提升为根用户的容器&lt;/li&gt;
&lt;li&gt;使用安全服务，如 SELinux®、AppArmor® 和 seccomp，加固应用程序，防止被利用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;网络隔离和加固
&lt;ul&gt;
&lt;li&gt;使用防火墙和基于角色的访问控制（RBAC）锁定对控制平面节点的访问&lt;/li&gt;
&lt;li&gt;进一步限制对 Kubernetes etcd 服务器的访问&lt;/li&gt;
&lt;li&gt;配置控制平面组件，使用传输层安全（TLS）证书进行认证、加密通信&lt;/li&gt;
&lt;li&gt;设置网络策略来隔离资源。不同命名空间的 Pod 和服务仍然可以相互通信，除非执行额外的隔离，如网络策略&lt;/li&gt;
&lt;li&gt;将所有凭证和敏感信息放在 Kubernetes Secret 中，而不是配置文件中。使用强大的加密方法对 Secret 进行加密&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;认证和授权
&lt;ul&gt;
&lt;li&gt;禁用匿名登录（默认启用）&lt;/li&gt;
&lt;li&gt;使用强大的用户认证&lt;/li&gt;
&lt;li&gt;创建 RBAC 策略以限制管理员、用户和服务账户活动&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;日志审计
&lt;ul&gt;
&lt;li&gt;启用审计记录（默认为禁用）&lt;/li&gt;
&lt;li&gt;在节点、Pod 或容器级故障的情况下，持续保存日志以确保可用性&lt;/li&gt;
&lt;li&gt;配置一个 metric logger&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;升级和应用安全实践
&lt;ul&gt;
&lt;li&gt;立即应用安全补丁和更新&lt;/li&gt;
&lt;li&gt;定期进行漏洞扫描和渗透测试&lt;/li&gt;
&lt;li&gt;当组件不再需要时，将其从环境中移除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;架构概述&#34;&gt;架构概述&lt;/h2&gt;
&lt;p&gt;Kubernetes 使用集群架构。一个 Kubernetes 集群是由一些控制平面和一个或多个物理或虚拟机组成的，称为工作节点。工作者节点承载 Pod，其中包含一个或多个容器。容器是包含软件包及其所有依赖关系的可执行镜像。见图 2：Kubernetes 架构。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-2kubernetes-架构&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f2.jpg&#34; alt=&#34;图 2：Kubernetes 架构&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 2：Kubernetes 架构
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;控制平面对集群进行决策。这包括调度容器的运行，检测 / 应对故障，并在部署文件中指定的副本数量没有得到满足时启动新的 Pod。以下逻辑组件都是控制平面的一部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Controller manager（默认端口：10252）&lt;/strong&gt; - 监视 Kubernetes 集群，以检测和维护 Kubernetes 环境的几个方面，包括将 Pod 加入到服务中，保持一组 Pod 的正确数量，并对节点的丢失做出反应。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cloud controller manager（默认端口：10258）&lt;/strong&gt; - 一个用于基于云的部署的可选组件。云控制器与云服务提供商接口，以管理集群的负载均衡器和虚拟网络。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kubernetes API Server（默认端口：6443 或 8080）&lt;/strong&gt; - 管理员操作 Kubernetes 的接口。因此，API 服务器通常暴露在控制平面之外。API 服务器被设计成可扩展的，可能存在于多个控制平面节点上。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Etcd（默认端口范围：2379-2380）&lt;/strong&gt; - 持久化的备份存储，关于集群状态的所有信息都保存在这里。Etcd 不应该被直接操作，而应该通过 API 服务器来管理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scheduler（默认端口：10251）&lt;/strong&gt; - 跟踪工作节点的状态并决定在哪里运行 Pod。Kube-scheduler 只可以由控制平面内的节点访问。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Kubernetes 工作节点是专门为集群运行容器化应用的物理或虚拟机。除了运行容器引擎外，工作节点还承载以下两个服务，允许从控制平面进行协调：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Kubelet（默认端口：10250）&lt;/strong&gt; - 在每个工作节点上运行，以协调和验证 Pod 的执行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kube-proxy&lt;/strong&gt; - 一个网络代理，使用主机的数据包过滤能力，确保 Kubernetes 集群中数据包的正确路由。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;集群通常使用云服务提供商（CSP）的 Kubernetes 服务或在企业内部托管。在设计 Kubernetes 环境时，组织应了解他们在安全维护集群方面的责任。CSP 管理大部分的 Kubernetes 服务，但组织可能需要处理某些方面，如认证和授权。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SPIFFE 信任域和 Bundle</title>
      <link>https://lib.jimmysong.io/spiffe-and-spire/standard/spiffe-trust-domain-and-bundle/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/spiffe-and-spire/standard/spiffe-trust-domain-and-bundle/</guid>
      <description>&lt;p&gt;SPIFFE 标准提供了一个规范，用于在异构环境和组织中引导和发放可互操作的服务身份。它定义了一个称为&amp;quot;信任域&amp;quot;的概念，用于划分管理和/或安全边界。信任域隔离发放机构并区分身份命名空间，但也可以松散耦合以提供联合身份。&lt;/p&gt;
&lt;p&gt;本文档描述了 SPIFFE 信任域的语义、表示方式以及它们如何耦合在一起的机制。&lt;/p&gt;
&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;
&lt;p&gt;SPIFFE 信任域表示 SPIFFE ID 有资格的基础，指示任何给定 SPIFFE ID 已经发放的领域或发放机构。它们由发放机构支持，负责管理其相应信任域中的 SPIFFE 身份发放。尽管信任域的名称由一个简单的人类可读字符串组成，但还必须表达由信任域的发放机构使用的密码密钥，以使其他人能够验证其发放的身份。这些密钥被表示为&amp;quot;SPIFFE Bundle&amp;quot;，与其所代表的信任域紧密相连。&lt;/p&gt;
&lt;p&gt;本规范定义了 SPIFFE 信任域和 SPIFFE Bundle 的性质和语义。&lt;/p&gt;
&lt;h2 id=&#34;信任域&#34;&gt;信任域&lt;/h2&gt;
&lt;p&gt;SPIFFE 信任域是由一组密码密钥支持的身份命名空间。这些密钥共同为驻留在信任域中的所有身份提供了密码锚点。&lt;/p&gt;
&lt;p&gt;信任域与支持它们的密钥之间存在一对多的关系。一个信任域可以由多个密钥和密钥类型来表示。例如，前者可以在根密钥轮换期间使用，而后者在使用多个 SVID 类型时避免多协议攻击是必要的。&lt;/p&gt;
&lt;p&gt;需要注意的是，虽然可以在多个信任域之间共享密码密钥，但我们强烈建议每个授权密钥仅在一个信任域中使用。密钥的重复使用可能会降低信任域的隔离性（例如，在演练和生产之间），并引入额外的安全挑战（例如，需要为辅助发放机构实施名称约束系统）。&lt;/p&gt;
&lt;h2 id=&#34;spiffe-bundle-spiffe-bundle&#34;&gt;SPIFFE Bundle (SPIFFE Bundle)&lt;/h2&gt;
&lt;p&gt;SPIFFE Bundle 是包含信任域的密码密钥的对象。Bundle 中的密钥被视为代表 Bundle 所代表的信任域的权威，并用于证明驻留在该信任域中的 SVIDs 的有效性。&lt;/p&gt;
&lt;p&gt;SPIFFE Bundle 设计用于在 SPIFFE 控制平面实现内部和之间使用。然而，此规范不排除直接由工作负载消费的使用。&lt;/p&gt;
&lt;p&gt;在存储或管理 SPIFFE Bundle 时，独立记录 Bundle 所代表的信任域的名称至关重要，通常通过使用&lt;code&gt;&amp;lt;trust_domain_name, bundle&amp;gt;&lt;/code&gt;元组来实现。在验证 SVID 时，验证器必须选择与 SVID 所在的信任域对应的 Bundle，因此在大多数情况下需要维护此关系。&lt;/p&gt;
&lt;p&gt;请注意，信任域 Bundle 的内容预计会随时间变化，因为它所包含的密钥进行轮换。通过发放包含新密钥的新 Bundle 并省略已撤销的密钥来添加和撤销密钥。SPIFFE 实现负责根据需要将 Bundle 内容更新分发给工作负载。确切的格式和通过哪种方法传递这些更新超出了本规范的范围。&lt;/p&gt;
&lt;h2 id=&#34;spiffe-bundle-格式&#34;&gt;SPIFFE Bundle 格式&lt;/h2&gt;
&lt;p&gt;SPIFFE Bundle 被表示为 RFC 7517 兼容的 JWK 集合。选择 JWK 的原因有两个主要原因。首先，它提供了一种灵活的格式，用于表示各种类型的密码密钥（和 X.509 等文档），从而在定义新的 SVID 格式时提供了一定程度的未来证明。其次，它得到了广泛支持和部署，主要用于域间联合，这是 SPIFFE 项目的核心目标。&lt;/p&gt;
&lt;h3 id=&#34;jwk-集合&#34;&gt;JWK 集合&lt;/h3&gt;
&lt;p&gt;本节定义了 JWK 集合的参数。未在此处定义的参数可以根据实现者的需要包含，但是 SPIFFE 实现&lt;strong&gt;不能&lt;/strong&gt;要求它们的存在以使其正常工作。&lt;/p&gt;
&lt;h3 id=&#34;序列号&#34;&gt;序列号&lt;/h3&gt;
&lt;p&gt;参数&lt;code&gt;spiffe_sequence&lt;/code&gt;&lt;strong&gt;应该&lt;/strong&gt;被设置。该序列号可以被 SPIFFE 控制平面用于许多目的，包括传播测量和更新顺序/替代。当存在时，其值&lt;strong&gt;必须&lt;/strong&gt;为单调递增的整数，并且当 bundle 的内容被更新时必须更改。&lt;/p&gt;
&lt;p&gt;值得注意的是，尽管 JSON 整数类型是可变宽度且没有定义最大限制，但许多实现可能将其解析为固定宽度类型。为了防止溢出，应该确保生成的类型至少具有 64 位的精度。&lt;/p&gt;
&lt;h3 id=&#34;刷新提示&#34;&gt;刷新提示&lt;/h3&gt;
&lt;p&gt;参数&lt;code&gt;spiffe_refresh_hint&lt;/code&gt;&lt;strong&gt;应该&lt;/strong&gt;被设置。刷新提示指示消费者应该多久检查更新。Bundle 发布者可以将刷新提示作为其密钥轮换频率的函数进行广告。值得注意的是，刷新提示还可能影响密钥撤销的传播速度。如果设置了刷新提示，其值&lt;strong&gt;必须&lt;/strong&gt;是表示建议的消费者刷新间隔的整数，以秒为单位。正如名称所示，刷新间隔只是一个提示，根据实现的不同，消费者可以更频繁或更不频繁地检查更新。&lt;/p&gt;
&lt;h3 id=&#34;密钥&#34;&gt;密钥&lt;/h3&gt;
&lt;p&gt;参数&lt;code&gt;keys&lt;/code&gt;&lt;strong&gt;必须&lt;/strong&gt;存在。其值是一个 JWK 数组。遇到未知的密钥类型或用途的客户端&lt;strong&gt;必须&lt;/strong&gt;忽略相应的 JWK 元素。请参阅 RFC 7517 的第 5 节以了解有关&lt;code&gt;keys&lt;/code&gt;参数语义的更多信息。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;keys&lt;/code&gt;参数可以包含一个空数组。发布空密钥数组的信任域表示该信任域已撤销先前发布的任何密钥。工作负载还可能遇到经处理后不产生可用密钥（即没有 JWK 通过下面描述的验证）的 bundle，并且实际上为空。这可能表明信任域已迁移到客户端不理解的新密钥类型或用途。在这两种情况下，工作负载&lt;strong&gt;必须&lt;/strong&gt;将来自信任域的所有 SVID 视为无效和不可信。&lt;/p&gt;
&lt;h3 id=&#34;jwk&#34;&gt;JWK&lt;/h3&gt;
&lt;p&gt;本节定义了作为 JWK 集合一部分包含的 JWK 元素的高级要求。JWK 元素表示单个密码密钥，用于对单个类型的 SVID 进行身份验证。虽然安全使用 JWK 的确切要求因 SVID 类型而异，但在本节中我们概述了一些顶级要求。SVID 规范必须为&lt;code&gt;use&lt;/code&gt;参数（参见下面的&lt;code&gt;Public Key Use&lt;/code&gt;节）定义适当的值，并且可以根据需要对其 JWK 元素设置进一步的要求或限制。&lt;/p&gt;
&lt;p&gt;实现者&lt;strong&gt;不应&lt;/strong&gt;包含在此处或相应的 SVID 规范中未定义的参数。&lt;/p&gt;
&lt;h3 id=&#34;密钥类型&#34;&gt;密钥类型&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;kty&lt;/code&gt; 参数必须设置，并且其行为遵循 RFC 7517 的 Section 4.1。遇到未知密钥类型的客户端必须忽略整个 JWK 元素。&lt;/p&gt;
&lt;h3 id=&#34;公钥用途&#34;&gt;公钥用途&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;use&lt;/code&gt; 参数必须设置。其值表示其具有权威性的身份文档（或 SVID）的类型。截至本文撰写时，仅支持两种 SVID 类型：&lt;code&gt;x509-svid&lt;/code&gt; 和 &lt;code&gt;jwt-svid&lt;/code&gt;。值区分大小写。有关 &lt;code&gt;use&lt;/code&gt; 值的更多信息，请参见相应的 SVID 规范。遇到缺少 &lt;code&gt;use&lt;/code&gt; 参数或未知 &lt;code&gt;use&lt;/code&gt; 值的客户端必须忽略整个 JWK 元素。&lt;/p&gt;
&lt;h2 id=&#34;安全注意事项&#34;&gt;安全注意事项&lt;/h2&gt;
&lt;p&gt;本节概述了在实施和部署 SPIFFE 控制平面时应考虑的与安全相关的注意事项。&lt;/p&gt;
&lt;h3 id=&#34;spiffe-bundle-刷新提示&#34;&gt;SPIFFE Bundle 刷新提示&lt;/h3&gt;
&lt;p&gt;SPIFFE Bundle 包括一个可选的 &lt;code&gt;refresh_hint&lt;/code&gt; 字段，用于指示消费者应尝试刷新其 Bundle 副本的频率。这个值对密钥的轮换速度有明显的影响，但它也影响了密钥的撤销速度。应该仔细选择刷新提示值。&lt;/p&gt;
&lt;p&gt;由于此字段不是必需的，因此可能会遇到没有设置 &lt;code&gt;refresh_hint&lt;/code&gt; 的 SPIFFE Bundle。在这种情况下，客户端可以通过检查 SVID 有效期来使用合适的间隔。应该认识到，省略 &lt;code&gt;refresh_hint&lt;/code&gt; 可能会影响信任域迅速撤销已被损坏密钥的能力。客户端应该默认使用相对较低（例如五分钟）的刷新间隔，以便及时获取更新的信任 Bundle。&lt;/p&gt;
&lt;h3 id=&#34;在信任域之间重用加密密钥&#34;&gt;在信任域之间重用加密密钥&lt;/h3&gt;
&lt;p&gt;本规范不鼓励在信任域之间共享加密密钥，因为这种做法会降低信任域的隔离性并引入额外的安全挑战。当一个根密钥在多个信任域之间共享时，认证和授权实现必须仔细检查标识的信任域名组件，并且信任域名组件在授权策略中必须易于表达和习惯性地表达。&lt;/p&gt;
&lt;p&gt;假设一个天真的实现导入（即完全信任）一个特定的根密钥，并且认证系统被配置为认证链到受信任根密钥的任何 SVID 的 SPIFFE 身份。如果天真的实现未配置为仅信任特定的信任域，则任何信任域中发行的标识都可以被认证（只要 SVID 链接到受信任的根密钥）。&lt;/p&gt;
&lt;p&gt;继续上述例子，其中天真的实现导入了特定的 CA 证书，假设认证未区分信任域并且接受链到受信任根密钥的任何 SVID。然后，授权系统将只授权特定的信任域。换句话说，授权策略需要明确配置以检查 SVID 的信任域名组件。这里的安全关注点是天真的授权实现可能盲目地相信认证系统已过滤掉不受信任的信任域。&lt;/p&gt;
&lt;p&gt;总之，安全性的最佳实践是在信任域和根密钥之间维持一对一的映射，以减少细微（但灾难性的）认证和授权实现错误。重新使用跨信任域的根密钥的系统应确保（a）SVID 发行系统（例如 CA）在发行 SVID 前正确实现授权检查，并且（b）依赖方（即使用 SVID 的系统）正确实现强大的认证和授权系统，能够区分多个信任域。&lt;/p&gt;
&lt;h2 id=&#34;附录-a-spiffe-bundle-示例&#34;&gt;附录 A. SPIFFE Bundle 示例&lt;/h2&gt;
&lt;p&gt;在下面的示例中，我们为名为&lt;code&gt;example.com&lt;/code&gt;的信任域配置了初始的 SPIFFE Bundle，并演示了在根密钥轮换期间如何更新 Bundle。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;example.com&lt;/code&gt;信任域的初始 X.509 CA 证书：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; Certificate #1:
     Data:
         Version: 3 (0x2)
         Serial Number:
             df:d0:ad:fd:32:9f:b8:15:76:f5:d4:b9:e3:be:b5:a7
     Signature Algorithm: sha256WithRSAEncryption
         Issuer: O = example.com
         Validity
             Not Before: Jan  1 08:00:45 2019 GMT
             Not After : Apr  1 08:00:45 2019 GMT
         Subject: O = example.com
         X509v3 extensions:
             X509v3 Key Usage: critical
                 Certificate Sign
             X509v3 Basic Constraints: critical
                 CA:TRUE
             X509v3 Subject Alternative Name:
                 URI:spiffe://example.com/
 [...]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;请注意以下事项：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;证书是自签名的（颁发者和主题相同）；&lt;/li&gt;
&lt;li&gt;证书的 CA 标志设置为 true；&lt;/li&gt;
&lt;li&gt;证书是 SVID（具有 spiffe URI SAN）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;example.com&lt;/code&gt;的相应信任 Bundle：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; Trust bundle #1 for example.com:
 {
         &amp;#34;spiffe_sequence&amp;#34;: 1,
         &amp;#34;spiffe_refresh_hint&amp;#34;: 2419200,
         &amp;#34;keys&amp;#34;: [
                 {
                         &amp;#34;kty&amp;#34;: &amp;#34;RSA&amp;#34;,
                         &amp;#34;use&amp;#34;: &amp;#34;x509-svid&amp;#34;,
                         &amp;#34;x5c&amp;#34;: [&amp;#34;&amp;lt;base64 DER encoding of Certificate #1&amp;gt;&amp;#34;],
                         &amp;#34;n&amp;#34;: &amp;#34;&amp;lt;base64urlUint-encoded value&amp;gt;&amp;#34;,
                         &amp;#34;e&amp;#34;: &amp;#34;AQAB&amp;#34;
                 }
         ]
 }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上述信任 Bundle 是第 1 个版本，如&lt;code&gt;spiffe_sequence&lt;/code&gt;字段所示，并且指示客户端应该每 2419200 秒（或 28 天）轮询更新 Bundle。请注意，&lt;code&gt;x5c&lt;/code&gt;参数包含了基于 RFC7517 Section 4.7 中所指定的 base64 编码的 DER 证书。密钥特定值（例如&lt;code&gt;n&lt;/code&gt;和&lt;code&gt;e&lt;/code&gt;）的编码方法在 RFC7518 Section 6 中有描述。&lt;/p&gt;
&lt;p&gt;为了准备&lt;code&gt;example.com&lt;/code&gt;的 CA 证书的过期，生成了一个替换证书，并将其添加到信任 Bundle：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; Certificate #2:
     Data:
         Version: 3 (0x2)
         Serial Number:
             a4:dc:5f:05:8a:a2:bf:88:9d:a4:fa:1e:9a:a5:db:74
     Signature Algorithm: sha256WithRSAEncryption
         Issuer: O = example.com
         Validity
             Not Before: Feb  15 08:00:45 2019 GMT
             Not After : Jul  1 08:00:45 2019 GMT
         Subject: O = example.com
         X509v3 extensions:
             X509v3 Key Usage: critical
                 Certificate Sign
             X509v3 Basic Constraints: critical
                 CA:TRUE
             X509v3 Subject Alternative Name:
                 URI:spiffe://example.com/
 [...]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在 2 月 15 日发布的&lt;code&gt;example.com&lt;/code&gt;的更新后的信任 Bundle：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; Trust bundle #2 for example.com:
 {
         &amp;#34;spiffe_sequence&amp;#34;: 2,
         &amp;#34;spiffe_refresh_hint&amp;#34;: 2419200,
         &amp;#34;keys&amp;#34;: [
                 {
                         &amp;#34;kty&amp;#34;: “RSA”,
                         &amp;#34;use&amp;#34;: &amp;#34;x509-svid&amp;#34;,
                         &amp;#34;x5c&amp;#34;: [&amp;#34;&amp;lt;base64 DER encoding of Certificate #1&amp;gt;&amp;#34;],
                         &amp;#34;n&amp;#34;: &amp;#34;&amp;lt;base64urlUint-encoded value&amp;gt;&amp;#34;,
                         &amp;#34;e&amp;#34;: &amp;#34;AQAB&amp;#34;
                 },
                 {
                         &amp;#34;kty&amp;#34;: “RSA”,
                         &amp;#34;use&amp;#34;: &amp;#34;x509-svid&amp;#34;,
                         &amp;#34;x5c&amp;#34;: [&amp;#34;&amp;lt;base64 DER encoding of Certificate #2&amp;gt;&amp;#34;],
                         &amp;#34;n&amp;#34;: &amp;#34;&amp;lt;base64urlUint-encoded value&amp;gt;&amp;#34;,
                         &amp;#34;e&amp;#34;: &amp;#34;AQAB&amp;#34;
                 }
         ]
 }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在 Bundle #2 中，请注意&lt;code&gt;spiffe_sequence&lt;/code&gt;参数已经增加，并添加了&lt;code&gt;example.com&lt;/code&gt;的第二个根证书。一旦发布并分发了这个新的信任 Bundle，验证器将接受由原始根证书或替换根证书签名的 SVID。通过提前发布替换证书，有效器有充分的机会刷新&lt;code&gt;example.com&lt;/code&gt;的信任 Bundle 并了解即将到期的替换证书。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>开始前的准备</title>
      <link>https://lib.jimmysong.io/spiffe/before-you-start/</link>
      <pubDate>Fri, 07 Oct 2022 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/spiffe/before-you-start/</guid>
      <description>&lt;p&gt;本章旨在让你为上线 SPIFFE/SPIRE 时需要做出的许多决定做好准备。&lt;/p&gt;
&lt;h2 id=&#34;准备人力&#34;&gt;准备人力&lt;/h2&gt;
&lt;p&gt;如果你读了前面的章节，你一定很想开始使用 SPIRE，以一种可以在许多不同类型的系统和所有组织的服务中利用的方式管理身份。然而，在你开始之前，你需要考虑，部署 SPIRE 是&lt;strong&gt;一个重大的基础设施变化&lt;/strong&gt;，有可能影响到许多不同的系统。本章是关于如何开始规划 SPIRE 的部署：获得认同，以不中断的方式启用 SPIRE 支持，然后利用它来实施新的安全控制。&lt;/p&gt;
&lt;h3 id=&#34;组建团队并确定其他利益相关者&#34;&gt;组建团队并确定其他利益相关者&lt;/h3&gt;
&lt;p&gt;要部署 SPIRE，你需要确定来自安全、软件开发和 DevOps 团队的利益相关者。谁来维护 SPIRE 服务器本身？谁来部署代理？谁来编写注册条目？谁将把 SPIFFE 功能集成到应用程序中？它将如何影响现有的 CI/CD 管道？如果发生了服务中断，谁来修复它？性能要求和服务水平目标是什么？&lt;/p&gt;
&lt;p&gt;在这本书中，以及许多公开的博客文章和会议演讲中，都有一些成功部署 SPIRE 的组织的例子，既可以作为一种模式，也可以作为向同事宣传 SPIRE 的有用材料。&lt;/p&gt;
&lt;h3 id=&#34;说明你的情况并获得支持&#34;&gt;说明你的情况并获得支持&lt;/h3&gt;
&lt;p&gt;SPIRE 跨越了几个不同的传统信息技术孤岛，因此，期望看到你的 DevOps 团队、软件开发团队和安全团队之间有更多的跨组织合作。重要的是，他们要一起工作，以确保成功和无缝部署。考虑到这些团队中的每一个都有不同的需求和优先事项，需要解决这些问题以获得他们的支持。&lt;/p&gt;
&lt;p&gt;在规划 SPIRE 部署时，你需要了解哪些成果对你的企业最重要，并将这些成果作为项目的驱动力和你将提供的解决方案的价值。每个团队都需要看到 SPIRE 对自己以及对整个企业的好处。本书第 2 章 &amp;ldquo;收益&amp;rdquo; 中描述了 SPIRE 部署的许多好处，在本节中，我们将把其中一些好处提炼成令人信服的论据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对安全团队有说服力的论点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;减少安全团队的工作量是部署 SPIRE 的一个非常有说服力的案例：他们可以专注于设计正确的注册条目，以确保每个服务获得正确的身份，而不是部署临时的安全解决方案，以及手动管理数百或数千个证书。&lt;/p&gt;
&lt;p&gt;一个更长期的好处是，SPIRE 可以提高组织的整体安全态势，因为 SPIRE 没有容易被盗或误用的凭证。与盗用或歪曲凭证有关的大量攻击，以及敏感数据的暴露，都得到了缓解。有可能向外部审计师证明，正确的服务正在相互安全地进行通信，没有意外疏忽的可能。即使外部人员可以破坏一个服务，他们对其他服务发起攻击的能力也是有限的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对软件开发团队有说服力的论点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于应用程序开发团队来说，他们能够通过不等待工单或手动工作流程来提供证书而加快行动，这是最有说服力的案例。如果他们目前在代码旁边手动部署秘密，并被安全团队谈话，他们不再需要忍受这些。他们也不需要在秘密存储中管理秘密。&lt;/p&gt;
&lt;p&gt;一个次要的好处是，软件组件可能能够以它们以前无法安全进行的方式直接进行通信。如果云服务不能访问一个关键的数据库或基本的云服务，因为没有办法安全地做到这一点，那么就有可能使用 SPIFFE 身份来创建一个安全连接，为你的团队提供新的架构潜力。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对 DevOps 团队有说服力的论点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;部署 SPIRE 的最大收益是针对 DevOps 团队。如果每个服务都有自己的安全身份，那么服务就可以部署在任何地方 —— 在任何内部数据中心、云供应商或一个云供应商中的区域。这种新的灵活性允许降低成本，提高可扩展性，并改善可靠性，因为部署决策可以独立于安全要求。&lt;/p&gt;
&lt;p&gt;对 DevOps 团队来说，另一个关键的好处是，每个服务的传入请求都被贴上 SPIFFE ID 的标签，这可以被记录、测量，并报告给监控系统。这对拥有数百或数千项服务的大型组织的性能管理是非常有帮助的。&lt;/p&gt;
&lt;h2 id=&#34;创建一个计划&#34;&gt;创建一个计划&lt;/h2&gt;
&lt;p&gt;规划 SPIRE 部署的第一个目标是确定是否每项服务都需要被 SPIFFE 感知，或者非 SPIFFE 服务的 &amp;ldquo;孤岛&amp;rdquo; 是否仍然可以满足要求。将每项服务都转移到 SPIFFE 是最直接的选择，但要一下子全部实施可能是个挑战，特别是在非常大的组织中。&lt;/p&gt;
&lt;h3 id=&#34;岛屿和桥梁的规划&#34;&gt;岛屿和桥梁的规划&lt;/h3&gt;
&lt;p&gt;有些环境很复杂，要么有多个组织，要么是传统和新开发的结合。在这种情况下，人们往往希望只让环境的一个子集启用 SPIFFE。需要考虑两种选择，这取决于系统之间的整合程度和它们之间的复杂性。让我们来看看这两种架构，我们称之为 &amp;ldquo;独立岛&amp;rdquo; 和“桥接岛”。&lt;/p&gt;
&lt;p&gt;每个岛被认为是它自己的信任域，在每个岛上有工作负载或“居民”。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;独立岛&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-51这里有两个独立的-spiffe-部署独立岛屿&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f5-1.jpg&#34; alt=&#34;图 5.1：这里有两个独立的 SPIFFE 部署（独立岛屿）。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 5.1：这里有两个独立的 SPIFFE 部署（独立岛屿）。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;独立岛模式允许各个信任域相互独立运行。这通常是最简单的选择，因为每个岛可以以对该岛有意义的方式运行 SPIRE。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;桥接岛&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-52这里我们有两个独立的-spiffe-部署通过-federation-桥接使每个岛的服务都能信任对方从而进行通信在-spiffe-和非-spiffe-岛屿之间仍然没有通信&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f5-2.jpg&#34; alt=&#34;图 5.2：这里我们有两个独立的 SPIFFE 部署，通过 Federation 桥接，使每个岛的服务都能信任对方，从而进行通信。在 SPIFFE 和非 SPIFFE 岛屿之间仍然没有通信。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 5.2：这里我们有两个独立的 SPIFFE 部署，通过 Federation 桥接，使每个岛的服务都能信任对方，从而进行通信。在 SPIFFE 和非 SPIFFE 岛屿之间仍然没有通信。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-53-向非-spiffe-岛添加网关是连接-spiffe-和非-spiffe-岛的一种方式&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f5-3.jpg&#34; alt=&#34;图 5.3: 向非 SPIFFE 岛添加网关是连接 SPIFFE 和非 SPIFFE 岛的一种方式。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 5.3: 向非 SPIFFE 岛添加网关是连接 SPIFFE 和非 SPIFFE 岛的一种方式。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;桥接岛模式允许非 SPIFFE 岛上的非 SPIFFE 服务与网关对话。然后，网关将请求转发给支持 SPIFFE 的岛上的居民，我们称他们为 Zero。从 Zero 的角度来看，网关发出了请求。Zero 和他在支持 SPIFFE 的岛上的朋友可以向网关进行认证，并向非 SPIFFE 岛上的服务发送消息。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-54在这个图中有一个支持-spiffe-的生态系统大陆而在这个生态系统中有一个非-spiffe-服务的口袋湖上的岛屿为了使大陆和岛屿上的服务能够相互交流需要有一个网关&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f5-4.jpg&#34; alt=&#34;图 5.4：在这个图中，有一个支持 SPIFFE 的生态系统（大陆），而在这个生态系统中，有一个非 SPIFFE 服务的口袋（湖上的岛屿）。为了使大陆和岛屿上的服务能够相互交流，需要有一个网关。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 5.4：在这个图中，有一个支持 SPIFFE 的生态系统（大陆），而在这个生态系统中，有一个非 SPIFFE 服务的口袋（湖上的岛屿）。为了使大陆和岛屿上的服务能够相互交流，需要有一个网关。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-55桥接岛结构&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f5-5.jpg&#34; alt=&#34;图 5.5：桥接岛结构。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 5.5：桥接岛结构。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;在桥接岛架构下，网关是在未启用 SPIFFE 的岛上创建的。这些非 SPIFFE 岛可能不容易采用 SPIFFE 架构，原因有很多：可能有遗留软件，不能轻易修改或更新；岛屿可能使用自己的识别生态系统，如 Kerberos 或 SPIFFE 与其他技术比较一章中描述的其他选项之一；或者系统可能在不太适合现有 SPIFFE 解决方案（如 SPIRE）模式的技术上运行工作负载。&lt;/p&gt;
&lt;p&gt;在这些情况下，使用&lt;strong&gt;网关&lt;/strong&gt;服务在 SPIFFE 世界和非 SPIFFE 岛之间架起连接的桥梁可能是有用的。当支持 SPIFFE 的工作负载想要与非 SPIFFE 岛的工作负载对话时，它与网关建立一个经过认证的连接，然后与目标工作负载建立一个连接。这个与目标工作负载的连接可能是未经认证的，或者使用该岛的非 SPIFFE 身份解决方案。同样，当非 SPIFFE 岛的工作负载想要连接到 SPIFFE 启用的工作负载时，非 SPIFFE 工作负载会连接到网关，然后创建一个 SPIFFE 认证的连接到目标 SPIFFE 启用的工作负载。&lt;/p&gt;
&lt;p&gt;在这种情况下，发生在网关和启用 SPIFFE 的工作负载之间的认证在网关处被&lt;strong&gt;终止&lt;/strong&gt;。这意味着支持 SPIFFE 的工作负载可以验证它是在与适当的网关对话，但不能验证它是在与网关另一端的正确工作负载对话。同样，目标工作负载只知道网关服务向它发送了一个请求，但却失去了原 SPIFFE 启用的工作负载的验证背景。这种模式允许这些复杂的组织开始采用 SPIFFE，而不必一下子转换。&lt;/p&gt;
&lt;p&gt;在请求和工作流通过非 SPIFFE 岛的情况下，利用 JWT-SVID 进行跨请求的传播会很有用。你可以使用 X509-SVID 来签署文件（&lt;a href=&#34;https://tools.ietf.org/id/draft-cavage-http-signatures-12.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;如 HTTP 消息请求签署&lt;/a&gt;），而不是只使用服务间的相互认证的 TLS，这样整个消息的真实性就可以被另一边支持 SPIFFE 的工作负载所验证。这对已知安全属性较弱的岛屿特别有用，因为它提供了对通过中间生态系统的消息没有被操纵的信心。&lt;/p&gt;
&lt;h3 id=&#34;文档和监控工具&#34;&gt;文档和监控工具&lt;/h3&gt;
&lt;p&gt;在准备开始上线时，重要的是要对服务进行检测，使指标和流量日志以一种方式暴露出来。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;监督上线的人知道哪些（以及有多少）服务是支持 SPIFFE 的，哪些（以及有多少）不是。&lt;/li&gt;
&lt;li&gt;客户端作者知道他们调用的哪些服务是支持 SPIFFE 的，哪些不是。&lt;/li&gt;
&lt;li&gt;服务所有者知道他们的哪些客户端以及有多少客户端在调用支持 SPIFFE 的端点，哪些在调用传统端点。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;重要的是，要为客户端和服务器实施者创建参考文件，预测你将收到的支持请求的种类，从而为上线做准备。&lt;/p&gt;
&lt;p&gt;同样重要的是，创建工具来协助完成常见的调试和故障排除任务。回顾 SPIFFE 和 SPIRE 的收益，将 SPIFFE 引入你的组织应该赋予开发人员权力并消除路障。给利益相关者留下的印象是你在增加工作或制造摩擦，最终会减缓或停止更广泛的采用。为了减少这种情况，并确保文档和工具涵盖适当的主题，我们建议采取以下准备步骤。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;步骤&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;决定你将需要 SPIFFE 的哪些安全功能。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;SPIFFE 身份可用于创建相互的 TLS 连接，用于授权，或其他功能，如审计日志。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;确定使用什么格式的 SVID，用于什么目的。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;最常见的是将 X509-SVID 用于相互 TLS，但要确定这是否适用以及 SVID 是否将用于任何其他应用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;确定需要身份认证的工作负载的数量。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;不是每个工作负载都需要身份，特别是在早期。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;确定需要的独立信任域的数量。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;每个信任域都需要部署自己的 SPIRE 服务器。做出这一决定的细节在下一章。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;确定你的组织正在使用的语言、框架、IPC 技术等需要与 SPIFFE 兼容。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;如果使用 X.509-SVID 进行相互 TLS，请确定你的组织中使用了哪些 Web 服务器（Apache HTTPD、NGINX、Tomcat、Jetty 等）以及使用了哪些客户端库。如果客户端库期望执行 DNS 主机名验证，请确保你的 SPIFFE 部署与这种期望兼容。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;了解性能影响&#34;&gt;了解性能影响&lt;/h3&gt;
&lt;p&gt;应将性能影响作为部署规划的一部分加以考虑。&lt;/p&gt;
&lt;p&gt;作为上线准备的一部分，你应该检查一系列工作负载的基准，这些工作负载代表了你的组织在生产中运行的各种应用。这可以确保你至少意识到，并希望能准备好解决在推广过程中可能出现的任何性能问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TLS 性能&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在许多组织中，开发人员和运维团队提出的第一个担忧是，在服务之间建立相互的 TLS 连接会太慢。在现代硬件上，通过现代的 TLS 实现，TLS 的性能影响是最小的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;在我们的生产前端机器上，SSL/TLS 占 CPU 负载的比例不到 1%，每个连接占内存的比例不到 10KB，网络开销不到 2%。许多人认为，SSL/TLS 需要大量的 CPU 时间，我们希望前面的数字能帮助消除这种想法。&amp;quot;——Adam Langley， Google，&lt;a href=&#34;https://www.imperialviolet.org/2010/06/25/overclocking-ssl.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Overlocking SSL&lt;/a&gt;，2010 年&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;“我们已经使用硬件和软件负载均衡器大规模地部署了 TLS。我们发现，在商用 CPU 上运行的基于软件的现代 TLS 实现，其速度足以处理繁重的 HTTPS 追踪负载，而不需要求助于专用加密硬件。&amp;quot;——Doug Beaver，Facebook，&lt;a href=&#34;https://lists.w3.org/Archives/Public/ietf-http-wg/2012JulSep/0251.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HTTP2 Expression of Interest&lt;/a&gt;，2012 年&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一般来说，性能影响取决于多种因素，包括网络拓扑结构、API 网关、L4-L7 防火墙和其他许多因素。此外，你所使用的协议及其实现以及证书和密钥大小也可能影响性能，所以这是一个相当广泛的话题。&lt;/p&gt;
&lt;p&gt;下表提供了与 TCP 相比两个不同阶段的开销数据，特别是握手和数据传输阶段的数据。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;TLS 阶段&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;协议开销&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;延迟&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;CPU&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;内存&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;握手&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;TLS 为 2 kB mTLS 为 3 kB +1 kB/add&amp;rsquo;l Cert&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;12 - 17 ms&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;比 TCP 多出约 0.5%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;lt;10kb / 连接&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;数据传输&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;22B/packet&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;lt;3 us&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;比 TCP 多不到 1%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;lt;10 kB / 连接&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;向-spiffe-和-spire-转变&#34;&gt;向 SPIFFE 和 SPIRE 转变&lt;/h2&gt;
&lt;p&gt;关于组织如何对变化作出反应、影响和处理的研究有着丰富的历史。关于公众和组织对新技术的接受和采用，也有许多有趣的研究。对这些主题进行真正的公正研究超出了本书的范围，但如果我们不提及这些主题，那就是我们的失职，因为它们与 SPIFFE 的成功推广相关。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;令人信服的变化发生&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有几种方法可以说服他人，在你的组织内必须发生变化。下面的清单概述了你可以通过 SPIFFE 和 SPIRE 追求这种变革的方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;提升感知价值&lt;/strong&gt;：展示 SPIFFE 对工作绩效的积极影响是关键，让人们相信它对他们有实质帮助。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;简化易用性&lt;/strong&gt;：为了让 SPIFFE 易于使用，必须投入大量精力来提升开发者和运维人员的用户体验。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;同行影响力&lt;/strong&gt;：重视受尊敬人士对于 SPIFFE 的看法以及他们是否采用它，这将在组织内积累政治资本。说服关键人物通常比说服所有人更为重要。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;提升形象&lt;/strong&gt;：采用 SPIFFE 将对个人在组织中的地位产生显著影响。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自愿采用&lt;/strong&gt;：SPIFFE 潜在用户的自愿采用程度受公司文化和个性影响。在面对“被迫”采用者和拒绝采用者时，请务必牢记这一点。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-56技术采用曲线改编自-roger-的钟形曲线和-gartner-的-hype-cycle图下的蓝色区域代表变化的数量和-spiffe-采用者的数量红线代表对采用-spiffe-的热情和期望&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f5-6.jpg&#34; alt=&#34;图 5.6：技术采用曲线（改编自 Roger 的钟形曲线和 Gartner 的 Hype Cycle）。图下的蓝色区域代表变化的数量和 SPIFFE 采用者的数量。红线代表对采用 SPIFFE 的热情和期望。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 5.6：技术采用曲线（改编自 Roger 的钟形曲线和 Gartner 的 Hype Cycle）。图下的蓝色区域代表变化的数量和 SPIFFE 采用者的数量。红线代表对采用 SPIFFE 的热情和期望。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;采用者角色&#34;&gt;采用者角色&lt;/h3&gt;
&lt;p&gt;采用者与技术曲线相对应，可以帮助设定对如何向 SPIFFE 和 SPIRE 转变的预期。在此，我们列出了技术曲线中所涉及的采用者，并增加了两个你可能会遇到的采用者。&lt;/p&gt;
&lt;p&gt;关于技术采用曲线中的采用者的更多信息可以在本书之外找到。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;创新者&lt;/strong&gt;：把你自己看作是组织中的创新者，因为你采取了这些步骤来阅读本书，走到这一步，并决定继续前进。你基本上是在开拓将 SPIFFE 和 SPIRE 添加到你的架构中的进程，你需要帮助！你需要一个 &amp;quot; 白手套“级别的支持和和帮助，所以一定要从低垂的果实和先导类别（下文有介绍）中挑选志愿者，并与他们保持良好的关系。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;早期采用者&lt;/strong&gt;：重要的是要从给予创新者的“白手套 &amp;ldquo;手把手支持水平中吸取经验教训，并将这些经验提炼成易于获取和理解的文档、有用的工具和可扩展的支持渠道。可能需要做大量的工作来实现 SPIFFE 的&amp;rdquo; 先驱者和推动者”（在本章后面会详细介绍），以便开发者能够解除障碍，然后能够实现 SPIFFE 的服务和客户端。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;早期和晚期大众&lt;/strong&gt;：当你进入早期多数服务的时候，SPIFFE 的启用过程已经是一台运转良好的机器了。所有常用的使能器，如 CI/CD、工作流引擎、编排器、容器平台和服务网格，都应该启用 SPIFFE，以确保应用开发者在整个应用生命周期中得到支持，无论应用如何运行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;落后者&lt;/strong&gt;：由于团队文化、个人性格以及监管或合规要求，你的组织可能有保守的落后者。重要的是，不要对服务所有者为什么会落入这个类别下结论，而是要调查根本原因并适当解决。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ldquo;被迫&amp;rdquo; 转型&lt;/strong&gt;：最后一个采用 SPIFFE 的服务的客户可能会感到被迫转型。重要的是要为被迫转型者做好准备，确保他们采用 SPIFFE 的经验是积极的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;滞留者&lt;/strong&gt;：他们会出现，所以要让他们容易接受并受到激励。突出其他人目前正在享受生产力平台的例子。你应该期望提供额外的支持和帮助，因为在这个过程中会有很多人犹豫不决。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;时机选择的考虑因素&#34;&gt;时机选择的考虑因素&lt;/h3&gt;
&lt;p&gt;在你选择谁来做的时候，在你的组织中保持最大的兼容性是至关重要的考虑。服务应保持其现有的 API 接口和端口，并在新的端口上引入其启用 SPIFFE 的 API。这样可以实现平稳过渡，并在需要时方便回滚。有许多来自其他服务团队客户端的服务团队应该期望在很长一段时间内（&amp;gt;6 个月）维护和支持这两个端点。&lt;/p&gt;
&lt;p&gt;一旦一项服务的所有客户端都启用了 SPIFFE，并且不再使用非 SPIFFE 的 API，那么非 SPIFFE 的 API 就可以被关闭。&lt;/p&gt;
&lt;p&gt;要注意不要过早地关闭遗留的端点。要特别注意批处理作业、计划任务和其他类型的不经常或不规则的调用模式。你不希望成为导致季度末或财务年度末对账工作失败的人。&lt;/p&gt;
&lt;p&gt;如果你的环境太大或者太复杂，无法一下子完成，那么在选择服务启用 SPIFFE 的顺序时，一定要深思熟虑。从大石头、最低的果实和 &amp;quot; 先驱者和推动者“的角度来考虑可能会有帮助，以加速采用。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-57简化的微服务调用图&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f5-7.jpg&#34; alt=&#34;图 5.7：简化的微服务调用图。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 5.7：简化的微服务调用图。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大石头&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;大石头是指拥有最独特客户端的服务，以及与最多独特服务端连接的客户端。尽早处理大石头可能对加快采用速度很有诱惑力，但可能会导致得不偿失，造成问题，并使其他人不愿采用 SPIFFE。&lt;/p&gt;
&lt;p&gt;看一下上面的调用图，可以通过连接最多的节点来识别大石头。它们可能是被许多客户端调用的关键服务，如 Service 0；它们可能是调用许多服务端的客户端，如 Service 4。大石头还可能包括既是客户端又是服务端的服务，如 Service 7。应对这些服务的迁移，既有好处，也有风险。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;效益&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有吸引力的选择&lt;/li&gt;
&lt;li&gt;潜在的快速采用&lt;/li&gt;
&lt;li&gt;影响广泛的好处&lt;/li&gt;
&lt;li&gt;激励他人采用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;风险和挑战&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;长期维护 2 个终端（传统的和支持 SPIFFE 的）&lt;/li&gt;
&lt;li&gt;只有在所有客户端都采用了 SPIFFE 之后，才会关闭传统的端点&lt;/li&gt;
&lt;li&gt;增加维护成本&lt;/li&gt;
&lt;li&gt;增加了复杂性&lt;/li&gt;
&lt;li&gt;扩展了组织能力&lt;/li&gt;
&lt;li&gt;强制采用&lt;/li&gt;
&lt;li&gt;不满的团队&lt;/li&gt;
&lt;li&gt;惊喜的是，角落里有一只乌龟！&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;低垂的果实&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;最低矮的果实是拥有一至几个客户端的服务，或与一个或几个服务连接的客户端。这些通常是最容易指导过渡的，并且是理想的第一批采用者。&lt;/p&gt;
&lt;p&gt;看一下上面的同一张图，低垂的果实是连接很少的节点。这些服务可能是单一的、其他服务的客户端，如 Service 2。低垂的果实也可能包括只有一个客户端的服务，比如 Service 8。在选择首先迁移哪些连接很少的服务时，明智的做法是选择那些最容易维持双端点的服务（传统的和 SPIFFE），或者那些必须在最短的时间内维持双堆栈的服务。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;效益&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果出了问题，风险更小&lt;/li&gt;
&lt;li&gt;由于需要较少的协调和规划，因此更容易从传统的方式完全转换到 SPIFFE 上&lt;/li&gt;
&lt;li&gt;良好做法和学习机会&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;风险和挑战&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;推广工作可能被认为是缓慢的&lt;/li&gt;
&lt;li&gt;可能没有足够的可见性或影响力来激发关键服务所有者的采用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;加速采用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一些先导因素和推动因素可以促进 SPIFFE 在复杂和异构环境中的采用。它们中的每一个都有一系列不同的好处和挑战需要考虑。上面的考虑因素也适用于此；选择影响最广泛的系统，在确定所有非 SPIFFE 的消费者都已转换之前，不要转而使用非 SPIFFE 功能。&lt;/p&gt;
&lt;p&gt;先行者包括帮助他人采用 SPIFFE 的工具和服务（如 CI/CD 和工作流引擎）。开发和运维工具应该提供给第一批采用者（创新者），并随着早期采用者的加入而反复改进。我们的目标是使工具和服务在早期大多数人加入的时候达到成熟。如果没有足够的前期投资，后期的大多数人和落伍者将陷入困境。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;开发者工具&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;拥有有助于提高生产力的工具是成功推广 SPIFFE 的关键。收集一份你的组织在应用生命周期中使用的现有工具清单，从开发到运维再到报废，并考虑哪些现有工具应该支持 SPIFFE，是否需要建立、购买或部署新的工具。花在创建、整合和改进工具上的时间和精力往往会产生倍增效应，为其他人节省时间和精力，从而帮助促进更顺利的过渡。&lt;/p&gt;
&lt;p&gt;值得注意的是，不应该孤立地建立或购买工具，而应该与他们的目标用户协商，最好是以渐进和迭代的方式。正确地做到这一点可能需要时间。&lt;/p&gt;
&lt;p&gt;选择什么时候一个工具对第一批和早期采用者来说足够好是一个判断。在极少数情况下，工具的第一次迭代对早期和后期的大多数人来说是足够好的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;持续集成和部署系统&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 CI/CD 工具中实施 SPIFFE 会对组织中其他服务部门采用这种 SPIFFE 产生很大的影响，因为大多数团队都会与 CI/CD 系统定期互动。然而，反过来说，这意味着要让 CI/CD 系统的所有消费者都能意识到 SPIFFE 是一项庞大的任务，所以可能需要很长的时间来关闭所有非 SPIFFE 的集成。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;容器编排器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你的组织已经在使用容器编排器，如 Kubernetes，那么你就成功了一半！你的组织已经在使用容器编排器。编排器使你的工作负载很容易通过 SPIFFE 感知代理前置，这样你的开发者就不需要再费心了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;服务网格&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;大型微服务服务网格架构作为 SPIFFE 部署的推动者尤其重要，因为在服务网格中引入 SPIFFE 支持是一种推出广泛支持的好方法，而不必让开发团队参与进来。&lt;/p&gt;
&lt;p&gt;服务网格的相关性也伴随着一些风险和挑战。你可以想象，破坏服务网格可能会在一个环境中产生广泛的影响，并可能以灾难性的失败告终。&lt;/p&gt;
&lt;h2 id=&#34;规划-spire-行动&#34;&gt;规划 SPIRE 行动&lt;/h2&gt;
&lt;h3 id=&#34;日复一日地运行-spire&#34;&gt;日复一日地运行 SPIRE&lt;/h3&gt;
&lt;p&gt;建议负责管理和支持 SPIRE 基础设施的团队尽可能早地参与。根据你的组织结构，很可能是你的安全或平台团队将负责整个生命周期的工作。&lt;/p&gt;
&lt;p&gt;另一个需要考虑的方面是你如何分割涉及任何会影响系统安全、性能和可用性的改变的操作。在改变任何与你的 PKI、HSM、密钥轮换和相关操作有关的东西时，可能需要更严格的控制和门槛。你可能已经有一个围绕它的变更管理过程，如果没有，这是一个开始实施它的绝佳时机。&lt;/p&gt;
&lt;p&gt;你的团队需要为不同的故障场景创建 Runbook，并对其进行测试，以了解该怎么做，需要观察哪些基本指标，并创建监控和警报。你可能已经知道你将使用什么监控和警报系统，但了解 SPIRE 服务器和代理提供的遥测数据和指标，以及这些数据意味着什么，将有助于你的团队避免停机时间。&lt;/p&gt;
&lt;h3 id=&#34;测试复原力&#34;&gt;测试复原力&lt;/h3&gt;
&lt;p&gt;故障注入练习帮助操作人员分析系统在某些故障条件下的表现。你可能对你的系统将如何基于架构做出反应有某些假设。尽管如此，在 SPIRE 部署中仍有多个潜在的故障点值得触发，以测试你的假设，并可作为运营团队的良好实践，以确保他们有所有的警报和 Runbook。&lt;/p&gt;
&lt;p&gt;我们整理了一个清单，其中包括一些你想在你的故障测试程序中包括的情景。这不是一个完整的指南，只是为你的特定环境和部署模式建立检查表的一个起点。最好是用不同的停机时间来执行所有这些测试：短于配置的 TTL 的一半和更长的时间。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果 SPIRE 的部署是使用一个单一的数据库实例，请关闭该数据库。&lt;/li&gt;
&lt;li&gt;如果 SPIRE 部署在一个集群中使用一个数据库，有一个写副本和多个读副本，请关闭写实例。&lt;/li&gt;
&lt;li&gt;模拟数据库丢失，测试数据恢复。如果你不能恢复数据或只能从一个月前的数据中恢复，怎么办？&lt;/li&gt;
&lt;li&gt;在 HA 部署中关闭几台 SPIRE 服务器。&lt;/li&gt;
&lt;li&gt;在 HA 部署中关闭负载均衡器。&lt;/li&gt;
&lt;li&gt;在代理被证明后关闭它，或完全模拟 SPIRE 服务器丢失。&lt;/li&gt;
&lt;li&gt;如果使用上游授权，模拟上游授权失败。&lt;/li&gt;
&lt;li&gt;模拟根和中间 CA 的破坏、轮换和撤销。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;定义哪些指标在每个测试场景中是最有用的，记录这些数值的预期健康和危险范围，并随着时间的推移进行测量。&lt;/p&gt;
&lt;p&gt;这些场景应该被很好地记录下来，预期的输出被很好地定义，然后通过自动和定期运行的自动化测试来实现。&lt;/p&gt;
&lt;h3 id=&#34;日志&#34;&gt;日志&lt;/h3&gt;
&lt;p&gt;像所有系统一样，日志是 SPIRE 的一个重要组成部分。然而，SPIRE 产生的日志也可作为审计和安全事件的证据。包含身份签发信息以及可观察到的证明细节，可以用来证明某些工作负载和服务的状态。由于日志可以被视为证据，因此在组建日志解决方案时，你可能希望注意到以下几个注意事项。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;记录的保留应符合你的组织的法律要求&lt;/li&gt;
&lt;li&gt;日志系统在接纳日志和存储方面都应具有高可用性&lt;/li&gt;
&lt;li&gt;日志应该是防篡改的，必须能够提供证据&lt;/li&gt;
&lt;li&gt;记录系统应该能够提供一个监管链&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;监控&#34;&gt;监控&lt;/h3&gt;
&lt;p&gt;除了通常的 SPIRE 组件的健康状况以确保系统正常运行外，你应该设置对服务器、代理和信任包的配置的监控，以检测未经授权的更改，因为这些组件是系统安全的基础。此外，还可以对身份的发放以及服务器和代理之间的通信进行监控，以发现异常情况。然而，根据系统中发布的身份信息量，你可能希望重新考虑监控的范围。&lt;/p&gt;
&lt;p&gt;SPIRE 通过&lt;a href=&#34;https://en.wikipedia.org/wiki/Telemetry&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;遥测&lt;/a&gt;技术为指标报告提供灵活的支持，允许使用多个收集器收集指标。目前支持的指标收集器有 Prometheus、Statsd、DogStatsd 和 M3。在服务器和代理中都可以同时配置多个采集器。&lt;/p&gt;
&lt;p&gt;SPIRE 上有许多指标，其记录涵盖了所有的 API 和功能。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务器
&lt;ul&gt;
&lt;li&gt;管理 API 操作&lt;/li&gt;
&lt;li&gt;每个 API 的 DB 操作&lt;/li&gt;
&lt;li&gt;SVID 发行的 API 操作&lt;/li&gt;
&lt;li&gt;轮换和秘钥管理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;代理
&lt;ul&gt;
&lt;li&gt;与服务器的交互&lt;/li&gt;
&lt;li&gt;SVID 轮换和缓存维护&lt;/li&gt;
&lt;li&gt;工作负载证明&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>威胁建模</title>
      <link>https://lib.jimmysong.io/kubernetes-hardening-guidance/threat-model/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/kubernetes-hardening-guidance/threat-model/</guid>
      <description>&lt;p&gt;Kubernetes 可以成为数据和 / 或计算能力盗窃的重要目标。虽然数据盗窃是传统上的主要动机，但寻求计算能力（通常用于加密货币挖掘）的网络行为者也被吸引到 Kubernetes 来利用其底层基础设施。除了资源盗窃，网络行为者还可能针对 Kubernetes 造成拒绝服务。下面的威胁代表了 Kubernetes 集群最可能的破坏源。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;供应链风险&lt;/strong&gt; - 对供应链的攻击载体是多种多样的，并且在减轻风险方面具有挑战性。供应链风险是指对手可能颠覆构成系统的任何元素的风险，包括帮助提供最终产品的产品组件、服务或人员。这可能包括用于创建和管理 Kubernetes 集群的第三方软件和供应商。供应链的潜在威胁会在多个层面上影响 Kubernetes，包括：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;容器 / 应用层面&lt;/strong&gt; - 在 Kubernetes 中运行的应用及其第三方依赖的安全性，它们依赖于开发者的可信度和开发基础设施的防御能力。来自第三方的恶意容器或应用程序可以为网络行为者在集群中提供一个立足点。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;基础设施&lt;/strong&gt; - 托管 Kubernetes 的底层系统有其自身的软件和硬件依赖性。系统作为工作节点或控制平面一部分的，任何潜在威胁都可能为网络行为者在集群中提供一个立足点。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;恶意威胁行为者&lt;/strong&gt; - 恶意行为者经常利用漏洞从远程位置获得访问权。Kubernetes 架构暴露了几个 API，网络行为者有可能利用这些 API 进行远程利用。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;控制平面&lt;/strong&gt; - Kubernetes 控制平面有各种组件，通过通信来跟踪和管理集群。网络行为者经常利用缺乏适当访问控制的暴露的控制平面组件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;工作节点&lt;/strong&gt; - 除了运行容器引擎外，工作者节点还承载着 &lt;code&gt;kubelet&lt;/code&gt; 和 &lt;code&gt;kube-proxy&lt;/code&gt; 服务，这些都有可能被网络行为者利用。此外，工作节点存在于被锁定的控制平面之外，可能更容易被网络行为者利用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;容器化的应用程序&lt;/strong&gt; - 在集群内运行的应用程序是常见的目标。应用程序经常可以在集群之外访问，使它们可以被远程网络行为者接触到。然后，网络行为者可以从已经被破坏的应用出发，或者利用暴露的应用程序的内部可访问资源在集群中提升权限。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内部威胁&lt;/strong&gt; - 威胁者可以利用漏洞或使用个人在组织内工作时获得的特权。来自组织内部的个人被赋予特殊的知识和特权，可以用来威胁 Kubernetes 集群。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;管理员&lt;/strong&gt; - Kubernetes 管理员对运行中的容器有控制权，包括在容器化环境中执行任意命令的能力。Kubernetes 强制的 RBAC 授权可以通过限制对敏感能力的访问来帮助降低风险。然而，由于 Kubernetes 缺乏双人制的完整性控制，即必须有至少一个管理账户才能够获得集群的控制权。管理员通常有对系统或管理程序的物理访问权，这也可能被用来破坏 Kubernetes 环境。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用户&lt;/strong&gt; - 容器化应用程序的用户可能有知识和凭证来访问 Kubernetes 集群中的容器化服务。这种程度的访问可以提供足够的手段来利用应用程序本身或其他集群组件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;云服务或基础设施供应商&lt;/strong&gt; - 对管理 Kubernetes 节点的物理系统或管理程序的访问可被用来破坏 Kubernetes 环境。云服务提供商通常有多层技术和管理控制，以保护系统免受特权管理员的影响。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>SPIFFE 联邦</title>
      <link>https://lib.jimmysong.io/spiffe-and-spire/standard/spiffe-federation/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/spiffe-and-spire/standard/spiffe-federation/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;SPIFFE 规范定义了建立一个平台无关的工作负载身份框架所需的文档和接口，该框架能够在不需要实现身份转换或凭证交换逻辑的情况下连接不同域中的系统。它们定义了一个“&lt;a href=&#34;https://github.com/spiffe/spiffe/blob/master/standards/SPIFFE-ID.md#21-trust-domain&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;信任域&lt;/a&gt;”，它作为一个身份命名空间。&lt;/p&gt;
&lt;p&gt;SPIFFE 的本质是分散的。每个信任域都根据自己的授权行事，与驻留在其他信任域中的系统在管理上是隔离的。虽然信任域划定了行政和/或安全域，但核心的 SPIFFE 用例是在需要时跨越这些边界进行通信。因此，有必要定义一种机制，使实体可以被引入到外部信任域中，从而允许其验证由“其他”SPIFFE 授权机构颁发的凭证，并允许一个信任域中的工作负载安全地验证一个外部信任域中的工作负载。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/spiffe/spiffe/blob/master/standards/SPIFFE_Trust_Domain_and_Bundle.md#3-spiffe-bundles&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIFFE 包&lt;/a&gt;是一个包含验证特定信任域凭证所需的公钥材料的资源。本文档介绍了一种规范，用于安全地获取 SPIFFE 包，以便验证外部机构颁发的身份。其中包括有关如何提供 SPIFFE 包、如何检索 SPIFFE 包以及如何验证提供它们的端点的信息。&lt;/p&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;SPIFFE 联邦使得在信任域之间验证身份凭证 (SVIDs) 成为可能。具体来说，它是获取验证来自不同信任域颁发的 SVIDs 所需的 SPIFFE 包的行为，并将这些包提供给执行验证的工作负载。&lt;/p&gt;
&lt;p&gt;为了验证来自一个信任域的 SVIDs，必须拥有该信任域的包。因此，实现 SPIFFE 联邦需要在信任域之间交换 SPIFFE 包。这种交换应该定期发生，以允许信任域包的内容随时间变化。&lt;/p&gt;
&lt;p&gt;为了实现这一点，SPIFFE 联邦定义了一个“包端点”，它是一个 URL，用于为特定的信任域提供 SPIFFE 包。还定义了一组“端点配置文件”，它们指定了包端点服务器和客户端之间使用的协议和身份验证语义。最后，本文档进一步指定了包端点客户端和服务器的行为，以及联邦关系的管理和生成的包数据。&lt;/p&gt;
&lt;h2 id=&#34;目标用例&#34;&gt;目标用例&lt;/h2&gt;
&lt;p&gt;最终，SPIFFE 联邦使得工作负载能够对其他信任域中的对等方进行身份验证。这个功能对于支持各种用例至关重要，但我们希望重点关注三个核心用例。&lt;/p&gt;
&lt;p&gt;SPIFFE 信任域经常用于将同一公司或组织中不同信任级别的环境进行分割。例如，可以在暂存和生产环境之间、PCI 和非 PCI 环境之间进行分割。在这些情况下，每个域中使用的 SPIFFE 部署共享一个共同的管理机构，并且很可能由相同的实现支持。这是一个重要的区别，因为它意味着不同的部署可以就某些事情达成一致（例如命名方案），并且每个部署的安全姿态可以被其他部署了解和理解。&lt;/p&gt;
&lt;p&gt;其次，SPIFFE 联邦也被用于在不同公司或组织之间的信任域之间进行联邦。这种情况与第一种情况相似，我们正在对 SPIFFE 部署进行联邦，但由于可能存在的实现和管理差异，协调通常仅限于在此处描述的 SPIFFE 联邦协议中交换的数据。&lt;/p&gt;
&lt;p&gt;最后，SPIFFE 联邦还可以为尚未部署成熟 SPIFFE 控制平面的客户端提供用例。例如，托管产品可能希望使用客户端的 SPIFFE 身份对其客户进行身份验证，而无需内部实现或部署 SPIFFE。这可以通过允许工作负载直接获取客户端的信任域绑定来实现，以便对其调用者进行身份验证，从而避免了承诺部署完整的 SPIFFE 的需求。&lt;/p&gt;
&lt;h2 id=&#34;spiffe-bundle-端点&#34;&gt;SPIFFE Bundle 端点&lt;/h2&gt;
&lt;p&gt;SPIFFE Bundle 端点是一个资源（由 URL 表示），用于提供一个信任域的 SPIFFE Bundle 的副本。SPIFFE 控制平面可以同时暴露和使用这些端点，以便在它们之间传输 bundle，从而实现联邦。&lt;/p&gt;
&lt;p&gt;SPIFFE Bundle 端点的语义类似于 OpenID Connect 规范中定义的&lt;code&gt;jwks_uri&lt;/code&gt;机制，因为 bundle 包含了一个或多个用于在信任域内证明身份的公共加密密钥。Bundle 端点是一个 HTTPS URL，对 HTTP GET 请求做出 SPIFFE bundle 的响应。&lt;/p&gt;
&lt;h3 id=&#34;添加和删除密钥&#34;&gt;添加和删除密钥&lt;/h3&gt;
&lt;p&gt;信任域的操作者可以根据需要（例如，作为内部密钥轮换过程的一部分）引入或删除用于颁发 SVID 的密钥。在添加新密钥时，应提前发布包含密钥的更新信任捆绑包到捆绑包端点，以便外部信任域有机会检索和内部传播新捆绑包内容；建议提前时间为捆绑包的&lt;code&gt;spiffe_refresh_hint&lt;/code&gt;的 3-5 倍。至少，在使用密钥颁发 SVID 之前，新密钥必须发布到捆绑包端点。&lt;/p&gt;
&lt;p&gt;当信任域不再颁发来自这些密钥的活动有效 SVID 时，应从信任捆绑包中删除已弃用的密钥。如果在将密钥添加到捆绑包中或从捆绑包中删除密钥时不遵循这些建议，可能会导致暂时的跨域身份验证失败。&lt;/p&gt;
&lt;p&gt;更新信任捆绑包的要求不适用于仅用于内部使用的颁发 SVID 的密钥。&lt;/p&gt;
&lt;p&gt;应定期轮询捆绑包端点以获取更新，因为其内容预计会随时间&lt;a href=&#34;https://github.com/spiffe/spiffe/blob/master/standards/SPIFFE_Trust_Domain_and_Bundle.md#appendix-a-spiffe-bundle-example&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;更改&lt;/a&gt; - 常见的密钥有效期通常为几周甚至几天。客户端应以与捆绑包的&lt;code&gt;spiffe_refresh_hint&lt;/code&gt;值相等的频率轮询。如果未设置，应适用合理低的默认值 - 建议为五分钟。&lt;/p&gt;
&lt;h3 id=&#34;管理获取的-bundle&#34;&gt;管理获取的 Bundle&lt;/h3&gt;
&lt;p&gt;Bundle 终端的客户端应在每次检索到 Bundle 时存储最新的 SPIFFE Bundle。当比较两个 Trust Bundle 的新鲜度或顺序时，应使用 Trust Bundle 的序列号字段。如果 Trust Bundle 省略了序列号，操作员应将最近检索到的 Bundle 视为最新的。&lt;/p&gt;
&lt;p&gt;操作员可以随时在外部信任域中本地更新 SPIFFE Bundle。在这种情况下，本地更新的 Bundle 版本将被视为最新版本，直到被后续的刷新替换。&lt;/p&gt;
&lt;p&gt;不同信任域的 Bundle 内容不得合并为单个更大的 Bundle。这样做将使一个信任域能够在验证器的眼中伪造属于另一个信任域的身份。因此，非常重要的是确保从外部信任域接收的 Bundle 保持清晰可辨，并明确反映它们所属的信任域名称。有关更多信息，请参阅安全注意事项部分。&lt;/p&gt;
&lt;h3 id=&#34;终端地址的稳定性&#34;&gt;终端地址的稳定性&lt;/h3&gt;
&lt;p&gt;一旦外部信任域开始依赖于特定的终端 URL，将所有终端的客户端迁移到替代终端 URL 是一个复杂且容易出错的过程。因此，最安全的做法是优先选择稳定的终端 URL。&lt;/p&gt;
&lt;h2 id=&#34;spiffe-bundle-终端的提供和使用&#34;&gt;SPIFFE Bundle 终端的提供和使用&lt;/h2&gt;
&lt;p&gt;本规范定义了两种基于 HTTPS 的 SPIFFE Bundle 终端服务器支持的配置文件。其中一种依赖于使用 Web PKI 对终端进行身份验证，另一种则利用 SPIFFE 身份验证。SPIFFE Bundle 终端客户端必须同时支持这两种配置文件，而 SPIFFE Bundle 终端服务器必须至少支持其中一种。&lt;/p&gt;
&lt;p&gt;支持基于 TLS 的配置文件（例如&lt;code&gt;https_web&lt;/code&gt;或&lt;code&gt;https_spiffe&lt;/code&gt;）的 Bundle 终端服务器必须遵守&lt;a href=&#34;https://wiki.mozilla.org/Security/Server_Side_TLS#Intermediate_compatibility_.28recommended.29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mozilla 中间兼容性&lt;/a&gt;要求，除非使用配置文件另有规定。&lt;/p&gt;
&lt;h3 id=&#34;端点参数&#34;&gt;端点参数&lt;/h3&gt;
&lt;p&gt;在从 SPIFFE 捆绑端点检索捆绑之前，客户端必须配置以下三个参数：（1）SPIFFE 捆绑端点的 URL，（2）端点配置文件类型，以及（3）与捆绑端点关联的信任域名称。前两个参数指示捆绑端点的位置和如何进行身份验证。由于信任捆绑不包含信任域名称，客户端使用第三个参数将已下载的捆绑与特定的信任域名称关联起来。特定的端点配置文件（例如&lt;code&gt;https_spiffe&lt;/code&gt;，如下所述）可以定义其他强制的配置参数。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Bundle Endpoint URL:		&amp;#34;&amp;lt;https://example.com/production/bundle.json&amp;gt;&amp;#34;
Bundle Endpoint Profile:	&amp;#34;https_web&amp;#34;
Trust Domain:			&amp;#34;prod.example.com&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;图 1：用于信任域&lt;a href=&#34;http://prod.example.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;prod.example.com&lt;/a&gt;的示例 SPIFFE 捆绑端点配置。管理员通过捆绑端点配置来检索外部信任捆绑。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;当控制平面将信任捆绑分发给工作负载时，必须通信信任域名称和信任捆绑之间的关联。有关这些参数的敏感性，请参见安全注意事项部分。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/spiffe_bundle_distribution.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;em&gt;图 2：在检索到外部 SPIFFE 信任捆绑后，控制平面将信任域名称和相应的捆绑分发给内部工作负载。工作负载使用此配置来验证外部信任域中的身份。有关信任捆绑内容的详细信息，请参见&lt;a href=&#34;https://github.com/spiffe/spiffe/blob/master/standards/SPIFFE_Trust_Domain_and_Bundle.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIFFE 信任域和捆绑&lt;/a&gt; ，特别是&lt;a href=&#34;https://github.com/spiffe/spiffe/blob/master/standards/SPIFFE_Trust_Domain_and_Bundle.md#4-spiffe-bundle-format&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIFFE 捆绑格式&lt;/a&gt;和&lt;a href=&#34;https://github.com/spiffe/spiffe/blob/master/standards/SPIFFE_Trust_Domain_and_Bundle.md#appendix-a-spiffe-bundle-example&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIFFE 捆绑示例&lt;/a&gt;部分。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;本节中的要求适用于所有 SPIFFE 捆绑端点服务器和客户端。个别的 SPIFFE 捆绑端点配置文件可能会添加其他要求。&lt;/p&gt;
&lt;h3 id=&#34;端点配置文件&#34;&gt;端点配置文件&lt;/h3&gt;
&lt;p&gt;端点配置文件描述了在提供或使用捆绑端点时应使用的传输协议和身份验证方法。&lt;/p&gt;
&lt;p&gt;以下各节描述了受支持的捆绑端点配置文件。&lt;/p&gt;
&lt;h3 id=&#34;web-pkihttps_web&#34;&gt;Web PKI（&lt;code&gt;https_web&lt;/code&gt;）&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;https_web&lt;/code&gt;配置文件利用公信任的证书颁发机构提供了一种低摩擦的方式来配置 SPIFFE 联邦。当访问网页时，它的行为与大多数人熟悉的“https”URL 完全相同。在此配置文件中，捆绑点服务器使用由公共 CA 颁发的证书，无需额外的客户端配置；使用&lt;code&gt;https_web&lt;/code&gt;配置文件类型的端点使用通常安装在现代操作系统中的相同公共 CA 证书进行身份验证。&lt;/p&gt;
&lt;p&gt;有关使用公共证书颁发机构的更多信息，请参见安全注意事项部分。&lt;/p&gt;
&lt;h3 id=&#34;端点-url-要求&#34;&gt;端点 URL 要求&lt;/h3&gt;
&lt;p&gt;使用&lt;code&gt;https_web&lt;/code&gt;的捆绑点 URL 必须将方案设置为&lt;code&gt;https&lt;/code&gt;，并且在授权组件中不能包括用户信息。此规范不限制 URL 的其他组件（由&lt;a href=&#34;https://tools.ietf.org/html/rfc3986#section-3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 3986 第 3 节&lt;/a&gt;定义）。&lt;/p&gt;
&lt;p&gt;例如，URL &lt;code&gt;https://host.example.com/trust_domain&lt;/code&gt; 是 &lt;code&gt;https_web&lt;/code&gt; 配置文件类型的有效 SPIFFE 捆绑点 URL。&lt;/p&gt;
&lt;h3 id=&#34;端点参数-1&#34;&gt;端点参数&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;https_web&lt;/code&gt;配置文件在功能上不需要任何额外的参数，除了每个配置文件都需要的参数（即信任域名、配置文件类型和端点 URL）。&lt;/p&gt;
&lt;h3 id=&#34;提供-bundle-端点&#34;&gt;提供 Bundle 端点&lt;/h3&gt;
&lt;p&gt;支持&lt;code&gt;https_web&lt;/code&gt;传输类型的 SPIFFE bundle 端点服务器使用标准的 TLS 保护的 HTTP（即 HTTPS）。所使用的服务器证书应由公共证书颁发机构（根据 CA/Browser 论坛的成员名单定义）颁发，并且必须将端点的 DNS 名称或 IP 地址作为 X.509 主题备用名称（或通用名称）包含在内。&lt;/p&gt;
&lt;p&gt;作为互操作性问题，服务器不得要求对访问 bundle 端点进行客户端身份验证；这包括传输层（例如客户端证书）和 HTTP 层（例如身份验证标头）身份验证方案。&lt;/p&gt;
&lt;p&gt;在收到正确路径的 HTTP GET 请求后，bundle 端点服务器必须回复最新版本的可用 SPIFFE bundle。响应必须以 UTF-8 编码，并应在响应上设置&lt;code&gt;Content-Type&lt;/code&gt;标头为&lt;code&gt;application/json&lt;/code&gt;。此规范不限制提供 SPIFFE bundle 的路径。&lt;/p&gt;
&lt;p&gt;如果请求的 bundle 的授权机构已经更改，bundle 端点服务器可以使用 HTTP 重定向（根据&lt;a href=&#34;https://tools.ietf.org/html/rfc7231#section-6.4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 7231 第 6.4 节&lt;/a&gt;定义）进行响应。重定向的目标 URL 也必须是符合此配置文件中定义的有效的 bundle 端点 URL。服务器应使用临时重定向；重定向的支持是为了操作考虑（例如通过 CDN 提供 bundle），而不是作为永久迁移 bundle 端点 URL 的手段。有关详细信息，请参阅安全考虑事项。&lt;/p&gt;
&lt;h3 id=&#34;web-pkihttps_web-1&#34;&gt;Web PKI（&lt;code&gt;https_web&lt;/code&gt;）&lt;/h3&gt;
&lt;h3 id=&#34;提供-bundle-端点-1&#34;&gt;提供 Bundle 端点&lt;/h3&gt;
&lt;p&gt;支持&lt;code&gt;https_web&lt;/code&gt;传输类型的 SPIFFE bundle 端点服务器使用标准的 TLS 保护的 HTTP（即 HTTPS）。所使用的服务器证书应由公共证书颁发机构（根据 CA/Browser 论坛的成员名单定义）颁发，并且必须将端点的 DNS 名称或 IP 地址作为 X.509 主题备用名称（或通用名称）包含在内。&lt;/p&gt;
&lt;p&gt;作为互操作性问题，服务器不得要求对访问 bundle 端点进行客户端身份验证；这包括传输层（例如客户端证书）和 HTTP 层（例如身份验证标头）身份验证方案。&lt;/p&gt;
&lt;p&gt;在收到正确路径的 HTTP GET 请求后，bundle 端点服务器必须回复最新版本的可用 SPIFFE bundle。响应必须以 UTF-8 编码，并应在响应上设置&lt;code&gt;Content-Type&lt;/code&gt;标头为&lt;code&gt;application/json&lt;/code&gt;。此规范不限制提供 SPIFFE bundle 的路径。&lt;/p&gt;
&lt;p&gt;如果请求的 bundle 的授权机构已经更改，bundle 端点服务器可以使用 HTTP 重定向（根据&lt;a href=&#34;https://tools.ietf.org/html/rfc7231#section-6.4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 7231 第 6.4 节&lt;/a&gt;定义）进行响应。重定向的目标 URL 也必须是符合此配置文件中定义的有效的 bundle 端点 URL。服务器应使用临时重定向；重定向的支持是为了操作考虑（例如通过 CDN 提供 bundle），而不是作为永久迁移 bundle 端点 URL 的手段。有关详细信息，请参阅安全考虑事项。&lt;/p&gt;
&lt;h3 id=&#34;使用-bundle-终点&#34;&gt;使用 Bundle 终点&lt;/h3&gt;
&lt;p&gt;当与&lt;code&gt;https_web&lt;/code&gt; bundle 终点进行交互时，SPIFFE bundle 终点客户端使用标准的 TLS 保护的 HTTP（即 HTTPS）。在连接到终点时，必须根据&lt;a href=&#34;https://tools.ietf.org/html/rfc6125&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 6125&lt;/a&gt;验证服务器证书。总结该文档，服务器证书必须由本地信任的证书颁发机构签发，且必须包含与配置的终点 URL 的主机组件匹配的 X.509 主体替代名称（或公共名称）。&lt;/p&gt;
&lt;p&gt;在建立与 bundle 终点的 TLS 连接并验证呈现的服务器证书后，客户端发出终点 URL 指定的 HTTP GET 请求。响应的正文是一个 SPIFFE bundle。在检索信任 bundle 之前，客户端必须知道终点 URL 代表的信任域的名称，最好通过显式配置；有关详细信息，请参阅安全注意事项部分。&lt;/p&gt;
&lt;p&gt;如果终点服务器具有 HTTP 重定向功能（如&lt;a href=&#34;https://tools.ietf.org/html/rfc7231#section-6.4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 7231 第 6.4 节&lt;/a&gt;定义的），则 bundle 终点服务器可以响应 HTTP 重定向。如果 URL 满足有效 bundle 终点 URL 的所有要求，bundle 终点客户端应遵循重定向。连接到新 URL 时，必须应用与连接到原始 URL 相同的 TLS 注意事项。bundle 终点客户端应使用配置的终点 URL 进行每个 bundle 刷新，并不应永久存储位置以供将来获取。有关详细信息，请参阅安全注意事项。&lt;/p&gt;
&lt;h3 id=&#34;spiffe-身份验证https_spiffe&#34;&gt;SPIFFE 身份验证（&lt;code&gt;https_spiffe&lt;/code&gt;）&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;https_spiffe&lt;/code&gt;配置文件使用由 SPIFFE 信任域（而不是由公共证书颁发机构签发的证书）颁发的 X509-SVID。该配置文件允许 bundle 终点避免使用网络定位器作为服务器标识的一种形式，并且通过标准 SPIFFE 机制支持自动根 CA 轮换和吊销。&lt;/p&gt;
&lt;p&gt;除了所有配置文件所需的终点参数之外，&lt;code&gt;https_spiffe&lt;/code&gt;配置文件还需要其他终点客户端参数，如下所述。&lt;/p&gt;
&lt;h3 id=&#34;终点-url-要求&#34;&gt;终点 URL 要求&lt;/h3&gt;
&lt;p&gt;使用&lt;code&gt;https_spiffe&lt;/code&gt;的 bundle 终点 URL 的方案必须设置为&lt;code&gt;https&lt;/code&gt;，并且在授权组件中不能包含用户信息。此规范不限制 URL 的其他组件（如&lt;a href=&#34;https://tools.ietf.org/html/rfc3986#section-3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 3986 第 3 节&lt;/a&gt;定义）。&lt;/p&gt;
&lt;p&gt;例如，URL &lt;code&gt;https://host.example.com/trust_domain&lt;/code&gt; 是&lt;code&gt;https_spiffe&lt;/code&gt;配置文件类型的有效 SPIFFE bundle 终点 URL。&lt;/p&gt;
&lt;h3 id=&#34;终端参数&#34;&gt;终端参数&lt;/h3&gt;
&lt;p&gt;使用&lt;code&gt;https_spiffe&lt;/code&gt;配置文件的终端终端客户端必须配置终端终端服务器的 SPIFFE ID 以及获取终端终端服务器信任域的信任终端终端的安全方法。&lt;strong&gt;自助终端终端&lt;/strong&gt;是指终端终端服务器的 SPIFFE ID 与获取的终端终端相同信任域中。配置的终端终端终端可能是自助终端终端或非自助终端终端。&lt;/p&gt;
&lt;p&gt;如果终端是自助终端终端，则客户端需要配置一个最新的终端以启动联邦关系。客户端必须支持使用&lt;a href=&#34;https://github.com/spiffe/spiffe/blob/master/standards/SPIFFE_Trust_Domain_and_Bundle.md#4-spiffe-bundle-format&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIFFE Bundle 格式&lt;/a&gt;指定终端，并且可以支持其他格式（例如 PEM），前提是它们提供必要的根证书以验证连接。客户端依赖于此配置的终端进行第一次检索，然后存储检索到的终端以验证后续连接。有关详细信息，请参见下面的使用终端终端。&lt;/p&gt;
&lt;p&gt;如果终端不是自助终端终端，则客户端必须单独为终端服务器的信任域进行配置。可以通过以下任何方式配置终端服务器的信任域和终端终端：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;信任域的终端参数，该参数配置客户端使用终端配置文件根据本文档中所述的终端配置进行终端检索。请注意，客户端可以使用任何可用配置文件，并不限于&lt;code&gt;https_spiffe&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;未定义且超出本文档范围的获取或配置终端终端的过程，无论是自动还是静态。有关如何保护此方法的指导，请参见安全注意事项部分。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Bundle Endpoint URL:		&amp;#34;&amp;lt;https://example.com/global/bundle.json&amp;gt;&amp;#34;
Bundle Endpoint Profile:	&amp;#34;https_spiffe&amp;#34;
Trust Domain:			&amp;#34;example.com&amp;#34;
Endpoint SPIFFE ID:		&amp;#34;spiffe://example.com/spiffe-bundle-server&amp;#34;
Endpoint Trust Bundle:		{example.com bundle contents omitted}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;图 3：使用 SPIFFE 身份验证的&lt;code&gt;example.com&lt;/code&gt;信任域的 SPIFFE 捆绑点端点配置示例。在此示例中，捆绑点端点是自助的，并且配置包括捆绑点端点的 SPIFFE ID 和&lt;code&gt;example.com&lt;/code&gt;的信任捆绑，即此 SPIFFE ID 的信任域。此初始捆绑用于对捆绑点端点进行首次连接的身份验证并验证其 SVID。随后对该捆绑点端点的连接使用最新获取的副本进行身份验证。&lt;/em&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Bundle Endpoint URL:		&amp;#34;&amp;lt;https://example.com/production/bundle.json&amp;gt;&amp;#34;
Bundle Endpoint Profile:	&amp;#34;https_spiffe&amp;#34;
Trust Domain:			&amp;#34;prod.example.com&amp;#34;
Endpoint SPIFFE ID:		&amp;#34;spiffe://example.com/spiffe-bundle-server&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;图 4：使用 SPIFFE 身份验证的&lt;code&gt;prod.example.com&lt;/code&gt;信任域的 SPIFFE 捆绑点端点配置示例。在此示例中，捆绑点端点不是自助的：&lt;code&gt;prod.example.com&lt;/code&gt;的信任捆绑可通过具有 SPIFFE ID &lt;code&gt;spiffe://example.com/spiffe-bundle-server&lt;/code&gt;的&lt;code&gt;example.com&lt;/code&gt;获取。通过上述联邦示例已经获取了用于验证&lt;a href=&#34;http://example.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;example.com&lt;/a&gt;的信任捆绑。&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;提供-bundle-端点-2&#34;&gt;提供 Bundle 端点&lt;/h3&gt;
&lt;p&gt;支持&lt;code&gt;https_spiffe&lt;/code&gt;传输类型的 SPIFFE Bundle 端点服务器使用标准的 TLS 保护的 HTTP（即 HTTPS）。服务器证书必须是有效的 X509-SVID。&lt;/p&gt;
&lt;p&gt;作为互操作性的关注点，服务器不得要求客户端进行身份验证以访问 Bundle 端点；包括传输层（例如客户端证书）和 HTTP 层（例如身份验证头）的身份验证方案。&lt;/p&gt;
&lt;p&gt;在收到正确路径的 HTTP GET 请求后，Bundle 端点服务器必须响应最新版本的可用 SPIFFE Bundle。操作员可以选择确切的路径值，并将其作为 Bundle 端点 URL 的一部分显示。Bundle 端点服务器必须使用 UTF-8 编码传输 Bundle，并应在响应中设置&lt;code&gt;Content-Type&lt;/code&gt;头为&lt;code&gt;application/json&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果用于提供所请求 Bundle 的授权发生了变化，Bundle 端点服务器可以使用 HTTP 重定向（如&lt;a href=&#34;https://tools.ietf.org/html/rfc7231#section-6.4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 7231 第 6.4 节&lt;/a&gt;所定义）。重定向的目标 URL 也必须是此配置文件中定义的有效 Bundle 端点 URL，并且新目标呈现的服务器证书必须是具有与原始端点相同的 SPIFFE ID 的有效 X509-SVID。服务器应使用临时重定向；重定向的支持旨在用于运营考虑（例如通过 CDN 提供 Bundle），而不是作为永久迁移 Bundle 端点 URL 的手段。有关更多信息，请参阅安全注意事项。&lt;/p&gt;
&lt;h3 id=&#34;使用-bundle-终端点&#34;&gt;使用 Bundle 终端点&lt;/h3&gt;
&lt;p&gt;SPIFFE bundle 终端点客户端在与&lt;code&gt;https_spiffe&lt;/code&gt; bundle 终端点交互时使用标准的 TLS 保护的 HTTP（即 HTTPS）。在连接到终端点时，必须验证服务器证书是否是提供的 bundle 终端点 SPIFFE ID 的有效 X509-SVID。有关验证 X509-SVID 的信息，请参阅&lt;a href=&#34;https://github.com/spiffe/spiffe/blob/master/standards/X509-SVID.md#5-validation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIFFE X509-SVID&lt;/a&gt;规范。&lt;/p&gt;
&lt;p&gt;自服务 bundle 终端点是指 bundle 终端点服务器的 SPIFFE ID 与正在获取的 bundle 所属的信任域位于同一信任域中。在首次连接到自服务 bundle 终端点时，客户端使用操作员提供的 SPIFFE bundle（通过 bundle 终端点参数）来验证服务器证书。随后的连接必须使用最新的可用 bundle 来验证。这样可以使外部信任域旋转密钥而不中断联邦关系。&lt;/p&gt;
&lt;p&gt;非自服务 bundle 终端点是指 bundle 终端点服务器的 SPIFFE ID 不位于正在获取的 bundle 所属的信任域中。连接到非自服务终端点时，客户端使用与终端点 SPIFFE ID 的信任域对应的最新可用 SPIFFE bundle，该 bundle 可能是直接配置的，也可能是通过另一个联邦关系获取的。&lt;/p&gt;
&lt;p&gt;在与 bundle 终端点建立 TLS 连接并验证呈现的服务器证书之后，客户端发出终端点 URL 指定的 HTTP GET 请求。响应的正文是一个 SPIFFE bundle。在检索信任 bundle 之前，客户端必须知道终端点 URL 所代表的信任域的名称，最好通过显式配置来获取；有关更多信息，请参阅安全注意事项部分。&lt;/p&gt;
&lt;p&gt;终端点可以使用 HTTP 重定向进行响应（如&lt;a href=&#34;https://tools.ietf.org/html/rfc7231#section-6.4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 7231 第 6.4 节&lt;/a&gt;所定义）。如果 URL 满足有效的 bundle 终端点 URL 的所有要求，则 bundle 终端点客户端应跟随重定向。连接到新 URL 时，必须应用与连接到原始 URL 相同的 TLS 考虑。特别是，必须呈现与最初配置的相同 SPIFFE ID 的有效 X509-SVID。bundle 终端点客户端应该对每个 bundle 刷新使用配置的终端点 URL，并且不应该永久存储用于将来获取的位置。有关更多信息，请参阅安全注意事项。&lt;/p&gt;
&lt;h2 id=&#34;关系生命周期&#34;&gt;关系生命周期&lt;/h2&gt;
&lt;p&gt;本节描述了联邦“关系”的生命周期，包括建立第一个连接、进行持续维护和终止。&lt;/p&gt;
&lt;p&gt;联邦关系是单向的。换句话说，Alice 可以与 Bob 建立关系，但反过来不行。在这种情况下，Alice 能够验证由 Bob 颁发的身份，但 Bob 不知道如何验证由 Alice 颁发的身份。&lt;/p&gt;
&lt;p&gt;为了实现相互身份验证，需要形成两个关系 - 每个方向一个。&lt;/p&gt;
&lt;h3 id=&#34;建立关系&#34;&gt;建立关系&lt;/h3&gt;
&lt;p&gt;如“终端点参数”部分所述，为正确配置联邦关系，所有 bundle 终端点客户端需要至少三个信息：外部信任域名称、其 bundle 终端点 URL 和终端点配置文件。&lt;/p&gt;
&lt;p&gt;bundle 终端点 URL 提供了可以找到外部信任域的 bundle 的地址，而配置文件告知客户端在调用它时应使用哪个协议。配置文件可能需要额外的特定于配置文件的参数。有关如何连接和验证 bundle 终端点的详细信息，请参阅相关的终端点配置文件子部分。&lt;/p&gt;
&lt;p&gt;连接成功建立并接收到 bundle 副本后，将其与其所属的信任域名称一起存储。现在，可以分发 bundle 的内容（例如 CA 证书、JWT 签名密钥等），以验证源自外部信任域的 SVID。&lt;/p&gt;
&lt;p&gt;此分发的确切方式和机制是实现细节，超出了本文档的范围。有关 SPIFFE 感知工作负载如何接收 bundle 更新的更多信息，请参阅&lt;a href=&#34;https://github.com/spiffe/spiffe/blob/master/standards/SPIFFE_Workload_API.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIFFE 工作负载 API&lt;/a&gt;规范。&lt;/p&gt;
&lt;h3 id=&#34;维护关系&#34;&gt;维护关系&lt;/h3&gt;
&lt;p&gt;SPIFFE bundle 终端点客户端应定期轮询 bundle 终端点以获取更新。检测到更新后，存储代表终端点外部信任域的存储的 bundle 将进行更新。然后，将更新的内容分发，以便验证者可以根据需要添加新的密钥并删除撤销的密钥。再次强调，将此更新分发给验证者的确切方法超出了本文档的范围。&lt;/p&gt;
&lt;p&gt;如果轮询 bundle 终端点的尝试失败，bundle 终端点客户端应在下一个轮询间隔重试，而不是立即或强制重试，因为这可能会导致 bundle 终端点服务器过载。如添加和删除密钥部分所讨论的那样，新密钥应足够提前发布，以使错过一两次轮询不会导致跨域身份验证失败。&lt;/p&gt;
&lt;h3 id=&#34;终止关系&#34;&gt;终止关系&lt;/h3&gt;
&lt;p&gt;终止联邦关系就是删除对外信任域的本地副本，停止轮询其信任域终点，并确保验证器也删除了该外部信任域的终点，不再成功验证从该终点呈现的 SVID。&lt;/p&gt;
&lt;p&gt;如果需要重新建立关系，则需要重新开始此生命周期。&lt;/p&gt;
&lt;h3 id=&#34;生命周期图&#34;&gt;生命周期图&lt;/h3&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-生命周期图&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/spiffe_federation_lifecycle.png&#34; alt=&#34;生命周期图&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      生命周期图
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;安全考虑&#34;&gt;安全考虑&lt;/h2&gt;
&lt;p&gt;本节包含与该规范相关的安全信息和观察结果。实施者和用户都应熟悉这些信息。&lt;/p&gt;
&lt;h3 id=&#34;终点参数的分发&#34;&gt;终点参数的分发&lt;/h3&gt;
&lt;p&gt;联邦关系的配置参数，包括信任域名称、终点 URL 和配置文件本身对于篡改是高度敏感的。联邦关系配置的被篡改可能会削弱或完全破坏 SPIFFE 实现所隐含的安全保证。&lt;/p&gt;
&lt;p&gt;以下是一些例子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;篡改信任域名称可以使控制相应终点束端点的一方冒充任意信任域&lt;/li&gt;
&lt;li&gt;篡改终点 URL，特别是与&lt;code&gt;https_web&lt;/code&gt;配置文件结合使用时，攻击者可以发出欺诈性密钥并冒充相应信任域中的任何身份&lt;/li&gt;
&lt;li&gt;篡改终点配置文件可以改变联邦的安全保证，例如用&lt;code&gt;https_spiffe&lt;/code&gt;替换&lt;code&gt;https_web&lt;/code&gt;。如果你的威胁模型包括 Web PKI 的妥协（请另请参阅下面的网络流量拦截部分），则这可能被认为是安全姿态的重大降级。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，控制平面管理员必须谨慎地安全源这些参数并安全地输入它们。终点束配置可以使用各种方法来获取，包括但不限于电子邮件、受 HTTPS 保护的网站、公司内部 wiki 等。无论使用的是哪种特定方法来初始分发终点配置，分发方法都需要抵御在途篡改、未经授权的静止修改以及恶意冒充。例如，电子邮件通常不具备抵御篡改或冒充（即&amp;quot;伪造&amp;quot;电子邮件）的抗性。&lt;/p&gt;
&lt;h3 id=&#34;明确定义的终结点参数&#34;&gt;明确定义的终结点参数&lt;/h3&gt;
&lt;p&gt;每个 SPIFFE 联邦关系至少配置以下参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;信任域名&lt;/li&gt;
&lt;li&gt;终结点 URL&lt;/li&gt;
&lt;li&gt;终结点配置文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;重要的是这三个参数要明确配置，不能从彼此中安全地推断出值。&lt;/p&gt;
&lt;p&gt;例如，人们可能会试图从终结点 URL 的主机部分推断出 SPIFFE 信任域名。这是危险的，因为它可能允许任何可以从特定 DNS 名称提供文件的人断言同名 SPIFFE 信任域的信任根。&lt;/p&gt;
&lt;p&gt;想象一个名为 MyPage（&lt;code&gt;mypage.example.com&lt;/code&gt;）的网络托管公司，它允许客户 Alice 在&lt;code&gt;https://mypage.example.com/alice/&amp;lt;filename&amp;gt;&lt;/code&gt;这样的 URL 上提供网络内容，并且 MyPage 还通过 SPIFFE 联邦与 SPIFFE 信任域名&lt;code&gt;mypage.example.com&lt;/code&gt;运行 API。假设 Alice 与 Bob 建立了 SPIFFE 联邦关系，Bob 也是 MyPage 的客户，Alice 选择从&lt;code&gt;https://mypage.example.com/alice/spiffe-bundle&lt;/code&gt;提供她的信任捆绑包。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-5说明-alicebob-和-mypage-之间关系的图表&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/spiffe_federation_mypage_example.png&#34; alt=&#34;图 5：说明 Alice、Bob 和 MyPage 之间关系的图表。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 5：说明 Alice、Bob 和 MyPage 之间关系的图表。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;如果 Bob 的控制平面从 URL 中隐式获取信任域名，这将允许 Alice 冒充信任域&lt;code&gt;mypage.example.com&lt;/code&gt;！还值得强调的是，SPIFFE 信任域名不一定是已注册的 DNS 名称，这通常使得这种假设本来就是错误的。在这个例子中，Alice 的信任域名只是&lt;code&gt;alice&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;终结点配置文件也不能从 URL 中安全地推断出。&lt;code&gt;https_web&lt;/code&gt;和&lt;code&gt;https_spiffe&lt;/code&gt;都使用具有相同要求的普通 HTTPS URL。没有安全的方法来区分它们。尝试使用&lt;code&gt;https_web&lt;/code&gt;并回退到&lt;code&gt;https_spiffe&lt;/code&gt;，或者反过来，是不充分的，原因与上述类似：从安全的角度来看，能够在特定的 HTTPS 终结点上托管使用 Web PKI 的文件与能够使用有效的 SPIFFE SVID 托管它是不等价的。&lt;/p&gt;
&lt;h3 id=&#34;保持-信任域名-捆绑包-的绑定&#34;&gt;保持 &lt;code&gt;&amp;lt;信任域名, 捆绑包&amp;gt;&lt;/code&gt; 的绑定&lt;/h3&gt;
&lt;p&gt;在对 SVID 进行身份验证时，验证者必须仅使用与 SPIFFE ID 所属的信任域名相对应的捆绑包。如果我们简单地将所有的捆绑包汇集起来，并且只要某个捆绑包对某个捆绑包有效，就接受一个 SVID，那么信任域之间就可以轻易地冒充对方的身份。换句话说，捆绑包是针对特定信任域的。&lt;/p&gt;
&lt;p&gt;由于捆绑包在信任域和发行捆绑包的终结点之间没有自我描述的特性，且自我发布，因此在存储和传播捆绑包时，需要将 SPIFFE 联邦关系的信任域名和捆绑包终结点之间的绑定转化为信任域名和捆绑包之间的绑定。这要求不同于传统的 Web PKI，传统的 Web PKI 使用单个根证书存储来验证所有证书，而不管实际发行验证的 CA 系统是哪个。&lt;/p&gt;
&lt;h3 id=&#34;捆绑包终结点服务器的可信性&#34;&gt;捆绑包终结点服务器的可信性&lt;/h3&gt;
&lt;p&gt;捆绑包终结点服务器的可信性和完整性对于确保捆绑包所代表的信任域的安全性至关重要。这不仅包括捆绑包终结点服务器本身，还包括其运行的平台以及对其或其平台具有管理控制权的任何实体。&lt;/p&gt;
&lt;p&gt;虽然这个事实可能看起来是不言自明的，但也有一些情况可能没有那么明显。例如，在非自服务捆绑包终结点的情况下，信任域 A 为信任域 B 提供捆绑包，信任域 B 隐式地信任信任域 A 及其管理员提供正确的捆绑包内容。类似地，如果从像 AWS S3 这样的托管平台提供捆绑包，那么代表涉及捆绑包的信任域的运营者隐式地信任 AWS 提供正确的捆绑包内容。&lt;/p&gt;
&lt;p&gt;在选择将提供 SPIFFE 捆绑包的位置时，重要的是考虑涉及的各方的可信性。&lt;/p&gt;
&lt;h3 id=&#34;捆绑包终结点的真实性&#34;&gt;捆绑包终结点的真实性&lt;/h3&gt;
&lt;p&gt;确保捆绑包终结点的真实性至关重要。这一点无法过于强调。本节探讨了确保捆绑包终结点真实性的一些考虑因素。&lt;/p&gt;
&lt;h3 id=&#34;捆绑包终结点-url-重定向&#34;&gt;捆绑包终结点 URL 重定向&lt;/h3&gt;
&lt;p&gt;URL 重定向有两种变体：临时重定向和永久重定向。该规范通过 SHOULD 指示建议服务器只发送临时重定向，并且客户端应将所有重定向视为临时重定向，即使服务器将其标记为永久重定向。&lt;/p&gt;
&lt;p&gt;如果客户端遵循永久重定向，那么永久重定向代表了终结点 URL 配置参数的带内自动重写。这会导致两个相关的安全风险。&lt;/p&gt;
&lt;p&gt;首先，信任域操作员可能会试图使用永久重定向作为迁移终结点 URL 的方法。然而，没有可靠的方法来确保所有客户端都已处理了重定向，并且没有办法确保它们将永久地遵守重定向（例如，通过重启、升级、重新部署等）。如果终结点 URL 转移所有权并且客户端继续从原始终结点 URL 获取捆绑包，那么这些客户端可能会检索到由意外所有者控制的捆绑包。这在使用基于 Web PKI 的方案（如&lt;code&gt;https_web&lt;/code&gt;）时尤其令人担忧，因为新域所有者有权获得公开受信任的与其相关的证书。因此，最安全的做法是选择具有长期稳定性的捆绑包终结点 URL。如果绝对需要 URL 迁移，最好使用首次获取捆绑包终结点配置的外带方法来处理，同时提前公布长期的迁移窗口。&lt;/p&gt;
&lt;p&gt;其次，永久重定向可能被滥用为将短暂的妥协升级为更持久的妥协的机制。由于重定向是自动的，捆绑包终结点客户端操作员可能会忽略这个重定向。&lt;/p&gt;
&lt;p&gt;临时重定向通常由 Web 主机用于操作目的：例如，允许在接收方附近的节点上提供全球稳定的 URL。禁止在 SPIFFE 联邦中使用重定向将从操作员的工具包中删除一个有用的工具。但是，临时重定向确实有安全考虑因素。并非所有的 Web 主机在其安全态势方面都是等价的，这意味着如果发生重定向，操作员可能无法获得预期的安全保证。本规范中对客户端“应该”遵循重定向的建议应该被解释为推荐的默认值：在操作价值和安全价值之间的平衡。依赖 SPIFFE 联邦捆绑包终结点的操作员可能希望禁用重定向，以避免出现意外情况。&lt;/p&gt;
&lt;h3 id=&#34;网络流量拦截&#34;&gt;网络流量拦截&lt;/h3&gt;
&lt;p&gt;虽然所有 SPIFFE 捆绑包终结点配置文件都使用的协议在很大程度上不受网络流量拦截和操纵的风险影响，但重要的是要注意，这并不一定意味着用于发放协议凭证的方案也不受影响。如果 SPIFFE 作为“零信任”解决方案的一部分部署，或者如果操作者的威胁模型中包括网络妥协，则必须特别关注用于发放捆绑包终结点服务器凭证的机制。&lt;/p&gt;
&lt;p&gt;常见的服务器凭证发放方法是通过使用挑战 - 响应机制，其中凭证请求的授权是基于请求者能够回答发送到特定网络地址或 DNS 名称的挑战。ACME 协议就是一个例子，如果希望使用公共证书颁发机构，则应考虑补偿控制措施。特别需要注意的是捆绑包终结点服务器所在的二层网络的安全性。&lt;/p&gt;
&lt;p&gt;最后，应指出，ACME 和公共证书颁发机构基础设施在历史上一直是稳定和可靠的。本节所描述的关注点是几十年的问题，然而，作为一种用于缓解对网络或 DNS 中信任的方式采用 SPIFFE 的操作者可能会发现这种行为令人惊讶。&lt;/p&gt;
&lt;h3 id=&#34;终结点参数&#34;&gt;终结点参数&lt;/h3&gt;
&lt;p&gt;破坏捆绑包终结点的一种方法是篡改终结点参数，无论是在传输中还是在终结点的客户端中以休息形式。修改其他方面真实的终结点参数可能导致降级的安全态势，甚至导致客户端与完全不同的终结点进行通信。请参阅终结点参数的分发部分以获取更多信息。&lt;/p&gt;
&lt;h3 id=&#34;使用-https_spiffe-进行信任链接&#34;&gt;使用 &lt;code&gt;https_spiffe&lt;/code&gt; 进行信任链接&lt;/h3&gt;
&lt;p&gt;在使用 SPIFFE 身份验证时，可以通过验证提供的 X509-SVID 来建立信任捆绑服务器的真实性，客户端可以通过各种方式获取到该信任捆绑。例如，信任域 A 的捆绑可以由信任域 B 中的一个端点提供，而信任域 B 的捆绑可以由信任域 C 中的一个端点提供，依此类推。&lt;/p&gt;
&lt;p&gt;通过这种方式，获取的捆绑通过链式关系与提供捆绑的信任域之间建立了信任。该链式关系最终会终止于以下几种情况之一：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过与自服务信任域的联邦关系&lt;/li&gt;
&lt;li&gt;通过与由 Web PKI 提供的捆绑端点的联邦关系&lt;/li&gt;
&lt;li&gt;在长期静态配置的信任捆绑中&lt;/li&gt;
&lt;li&gt;在本文档范围之外的某个过程中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;正如在 Bundle 端点服务器的可信性一节中所描述的那样，重要的是要理解该方案的安全性取决于链中的每个信任域能够履行其安全保证。链中信任域或捆绑端点服务器的妥协将导致“下一个”信任域的妥协。具有足够强大的网络拦截能力的攻击者可能会以某种方式升级此攻击，以导致链中后续的信任域可能被妥协。因此，通常不鼓励以这种方式形成长链。如果需要，管理员应花时间分析这些链，以确保所有参与的信任域符合其所需的标准。&lt;/p&gt;
&lt;p&gt;最后，应注意到该链中的“链接”是由各个 HTTPS 请求操作（针对链中不同的捆绑端点服务器）形成的，并且这些操作可能在不同的时间发生。SPIFFE 捆绑端点客户端应记录这些 HTTPS 请求操作，并且管理员应注意保留这些日志以备将来进行法医分析（如果有必要）。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>设计一个 SPIRE 部署</title>
      <link>https://lib.jimmysong.io/spiffe/designing-a-spire-deployment/</link>
      <pubDate>Fri, 07 Oct 2022 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/spiffe/designing-a-spire-deployment/</guid>
      <description>&lt;p&gt;读者将了解到 SPIRE 部署的组成部分，有哪些部署模式，以及在部署 SPIRE 时需要考虑哪些性能和安全问题。&lt;/p&gt;
&lt;p&gt;你的 SPIRE 部署的设计应满足你的团队和组织的技术要求。它还应包括支持可用性、可靠性、安全性、可扩展性和性能的要求。该设计将作为你的部署活动的基础。&lt;/p&gt;
&lt;h2 id=&#34;身份命名方案&#34;&gt;身份命名方案&lt;/h2&gt;
&lt;p&gt;请记住，在前面的章节中，SPIFFE ID 是一个结构化的字符串，代表一个工作负载的身份名称，正如你在第四章中看到的那样。工作负载标识符部分（URI 的路径部分）附加在信任域名（URI 的主机部分）上，可以组成关于服务所有权的含义，以表示它在什么平台上运行，谁拥有它，它的预期目的，或其他惯例。它是特意为你定义的灵活和可定制的。&lt;/p&gt;
&lt;p&gt;你的命名方案可能是分层的，就像文件系统的路径。也就是说，为了减少歧义，命名方案不应该以尾部的正斜杠（&lt;code&gt;/&lt;/code&gt;）结束。下面你将看到一些不同的样例，它们遵循三种不同的约定，你可以遵循，或者如果你感到特别有灵感，也可以想出你自己的。&lt;/p&gt;
&lt;h3 id=&#34;直接命名服务&#34;&gt;直接命名服务&lt;/h3&gt;
&lt;p&gt;你可能会发现，作为软件开发生命周期的一部分，直接通过它从应用角度呈现的功能和它运行的环境来识别一个服务是很有用的。例如，管理员可能会规定，在特定环境中运行的任何进程都应该能够以特定身份出现。比如说。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; spiffe://staging.example.com/payments/mysql
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;或&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; spiffe://staging.example.com/payments/web-fe
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面的两个 SPIFFE ID 指的是两个不同的组件 ——MySQL 数据库服务和一个 Web 前端 —— 在 staging 环境中运行的支付服务。&lt;code&gt;staging&lt;/code&gt; 的意思是一个环境，&lt;code&gt;payment&lt;/code&gt; 是一个高级服务。&lt;/p&gt;
&lt;p&gt;前面两个例子和下面两个例子是说明性的，不是规定性的。实施者应该权衡自己的选择，决定自己喜欢的行动方案。&lt;/p&gt;
&lt;h3 id=&#34;识别服务所有者&#34;&gt;识别服务所有者&lt;/h3&gt;
&lt;p&gt;通常更高级别的编排器和平台都有自己的内置身份概念（如 Kubernetes 服务账户，或 AWS/GCP 服务账户），能够直接将 SPIFFE 身份映射到这些身份是有帮助的。比如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;spiffe://k8s-workload-cluster.example.com/ns/staging/sa/default
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在这个例子中，信任域 &lt;code&gt;example.com&lt;/code&gt; 的管理员正在运行一个 Kubernetes 集群 &lt;code&gt;k8s-workload-cluster.example.com&lt;/code&gt;，它有一个 &lt;code&gt;staging&lt;/code&gt; 命名空间，在这个命名空间中，有一个名为 &lt;code&gt;default&lt;/code&gt; 的服务账户（SA）。&lt;/p&gt;
&lt;h3 id=&#34;不透明的-spiffe-身份&#34;&gt;不透明的 SPIFFE 身份&lt;/h3&gt;
&lt;p&gt;SPIFFE 路径可能是不透明的，然后元数据可以被保存在一个二级数据库中。这可以被查询以检索与 SPIFFE 标识符相关的任何元数据。比如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; spiffe://example.com/9eebccd2-12bf-40a6-b262-65fe0487d4
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;spire-的部署模式&#34;&gt;SPIRE 的部署模式&lt;/h2&gt;
&lt;p&gt;我们将概述在生产中运行 SPIRE 的三种最常见的方式。这并不意味着我们要在这里限制可用的选择，但为了本书的目的，我们将把范围限制在这些部署 SPIRE 服务器的常见方式上。我们将只关注服务器的部署架构，因为每个节点通常安装一个代理。&lt;/p&gt;
&lt;h3 id=&#34;数量大信任域与小信任域的对比&#34;&gt;数量：大信任域与小信任域的对比&lt;/h3&gt;
&lt;p&gt;信任域的数量预计是相对固定的，只是偶尔重访，而且预计不会随时间漂移太多。另一方面，一个给定的信任域中的节点数量和工作负载的数量，预计会根据负载和增长而频繁波动。&lt;/p&gt;
&lt;p&gt;选择集中到一个大的信任域的单一信任根，还是分布和隔离到多个信任域，将由许多因素决定。本章的安全考虑部分谈到了使用信任域进行隔离的问题。还有一些原因，你可以选择多个小的信任域而不是一个大的信任域，包括增加可用性和租户的隔离。管理域边界、工作负载数量、可用性要求、云供应商数量和认证要求等变量也会影响这里的决策。&lt;/p&gt;
&lt;p&gt;例如，你可以选择为每一个行政边界设置一个单独的信任域，以便在组织中可能有不同开发实践的不同小组之间进行自治。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;类别&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;单信任域&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;嵌套&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;联合&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;部署规模&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;大&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;非常大&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;大&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;多区域&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;否&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;是&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;多云&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;否&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;是&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;表 6.1: 信任域大小的决策表&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一对一：单信任域中的单一 SPIRE 集群&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;单一的 SPIRE 服务器，在高可用性的配置下，是单一信任域环境的最佳起点。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-61-单一信任域&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f6-1.jpg&#34; alt=&#34;图 6.1: 单一信任域。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 6.1: 单一信任域。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;然而，当将单个 SPIRE 服务器部署到跨越区域、平台和云提供商环境的信任域时，当 SPIRE 代理依赖于远处的 SPIRE 服务器时，会出现潜在的扩展问题。在单个部署将跨越多个环境的情况下，解决在单个信任域上使用共享数据存储的解决方案是将 SPIRE 服务器配置为嵌套拓扑结构。&lt;/p&gt;
&lt;h3 id=&#34;嵌套式-spire&#34;&gt;嵌套式 SPIRE&lt;/h3&gt;
&lt;p&gt;SPIRE 服务器的嵌套拓扑结构可使您尽可能保持 SPIRE 代理和 SPIRE 服务器之间的通信。&lt;/p&gt;
&lt;p&gt;在这种配置中，顶级 SPIRE 服务器持有根证书和密钥，而下游服务器请求中间签名证书，作为下游服务器的 X.509 签名授权。如果顶层发生故障，中间服务器继续运行，为拓扑结构提供弹性。&lt;/p&gt;
&lt;p&gt;嵌套拓扑结构很适合多云部署。由于能够混合和匹配节点验证器，下游服务器可以在不同的云提供商环境中驻留并为工作负载和代理提供身份。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-62嵌套式-spire-拓扑结构&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f6-2.jpg&#34; alt=&#34;图 6.2：嵌套式 SPIRE 拓扑结构。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 6.2：嵌套式 SPIRE 拓扑结构。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;虽然嵌套式 SPIRE 是提高 SPIRE 部署的灵活性和可扩展性的理想方式，但它并不提供任何额外的安全性。由于 X.509 没有提供任何方法来限制中间证书颁发机构的权力，每个 SPIRE 服务器可以生成任何证书。即使你的上游证书颁发机构是你公司地下室混凝土掩体中的加固服务器，如果你的 SPIRE 服务器被破坏，你的整个网络可能会受到影响。这就是为什么必须确保每台 SPIRE 服务器都是安全的。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-63具有一个上游-spire-服务器和两个嵌套-spire-服务器的公司架构说明两个嵌套的-spire-服务器中的每一个都可以有自己的配置与-aws-和-azure-有关如果其中任何一个出现故障另一个就不会受到影响&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f6-3.jpg&#34; alt=&#34;图 6.3：具有一个上游 SPIRE 服务器和两个嵌套 SPIRE 服务器的公司架构说明。两个嵌套的 SPIRE 服务器中的每一个都可以有自己的配置（与 AWS 和 Azure 有关），如果其中任何一个出现故障，另一个就不会受到影响。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 6.3：具有一个上游 SPIRE 服务器和两个嵌套 SPIRE 服务器的公司架构说明。两个嵌套的 SPIRE 服务器中的每一个都可以有自己的配置（与 AWS 和 Azure 有关），如果其中任何一个出现故障，另一个就不会受到影响。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;spire-联邦&#34;&gt;SPIRE 联邦&lt;/h3&gt;
&lt;p&gt;部署可能需要多个信任根基，也许是因为一个组织有不同的组织部门，有不同的管理员，或者因为他们有独立的暂存和生产环境，偶尔需要沟通。&lt;/p&gt;
&lt;p&gt;另一个用例是组织之间的 SPIFFE 互操作性，如云供应商和其客户之间。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-64使用联邦信任域的-spire-服务器&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f6-4.jpg&#34; alt=&#34;图 6.4：使用联邦信任域的 SPIRE 服务器。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 6.4：使用联邦信任域的 SPIRE 服务器。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;这些多个信任域和互操作性用例都需要一个定义明确、可互操作的方法，以便一个信任域中的工作负载能够认证不同信任域中的工作负载。在联合 SPIRE 中，不同信任域之间的信任是通过首先认证各自的捆绑端点，然后通过认证的端点检索外部信任域的捆绑来建立的。&lt;/p&gt;
&lt;h3 id=&#34;独立的-spire-服务器&#34;&gt;独立的 SPIRE 服务器&lt;/h3&gt;
&lt;p&gt;运行 SPIRE 的最简单方法是在专用服务器上，特别是如果有一个单一的信任域，而且工作负载的数量不大。在这种情况下，你可以在同一节点上共同托管一个数据存储，使用 SQLite 或 MySQL 作为数据库，简化部署。然而，当使用共同托管的部署模式时，记得要考虑数据库的复制或备份。如果你失去了节点，你可以迅速在另一个节点上运行 SPIRE 服务器，但如果你失去了数据库，你的所有代理和工作负载都需要重新测试以获得新的身份。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-65-单个专用的-spire-服务器&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f6-5.jpg&#34; alt=&#34;图 6.5: 单个专用的 SPIRE 服务器。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 6.5: 单个专用的 SPIRE 服务器。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;避免单点故障&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;保持简单有利也有弊。如果只有一台 SPIRE 服务器，而它丢失了，一切都会丢失，需要重建。拥有一个以上的服务器可以提高系统的可用性。仍然会有一个共享的数据存储和安全连接及数据复制。我们将在本章后面讨论这种决定的不同安全影响。&lt;/p&gt;
&lt;p&gt;要横向扩展 SPIRE 服务器，请将同一信任域中的所有服务器配置为对同一共享数据存储进行读和写。&lt;/p&gt;
&lt;p&gt;数据存储是 SPIRE 服务器保存动态配置信息的地方，如注册条目和身份映射策略。SQLite 与 SPIRE 服务器捆绑在一起，是默认的数据存储。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-66-多个-spire-服务器实例在-ha-上运行&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f6-6.jpg&#34; alt=&#34;图 6.6: 多个 SPIRE 服务器实例在 HA 上运行。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 6.6: 多个 SPIRE 服务器实例在 HA 上运行。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;数据存储建模&#34;&gt;数据存储建模&lt;/h2&gt;
&lt;p&gt;在进行数据存储设计时，你的首要关注点应该是冗余和高可用性。你需要确定每个 SPIRE 服务器集群是否有一个专用的数据存储，或者是否应该有一个共享的数据存储。&lt;/p&gt;
&lt;p&gt;数据库类型的选择可能受到整个系统可用性要求和你的运营团队能力的影响。例如，如果运维团队有支持和扩展 MySQL 的经验，这应该是首要选择。&lt;/p&gt;
&lt;h3 id=&#34;每个集群的专用数据存储&#34;&gt;每个集群的专用数据存储&lt;/h3&gt;
&lt;p&gt;多个数据存储允许系统的每个专用部分更独立。例如，AWS 和 GCP 云中的 SPIRE 集群可能有独立的数据存储，或者 AWS 中的每个 VPC 可能有一个专用数据存储。这种选择的好处是，如果一个地区或云提供商发生故障，在其他地区或云提供商中运行的 SPIRE 部署就不会受到影响。&lt;/p&gt;
&lt;p&gt;在发生重大故障时，每个集群的数据存储的缺点变得最为明显。如果一个地区的 SPIRE 数据存储（以及所有的 SPIRE 服务器）发生故障，就需要恢复本地数据存储，或者将代理切换到同一信任域的另一个 SPIRE 服务器集群上，假设信任域是跨区域的。&lt;/p&gt;
&lt;p&gt;如果有必要将代理切换到一个新的集群，必须特别考虑，因为新的集群将不知道另一个 SPIRE 集群发出的身份，或该集群包含的注册条目。代理将需要对这个新集群进行重新认证，并且需要通过备份或重建来恢复注册条目。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-67-如果你需要将一个集群中的所有代理迁移到另一个集群会发生什么&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f6-7.jpg&#34; alt=&#34;图 6.7: 如果你需要将一个集群中的所有代理迁移到另一个集群，会发生什么？&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 6.7: 如果你需要将一个集群中的所有代理迁移到另一个集群，会发生什么？
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;共享的数据存储&#34;&gt;共享的数据存储&lt;/h3&gt;
&lt;p&gt;拥有一个共享的数据存储可以解决上述拥有单独数据存储的问题。然而，它可能会使设计和操作更加复杂，并依赖其他系统来检测故障，并在发生故障时更新 DNS 记录。此外，该设计仍然需要为每个 SPIRE 可用域、每个区域或数据中心的数据库基础设施的碎片，这取决于具体的基础设施。请查看 &lt;a href=&#34;https://github.com/spiffe/spire/blob/master/doc/plugin_server_datastore_sql.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 文档&lt;/a&gt;以了解更多细节。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-68使用全局数据存储方案的两个集群&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f6-8.jpg&#34; alt=&#34;图 6.8：使用全局数据存储方案的两个集群。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 6.8：使用全局数据存储方案的两个集群。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;管理失败&#34;&gt;管理失败&lt;/h2&gt;
&lt;p&gt;当基础设施发生故障时，主要的问题是如何继续向需要 SVID 才能正常运行的工作负载发放 SVID。SPIRE 代理的 SVID 内存缓存被设计为应对短期宕机的主要防线。&lt;/p&gt;
&lt;p&gt;SPIRE 代理定期从 SPIRE 服务器获取授权发布的 SVID，以便在工作负载需要时将其交付给它们。这个过程是在工作负载请求 SVID 之前完成的。&lt;/p&gt;
&lt;h3 id=&#34;性能和可靠性&#34;&gt;性能和可靠性&lt;/h3&gt;
&lt;p&gt;SVID 缓存有两个优点：性能和可靠性。当工作负载要求获得其 SVID 时，代理不需要请求和等待 SPIRE 服务器提供 SVID，因为它已经有了缓存，这就避免了到 SPIRE 服务器的往返代价。此外，如果 SPIRE 服务器在工作负载请求其 SVID 时不可用，也不会影响 SVID 的发放，因为代理已经将其缓存起来了。&lt;/p&gt;
&lt;p&gt;我们需要对 X509-SVID 和 JWT-SVID 进行区分。JWT-SVID 不能提前构建，因为代理不知道工作负载所需的 JWT-SVID 的具体受众，代理只预先缓存 X509-SVID。然而，SPIRE 代理确实维护着已发布的 JWT-SVID 的缓存，只要缓存的 JWT-SVID 仍然有效，它就可以向工作负载发布 JWT-SVID，而无需与 SPIRE 服务器联系。&lt;/p&gt;
&lt;h3 id=&#34;存活时间&#34;&gt;存活时间&lt;/h3&gt;
&lt;p&gt;SVID 的一个重要属性是其存活时间（TTL）。如果一个 SVID 的剩余寿命小于 TTL 的一半，SPIRE 代理将更新缓存中的 SVID。这向我们表明，SPIRE 在对底层基础设施能够提供 SVID 的信心方面是保守的。它还提供了一个暗示，即 SVID TTL 在抵御中断方面的作用。较长的 TTL 可以提供更多的时间来修复和恢复任何基础设施的中断，但是在选择 TTL 的时候，需要在安全性和可用性之间做出妥协。长的 TTL 将提供充足的时间来修复故障，但代价是在较长的时间内暴露 SVID（及相关密钥）。较短的 TTL 可以减少恶意行为者利用被破坏的 SVID 的时间窗口，但需要更快地对故障作出反应。不幸的是，没有什么 &amp;ldquo;神奇&amp;rdquo; 的 TTL 可以成为所有部署的最佳选择。在选择 TTL 时，必须考虑在必须解决中断问题的时间窗口和已发布的 SVID 的可接受曝光度之间，你愿意接受什么样的权衡。&lt;/p&gt;
&lt;h2 id=&#34;kubernetes-中的-spire&#34;&gt;Kubernetes 中的 SPIRE&lt;/h2&gt;
&lt;p&gt;本节介绍了在 Kubernetes 中运行 SPIRE 的细节。Kubernetes 是一个容器编排器，可以在许多不同的云供应商上管理软件部署和可用性，也可以在物理硬件上管理。SPIRE 包括几种不同形式的 Kubernetes 集成。&lt;/p&gt;
&lt;h3 id=&#34;kubernetes-中的-spire-代理&#34;&gt;Kubernetes 中的 SPIRE 代理&lt;/h3&gt;
&lt;p&gt;Kubernetes 包括 DaemonSet 的概念，这是一个自动部署在所有节点上的容器，每个节点有一个副本运行。这是运行 SPIRE 代理的一种完美方式，因为每个节点必须有一个代理。&lt;/p&gt;
&lt;p&gt;随着新的 Kubernetes 节点上线，调度器将自动轮换 SPIRE 代理的新副本。首先，每个代理需要一份引导信任包的副本。最简单的方法是通过 Kubernetes ConfigMap 来分发。&lt;/p&gt;
&lt;p&gt;一旦代理拥有启动信任包，它就必须向服务器证明自己的身份。Kubernetes 提供两种类型的认证令牌：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;服务账户令牌（SAT）&lt;/li&gt;
&lt;li&gt;预计服务账户令牌（PSAT）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;服务账户令牌的安全性并不理想，因为它们永远有效，而且范围无限。预测的服务账户令牌要安全得多，但它们确实需要最新版本的 Kubernetes 和一个特殊的功能标志才能启用。SPIRE 支持用于节点证明的 SAT 和 PSAT。&lt;/p&gt;
&lt;h3 id=&#34;kubernetes-中的-spire-服务器&#34;&gt;Kubernetes 中的 SPIRE 服务器&lt;/h3&gt;
&lt;p&gt;SPIRE 服务器以两种方式与 Kubernetes 交互。首先，每当它的信任包发生变化时，它必须将信任包发布到 Kubernetes ConfigMap。其次，当代理上线时，它必须使用 &lt;code&gt;TokenReview&lt;/code&gt; API 验证其 SAT 或 PSAT 令牌。这两者都是通过 SPIRE 插件配置的，需要相关的 Kubernetes API 权限。&lt;/p&gt;
&lt;p&gt;SPIRE 服务器可以完全在 Kubernetes 中运行，与工作负载一起。然而，为了安全起见，最好是在一个单独的 Kubernetes 集群上运行，或独立的硬件。这样一来，如果主集群被破坏，SPIRE 的私钥就不会有风险。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-69spire-服务器与工作负载在同一集群上&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f6-9.jpg&#34; alt=&#34;图 6.9：SPIRE 服务器与工作负载在同一集群上。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 6.9：SPIRE 服务器与工作负载在同一集群上。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-610为了安全起见spire-服务器在一个单独的集群上&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f6-10.jpg&#34; alt=&#34;图 6.10：为了安全起见，SPIRE 服务器在一个单独的集群上。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 6.10：为了安全起见，SPIRE 服务器在一个单独的集群上。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;kubernetes-工作负载证明&#34;&gt;Kubernetes 工作负载证明&lt;/h3&gt;
&lt;p&gt;SPIRE 代理包括一个 Kubernetes 工作负载验证器插件。该插件首先使用系统调用来识别工作负载的 PID。然后，它使用对 Kubelet 的本地调用来识别工作负载的 pod 名称、镜像和其他特征。这些特征可以作为注册条目的选择器。&lt;/p&gt;
&lt;h3 id=&#34;kubernetes-负载条目自动注册&#34;&gt;Kubernetes 负载条目自动注册&lt;/h3&gt;
&lt;p&gt;一个名为 Kubernetes Workload Registrar 的 SPIRE 扩展可以自动创建节点和工作负载注册条目，充当 Kubernetes API 服务器和 SPIRE 服务器之间的桥梁。它支持几种不同的方法来识别正在运行的 pod，并在创建条目方面具有一定的灵活性。&lt;/p&gt;
&lt;h3 id=&#34;增加-sidecar&#34;&gt;增加 Sidecar&lt;/h3&gt;
&lt;p&gt;对于尚未适应使用工作负载 API 的工作负载（见第 7 章：与其他机构的集成中的本地 SPIFFE 支持一节），Kubernetes 可以很容易地添加支持的 sidecar。Sidecar 可以是一个 SPIFFE 感知的代理，比如 Envoy。或者，它可以是一个与 SPIRE 一起开发的 sidecar，名为“SPIFFE Helper&amp;quot;，它监控工作负载 API，并在其 SVID 发生变化时重新配置工作负载。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-611与-sidecar-容器一起部署的-kubernetes-集群中的工作负载&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f6-11.jpg&#34; alt=&#34;图 6.11：与 sidecar 容器一起部署的 Kubernetes 集群中的工作负载。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 6.11：与 sidecar 容器一起部署的 Kubernetes 集群中的工作负载。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;spire-的性能考虑因素&#34;&gt;SPIRE 的性能考虑因素&lt;/h2&gt;
&lt;p&gt;当连接到服务器的 SPIRE 代理数量增加时，也会给服务器、数据存储和网络本身带来更多的负荷。多个因素都会造成负载，包括节点数量和每个节点的工作负载，以及你轮换秘钥的频率。使用 JWT-SVID 与嵌套的 SPIRE 模型，公钥需要保持同步，这将增加代理和服务器之间需要传输的信息量。&lt;/p&gt;
&lt;p&gt;我们不想对每个代理的工作负载数量或每个服务器的代理数量提出具体的性能要求或建议，因为所有的数据 a）取决于硬件和网络特性，b）变化很快。仅举一例，最新的一个版本将数据的性能提高了 30%。&lt;/p&gt;
&lt;p&gt;正如你在前几章中所了解的，SPIRE 代理不断与服务器进行通信，以获得任何新的变化，如新工作负载的 SVID 或信任包的更新。在每次同步过程中，会有多个数据存储操作。默认情况下，同步时间为 5 秒，如果这对你的系统产生了太多的压力，你可以把它增加到一个更高的值来解决这些问题。&lt;/p&gt;
&lt;p&gt;非常短的 SVID TTL 可以减轻安全风险，但如果你使用非常短的 TTL，要准备好看到你的 SPIRE 服务器的额外负载，因为签名操作的数量与轮换频率成比例增加。&lt;/p&gt;
&lt;p&gt;另一个影响系统性能的关键因素可能是每个节点的工作负载数量。如果你在系统中的所有节点上增加一个新的工作负载，这将突然产生一个峰值，并对整个系统产生负荷。&lt;/p&gt;
&lt;p&gt;如果您的系统严重依赖 JWT-SVID 的使用，请记住，JWT-SVID 不是在代理端预先生成的，需要按要求进行签名。这可能会给 SPIRE 服务器和代理带来额外的负载，并在它们过载时增加延迟。&lt;/p&gt;
&lt;h2 id=&#34;验证器插件&#34;&gt;验证器插件&lt;/h2&gt;
&lt;p&gt;SPIRE 为节点和工作负载认证提供了各种验证器插件。选择使用哪种验证器插件取决于对认证的要求，以及底层基础设施 / 平台提供的可用支持。&lt;/p&gt;
&lt;p&gt;对于工作负载证明，这主要取决于被编排的工作负载的类型。例如，当使用 Kubernetes 集群时，Kubernetes 工作负载验证器将是合适的，同样，OpenStack 平台的 OpenStack 验证器也是如此。&lt;/p&gt;
&lt;p&gt;对于节点认证来说，确定安全和合规的要求是很重要的。有时需要执行工作负载的地理围栏。在这些情况下，使用来自云提供商的节点验证器，可以断言，将提供这些保证。&lt;/p&gt;
&lt;p&gt;在高度管制的行业，可能需要使用基于硬件的认证。这些机制通常依赖于底层基础设施提供支持，如 API 或像可信平台模块（TPM）的硬件模块。这可能包括对系统软件状态的测量，包括固件、内核版本、内核模块，甚至文件系统的内容。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为不同的云平台设计证明&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在云环境中工作时，根据云提供商提供的元数据验证您的节点身份被认为是一种最佳做法。SPIRE 提供了一种简单的方法，通过专门为您的云设计的自定义节点验证器来实现这一点。大多数云提供商分配了一个 API，可以用来识别 API 调用者。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-612节点验证器的结构和流程&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f6-12.jpg&#34; alt=&#34;图 6.12：节点验证器的结构和流程。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 6.12：节点验证器的结构和流程。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;节点验证器和解析器可用于亚马逊网络服务（AWS）、Azure 和谷歌云平台（GCP）。云环境的节点验证器是特定于该云的。验证器的目的是在向运行在该节点上的 SPIRE 代理发布身份信息之前对节点进行验证。&lt;/p&gt;
&lt;p&gt;一旦建立了一个身份，SPIRE 服务器可能会安装一个 Resolver 插件，允许创建额外的选择器，与节点的元数据相匹配。可用的元数据是针对云的。&lt;/p&gt;
&lt;p&gt;在相反的范围内，如果云提供商不提供验明节点的能力，就有可能用加入令牌进行引导。然而，这提供了一套非常有限的保证，这取决于通过什么程序完成。&lt;/p&gt;
&lt;h2 id=&#34;注册条目的管理&#34;&gt;注册条目的管理&lt;/h2&gt;
&lt;p&gt;SPIRE 服务器支持两种不同的方式来添加注册条目：通过命令行界面或注册 API（只允许管理员访问）。SPIRE 需要注册条目来运作。一种选择是由管理员手动创建。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-613-工作负载手动登记&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f6-13.jpg&#34; alt=&#34;图 6.13: 工作负载手动登记。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 6.13: 工作负载手动登记。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;在大型部署或基础设施快速增长的情况下，手动流程将无法扩展。此外，任何手动程序都容易出错，而且可能无法跟踪所有的变化。&lt;/p&gt;
&lt;p&gt;对于有大量注册条目的部署来说，使用自动流程来创建注册条目是一个更好的选择。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-614-使用与工作负载协调器通信的-ldquo身份运营商rdquo-自动创建工作负载注册条目的例子&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f6-14.jpg&#34; alt=&#34;图 6.14: 使用与工作负载协调器通信的 &amp;amp;ldquo;身份运营商&amp;amp;rdquo; 自动创建工作负载注册条目的例子。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 6.14: 使用与工作负载协调器通信的 &amp;amp;ldquo;身份运营商&amp;amp;rdquo; 自动创建工作负载注册条目的例子。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;将安全考虑因素和威胁建模考虑在内&#34;&gt;将安全考虑因素和威胁建模考虑在内&lt;/h2&gt;
&lt;p&gt;无论你做出什么样的设计和架构决定，都会影响到整个系统的威胁模型，也可能影响到与之互动的其他系统。&lt;/p&gt;
&lt;p&gt;下面是一些重要的安全考虑因素和你在设计阶段应该考虑的安全问题。&lt;/p&gt;
&lt;h3 id=&#34;公钥基础设施pki设计&#34;&gt;公钥基础设施（PKI）设计&lt;/h3&gt;
&lt;p&gt;你的 PKI 的结构是什么，你如何定义你的信任域以建立安全边界，你把你的私钥放在哪里，以及它们多久轮换一次，这些都是你在这一点上需要问自己的关键问题。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-615-一个具有三个信任域的-spire-部署示例每个信任域使用不同的企业证书颁发机构每个证书颁发机构使用相同的根证书颁发机构在每一层中证书的-ttl-较短&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f6-15.jpg&#34; alt=&#34;图 6.15: 一个具有三个信任域的 SPIRE 部署示例，每个信任域使用不同的企业证书颁发机构，每个证书颁发机构使用相同的根证书颁发机构。在每一层中，证书的 TTL 较短。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 6.15: 一个具有三个信任域的 SPIRE 部署示例，每个信任域使用不同的企业证书颁发机构，每个证书颁发机构使用相同的根证书颁发机构。在每一层中，证书的 TTL 较短。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;每个组织都会有不同的证书层次，因为每个组织有不同的要求。上图代表了一个潜在的证书层次结构。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TTL、撤销和更新&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在处理 PKI 时，围绕证书到期、重新签发和撤销的问题总是浮出水面。有几个考虑因素可以影响这里的决定。这些因素包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;文件过期 / 重新发行的性能开销&lt;/strong&gt;：可以容忍多少性能开销。TTL 越短，性能开销越大。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;递送文件的延迟&lt;/strong&gt;：TTL 必须长于身份文件的预期递送延迟，以确保服务在验证自己时不会出现空档。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PKI 生态系统的成熟度&lt;/strong&gt;：是否有撤销机制？它们是否得到维护并保持更新？&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;组织的风险偏好&lt;/strong&gt;：如果不启用撤销功能，如果身份被破坏并被发现，可接受的有效时间是多少。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对象的预期寿命&lt;/strong&gt;：根据对象的预期寿命，TTL 不应该被设置为太长的时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;爆炸半径&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 PKI 设计阶段，考虑其中一个组件的破坏会如何影响基础设施的其他部分是非常重要的。例如，如果你的 SPIRE 服务器将密钥保存在内存中，而服务器被攻破，那么所有下游的 SVID 都需要被取消并重新发行。为了尽量减少这种攻击的影响，你可以设计 SPIRE 基础设施，为不同的网段、虚拟私有云或云供应商提供多个信任域。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;保存你的私人钥匙的秘密&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;重要的是你把你的钥匙放在哪里。正如你先前可能已经了解到的，SPIRE 有一个密钥管理器的概念，它管理 CA 密钥。如果你打算把 SPIRE 服务器作为你的 PKI 的根，你可能想让你的根密钥具有持久性，但把它存储在磁盘上并不是一个好主意。&lt;/p&gt;
&lt;p&gt;存储 SPIRE 密钥的解决方案可能是一个软件或硬件密钥管理服务（KMS）。有独立的产品可以作为 KMS，也有每个主要云供应商的内置服务。&lt;/p&gt;
&lt;p&gt;将 SPIRE 与现有 PKI 集成的另一种可能的设计策略是使用 SPIRE 上游授权插件接口。在这种情况下，SPIRE 服务器通过使用支持的插件之一与现有的 PKI 进行通信来签署其中间 CA 证书。&lt;/p&gt;
&lt;h3 id=&#34;spire-数据存储的安全考虑&#34;&gt;SPIRE 数据存储的安全考虑&lt;/h3&gt;
&lt;p&gt;我们有意将 SPIRE 服务器的数据存储从第四章的威胁模型中删除。数据存储是 SPIRE 服务器保存动态配置的地方，如从 SPIRE 服务器 API 检索的注册条目和身份映射策略。SPIRE 服务器数据存储支持不同的数据库系统，它可以作为数据存储使用。数据存储的妥协将允许攻击者在任何节点上注册工作负载，并可能是节点本身。攻击者还将能够将密钥添加到信任捆绑中，并进入下游基础设施的信任链。&lt;/p&gt;
&lt;p&gt;攻击者的另一个可能的表面是对数据库或 SPIRE 服务器连接到数据库的拒绝服务攻击，这将导致对其他基础设施的拒绝服务。&lt;/p&gt;
&lt;p&gt;当你考虑为生产中的 SPIRE 服务器基础设施设计任何数据库时，你不可能使用数据库进程与服务器共存于同一主机的模式。尽管对数据库的有限访问，以及与服务器共存的模式大大限制了攻击面，但它很难在生产环境中扩展。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-616出于可用性和性能的考虑spire-服务器数据存储通常通过网络连接远程运行但这带来了安全挑战&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f6-16.jpg&#34; alt=&#34;图 6.16：出于可用性和性能的考虑，SPIRE 服务器数据存储通常通过网络连接远程运行，但这带来了安全挑战。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 6.16：出于可用性和性能的考虑，SPIRE 服务器数据存储通常通过网络连接远程运行，但这带来了安全挑战。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;出于可用性和性能的考虑，SPIRE 数据存储通常会是一个网络连接的数据库。但你应该考虑以下问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果这是一个与其他服务共享的数据库，还有谁可以访问它和管理它？&lt;/li&gt;
&lt;li&gt;SPIRE 服务器将如何对数据库进行认证？&lt;/li&gt;
&lt;li&gt;数据库连接是否允许 TLS 保护的安全通信？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些都是需要考虑的相关问题，因为 SPIRE 服务器如何连接到数据库在很大程度上决定了整个部署的安全程度。在使用 TLS 和基于密码的认证的情况下，SPIRE 服务器的部署应依靠秘密管理器或 KMS 来保证数据安全。&lt;/p&gt;
&lt;p&gt;在某些部署中，您可能需要添加另一个较低级别的&lt;strong&gt;元 PKI&lt;/strong&gt; 基础设施，使你能够确保与 SPIRE 服务器的所有低级别的依赖性的通信，包括您的配置管理或部署软件。&lt;/p&gt;
&lt;h3 id=&#34;spire-代理配置和信任包&#34;&gt;SPIRE 代理配置和信任包&lt;/h3&gt;
&lt;p&gt;你分配和部署 SPIRE 生态系统组件的方式，以及它在你的环境中的配置可能会对你的威胁模型和整个系统的安全模型产生严重的影响。这不仅是 SPIRE 的低级依赖，也是你所有安全系统的低级依赖，所以这里我们只关注 SPIFFE 和 SPIRE 特有的东西。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;信任包&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有不同的方法来交付代理的&lt;strong&gt;引导信任包（bootstrap trust bundle）&lt;/strong&gt;。这是代理在最初启动时使用的信任包，以便对 SPIRE 服务器进行验证。如果攻击者能够将密钥添加到初始信任包中并进行中间人攻击，那么它将对工作负载进行同样的攻击，因为它们从受害代理那里接收 SVID 和信任包。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;配置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SPIRE 代理的配置也需要保持安全。如果攻击者可以修改这个配置文件，那么他们可以将其指向被攻击的 SPIRE 服务器并控制代理。&lt;/p&gt;
&lt;h3 id=&#34;节点验证器插件的影响&#34;&gt;节点验证器插件的影响&lt;/h3&gt;
&lt;p&gt;通过多个独立的机制来证明信任，可以提供更大的信任断言。你选择的节点证明可能会大大影响你的 SPIRE 部署的安全性，并将它的信任根基转向另一个系统。当决定使用什么类型的证明时，你应该把它纳入你的威胁模型，并在每次发生变化时审查该模型。&lt;/p&gt;
&lt;p&gt;例如，任何其他基于占有证明的证明都会转移信任的根基，所以你要确保你作为下级依赖的系统符合你的组织的安全和可用性标准。&lt;/p&gt;
&lt;p&gt;当设计一个使用加入令牌的证明模式的系统时，仔细评估添加和使用令牌的操作程序，无论是由操作者还是供应系统。&lt;/p&gt;
&lt;h3 id=&#34;遥测和健康检查&#34;&gt;遥测和健康检查&lt;/h3&gt;
&lt;p&gt;SPIRE 服务器和代理都支持健康检查和不同类型的遥测。启用或错误配置健康检查和遥测可能会增加 SPIRE 基础设施的攻击面，这一点可能并不明显。SPIFFE 和 SPIRE 威胁模型假设代理只通过本地 Unix 套接字暴露工作负载 API 接口。该模型没有考虑到错误配置（或有意配置）的健康检查服务监听不在本地主机上，可能会使代理暴露于潜在的攻击，如 DoS、RCE 和内存泄漏。在选择遥测集成模型时，最好采取类似的预防措施，因为一些遥测插件（如 Prometheus）可能会暴露出额外的端口。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Kubernetes Pod 安全</title>
      <link>https://lib.jimmysong.io/kubernetes-hardening-guidance/kubernetes-pod-security/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/kubernetes-hardening-guidance/kubernetes-pod-security/</guid>
      <description>&lt;p&gt;Pod 是 Kubernetes 中最小的可部署单元，由一个或多个容器组成。Pod 通常是网络行为者在利用容器时的初始执行环境。出于这个原因，Pod 应该被加固，以使利用更加困难，并限制成功入侵的影响。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-3有-sidecar-代理作为日志容器的-pod-组件&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f3.jpg&#34; alt=&#34;图 3：有 sidecar 代理作为日志容器的 Pod 组件&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 3：有 sidecar 代理作为日志容器的 Pod 组件
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;非-root容器和无-root容器引擎&#34;&gt;“非 root”容器和“无 root”容器引擎&lt;/h2&gt;
&lt;p&gt;默认情况下，许多容器服务以有特权的 root 用户身份运行，应用程序在容器内以 root 用户身份执行，尽管不需要有特权的执行。&lt;/p&gt;
&lt;p&gt;通过使用非 root 容器或无 root 容器引擎来防止 root 执行，可以限制容器受损的影响。这两种方法都会对运行时环境产生重大影响，因此应该对应用程序进行全面测试，以确保兼容性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;非 root 容器&lt;/strong&gt;：容器引擎允许容器以非 root 用户和非 root 组成员身份运行应用程序。通常情况下，这种非默认设置是在构建容器镜像的时候配置的。&lt;strong&gt;&lt;a href=&#34;../appendix/a/&#34;&gt;附录 A：非 root 应用的 Dockerfile 示例&lt;/a&gt;&lt;/strong&gt; 显示了一个 Dockerfile 示例，它以非 root 用户身份运行一个应用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;非 root 用户&lt;/strong&gt;。另外，Kubernetes 可以在 &lt;code&gt;SecurityContext:runAsUser&lt;/code&gt; 指定一个非零用户的情况下，将容器加载到 Pod。虽然 &lt;code&gt;runAsUser&lt;/code&gt; 指令在部署时有效地强制非 root 执行，但 NSA 和 CISA 鼓励开发者构建的容器应用程序，以非 root 用户身份执行。在构建时集成非 root 用户执行，可以更好地保证应用程序在没有 root 权限的情况下正常运行。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;无 root 的容器引擎&lt;/strong&gt;：一些容器引擎可以在无特权的上下文中运行，而不是使用以 root 身份运行的守护程序。在这种情况下，从容器化应用程序的角度来看，执行似乎是使用 root 用户，但执行被重新映射到主机上的引擎用户上下文。虽然无 root 容器引擎增加了一个有效的安全层，但许多引擎目前是作为实验性发布的，不应该在生产环境中使用。管理员应该了解这一新兴技术，并在供应商发布与 Kubernetes 兼容的稳定版本时寻求采用无 root 容器引擎。&lt;/p&gt;
&lt;h2 id=&#34;不可变的容器文件系统&#34;&gt;不可变的容器文件系统&lt;/h2&gt;
&lt;p&gt;默认情况下，容器在自己的上下文中被允许不受限制地执行。在容器中获得执行权限的网络行为者可以在容器中创建文件、下载脚本和修改应用程序。Kubernetes 可以锁定一个容器的文件系统，从而防止许多暴露后的活动。&lt;/p&gt;
&lt;p&gt;然而，这些限制也会影响合法的容器应用程序，并可能导致崩溃或异常行为。为了防止损害合法的应用程序，Kubernetes 管理员可以为应用程序需要写访问的特定目录挂载二级读 / 写文件系统。&lt;strong&gt;&lt;a href=&#34;../appendix/b/&#34;&gt;附录 B：只读文件系统的部署模板示例&lt;/a&gt;&lt;/strong&gt; 显示了一个具有可写目录的不可变容器的例子。&lt;/p&gt;
&lt;h2 id=&#34;构建安全的容器镜像&#34;&gt;构建安全的容器镜像&lt;/h2&gt;
&lt;p&gt;容器镜像通常是通过从头开始构建容器或在从存储库中提取的现有镜像基础上创建的。除了使用可信的存储库来构建容器外，镜像扫描是确保部署的容器安全的关键。在整个容器构建工作流程中，应该对镜像进行扫描，以识别过时的库、已知的漏洞或错误配置，如不安全的端口或权限。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-4容器的构建工作流程用-webhook-和准入控制器进行优化&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f4.jpg&#34; alt=&#34;图 4：容器的构建工作流程，用 webhook 和准入控制器进行优化&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 4：容器的构建工作流程，用 webhook 和准入控制器进行优化
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;实现镜像扫描的一种方法是使用准入控制器。准入控制器是 Kubernetes 的原生功能，可以在对象的持久化之前，但在请求被验证和授权之后，拦截和处理对 Kubernetes API 的请求。可以实现一个自定义或专有的 webhook，以便在集群中部署任何镜像之前执行扫描。如果镜像符合 webhook 配置中定义的组织的安全策略，这个准入控制器可以阻止部署。&lt;/p&gt;
&lt;h2 id=&#34;pod-安全策略&#34;&gt;Pod 安全策略&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Pod 的创建应遵守最小授权原则。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Pod 安全策略（PSP）&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;是一个集群范围内的策略，它规定了 Pod 在集群内执行的安全要求 / 默认值。虽然安全机制通常是在 Pod/Deployment 配置中指定的，但 PSP 建立了一个所有 Pod 必须遵守的最低安全门槛。一些 PSP 字段提供默认值，当 Pod 的配置省略某个字段时使用。其他 PSP 字段被用来拒绝创建不符合要求的 Pod。PSP 是通过 Kubernetes 准入控制器执行的，所以 PSP 只能在 Pod 创建期间执行要求。PSP 并不影响已经在集群中运行的 Pod。&lt;/p&gt;
&lt;p&gt;PSP 很有用，可以在集群中强制执行安全措施。PSP 对于由具有分层角色的管理员管理的集群特别有效。在这些情况下，顶级管理员可以施加默认值，对低层级的管理员强制执行要求。NSA 和 CISA 鼓励企业根据自己的需要调整 &lt;strong&gt;&lt;a href=&#34;../appendix/c/&#34;&gt;附录 C：Pod 安全策略示例&lt;/a&gt;&lt;/strong&gt; 中的 Kubernetes 加固 PSP 模板。下表描述了一些广泛适用的 PSP 组件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;表 1: Pod 安全策略组件&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;字段名称&lt;/th&gt;
&lt;th&gt;使用方法&lt;/th&gt;
&lt;th&gt;建议&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;privileged&lt;/td&gt;
&lt;td&gt;控制 Pod 是否可以运行有特权的容器。&lt;/td&gt;
&lt;td&gt;设置为 false。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hostPID、hostIPC&lt;/td&gt;
&lt;td&gt;控制容器是否可以共享主机进程命名空间。&lt;/td&gt;
&lt;td&gt;设置为 false。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hostNetwork&lt;/td&gt;
&lt;td&gt;控制容器是否可以使用主机网络。&lt;/td&gt;
&lt;td&gt;设置为 false。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;allowedHostPaths&lt;/td&gt;
&lt;td&gt;将容器限制在主机文件系统的特定路径上。&lt;/td&gt;
&lt;td&gt;使用一个 &amp;ldquo;假的&amp;rdquo; 路径名称（比如 &lt;code&gt;/foo&lt;/code&gt; 标记为只读）。省略这个字段的结果是不对容器进行准入限制。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;readOnlyRootFilesystem&lt;/td&gt;
&lt;td&gt;需要使用一个只读的根文件系统。&lt;/td&gt;
&lt;td&gt;可能时设置为 true。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;runAsUser, runAsGroup, supplementalGroups, fsGroup&lt;/td&gt;
&lt;td&gt;控制容器应用程序是否能以 root 权限或 root 组成员身份运行。&lt;/td&gt;
&lt;td&gt;- 设置 &lt;code&gt;runAsUser&lt;/code&gt; 为 &lt;code&gt;MustRunAsNonRoot&lt;/code&gt;。- 将 &lt;code&gt;runAsGroup&lt;/code&gt; 设置为非零（参见&lt;a href=&#34;../appendix/c/&#34;&gt;附录 C&lt;/a&gt; 中的例子：Pod 安全策略示例）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;将 &lt;code&gt;supplementalGroups&lt;/code&gt; 设置为非零（见附录 C 的例子）。将 &lt;code&gt;fsGroup&lt;/code&gt; 设置为非零（参见&lt;a href=&#34;../appendix/c/&#34;&gt;附录 C&lt;/a&gt; 中的例子：Pod 安全策略示例）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;allowPrivilegeEscalation&lt;/td&gt;
&lt;td&gt;限制升级到 root 权限。&lt;/td&gt;
&lt;td&gt;设置为 false。为了有效地执行 &lt;code&gt;runAsUser: MustRunAsNonRoot&lt;/code&gt; 设置，需要采取这一措施。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;seLinux&lt;/td&gt;
&lt;td&gt;设置容器的 SELinux 上下文。&lt;/td&gt;
&lt;td&gt;如果环境支持 SELinux，可以考虑添加 SELinux 标签以进一步加固容器。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AppArmor 注解&lt;/td&gt;
&lt;td&gt;设置容器所使用的 AppArmor 配置文件。&lt;/td&gt;
&lt;td&gt;在可能的情况下，通过采用 AppArmor 来限制开发，以加固容器化的应用程序。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;seccomp 注解&lt;/td&gt;
&lt;td&gt;设置用于沙盒容器的 seccomp 配置文件。&lt;/td&gt;
&lt;td&gt;在可能的情况下，使用 seccomp 审计配置文件来识别运行中的应用程序所需的系统调用；然后启用 seccomp 配置文件来阻止所有其他系统调用。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：由于以下原因，PSP 不会自动适用于整个集群：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先，在应用 PSP 之前，必须为 Kubernetes 准入控制器启用 &lt;code&gt;PodSecurityPolicy&lt;/code&gt; 插件，这是 &lt;code&gt;kube-apiserver&lt;/code&gt; 的一部分。&lt;/li&gt;
&lt;li&gt;第二，策略必须通过 RBAC 授权。管理员应从其集群组织内的每个角色中验证已实施的 PSP 的正确功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在有多个 PSP 的环境中，管理员应该谨慎行事，因为 Pod 的创建会遵守&lt;strong&gt;最小限制性&lt;/strong&gt;授权策略。以下命令描述了给定命名空间的所有 Pod 安全策略，这可以帮助识别有问题的重叠策略。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl get psp -n &amp;lt;namespace&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;保护-pod-服务账户令牌&#34;&gt;保护 Pod 服务账户令牌&lt;/h2&gt;
&lt;p&gt;默认情况下，Kubernetes 在创建 Pod 时自动提供一个服务账户（Service Account），并在运行时在 Pod 中挂载该账户的秘密令牌（token）。许多容器化的应用程序不需要直接访问服务账户，因为 Kubernetes 的协调工作是在后台透明进行的。如果一个应用程序被破坏了。Pod 中的账户令牌可以被网络行为者收集并用于进一步破坏集群。当应用程序不需要直接访问服务账户时，Kubernetes 管理员应确保 Pod 规范禁用正在加载的秘密令牌。这可以通过 Pod 的 YAML 规范中的 &lt;code&gt;automountServiceAccountToken: false&lt;/code&gt; 指令来完成。&lt;/p&gt;
&lt;h2 id=&#34;加固容器引擎&#34;&gt;加固容器引擎&lt;/h2&gt;
&lt;p&gt;一些平台和容器引擎提供了额外的选项来加固容器化环境。一个强有力的例子是使用管理程序来提供容器隔离。管理程序依靠硬件来执行虚拟化边界，而不是操作系统。管理程序隔离比传统的容器隔离更安全。在 Windows® 操作系统上运行的容器引擎可以被配置为使用内置的 Windows 管理程序 Hyper-V®，以增强安全性。&lt;/p&gt;
&lt;p&gt;此外，一些注重安全的容器引擎将每个容器部署在一个轻量级的管理程序中，以实现深度防御。由管理程序支持的容器可以减少容器的突破。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;译者注：Pod Security Policy 已在 1.21 版本中宣布弃用，作为替代，1.22 引入了内置的 Pod Security Admission 控制器以及新的 Pod Security Standards 标准。&lt;a href=&#34;https://kubernetes.io/blog/2021/04/06/podsecuritypolicy-deprecation-past-present-and-future/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;来源&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>与其他系统集成</title>
      <link>https://lib.jimmysong.io/spiffe/integrating-with-others/</link>
      <pubDate>Fri, 07 Oct 2022 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/spiffe/integrating-with-others/</guid>
      <description>&lt;p&gt;本章探讨了 SPIFFE 和 SPIRE 如何与环境集成。&lt;/p&gt;
&lt;p&gt;SPIFFE 从一开始就被设计成可插拔和可扩展的，所以将 SPIFFE 和 SPIRE 与其他软件系统集成的话题是一个广泛的话题。一个特定的集成的架构超出了本书的范围。相反，本章意在捕捉一些可能的常见集成，以及一个高层次的概述，以及进行集成工作的策略。&lt;/p&gt;
&lt;h2 id=&#34;使软件能够使用-svid&#34;&gt;使软件能够使用 SVID&lt;/h2&gt;
&lt;p&gt;在考虑如何调整软件以使用 SVID 时，有许多选项可供选择。本节介绍了其中的几个选项，以及与之相关的注意事项。&lt;/p&gt;
&lt;h3 id=&#34;本地-spiffe-支持&#34;&gt;本地 SPIFFE 支持&lt;/h3&gt;
&lt;p&gt;这种方法需要修改现有的服务，以使它们能够感知 SPIFFE。当所需的修改最小，或者可以在跨应用服务使用的通用库或框架中引入时，它是首选。对于那些对延迟敏感的数据平面服务，或希望在应用层利用身份的服务，本地集成是最好的方法。SPIFFE 提供了一些库，如用于 Go 编程语言的 GO-SPIFFE 和用于 Java 编程语言的 JAVA-SPIFFE，它们有助于开发支持 SPIFFE 的工作负载。&lt;/p&gt;
&lt;p&gt;当用支持 SPIFFE 库的语言构建软件时，这通常是利用 SPIFFE 最直接的方式。上面提到的 Go 和 Java 库有使用 SPIFFE 与 gRPC 和 HTTPS 客户端和服务器的例子。&lt;/p&gt;
&lt;p&gt;也就是说，应该注意的是，你并不局限于 Java 和 Go 语言的选择。这些库是在开放规范的基础上实现的。在撰写本文时，社区正在努力开发 Python、Rust 和 C 编程语言的 SPIFFE 库。&lt;/p&gt;
&lt;h3 id=&#34;spiffe-感知代理&#34;&gt;SPIFFE 感知代理&lt;/h3&gt;
&lt;p&gt;通常情况下，重构的成本太高，或者服务正在运行一个不能被修改的第三方代码。在这些情况下，用一个支持 SPIFFE 的代理来前置应用，往往是一个务实的选择。根据应用程序的部署模式，它可以是一个独立的代理或一组集中的代理。共用代理的优点是代理和不安全的服务之间的追踪仍然是本地的 —— 如果使用独立的代理，代理和应用之间的安全问题仍然必须得到考虑。&lt;/p&gt;
&lt;p&gt;Envoy 是一个受欢迎的选择，Ghostunnel 是另一个不错的选择。虽然其他代理，如 NGINX 和 Apache 也可以工作，但它们与 SPIFFE 相关的功能是有限的。&lt;/p&gt;
&lt;p&gt;Ghostunnel 是一个 L3/L4 代理，享有对整个 SPIFFE 规范集的完全本地支持，包括对 SPIFFE Workload API 和联邦的支持。对于需要 L7 功能的应用，建议使用 Envoy。虽然 Envoy 不支持 SPIFFE Workload API，但 SPIRE 实现了 Secret Discovery Service API（或 SDS API），这是一个 Envoy API，用于检索和维护证书和私钥。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-71-两个-envoy-代理位于两个服务之间使用-spire-agent-sds-实现建立相互的-tls-的架构图&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f7-1.jpg&#34; alt=&#34;图 7.1: 两个 Envoy 代理位于两个服务之间，使用 SPIRE Agent SDS 实现建立相互的 TLS 的架构图。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 7.1: 两个 Envoy 代理位于两个服务之间，使用 SPIRE Agent SDS 实现建立相互的 TLS 的架构图。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;通过实施 SDS API，SPIRE 可以将 TLS 证书、私钥和可信 CA 证书直接推送到 Envoy。然后，SPIRE 会根据需要轮换短命的秘钥和证书，将更新推送到 Envoy，而不需要重新启动。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;服务网格&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;L7 代理（如 Envoy）可以执行 SPIFFE 安全以上的许多功能。例如，服务发现、请求授权和负载均衡都是 Envoy 带来的功能。在使用共享库比较困难的环境中（例如，当应用程序是用许多不同的语言编写的，或者不能被修改），将这种功能加载到代理上，可能特别有吸引力。这种方法也将代理的部署推向了集中的模式，即每个应用实例都有一个专门的代理运行在它旁边。&lt;/p&gt;
&lt;p&gt;然而，这又产生了一个问题：如何管理所有这些代理？&lt;/p&gt;
&lt;p&gt;服务网格是一个代理机群和相关代理控制平面的部署。它们通常允许在部署工作负载时自动注入和配置集中的代理，并提供对这些代理的持续管理。通过将许多平台关注点加载到服务网格中，可以使应用程序与这些功能不相干。&lt;/p&gt;
&lt;p&gt;迄今为止，大多数服务网格的实现都是利用 SPIFFE 认证来实现服务间的追踪。有些使用 SPIRE 来实现这一目标，有些则实现了特定产品的 SPIFFE 身份提供者。&lt;/p&gt;
&lt;h3 id=&#34;辅助程序&#34;&gt;辅助程序&lt;/h3&gt;
&lt;p&gt;于工作负载不支持 SPIFFE 工作负载 API，但仍然支持使用证书进行认证的情况，与工作负载一起运行的辅助程序可以弥补这一差距。&lt;a href=&#34;https://github.com/spiffe/spiffe-helper/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIFFE Helper&lt;/a&gt; 就是一个例子。SPIFFE 辅助程序从 SPIFFE Workload API 中获取 SVID，并将其写入磁盘，以便应用程序能够接收它们。SPIFFE 辅助程序可以继续运行，确保磁盘上的证书在轮换时不断地被更新。当更新发生时，辅助程序可以向应用程序发出信号（或运行一个可配置的命令），这样，运行中的应用程序就可以接收到这些变化。&lt;/p&gt;
&lt;p&gt;许多支持 TLS 的现成的应用程序可以被配置成这样使用 SPIFFE。SPIFFE 辅助库有配置 MySQL 和 PostgreSQL 的例子。许多 Web 服务器，如 Apache HTTPD 和 NGINX 都可以进行类似的配置。这对客户端软件也很有用，它只能被配置为利用磁盘上的证书。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;openssl&lt;/li&gt;
&lt;li&gt;x509curl&lt;/li&gt;
&lt;li&gt;grpcurl&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;需要注意的是，这比本地 SPIFFE 集成的灵活性要低，因为特别是，它可能不允许相同的信任配置粒度。例如，当使用 SPIFFE Helper 来配置 Apache HTTPD 的相互 TLS 时，不可能将 &lt;code&gt;mod_ssl&lt;/code&gt; 配置为只接受具有特定 SPIFFE ID 的客户端。&lt;/p&gt;
&lt;h2 id=&#34;在无-spiffe-感知的软件中使用-svid&#34;&gt;在无 SPIFFE 感知的软件中使用 SVID&lt;/h2&gt;
&lt;p&gt;由于 SVID 是基于众所周知的文档类型，所以相对来说，遇到支持文档类型的软件是很常见的，但其本身并不一定能识别 SPIFFE。好消息是，这是一个相对预期的情况，而且 SPIFFE/SPIRE 已经被设计成可以很好地处理这种情况。&lt;/p&gt;
&lt;h3 id=&#34;x509-svid-双重用途&#34;&gt;X509-SVID 双重用途&lt;/h3&gt;
&lt;p&gt;许多非 SPIFFE 系统支持使用 TLS（或相互 TLS），但依赖于证书在证书主体的通用名称（CN）或主体替代名称（SAN）扩展的 DNS 名称中具有身份信息。SPIRE 支持签发具有特定 CN 和 DNS SAN 值的 X.509 证书，这些值可以在每个工作负载的基础上指定（作为注册条目的一部分）。&lt;/p&gt;
&lt;p&gt;这一功能是一个重要的细节，因为它允许在不直接理解如何使用 SPIFFE ID 的软件中使用 X509-SVID。例如，HTTPS 客户端往往希望所出示的证书与请求的 DNS 名称相匹配。在另一个例子中，MySQL 和 PostgreSQL 可以使用通用名称来识别相互的 TLS 客户端。通过利用这个 SPIRE 功能，以及 SPIFFE 总体上赋予的灵活性，这些用例可以用 SPIFFE 用例所使用的同样的 SVID 来适应。&lt;/p&gt;
&lt;h3 id=&#34;jwt-svid-双重用途&#34;&gt;JWT-SVID 双重用途&lt;/h3&gt;
&lt;p&gt;与 X509-SVID 可用于 SPIFFE 认证以及更传统的 X.509 用例的方式相似，JWT- SVID 也支持这种双重性。虽然 JWT-SVID 确实使用标准的主体（&lt;code&gt;sub&lt;/code&gt;）声明来存储 SPIFFE ID，但验证方法与 OpenID Connect（或 OIDC）类似并兼容。&lt;/p&gt;
&lt;p&gt;更具体地说，SPIFFE Federation API 通过由 HTTPS 端点提供的 JWKS 文档公开密钥，这与用于获取 OIDC 验证的公开密钥的机制相同。因此，任何支持 OIDC 身份联盟的技术也将支持接受 JWT-SVID，无论它们是否具有 SPIFFE 感知。&lt;/p&gt;
&lt;p&gt;支持这种身份联盟的集成的一个例子是亚马逊网络服务（AWS）身份和访问管理（IAM）。通过配置 AWS 账户中的 IAM，以接受来自 SPIRE 作为 OIDC 身份供应商的身份，就有可能使用 SPIFFE 工作负载 API 的 JWT-SVID 来承担 AWS IAM 的角色。当需要访问 AWS 资源的工作负载不在 AWS 中运行时，这一点特别强大，有效地否定了存储、共享和管理长期的 AWS 访问密钥的需要。关于如何实现这一目标的详细例子，请参见 SPIFFE 网站上的 &lt;a href=&#34;https://spiffe.io/spire/try/oidc-federation-aws/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AWS OIDC 认证教程&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;可以在-spiffe-的基础上建立什么&#34;&gt;可以在 SPIFFE 的基础上建立什么&lt;/h2&gt;
&lt;p&gt;一旦 SPIFFE 作为一个通用的身份基础存在于你的生态系统中，并与你的应用程序集成，这可能是一个考虑在上面建立什么的好时机。在本节中，我们想介绍一下在 SPIFFE 和 SPIRE 的基础上可以建立什么。并不是说这个项目有所有的构件，可以让一切都开箱即用。有些集成件需要实施才能实现，而具体如何实现的细节会因部署而异。&lt;/p&gt;
&lt;h3 id=&#34;日志监测可观察性和-spiffe&#34;&gt;日志、监测、可观察性和 SPIFFE&lt;/h3&gt;
&lt;p&gt;SPIFFE 可以向其他系统提供可验证的身份证明，这对以下组件来说是一个优势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基础设施度量&lt;/li&gt;
&lt;li&gt;基础设施日志&lt;/li&gt;
&lt;li&gt;可观测性&lt;/li&gt;
&lt;li&gt;计量&lt;/li&gt;
&lt;li&gt;分布式追踪&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你可以使用 SVID 来确保这些系统的客户端 - 服务器通信安全。然而，你也可以扩展所有这些组件，用 SPIFFE ID 来充实数据。这样做有多种好处，例如，能够在多种类型的平台和运行时之间对事件进行关联。它甚至可以帮助识别仍然不使用 SPIFFE 身份的应用和服务，或者发现运行异常和攻击，而不管它们可能发生在基础设施的哪个角落。&lt;/p&gt;
&lt;h3 id=&#34;审计&#34;&gt;审计&lt;/h3&gt;
&lt;p&gt;对于任何安全系统，如你在 SPIRE 基础上建立的系统，日志不仅仅是帮助开发人员和操作员了解系统发生了什么的信息。任何安全系统的日志都是正在发生的事情的证据，所以有一个集中的位置来存储日志是一个好主意。在发生任何安全事件时，这些信息对取证分析非常有价值。&lt;/p&gt;
&lt;p&gt;SPIFFE 可以帮助增强审计数据，通过使用对集中式审计系统的认证调用来提供不可抵赖性。例如，在与审计系统建立会话时，通过使用 X509-SVID 和相互 TLS，我们可以确定日志行的来源 —— 攻击者不能简单地操纵正在发送的标签或其他数据。&lt;/p&gt;
&lt;h3 id=&#34;证书透明化&#34;&gt;证书透明化&lt;/h3&gt;
&lt;p&gt;证书透明化（Certificate Transparency）通过提供一个开放的框架，几乎实时地监控和审计 X.509 证书，帮助发现对证书基础设施的攻击。证书透明化允许检测从被破坏的证书颁发机构恶意获取的证书。它还可以识别那些已经变质并恶意签发证书的证书颁发机构。要了解更多关于证书透明化的信息，请阅读&lt;a href=&#34;https://www.certificate-transparency.org/what-is-ct&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;介绍文件&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;SPIRE 与证书透明度的整合有不同的可能性。通过这种整合，可以记录你的系统颁发的所有证书的信息，并用一种称为 Merkle Tree Hashes 的特殊加密机制来保护它，以防止篡改和不当行为。&lt;/p&gt;
&lt;p&gt;你可以考虑的另一个方法是在你的所有系统中强制执行证书透明化。这将防止与那些没有在证书透明化服务器中记录证书信息的应用程序和服务建立 TLS 和相互 TLS 连接。&lt;/p&gt;
&lt;p&gt;与证书透明化的整合已经超出了本书的范围。请查看 SPIFFE/SPIRE 社区，了解更多信息和最新更新。&lt;/p&gt;
&lt;h3 id=&#34;供应链安全&#34;&gt;供应链安全&lt;/h3&gt;
&lt;p&gt;大部分关于 SPIFFE 预期用途的报道都是关于在运行时保护软件系统之间的通信安全。然而，在软件部署前的各个阶段保护软件也是至关重要的。供应链妥协是一个潜在的攻击媒介。为此，最好能保护软件供应链的完整性，以防止恶意行为者在代码中引入后门或脆弱的库。验证软件工件的出处和管道中执行的一系列步骤是验证软件没有被篡改的一种方式。&lt;/p&gt;
&lt;p&gt;你可以考虑使用 SPIFFE 来提供签名的信任根。它也可用于向供应链系统的软件组件发放身份。有几种方法可以让它与更新框架（TUF）等补充软件或公证处等人工制品签署服务一起工作，或者与 In-Toto 等供应链日志一起利用。&lt;/p&gt;
&lt;p&gt;有可能在两个层面上将 SPIRE 与供应链组件整合。&lt;/p&gt;
&lt;p&gt;首先，你可以用它来识别这个供应链系统的不同元素，以确保机械和控制平面的安全。其次，通过定制选择器来确保只有已知出处的二进制文件被发出身份。作为后者的一个例子，在一个非常初级的水平上，这种属性可以作为标签传递到使用现有 docker 选择器的容器镜像中，或者通过开发一个可以检查供应链元数据的工作负载验证器。&lt;/p&gt;
&lt;h2 id=&#34;为用户集成-spiffe&#34;&gt;为用户集成 SPIFFE&lt;/h2&gt;
&lt;p&gt;SPIFFE 和 SPIRE 架构的主要重点是软件身份。它没有考虑到用户的身份，因为这个问题已经被认为得到了很好的解决，而且在如何向人类与软件发放身份方面存在重大差异。也就是说，这并不意味着你不能向用户分发 SPIFFE 的身份。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为用户提供可验证的身份&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;用户应该如何在一个支持 SPIFFE 的生态系统中交互？请记住，SPIFFE 是 Secure Production Identity Framework for Everyone 的缩写。虽然本书的大部分内容都集中在软件的身份上，但将 SPIFFE 可验证的身份（SVID）赋予用户也同样有效，甚至是可取的。这样一来，工作负载可以用 SVID 做的所有事情，人们也可以做，比如相互 TLS 访问服务。这对于正在构建软件并需要访问其软件部署后将使用的相同资源的开发者来说，可能特别有用。&lt;/p&gt;
&lt;p&gt;正如 SPIFFE 规范对 SPIFFE ID 的方案没有限制一样，你可以自行决定如何表示人类。把你的用户名作为 SPIFFE ID 路径可能就足够了，例如 &lt;code&gt;spiffe://example.com/users/zero_the_turtle&lt;/code&gt;。或者，你可以为用户与工作负载创建一个不同的信任域，例如 &lt;code&gt;spiffe://users.example.com/zero_the_turtle&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在一个理想的情况下，你现有的 SSO 提供商能够为你的用户产生 JWT，就像 OIDC 身份提供商的情况一样。在这种情况下，如果你能将你的 SSO 提供商配置为使用 SPIFFE ID 来进行 &lt;code&gt;sub&lt;/code&gt; 声明，你可能不需要做任何额外的工作来为你的用户产生 SVID。&lt;/p&gt;
&lt;p&gt;如果你无法直接从你的身份提供者那里获得 SPIFFE JWT，但你有办法获得可验证的身份令牌，你可以利用一个自定义的 SPIRE 验证器，接受来自你的提供者的身份令牌作为基本的证明手段。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-72使用-oidc-id-令牌进行-spire-认证的一个例子&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f7-2.jpg&#34; alt=&#34;图 7.2：使用 OIDC ID 令牌进行 SPIRE 认证的一个例子。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 7.2：使用 OIDC ID 令牌进行 SPIRE 认证的一个例子。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;如果上述情况都不适用，你总是可以建立一个独特的服务，集成到你现有的 SSO 解决方案中，它可以根据用户的认证会话为他们产生 SVID。请查看 SPIFFE 网站上的&lt;a href=&#34;https://github.com/JackOfMostTrades/spiffe-user-demo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;示例项目&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;利用 SSH 使用 SPIFFE 和 SPIRE&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;OpenSSH 支持使用证书颁发机构（CA）和&lt;a href=&#34;https://github.com/openssh/openssh-portable/blob/master/PROTOCOL.certkeys&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;证书&lt;/a&gt;进行认证。尽管 OpenSSH 证书的格式与 X.509 不同，但人们可以建立一个使用 SVID 作为认证的 SSH 证书的服务。这使得你也可以利用你的 SPIFFE 身份进行 SSH。&lt;/p&gt;
&lt;p&gt;对于需要 SSH 访问你的生态系统中的工作负载的用户来说，这种模式为 SSH 访问提供了短暂的、短期的、可审计的凭证，也提供了一个单一的控制点，你可以用它来执行访问控制策略或多因素认证。&lt;/p&gt;
&lt;p&gt;这也允许工作负载检索服务器端（又称 &amp;ldquo;主机&amp;rdquo;）的 SSH 证书，允许工作负载向用户认证自己。使用这个证书，用户不再需要在第一次连接时被信任服务器的主机密钥的问题打断 SSH 连接。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-73-使用-svid-来引导-ssh-证书&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f7-3.jpg&#34; alt=&#34;图 7.3: 使用 SVID 来引导 SSH 证书。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 7.3: 使用 SVID 来引导 SSH 证书。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;微服务 UI&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;虽然本书的大部分内容都是关于工作负载之间的认证，但通常也需要用户对工作负载进行认证。如果用户是通过 CLI 或其他桌面工具进行认证，那么可以使用带有用户 SVID 的相互 TLS。然而，许多微服务也希望承载某种基于浏览器的用户界面。这可能是因为开发者正在为他们的服务访问一个专门的管理或管理界面，或者消费者可能正在使用像 &lt;a href=&#34;https://github.com/swagger-api/swagger-ui&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Swagger UI&lt;/a&gt; 这样的工具来探索和试验服务的 API。&lt;/p&gt;
&lt;p&gt;为具有基于浏览器的用户界面的服务提供良好的体验，需要在浏览器友好的认证形式和 SPIFFE 相互 TLS 认证之间架起桥梁。实现这一目标的最简单方法是有一个使用相互 TLS 的 API 端口和另一个接受浏览器友好认证方法的 API 端口，如现有的基于 Web 的 SSO 机制或 OAuth2/OIDC。&lt;/p&gt;
&lt;p&gt;对二级端口上的请求进行认证后过滤，应该在基于浏览器的认证主体和相应的 SPIFFE ID 之间提供一个转换层。如果你已经建立了一个机制让用户直接获得 SVID，如上所述，那么这里也应该使用同样的转换。这样一来，底层应用就与所使用的特定认证机制无关了，所以由某个用户提出的基于网络的请求在功能上等同于通过相互 TLS 使用该用户的 SVID 提出的相同请求。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>网络隔离和加固</title>
      <link>https://lib.jimmysong.io/kubernetes-hardening-guidance/network-separation-and-hardening/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/kubernetes-hardening-guidance/network-separation-and-hardening/</guid>
      <description>&lt;p&gt;集群网络是 Kubernetes 的一个核心概念。容器、Pod、服务和外部服务之间的通信必须被考虑在内。默认情况下，很少有网络策略来隔离资源，防止集群被破坏时的横向移动或升级。资源隔离和加密是限制网络行为者在集群内转移和升级的有效方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用网络策略和防火墙来隔离资源。&lt;/li&gt;
&lt;li&gt;确保控制平面的安全。&lt;/li&gt;
&lt;li&gt;对流量和敏感数据（例如 Secret）进行静态加密。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;命名空间&#34;&gt;命名空间&lt;/h2&gt;
&lt;p&gt;Kubernetes 命名空间是在同一集群内的多个个人、团队或应用程序之间划分集群资源的一种方式。&lt;strong&gt;默认情况下，命名空间不会被自动隔离&lt;/strong&gt;。然而，命名空间确实为一个范围分配了一个标签，这可以用来通过 RBAC 和网络策略指定授权规则。除了网络隔离之外，策略可以限制存储和计算资源，以便在命名空间层面上对 Pod 进行更好的控制。&lt;/p&gt;
&lt;p&gt;默认有三个命名空间，它们不能被删除：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;kube-system&lt;/code&gt;（用于 Kubernetes 组件）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kube-public&lt;/code&gt;（用于公共资源）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;default&lt;/code&gt;（针对用户资源）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用户 Pod 不应该放在 &lt;code&gt;kube-system&lt;/code&gt; 或 &lt;code&gt;kube-public&lt;/code&gt; 中，因为这些都是为集群服务保留的。可以用 YAML 文件，如 &lt;strong&gt;&lt;a href=&#34;../appendix/d/&#34;&gt;附录 D：命名空间示例&lt;/a&gt;&lt;/strong&gt; ，可以用来创建新的命名空间。不同命名空间中的 Pod 和服务仍然可以相互通信，除非有额外的隔离措施，如网络策略。&lt;/p&gt;
&lt;h2 id=&#34;网络策略&#34;&gt;网络策略&lt;/h2&gt;
&lt;p&gt;网络策略控制 Pod、命名空间和外部 IP 地址之间的流量。默认情况下，没有网络策略应用于 Pod 或命名空间，导致 Pod 网络内的入口和出口流量不受限制。通过适用于 Pod 或 Pod 命名空间的网络策略，Pod 将被隔离。一旦一个 Pod 在网络策略中被选中，它就会拒绝任何适用的策略对象所不允许的任何连接。&lt;/p&gt;
&lt;p&gt;要创建网络策略，需要一个支持 &lt;code&gt;NetworkPolicy&lt;/code&gt; API 的网络插件。使用 &lt;code&gt;podSelector&lt;/code&gt; 和 / 或 &lt;code&gt;namespaceSelector&lt;/code&gt; 选项来选择 Pod。&lt;a href=&#34;../appendix/e/&#34;&gt;&lt;strong&gt;附录 E&lt;/strong&gt;&lt;/a&gt; 中展示了一个网络策略的例子。网络策略的格式可能有所不同，这取决于集群使用的容器网络接口（CNI）插件。管理员应该使用选择所有 Pod 的默认策略来拒绝所有入口和出口流量，并确保任何未选择的 Pod 被隔离。然后，额外的策略可以放松这些允许连接的限制。&lt;/p&gt;
&lt;p&gt;外部 IP 地址可以使用 &lt;code&gt;ipBlock&lt;/code&gt; 在入口和出口策略中使用，但不同的 CNI 插件、云提供商或服务实现可能会影响 &lt;code&gt;NetworkPolicy&lt;/code&gt; 处理的顺序和集群内地址的重写。&lt;/p&gt;
&lt;h2 id=&#34;资源政策&#34;&gt;资源政策&lt;/h2&gt;
&lt;p&gt;除了网络策略，&lt;code&gt;LimitRange&lt;/code&gt; 和 &lt;code&gt;ResourceQuota&lt;/code&gt; 是两个可以限制命名空间或节点的资源使用的策略。&lt;code&gt;LimitRange&lt;/code&gt; 策略限制了特定命名空间内每个 Pod 或容器的单个资源，例如，通过强制执行最大计算和存储资源。每个命名空间只能创建一个 &lt;code&gt;LimitRange&lt;/code&gt; 约束，如 &lt;strong&gt;&lt;a href=&#34;../appendix/f/&#34;&gt;附录 F&lt;/a&gt;&lt;/strong&gt; 的 &lt;code&gt;LimitRange&lt;/code&gt; 示例中所示。Kubernetes 1.10 和更新版本默认支持 &lt;code&gt;LimitRange&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;与 &lt;code&gt;LimitRange&lt;/code&gt; 策略不同的是，&lt;code&gt;ResourceQuotas&lt;/code&gt; 是对整个命名空间的资源使用总量的限制，例如对 CPU 和内存使用总量的限制。如果用户试图创建一个违反 &lt;code&gt;LimitRange&lt;/code&gt; 或 &lt;code&gt;ResourceQuota&lt;/code&gt; 策略的 Pod，则 Pod 创建失败。&lt;a href=&#34;../appendix/g/&#34;&gt;&lt;strong&gt;附录 G&lt;/strong&gt;&lt;/a&gt; 中显示了一个 &lt;code&gt;ResourceQuota&lt;/code&gt; 策略的示例。&lt;/p&gt;
&lt;h2 id=&#34;控制平面加固&#34;&gt;控制平面加固&lt;/h2&gt;
&lt;p&gt;控制平面是 Kubernetes 的核心，使用户能够查看容器，安排新的 Pod，读取 Secret，在集群中执行命令。由于这些敏感的功能，控制平面应受到高度保护。除了 TLS 加密、RBAC 和强大的认证方法等安全配置外，网络隔离可以帮助防止未经授权的用户访问控制平面。Kubernetes API 服务器运行在 6443 和 8080 端口上，这些端口应该受到防火墙的保护，只接受预期的流量。8080 端口，默认情况下，可以在没有 TLS 加密的情况下从本地机器访问，请求绕过认证和授权模块。不安全的端口可以使用 API 服务器标志 &lt;code&gt;--insecure-port=0&lt;/code&gt; 来禁用。Kubernetes API 服务器不应该暴露在互联网或不信任的网络中。网络策略可以应用于 &lt;code&gt;kube-system&lt;/code&gt; 命名空间，以限制互联网对 &lt;code&gt;kube-system&lt;/code&gt; 的访问。如果对所有命名空间实施默认的拒绝策略，&lt;code&gt;kube-system&lt;/code&gt; 命名空间仍然必须能够与其他控制平面和工作节点进行通信。&lt;/p&gt;
&lt;p&gt;下表列出了控制平面的端口和服务。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;表 2：控制平面端口&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;端口&lt;/th&gt;
&lt;th&gt;方向&lt;/th&gt;
&lt;th&gt;端口范围&lt;/th&gt;
&lt;th&gt;目的&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;TCP&lt;/td&gt;
&lt;td&gt;Inbound&lt;/td&gt;
&lt;td&gt;6443 or 8080 if not disabled&lt;/td&gt;
&lt;td&gt;Kubernetes API server&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TCP&lt;/td&gt;
&lt;td&gt;Inbound&lt;/td&gt;
&lt;td&gt;2379-2380&lt;/td&gt;
&lt;td&gt;etcd server client API&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TCP&lt;/td&gt;
&lt;td&gt;Inbound&lt;/td&gt;
&lt;td&gt;10250&lt;/td&gt;
&lt;td&gt;kubelet API&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TCP&lt;/td&gt;
&lt;td&gt;Inbound&lt;/td&gt;
&lt;td&gt;10251&lt;/td&gt;
&lt;td&gt;kube-scheduler&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TCP&lt;/td&gt;
&lt;td&gt;Inbound&lt;/td&gt;
&lt;td&gt;10252&lt;/td&gt;
&lt;td&gt;kube-controller-manager&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TCP&lt;/td&gt;
&lt;td&gt;Inbound&lt;/td&gt;
&lt;td&gt;10258&lt;/td&gt;
&lt;td&gt;cloud-controller-manager（可选）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;etcd&#34;&gt;Etcd&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;etcd 后端数据库是一个关键的控制平面组件，也是集群中最重要的安全部分。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;etcd 后端数据库存储状态信息和集群 Secret。它是一个关键的控制平面组件，获得对 etcd 的写入权限可以使网络行为者获得对整个集群的 root 权限。Etcd 只能通过 API 服务器访问，集群的认证方法和 RBAC 策略可以限制用户。etcd 数据存储可以在一个单独的控制平面节点上运行，允许防火墙限制对 API 服务器的访问。管理员应该设置 TLS 证书以强制执行 etcd 服务器和 API 服务器之间的 HTTPS 通信。etcd 服务器应被配置为只信任分配给 API 服务器的证书。&lt;/p&gt;
&lt;h3 id=&#34;kubeconfig-文件&#34;&gt;Kubeconfig 文件&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;kubeconfig&lt;/code&gt; 文件包含关于集群、用户、命名空间和认证机制的敏感信息。Kubectl 使用存储在工作节点的 &lt;code&gt;$HOME/.kube&lt;/code&gt; 目录下的配置文件，并控制平面本地机器。网络行为者可以利用对该配置目录的访问，获得并修改配置或凭证，从而进一步破坏集群。配置文件应该被保护起来，以防止非故意的改变，未经认证的非 root 用户应该被阻止访问这些文件。&lt;/p&gt;
&lt;h2 id=&#34;工作节点划分&#34;&gt;工作节点划分&lt;/h2&gt;
&lt;p&gt;工作节点可以是一个虚拟机或物理机，这取决于集群的实现。由于节点运行微服务并承载集群的网络应用，它们往往是被攻击的目标。如果一个节点被破坏，管理员应主动限制攻击面，将工作节点与其他不需要与工作节点或 Kubernetes 服务通信的网段分开。防火墙可用于将内部网段与面向外部的工作节点或整个 Kubernetes 服务分开，这取决于网络的情况。机密数据库或不需要互联网访问的内部服务，这可能需要与工作节点的可能攻击面分离。&lt;/p&gt;
&lt;p&gt;下表列出了工作节点的端口和服务。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;表 3：工作节点端口&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;端口&lt;/th&gt;
&lt;th&gt;方向&lt;/th&gt;
&lt;th&gt;端口范围&lt;/th&gt;
&lt;th&gt;目的&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;TCP&lt;/td&gt;
&lt;td&gt;Inbound&lt;/td&gt;
&lt;td&gt;10250&lt;/td&gt;
&lt;td&gt;kubelet API&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TCP&lt;/td&gt;
&lt;td&gt;Inbound&lt;/td&gt;
&lt;td&gt;30000-32767&lt;/td&gt;
&lt;td&gt;NodePort Services&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;加密&#34;&gt;加密&lt;/h2&gt;
&lt;p&gt;管理员应配置 Kubernetes 集群中的所有流量 —— 包括组件、节点和控制计划之间的流量（使用 TLS 1.2 或 1.3 加密）。&lt;/p&gt;
&lt;p&gt;加密可以在安装过程中设置，也可以在安装后使用 TLS 引导（详见 &lt;a href=&#34;https://kubernetes.io/docs/tasks/administer-cluster/securing-a-cluster/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes 文档&lt;/a&gt;）来创建并向节点分发证书。对于所有的方法，必须在节点之间分发证书，以便安全地进行通信。&lt;/p&gt;
&lt;h2 id=&#34;secret&#34;&gt;Secret&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;默认情况下，Secret 被存储为未加密的 base64 编码的字符串，并且可以被任何有 API 权限的人检索。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Kubernetes Secret 维护敏感信息，如密码、OAuth 令牌和 SSH 密钥。与在 YAML 文件、容器镜像或环境变量中存储密码或令牌相比，将敏感信息存储在 Secret 中提供了更大的访问控制。默认情况下，Kubernetes 将 Secret 存储为未加密的 base64 编码字符串，任何有 API 权限的人都可以检索到。可以通过对 &lt;strong&gt;secret&lt;/strong&gt; 资源应用 RBAC 策略来限制访问。&lt;/p&gt;
&lt;p&gt;可以通过在 API 服务器上配置静态数据加密或使用外部密钥管理服务（KMS）来对秘密进行加密，该服务可以通过云提供商提供。要启用使用 API 服务器的 Secret 数据静态加密，管理员应修改 &lt;code&gt;kube-apiserver&lt;/code&gt; 清单文件，以执行使用 &lt;code&gt;--encryption-provider-config&lt;/code&gt; 参数执行。&lt;a href=&#34;../appendix/h/&#34;&gt;附录 H&lt;/a&gt; 中显示了一个 &lt;code&gt;encryption-provider-config&lt;/code&gt; 的例子：加密实例。使用 KMS 提供者可以防止原始加密密钥被存储在本地磁盘上。要用 KMS 提供者加密 Secret，&lt;code&gt;encryption-provider-config&lt;/code&gt; 文件中应指定 KMS 提供者，如&lt;a href=&#34;../appendix/i/&#34;&gt;附录 I&lt;/a&gt; 的 KMS 配置示例所示。&lt;/p&gt;
&lt;p&gt;在应用了 &lt;code&gt;encryption-provider-config&lt;/code&gt; 文件后，管理员应该运行以下命令来读取和加密所有的 Secret。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl get secrets --all-namespaces -o json &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; kubectl replace -f -
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;保护敏感的云基础设施&#34;&gt;保护敏感的云基础设施&lt;/h2&gt;
&lt;p&gt;Kubernetes 通常被部署在云环境中的虚拟机上。因此，管理员应该仔细考虑 Kubernetes 工作节点所运行的虚拟机的攻击面。在许多情况下，在这些虚拟机上运行的 Pod 可以在不可路由的地址上访问敏感的云元数据服务。这些元数据服务为网络行为者提供了关于云基础设施的信息，甚至可能是云资源的短期凭证。网络行为者滥用这些元数据服务进行特权升级。Kubernetes 管理员应通过使用网络策略或通过云配置策略防止 Pod 访问云元数据服务。由于这些服务根据云供应商的不同而不同，管理员应遵循供应商的指导来加固这些访问载体。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用 SPIFFE 身份通知授权</title>
      <link>https://lib.jimmysong.io/spiffe/using-spiffe-identities-to-inform-authorization/</link>
      <pubDate>Fri, 07 Oct 2022 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/spiffe/using-spiffe-identities-to-inform-authorization/</guid>
      <description>&lt;p&gt;本章解释了如何实施使用 SPIFFE 身份的授权策略。&lt;/p&gt;
&lt;h2 id=&#34;在-spiffe-的基础上建立授权&#34;&gt;在 SPIFFE 的基础上建立授权&lt;/h2&gt;
&lt;p&gt;SPIFFE 专注于软件安全加密身份的发布和互操作性，但正如本书前面提到的，它并不直接解决这些身份的使用或消费问题。&lt;/p&gt;
&lt;p&gt;SPIFFE 经常作为一个强大的授权系统的基石，而 SPIFFE ID 本身在这个故事中扮演着重要角色。在这一节中，我们将讨论使用 SPIFFE 来建立授权的选择。&lt;/p&gt;
&lt;h2 id=&#34;认证与授权authn-vs-authz&#34;&gt;认证与授权（AuthN Vs AuthZ）&lt;/h2&gt;
&lt;p&gt;一旦一个工作负载有了安全的加密身份，它就可以向其他服务证明其身份。向外部服务证明身份被称为认证（Authentication）。一旦通过认证，该服务就可以选择允许哪些行动。这个过程被称为授权（Authorization）。&lt;/p&gt;
&lt;p&gt;在一些系统中，任何被认证的实体也被授权。因为 SPIFFE 会在服务启动时自动授予其身份，所以清楚地认识到并不是每一个能够验证自己的实体都应该被授权，这一点至关重要。&lt;/p&gt;
&lt;h2 id=&#34;授权类型&#34;&gt;授权类型&lt;/h2&gt;
&lt;p&gt;有很多方法可以对授权进行建模。最简单的解决方案是在每个资源上附加一个授权身份的&lt;strong&gt;允许列表（allowlist）&lt;/strong&gt;。然而，随着我们的探索，我们会注意到在处理生态系统的规模和复杂性时，允许列表的方法有几个限制。我们将研究两个更复杂的模型：基于角色的访问控制（RBAC）和基于属性的访问控制（ABAC）。&lt;/p&gt;
&lt;h3 id=&#34;允许列表&#34;&gt;允许列表&lt;/h3&gt;
&lt;p&gt;在小型生态系统中，或者在刚刚开始使用 SPIFFE 和 SPIRE 时，有时最好保持简单。例如，如果你的生态系统中只有十几个身份，对每个资源（即服务、数据库）的访问可以通过维护一个有访问权限的身份列表来管理。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ghostunnel server --allow-uri spiffe://example.com/blog/web
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这里，ghostunnel 服务器仅根据客户的身份明确地授权访问。&lt;/p&gt;
&lt;p&gt;这种模式的优势在于它很容易理解。只要你有数量有限的身份不改变，就很容易定义和更新资源的访问控制。然而，可扩展性会成为一个障碍。如果一个组织有成百上千的身份，维护允许名单很快就会变得无法管理。例如，每次增加一个新的服务，可能需要运维团队更新许多允许列表。&lt;/p&gt;
&lt;h3 id=&#34;基于角色的访问控制rbac&#34;&gt;基于角色的访问控制（RBAC）&lt;/h3&gt;
&lt;p&gt;在基于角色的访问控制（RBAC）中，服务被分配给角色，然后根据角色来指定访问控制。然后，随着新服务的增加，只有相对较少的角色需要被编辑。&lt;/p&gt;
&lt;p&gt;虽然有可能将一个服务的角色编码到它的 SPIFFE ID 中，但这通常是一种不好的做法，因为 SPIFFE ID 是静态的，而它被分配到的角色可能要改变。相反，最好是使用 SPIFFE ID 到角色的外部映射。&lt;/p&gt;
&lt;h3 id=&#34;基于属性的访问控制abac&#34;&gt;基于属性的访问控制（ABAC）&lt;/h3&gt;
&lt;p&gt;基于属性的访问控制（ABAC）是一个模型，授权决定是基于与服务相关的属性。结合 RBAC，ABAC 可以成为一个强大的工具来加强授权策略。例如，为了满足法律要求，可能有必要限制来自特定地区的服务对数据库的访问。区域信息可以是 ABAC 模型中的一个属性，用于授权并在 SPIFFE ID 方案中编码。&lt;/p&gt;
&lt;h2 id=&#34;设计用于授权的-spiffe-id-方案&#34;&gt;设计用于授权的 SPIFFE ID 方案&lt;/h2&gt;
&lt;p&gt;SPIFFE 规范没有规定或限制你可以或应该将哪些信息编码到 SPIFFE ID 中。你需要注意的唯一限制来自于最大长度的 SAN 扩展和你被允许使用的字符。&lt;/p&gt;
&lt;div class=&#34;alert-note-title&#34;&gt;
    &lt;p&gt;忠告&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
    在将授权元数据编码成你的组织的 SPIFFE ID 格式时，要特别小心。下面的例子说明了如何做到这一点，因为我们并不想引入额外的授权概念。
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;SPIFFE 方案实例&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为了对 SPIFFE 身份子串做出授权决定，我们必须定义身份的每一部分意味着什么。你可以用按顺序编码信息的格式来设计你的方案。在这种情况下，第一部分可能代表一个地区，第二部分代表环境，以此类推。&lt;/p&gt;
&lt;p&gt;下面是一个计划和身份的例子。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;spiffe://trust.domain.org/&amp;lt;地区&amp;gt;/&amp;lt;dev,stage,prod&amp;gt;/&amp;lt;组织&amp;gt;/&amp;lt;工作负载名称&amp;gt;。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;















&lt;figure  id=&#34;figure-图-81一个组织的-spiffe-id-的组成部分和潜在含义&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f8-1.jpg&#34; alt=&#34;图 8.1：一个组织的 SPIFFE ID 的组成部分和潜在含义。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 8.1：一个组织的 SPIFFE ID 的组成部分和潜在含义。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;身份方案不仅可以采取一系列固定字段的形式，还可以采取更复杂的结构，这取决于一个组织的需求。我们可以看的一个常见的例子是跨不同协调系统的工作负载身份。例如，在 Kubernetes 和 OpenShift 中，工作负载的命名规则是不同的。下面的图示就是一个例子。你可能注意到，这些字段不仅指的是不同的属性和对象，而且 SPIFFE ID 的结构也取决于上下文。&lt;/p&gt;
&lt;p&gt;消费者可以通过观察身份的前缀来区分方案的结构。例如，一个前缀为 &lt;code&gt;spiffe://trust.domain.org/Kubernetes/...&lt;/code&gt; 的身份将根据下图的方案结构被解析为一个 Kubernetes 身份。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-82另一个潜在的-spiffe-id-方案的说明&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f8-2.jpg&#34; alt=&#34;图 8.2：另一个潜在的 SPIFFE ID 方案的说明。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 8.2：另一个潜在的 SPIFFE ID 方案的说明。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;方案变更&#34;&gt;方案变更&lt;/h3&gt;
&lt;p&gt;更多时候，组织会发生变化，对身份方案的要求也会发生变化。这可能是由于组织结构的调整，甚至是技术栈的转变。可能很难预测你的环境在几年后会有多大的变化。因此，在设计 SPIFFE 身份识别方案时，关键是要考虑到未来可能发生的变化，以及这些变化将如何影响基于 SPIFFE 身份识别的其他系统。你应该考虑如何将后向和前向兼容性纳入该方案。正如我们之前已经提到的，在一个有序的方案中，你只需要在你的 SPIFFE ID 的末端添加新的实体；但是如果你需要在中间添加一些东西呢？&lt;/p&gt;
&lt;p&gt;一种方法是用基于键值对的方案，另一种方法是我们都很熟悉的方法：版本管理！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基于键值对的方案&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们注意到，上面的方案设计都是有序的。方案的评估是通过查看身份的前缀来决定如何评估后面的后缀。然而，我们注意到，由于这种排序，很难轻易地在方案中增加新的字段。&lt;/p&gt;
&lt;p&gt;键值对，就其性质而言，是无序的，这也是一种方法，可以轻松地将字段扩展到身份识别方案中，而不需要太多改变。例如，你可以使用带有已知分隔符的键值对，例如，身份内的列&lt;code&gt;：&lt;/code&gt;字符。在这种情况下，上面的标识可能被编码为以下方式。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;spiffe://trust.domain.org/environment:dev/region:us/organization:zero/name:turtle
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;因为身份的消费者将其处理成一组键值对，所以可以在不改变方案的基本结构的情况下增加更多的键。另外，SPIFFE 还有可能在将来支持将键值对纳 SVID。&lt;/p&gt;
&lt;p&gt;像往常一样，应该考虑结构化和非结构化数据类型之间的权衡。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;版本管理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这里可能的解决方案之一是将版本控制纳入方案。版本可以是你的方案中的第一个项目，也是最关键的部分。其余的系统在处理 SPIFFE ID 数据时需要遵循版本和编码实体之间的映射关系。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;spiffe://trust.domain.org/v1/region/environment/organization/workload
v1 scheme:
0 = version
1 = region
2 = environment
3 = organization
4 = workload
spiffe://trust.domain.org/v2/region/datacenter/environment/organization/wor
kload
v2 scheme:
0 = version
1 = region
2 = datacenter
3 = environment
4 = organization
5 = workload
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在 SPIFFE 中，一个工作负载可以有多个身份。然而，由你的工作负载来决定使用哪个身份。为了保持授权的简单性，每个工作负载最好先有一个身份，必要时再增加。&lt;/p&gt;
&lt;h2 id=&#34;使用-hashicorp-vault-的授权示例&#34;&gt;使用 HashiCorp Vault 的授权示例&lt;/h2&gt;
&lt;p&gt;让我们通过一个工作负载可能希望与之对话的服务的例子：Hashicorp Vault。我们将通过一个 RBAC 的例子和一个 ABAC 的例子，并涵盖一些使用 SPIFFE/SPIRE 执行授权时的问题和注意事项。&lt;/p&gt;
&lt;p&gt;Vault 是一个&lt;strong&gt;秘密存储器（secret store）&lt;/strong&gt;：管理员可以用它来安全地存储秘密，如密码、API 密钥和服务可能需要的私人密钥。由于许多组织仍然需要安全地存储秘密，即使在使用 SPIFFE 提供安全身份之后，使用 SPIFFE 来访问 Vault 是一个常见的请求。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;spiffe://example.org/&amp;lt;区域&amp;gt;/&amp;lt;dev,stage,prod&amp;gt;/&amp;lt;组织&amp;gt;/&amp;lt;工作负载名称&amp;gt;。
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;为-spiffe-身份配置-vault&#34;&gt;为 SPIFFE 身份配置 Vault&lt;/h3&gt;
&lt;p&gt;在处理客户请求时，Vault 同时处理身份的认证和授权任务。像许多其他处理资源（在这里是指秘密）管理的应用程序一样，它有一个可插入各种认证和授权机制的接口。&lt;/p&gt;
&lt;p&gt;在 Vault 中，这是通过 &lt;a href=&#34;https://www.vaultproject.io/api/auth/cert&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TLS 证书认证方法&lt;/a&gt;或 &lt;a href=&#34;https://www.vaultproject.io/api-docs/auth/jwt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JWT/OIDC 认证方法&lt;/a&gt;，可以配置为识别和验证从 SPIFFE 生成的 JWT 和 X509-SVID。为了使 Vault 能够使用 SPIFFE 身份来使用，信任包需要配置这些可插拔的接口，以便它能够验证 SVID。&lt;/p&gt;
&lt;p&gt;这就解决了认证问题，但我们仍然需要配置它来执行授权。要做到这一点，需要为 Vault 制定一套授权规则，以决定哪些身份可以访问秘密。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一个 SPIFFE RBAC 的例子&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在下面的例子中，我们将假设我们使用的是 X509-SVID。Vault 允许创建规则，它可以表达哪些身份可以访问哪些秘密。这通常包括创建一组访问权限，并创建一个将其与访问绑定的规则。&lt;/p&gt;
&lt;p&gt;例如，一个简单的 RBAC 策略：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;display_name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;medical-access-role&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;allowed_common_names&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;spiffe://example.org/eu-de/prod/medical/data-proc-1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;spiffe://example.org/eu-de/prod/medical/data-proc-2&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;token_policies&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;medical-use&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这编码了一条规则，说明如果身份为 &lt;code&gt;spiffe://example.org/eu-de/prod/medical/data-proc-1&lt;/code&gt;，或 &lt;code&gt;spiffe://example.org/eu-de/prod/medical/data-proc-2&lt;/code&gt; 的客户能够获得一组权限（&lt;code&gt;medical-use&lt;/code&gt;），它将授予医疗数据的访问权。&lt;/p&gt;
&lt;p&gt;在这种情况下，我们已经授予这两个身份对秘密的访问权。Vault 负责将两个不同的 SPIFFE ID 映射到相同的访问控制策略中，这使得这成为 RBAC 而不是 allowlist。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一个 SPIFFE ABAC 的例子&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在某些情况下，基于属性而不是基于角色来设计授权策略是比较容易的。通常情况下，当有多个不同的属性集可以单独与策略相匹配时，就需要这样做，而要创建足够多的独特角色来匹配每种情况是很有挑战性的。&lt;/p&gt;
&lt;p&gt;根据上述例子，我们可以创建一个策略，授权具有某个 SPIFFE ID 前缀的工作负载。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;display_name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;medical-access-role&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;allowed_common_names&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;spiffe://example.org/eu/prod/medical/batch-job*&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;token_policies&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;medical-use&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该策略规定，所有前缀为 &lt;code&gt;spiffe://example.org/eu/prod/medical/batch-job&lt;/code&gt; 的工作负载将被授权访问该秘密。这可能很有用，因为批处理工作是短暂的，可能会被随机分配一个后缀。&lt;/p&gt;
&lt;p&gt;另一个例子是一个有以下内容的策略：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;display_name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;medical-access-role&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;allowed_common_names&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;spiffe://example.org/eu-*/prod/medical/data-proc&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;token_policies&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;medical-use&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该政策的预期效果是说明只有任何欧盟数据中心的 &lt;code&gt;data-proc&lt;/code&gt; 工作负载可以访问医疗秘密。因此，如果在欧盟的一个新数据中心启动一个新的工作负载，任何 &lt;code&gt;data-proc&lt;/code&gt; 工作负载将被授权访问医疗秘密。&lt;/p&gt;
&lt;h3 id=&#34;open-policy-agent&#34;&gt;Open Policy Agent&lt;/h3&gt;
&lt;p&gt;开放策略代理（OPA）是云原生计算基金会（CNCF）的一个项目，执行高级授权。它使用一种名为 Rego 的特定领域编程语言，有效地评估传入请求的属性，并确定它应该被允许访问哪些资源。有了 Rego，就可以设计详细的授权策略和规则，包括 ABAC 和 RBAC。它还可以考虑到与 SPIFFE 无关的连接属性，例如传入请求的用户 ID。Rego 策略存储在文本文件中，因此它们可以通过持续集成系统集中维护和部署，甚至可以进行单元测试。&lt;/p&gt;
&lt;p&gt;这里有一个例子，它编码了对某个数据库服务的访问，该服务应该只被某个 SPIFFE ID 所允许。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;允许后端服务访问数据库服务&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;allow&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;err&#34;&gt;http_request.path&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;/good/db&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;err&#34;&gt;http_request.method&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;GET&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;err&#34;&gt;svc_spiffe_id&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;spiffe://domain.test/eu-du/backend-server&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果需要实施更详细的授权策略，那么 OPA 是一个不错的选择。Envoy 代理同时集成了 SPIRE 和 OPA，因此可以在不改变服务代码的情况下立即开始使用。要阅读更多关于使用 OPA 进行授权的细节，请查阅 OPA 文档。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;授权本身就是一个巨大而复杂的话题，远远超出了本书的范围。然而，就像生态系统中与身份交互的许多其他方面一样，了解身份与授权（以及更广泛的策略）的关系是非常有用的。&lt;/p&gt;
&lt;p&gt;在本章中，我们介绍了使用 SPIFFE 身份认证的几种思考方式，以及与身份认证有关的设计考虑。这将有助于更好地了解你的身份解决方案的设计，以迎合你的组织的授权和策略需求。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>认证和授权</title>
      <link>https://lib.jimmysong.io/kubernetes-hardening-guidance/authentication-and-authorization/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/kubernetes-hardening-guidance/authentication-and-authorization/</guid>
      <description>&lt;p&gt;认证和授权是限制访问集群资源的主要机制。如果集群配置错误，网络行为者可以扫描知名的 Kubernetes 端口，访问集群的数据库或进行 API 调用，而不需要经过认证。用户认证不是 Kubernetes 的一个内置功能。然而，有几种方法可以让管理员在集群中添加认证。&lt;/p&gt;
&lt;h2 id=&#34;认证&#34;&gt;认证&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;管理员必须向集群添加一个认证方法，以实现认证和授权机制。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Kubernetes 集群有两种类型的用户：服务账户和普通用户账户。服务账户代表 Pod 处理 API 请求。认证通常由 Kubernetes 通过 ServiceAccount Admission Controller 使用承载令牌自动管理。不记名令牌被安装到 Pod 中约定俗成的位置，如果令牌不安全，可能会在集群外使用。正因为如此，对 Pod Secret 的访问应该限制在那些需要使用 Kubernetes RBAC 查看的人身上。对于普通用户和管理员账户，没有自动的用户认证方法。管理员必须在集群中添加一个认证方法，以实现认证和授权机制。&lt;/p&gt;
&lt;p&gt;Kubernetes 假设由一个独立于集群的服务来管理用户认证。&lt;a href=&#34;https://kubernetes.io/docs/reference/access-authn-authz/authentication&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes 文档中&lt;/a&gt;列出了几种实现用户认证的方法，包括客户端证书、承载令牌、认证插件和其他认证协议。至少应该实现一种用户认证方法。当实施多种认证方法时，第一个成功认证请求的模块会缩短评估的时间。管理员不应使用静态密码文件等弱方法。薄弱的认证方法可能允许网络行为者冒充合法用户进行认证。&lt;/p&gt;
&lt;p&gt;匿名请求是被其他配置的认证方法拒绝的请求，并且不与任何个人用户或 Pod 相联系。在一个设置了令牌认证并启用了匿名请求的服务器中，没有令牌的请求将作为匿名请求执行。在 Kubernetes 1.6 和更新的版本中，匿名请求是默认启用的。当启用 RBAC 时，匿名请求需要 &lt;code&gt; system:anonymous&lt;/code&gt; 用户或 &lt;code&gt;system:unauthenticated&lt;/code&gt; 组的明确授权。匿名请求应该通过向 API 服务器传递 &lt;code&gt;--anonymous-auth=false&lt;/code&gt; 选项来禁用。启用匿名请求可能会允许网络行为者在没有认证的情况下访问集群资源。&lt;/p&gt;
&lt;h2 id=&#34;基于角色的访问控制&#34;&gt;基于角色的访问控制&lt;/h2&gt;
&lt;p&gt;RBAC 是根据组织内个人的角色来控制集群资源访问的一种方法。在 Kubernetes 1.6 和更新的版本中，RBAC 是默认启用的。要使用 kubectl 检查集群中是否启用了 RBAC，执行 &lt;code&gt;kubectl api-version&lt;/code&gt;。如果启用，应该列出&lt;code&gt;rbac.authorization.k8s.io/v1&lt;/code&gt; 的 API 版本。云 Kubernetes 服务可能有不同的方式来检查集群是否启用了 RBAC。如果没有启用 RBAC，在下面的命令中用 &lt;code&gt;--authorization-mode&lt;/code&gt; 标志启动 API 服务器。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kube-apiserver --authorization-mode&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;RBAC
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;留下授权模式标志，如 &lt;code&gt;AlwaysAllow&lt;/code&gt;，允许所有的授权请求，有效地禁用所有的授权，限制了执行最小权限的访问能力。&lt;/p&gt;
&lt;p&gt;可以设置两种类型的权限：&lt;code&gt;Roles&lt;/code&gt; 和 &lt;code&gt;ClusterRoles&lt;/code&gt;。&lt;code&gt;Roles&lt;/code&gt; 为特定命名空间设置权限，而 &lt;code&gt;ClusterRoles&lt;/code&gt; 则为所有集群资源设置权限，而不考虑命名空间。&lt;code&gt;Roles&lt;/code&gt; 和 &lt;code&gt;ClusterRoles&lt;/code&gt; 只能用于添加权限。没有拒绝规则。如果一个集群被配置为使用 RBAC，并且匿名访问被禁用，Kubernetes API 服务器将拒绝没有明确允许的权限。&lt;a href=&#34;../appendix/j/&#34;&gt;&lt;strong&gt;附录&lt;/strong&gt; J&lt;/a&gt; 中显示了一个 RBAC 角色的例子：&lt;code&gt;pod-reader&lt;/code&gt; RBAC 角色。&lt;/p&gt;
&lt;p&gt;一个 &lt;code&gt;Role&lt;/code&gt; 或 &lt;code&gt;ClusterRole&lt;/code&gt; 定义了一个权限，但并没有将该权限与一个用户绑定。&lt;code&gt;RoleBindings&lt;/code&gt; 和 &lt;code&gt;ClusterRoleBindings&lt;/code&gt; 用于将一个 &lt;code&gt;Roles&lt;/code&gt; 或 &lt;code&gt;ClusterRoles&lt;/code&gt; 与一个用户、组或服务账户联系起来。角色绑定将角色或集群角色的权限授予定义的命名空间中的用户、组或服务账户。&lt;code&gt;ClusterRoles&lt;/code&gt; 是独立于命名空间而创建的，然后可以使用 &lt;code&gt;RoleBinding&lt;/code&gt; 来限制命名空间的范围授予个人。&lt;code&gt;ClusterRoleBindings&lt;/code&gt; 授予用户、群组或服务账户跨所有集群资源的 &lt;code&gt;ClusterRoles&lt;/code&gt;。RBAC &lt;code&gt;RoleBinding&lt;/code&gt; 和 &lt;code&gt;ClusterRoleBinding&lt;/code&gt; 的例子在&lt;a href=&#34;../appendix/k/&#34;&gt;&lt;strong&gt;附录 K：RBAC &lt;code&gt;RoleBinding&lt;/code&gt; 和 &lt;code&gt;ClusterRoleBinding&lt;/code&gt; 示例&lt;/strong&gt;&lt;/a&gt;中。&lt;/p&gt;
&lt;p&gt;要创建或更新 &lt;code&gt;Roles&lt;/code&gt; 和 &lt;code&gt;ClusterRoles&lt;/code&gt;，用户必须在同一范围内拥有新角色所包含的权限，或者拥有对 &lt;code&gt;rbac.authorization.k8s.io&lt;/code&gt; API 组中的 &lt;code&gt;Roles&lt;/code&gt; 或 &lt;code&gt;ClusterRoles&lt;/code&gt; 资源执行升级动词的明确权限。创建绑定后，&lt;code&gt;Roles&lt;/code&gt; 或 &lt;code&gt;ClusterRoles&lt;/code&gt; 是不可改变的。要改变一个角色，必须删除该绑定。&lt;/p&gt;
&lt;p&gt;分配给用户、组和服务账户的权限应该遵循最小权限原则，只给资源以必要的权限。用户或用户组可以被限制在所需资源所在的特定命名空间。默认情况下，为每个命名空间创建一个服务账户，以便 Pod 访问 Kubernetes API。可以使用 RBAC 策略来指定每个命名空间的服务账户的允许操作。对 Kubernetes API 的访问是通过创建 RBAC 角色或 &lt;code&gt;ClusterRoles&lt;/code&gt; 来限制的，该角色具有适当的 API 请求动词和所需的资源，该行动可以应用于此。有一些工具可以通过打印用户、组和服务账户及其相关分配的 &lt;code&gt;Roles&lt;/code&gt; 和 &lt;code&gt;ClusterRoles&lt;/code&gt; 来帮助审计 RBAC 策略。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>9. SPIFFE 与其他安全技术对比</title>
      <link>https://lib.jimmysong.io/spiffe/comparing-spiffe-to-other-security-technologies/</link>
      <pubDate>Fri, 07 Oct 2022 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/spiffe/comparing-spiffe-to-other-security-technologies/</guid>
      <description>&lt;p&gt;本章将 SPIFFE 与其他解决类似问题的技术进行了比较。&lt;/p&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;SPIFFE 和 SPIRE 所解决的问题并不新鲜。每一个分布式系统都必须有某种形式的身份认证才是安全的。网络公钥基础设施、Kerberos/Active Directory、OAuth、秘密存储和服务网格就是例子。&lt;/p&gt;
&lt;p&gt;然而，这些现有的身份识别形式并不适合用于识别组织内的内部服务。网络 PKI 的实施具有挑战性，对于典型的内部部署来说也是不安全的。Kerberos，Active Directory 的认证组件，需要一个永远在线的票证授予服务器，并且没有任何同等的证明。服务网格、秘密管理器和覆盖网络都解决了服务身份的部分难题，但并不完整。SPIFFE 和 SPIRE 是目前服务身份问题的唯一完整解决方案。&lt;/p&gt;
&lt;h2 id=&#34;网络公钥基础设施&#34;&gt;网络公钥基础设施&lt;/h2&gt;
&lt;p&gt;网络公钥基础设施（Web PKI）是广泛使用的从我们的网络浏览器连接到安全网站的方法。它利用 X.509 证书来断言用户正在连接到他们打算访问的网站。由于你可能对这种模式很熟悉，所以有理由问：为什么我们不能在我们的组织内使用 Web PKI 进行服务识别？&lt;/p&gt;
&lt;p&gt;在传统的 Web PKI 中，证书的发放和更新完全是手工操作。这些手工过程不适合现代基础设施，因为在现代基础设施中，服务实例可能随时动态地增长和缩小。然而，在过去的几年里，网络 PKI 已经转向了一种自动的证书颁发和更新过程，称为域名验证（Domain Validation）。&lt;/p&gt;
&lt;p&gt;在域名验证中，证书颁发机构向证书请求者发送一个令牌。证书请求者使用 HTTP 服务器共享这个令牌。证书颁发机构访问该令牌，对其进行验证，然后签署该证书。&lt;/p&gt;
&lt;p&gt;这种安排的第一个问题是，内部服务经常没有单独的 DNS 名称或 IP 地址。如果你想在所有服务之间进行相互的 TLS，那么即使是&lt;strong&gt;客户端&lt;/strong&gt;也需要 DNS 名称来获得证书，这对配置来说是个挑战。为在一台主机上运行的多个服务分配身份需要单独的 DNS 名称，这对配置来说也是一个挑战。&lt;/p&gt;
&lt;p&gt;一个更微妙的问题是，任何能够成功响应请求的人都可以成功获得证书。这可能是在同一台服务器上运行的不同服务，甚至是在可以篡改本地二层网络的不同服务器上。&lt;/p&gt;
&lt;p&gt;一般来说，虽然网络 PKI 对互联网上的安全网站很有效，但它并不适合用于服务身份。许多需要证书的内部服务并没有 DNS 名称。如果攻击者成功渗透到本地网络的任何服务中，目前可用的做证书验证的过程很容易被破坏。&lt;/p&gt;
&lt;h2 id=&#34;active-directoryad和-kerberos&#34;&gt;Active Directory（AD）和 Kerberos&lt;/h2&gt;
&lt;p&gt;Kerberos 是一个认证协议，最初于 20 世纪 80 年代末在 MIT 开发。最初，它被设计为允许使用一个集中的用户数据库进行人对服务的认证。后来，Kerberos 被扩展到支持服务对服务的认证，以及除了用户账户之外还可以使用机器账户。Kerberos 协议本身是与帐户数据库无关的。然而，Kerberos 最常见的用法是在 Windows 域中进行认证，使用 Active Directory (AD) 作为账户数据库。&lt;/p&gt;
&lt;p&gt;Kerberos 的核心凭证被称为 &lt;strong&gt;票据（ticket）&lt;/strong&gt;。一个票据是一个可以被单个客户用来访问单个资源的凭证。客户端通过调用 Ticket Granting Service (TGS) 获得票据。客户端在访问每一个资源时都需要一个新的票据。这种设计导致了更多的聊天协议并降低了可靠性。&lt;/p&gt;
&lt;p&gt;所有服务都与 TGS 建立了信任关系。当一个服务在 TGS 注册时，它与 TGS 共享密钥材料，如对称秘密或公钥。TGS 使用密钥材料来创建票据，以验证对该服务的访问。轮换密钥材料需要服务和 TGS 之间的协调。服务必须接受以前的密钥材料，并保持对它的了解，以便现有的票据保持有效。&lt;/p&gt;
&lt;h3 id=&#34;spire-如何缓解-kerberos-和-ad-的弊端&#34;&gt;SPIRE 如何缓解 Kerberos 和 AD 的弊端&lt;/h3&gt;
&lt;p&gt;在 SPIRE 中，每个客户端和资源将调用 SPIRE 服务器一次，以获得其凭证（SVID），所有资源都可以在信任域（和联合信任域）中验证这些凭证，而无需再调用 SPIRE 服务器。SPIRE 的架构避免了为每个需要访问的资源获取新凭证的所有开销。&lt;/p&gt;
&lt;p&gt;基于 PKI 的认证机制，如 SPIRE，使凭证轮换更简单，因为这种服务和集中式验证器之间的密钥材料协调并不存在。&lt;/p&gt;
&lt;p&gt;最后，值得注意的是，Kerberos 协议将服务与主机名紧密结合在一起，这使得每个主机和集群的多个服务变得复杂。另一方面，SPIRE 很容易支持每个工作负载和集群的多个 SVID。也有可能将同一个 SVID 分配给多个工作负载。这些特性提供了一个强大的、高度可扩展的身份识别方法。&lt;/p&gt;
&lt;h2 id=&#34;oauth-和-openid-connectoidc&#34;&gt;OAuth 和 OpenID Connect（OIDC）&lt;/h2&gt;
&lt;p&gt;OAuth 是一个旨在实现访问 ** 委托（delegation）** 协议，而不一定是作为一个实现认证本身的协议。OIDC 的主要目的是允许人类允许一个二级网站（或移动应用程序）代表他们对不同的一级网站采取行动。在实践中，该协议能够在二级网站上对用户进行认证，因为被委托的访问凭证（OAuth 协议中的访问令牌）是来自一级网站的证明，即用户针对该网站进行了认证。&lt;/p&gt;
&lt;p&gt;如果主网站包括用户信息或提供了一种使用访问令牌检索用户信息的方法，那么二级网站可以使用主网站的令牌来验证用户。OpenID Connect 是 OAuth 的一种观点，是一个很好的例子。&lt;/p&gt;
&lt;p&gt;OAuth 是为人类设计的，而不是为非人类实体设计的。OAuth 的登录过程需要浏览器的重定向与交互式密码。OAuth 2.0 与其前身相似，包括对非人类实体的支持，通常是通过创建服务账户（即代表工作负载而不是人类的用户身份）。当一个工作负载想要获得 OAuth 访问令牌以访问远程系统时，它必须使用 OAuth 客户端的秘密、密码或刷新令牌来验证 OAuth 提供者并接收访问令牌。工作负载都应该有独立的凭证，以实现工作负载身份的高度精细化。对于弹性计算来说，这些凭证的管理很快就会变得复杂和困难，因为每个工作负载和身份都必须向 OAuth 提供商注册。当秘密必须被撤销时，长期存在的秘密会带来更多的复杂性。由于轮换，秘密在环境中的传播减少了基础设施的流动性，在某些情况下，如果开发人员手动管理秘密，可能会出现攻击的载体。&lt;/p&gt;
&lt;h3 id=&#34;spiffe-和-spire-如何减轻-oauth-和-oidc-的复杂性&#34;&gt;SPIFFE 和 SPIRE 如何减轻 OAuth 和 OIDC 的复杂性&lt;/h3&gt;
&lt;p&gt;依靠预先存在的凭证来识别工作负载，如 OAuth 客户秘密或刷新令牌，无法解决底层乌龟的问题（如第 1 章所解释）。在这些情况下，利用 SPIRE 作为身份提供者，允许在与 OAuth 基础设施联系之前发布引导凭证（bootstrap credential）或底层乌龟。SPIRE 极大地提高了安全性，因为没有长期的静态凭证需要与工作负载本身共同部署。SPIFFE 可以作为 OAuth 的补充。它消除了直接管理 OAuth 客户端凭证的需要 —— 应用程序可以根据需要使用他们的 SPIFFE ID 来验证 OAuth 提供商。事实上，OAuth 访问令牌本身可以是 SVID，允许用户以与工作负载相同的方式对 SPIFFE 生态系统中的服务进行认证。参见与 OIDC 的集成来了解更多。&lt;/p&gt;
&lt;h2 id=&#34;秘密管理者&#34;&gt;秘密管理者&lt;/h2&gt;
&lt;p&gt;秘密管理器通常代表工作负载或管理员控制、审计和安全地存储敏感信息（共享秘密，通常是密码）。一些秘密管理器可以执行额外的功能，如加密和解密数据。许多秘密管理器的一个共同特征是中央存储，即所谓的&lt;em&gt;保险库（vault）&lt;/em&gt;，它对数据进行加密。工作负载在执行秘密检索或数据解密等操作前必须单独对保险库进行认证。&lt;/p&gt;
&lt;p&gt;部署秘密管理器的一个典型的架构挑战是如何安全地存储工作负载用来验证秘密管理器本身的凭证。这有时被称为 &amp;ldquo;零号凭证&amp;rdquo;、“引导凭证”，或者更广泛地说，安全引入的过程。&lt;/p&gt;
&lt;p&gt;通过提供一个可以存储、检索、轮换和撤销这些秘密的安全位置，使用一个秘密管理器极大地改善了依赖共享秘密的系统的安全状况。然而，大量的使用会使共享秘密的使用永久化，而不是使用强大的身份识别。&lt;/p&gt;
&lt;h3 id=&#34;如何利用-spiffe-和-spire-来减轻秘密管理人员的挑战&#34;&gt;如何利用 SPIFFE 和 SPIRE 来减轻秘密管理人员的挑战&lt;/h3&gt;
&lt;p&gt;如果你确实需要使用一个秘密管理器，它可以被配置为使用 SPIFFE 证书进行认证。这允许你在服务之间使用相同的 SPIFFE 证书进行直接认证，并检索秘密来与非 SPIFFE 证书对话。&lt;/p&gt;
&lt;h2 id=&#34;服务网格&#34;&gt;服务网格&lt;/h2&gt;
&lt;p&gt;服务网格旨在通过提供自动认证、授权和强制执行工作负载之间的相互 TLS 来简化工作负载之间的通信。服务网格通常提供集成的工具：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确定工作负载。&lt;/li&gt;
&lt;li&gt;调解工作负载之间的通信，通常通过部署在每个工作负载附近的代理（sidecar 模式）。&lt;/li&gt;
&lt;li&gt;确保每个相邻的代理执行一致的认证和授权策略（一般通过授权策略引擎）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所有主要的服务网格都包括一个原生的平台特定服务认证机制。&lt;/p&gt;
&lt;p&gt;虽然服务网格可以在没有加密身份平面的情况下运行，但为了允许服务间的通信和发现，不可避免地要创建弱形式的身份。本实施方案中的服务网格不提供安全功能，也不解决前面讨论的现有信任根身份问题。&lt;/p&gt;
&lt;p&gt;许多服务网格实现了自己的加密身份平面，或与现有的身份解决方案集成，以提供过境通信安全和信任根的解决。大多数服务网格实现了 SPIFFE 或其部分内容。许多服务网格实现都采用了 SPIFFE 规范的部分实现（包括 Istio 和 Consul），并可被视为 SPIFFE 身份提供商。有些将 SPIRE 作为其解决方案的一个组成部分（如 GreyMatter 或 Network Service Mesh）。&lt;/p&gt;
&lt;p&gt;例如，Istio 使用 SPIFFE 进行节点识别，但其身份模型与 Kubernetes 的特定基元紧密耦合，并完全基于 Kubernetes。没有办法在 Istio 中基于 Kubernetes 之外的属性来识别服务。IBM 解释了&lt;a href=&#34;https://developer.ibm.com/articles/istio-identity-spiffe-spire/%23why-the-current-istio-mechanism-is-not-enough&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;为什么目前的 Istio 机制是不够的&lt;/a&gt;。与 SPIRE 这样的通用身份控制平面相比，当希望获得更丰富的证明机制时，或者当服务需要使用通用身份系统在 Istio 之外认证时，这对 Istio 构成了制约因素。使用 SPIRE 进行工作负载身份认证的另一个优势是，它可以确保不受服务网格控制的通信。出于这样的原因，组织有时会将 SPIRE 与 Istio 集成，并使用 SPIFFE 身份而不是内置的 Istio 身份。IBM 发布了一个例子，位于 &lt;a href=&#34;https://github.com/IBM/istio-spire&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;IBM/istio-spire：Istio 身份与 SPIFFE/SPIRE&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;服务网格不是 SPIFFE/SPIRE 的直接替代品，相反，它们是互补的 SPIFFE/SPIRE 作为网格内更高层次抽象的身份解决方案。&lt;/p&gt;
&lt;p&gt;专门实现 SPIFFE 工作负载 API 的服务网格解决方案支持任何期望该 API 可用的软件。能够为其工作负载提供 SVID 并支持 SPIFFE Federation API 的服务网格解决方案可以在网格识别的工作负载和运行 SPIRE 或运行在不同网格实现的工作负载之间自动建立信任。&lt;/p&gt;
&lt;h2 id=&#34;覆盖网络&#34;&gt;覆盖网络&lt;/h2&gt;
&lt;p&gt;覆盖网络（Overlay Network）模拟了一个单一的统一网络，用于跨多个平台的服务。与服务网格不同，覆盖网络使用标准的网络概念，如 IP 地址和路由表来连接服务。数据被封装并跨过其他网络进行路由，创建一个建立在现有网络之上的节点和逻辑链接的虚拟网络。&lt;/p&gt;
&lt;p&gt;虽然最常见的覆盖网络没有认证功能，但最新的网络有。然而，它们在允许服务连接之前仍然不能证明它们的身份。通常情况下，它们依赖于一个预先存在的证书。SPIFFE 很适合为覆盖网络节点提供证书。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>日志审计</title>
      <link>https://lib.jimmysong.io/kubernetes-hardening-guidance/logging/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/kubernetes-hardening-guidance/logging/</guid>
      <description>&lt;p&gt;日志记录了集群中的活动。审计日志是必要的，这不仅是为了确保服务按预期运行和配置，也是为了确保系统的安全。系统性的审计要求对安全设置进行一致和彻底的检查，以帮助识别潜在威胁。Kubernetes 能够捕获集群操作的审计日志，并监控基本的 CPU 和内存使用信息；然而，它并没有提供深入的监控或警报服务。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在创建时建立 Pod 基线，以便能够识别异常活动。&lt;/li&gt;
&lt;li&gt;在主机层面、应用层面和云端（如果适用）进行日志记录。&lt;/li&gt;
&lt;li&gt;整合现有的网络安全工具，进行综合扫描、监控、警报和分析。&lt;/li&gt;
&lt;li&gt;设置本地日志存储，以防止在通信失败的情况下丢失。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;日志&#34;&gt;日志&lt;/h2&gt;
&lt;p&gt;在 Kubernetes 中运行应用程序的系统管理员应该为其环境建立一个有效的日志、监控和警报系统。仅仅记录 Kubernetes 事件还不足以了解系统上发生的行动的全貌。还应在主机级、应用级和云上（如果适用）进行日志记录。而且，这些日志可以与任何外部认证和系统日志相关联，以提供整个环境所采取的行动的完整视图，供安全审计员和事件响应者使用。&lt;/p&gt;
&lt;p&gt;在 Kubernetes 环境中，管理员应监控 / 记录以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;API 请求历史&lt;/li&gt;
&lt;li&gt;性能指标&lt;/li&gt;
&lt;li&gt;部署情况&lt;/li&gt;
&lt;li&gt;资源消耗&lt;/li&gt;
&lt;li&gt;操作系统调用&lt;/li&gt;
&lt;li&gt;协议、权限变化&lt;/li&gt;
&lt;li&gt;网络流量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当一个 Pod 被创建或更新时，管理员应该捕获网络通信、响应时间、请求、资源消耗和任何其他相关指标的详细日志以建立一个基线。正如上一节所详述的，匿名账户应被禁用，但日志策略仍应记录匿名账户采取的行动，以确定异常活动。&lt;/p&gt;
&lt;p&gt;应定期审计 RBAC 策略配置，并在组织的系统管理员发生变化时进行审计。这样做可以确保访问控制的调整符合基于角色的访问控制部分中概述的 RBAC 策略加固指导。&lt;/p&gt;
&lt;p&gt;审计应包括将当前日志与正常活动的基线测量进行比较，以确定任何日志指标和事件的重大变化。系统管理员应调查重大变动——例如，应用程序使用的变化或恶意程序的安装，如密码器，以确定根本原因。应该对内部和外部流量日志进行审计，以确保对连接的所有预期的安全限制已被正确配置，并按预期运行。管理员还可以在系统发展过程中使用这些审计，以确定何时不再需要外部访问并可以限制。&lt;/p&gt;
&lt;p&gt;日志可以导向外部日志服务，以确保集群外的安全专业人员的可用使用它们，尽可能接近实时地识别异常情况，并在发生损害时保护日志不被删除。如果使用这种方法，日志应该在传输过程中用 TLS 1.2 或 1.3 进行加密，以确保网络行为者无法在传输过程中访问日志并获得关于环境的宝贵信息。在利用外部日志服务器时，要采取的另一项预防措施是在 Kubernetes 内配置日志转发器，只对外部存储进行追加访问。这有助于保护外部存储的日志不被删除或被集群内日志覆盖。&lt;/p&gt;
&lt;h2 id=&#34;kubernetes-原生审计日志配置&#34;&gt;Kubernetes 原生审计日志配置&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Kubernetes 的审计功能默认是禁用的，所以如果没有写审计策略，就不会有任何记录。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;kube-apiserver&lt;/code&gt; 驻留在 Kubernetes 控制平面上，作为前端，处理集群的内部和外部请求。每个请求，无论是由用户、应用程序还是控制平面产生的，在其执行的每个阶段都会产生一个审计事件。当审计事件注册时，&lt;code&gt;kube-apiserver&lt;/code&gt; 检查审计策略文件和适用规则。如果存在这样的规则，服务器会在第一个匹配的规则所定义的级别上记录该事件。Kubernetes 的内置审计功能默认是不启用的，所以如果没有写审计策略，就不会有任何记录。&lt;/p&gt;
&lt;p&gt;集群管理员必须写一个审计策略 YAML 文件，以建立规则，并指定所需的审计级别，以记录每种类型的审计事件。然后，这个审计策略文件被传递给 &lt;code&gt;kube-apiserver&lt;/code&gt;，并加上适当的标志。一个规则要被认为是有效的，必须指定四个审计级别中的一个：&lt;code&gt;none&lt;/code&gt;、&lt;code&gt;Meatadataa&lt;/code&gt;、&lt;code&gt;Request&lt;/code&gt; 或 &lt;code&gt;RequestResponse&lt;/code&gt;。&lt;a href=&#34;../appendix/l/&#34;&gt;&lt;strong&gt;附录 L：审计策略&lt;/strong&gt;&lt;/a&gt;展示了一个审计策略文件的内容，该文件记录了 &lt;code&gt;RequestResponse&lt;/code&gt; 级别的所有事件。&lt;a href=&#34;../appendix/m/&#34;&gt;&lt;strong&gt;附录 M&lt;/strong&gt;&lt;/a&gt; 向 &lt;code&gt;kube-apiserver&lt;/code&gt; 提交审计策略文件的标志示例显示了 &lt;code&gt;kube-apiserver&lt;/code&gt; 配置文件的位置，并提供了审计策略文件可以被传递给 &lt;code&gt;kube-apiserver&lt;/code&gt; 的标志示例。附录 M 还提供了如何挂载卷和在必要时配置主机路径的指导。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;kube-apiserver&lt;/code&gt; 包括可配置的日志和 webhook 后端，用于审计日志。日志后端将指定的审计事件写入日志文件，webhook 后端可以被配置为将文件发送到外部 HTTP API。附录 M 中的例子中设置的 &lt;code&gt;--audit-log-path&lt;/code&gt; 和 &lt;code&gt;--audit-log-maxage&lt;/code&gt; 标志是可以用来配置日志后端的两个例子，它将审计事件写到一个文件中。&lt;code&gt;log-path&lt;/code&gt; 标志是启用日志的最小配置，也是日志后端唯一需要的配置。这些日志文件的默认格式是 JSON，尽管必要时也可以改变。日志后端的其他配置选项可以在 Kubernetes 文档中找到。&lt;/p&gt;
&lt;p&gt;为了将审计日志推送给组织的 SIEM 平台，可以通过提交给 &lt;code&gt;kube-apiserver&lt;/code&gt; 的 YAML 文件手动配置 webhook 后端。webhook 配置文件以及如何将该文件传递给 &lt;code&gt;kube-apiserver&lt;/code&gt; 可以在&lt;a href=&#34;../appendix/n/&#34;&gt;&lt;strong&gt;附录 N：webhook 配置&lt;/strong&gt;&lt;/a&gt;的示例中查看。关于如何在 &lt;code&gt;kube-apiserver&lt;/code&gt; 中为 webhook 后端设置的配置选项的详尽列表，可以在 Kubernetes 文档中找到。&lt;/p&gt;
&lt;h3 id=&#34;工作节点和容器的日志记录&#34;&gt;工作节点和容器的日志记录&lt;/h3&gt;
&lt;p&gt;在 Kubernetes 架构中，有很多方法可以配置日志功能。在日志管理的内置方法中，每个节点上的 kubelet 负责管理日志。它根据其对单个文件长度、存储时间和存储容量的策略，在本地存储和轮转日志文件。这些日志是由 kubelet 控制的，可以从命令行访问。下面的命令打印了一个 Pod 中的容器的日志。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl logs &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-f&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-p&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; POD &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-c CONTAINER&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果要对日志进行流式处理，可以使用 &lt;code&gt;-f&lt;/code&gt; 标志；如果存在并需要来自容器先前实例的日志，可以使用 &lt;code&gt;-p&lt;/code&gt; 标志；如果 Pod 中有多个容器，可以使用 &lt;code&gt;-c&lt;/code&gt; 标志来指定一个容器。如果发生错误导致容器、Pod 或节点死亡，Kubernetes 中的本地日志解决方案并没有提供一种方法来保存存储在失败对象中的日志。NSA 和 CISA 建议配置一个远程日志解决方案，以便在一个节点失败时保存日志。&lt;/p&gt;
&lt;p&gt;远程记录的选项包括：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;远程日志选项&lt;/th&gt;
&lt;th&gt;使用的理由&lt;/th&gt;
&lt;th&gt;配置实施&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;在每个节点上运行一个日志代理，将日志推送到后端&lt;/td&gt;
&lt;td&gt;赋予节点暴露日志或将日志推送到后端的能力，在发生故障的情况下将其保存在节点之外。&lt;/td&gt;
&lt;td&gt;配置一个 Pod 中的独立容器作为日志代理运行，让它访问节点的应用日志文件，并配置它将日志转发到组织的 SIEM。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;在每个 Pod 中使用一个 sidecar 容器，将日志推送到一个输出流中&lt;/td&gt;
&lt;td&gt;用于将日志推送到独立的输出流。当应用程序容器写入不同格式的多个日志文件时，这可能是一个有用的选项。&lt;/td&gt;
&lt;td&gt;为每种日志类型配置 sidecar 容器，并用于将这些日志文件重定向到它们各自的输出流，在那里它们可以被 kubelet 处理。然后，节点级的日志代理可以将这些日志转发给 SIEM 或其他后端。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;在每个 Pod 中使用一个日志代理 sidecar，将日志推送到后端&lt;/td&gt;
&lt;td&gt;当需要比节点级日志代理所能提供的更多灵活性时。&lt;/td&gt;
&lt;td&gt;为每个 Pod 配置，将日志直接推送到后端。这是连接第三方日志代理和后端的常用方法。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;从应用程序中直接向后端推送日志&lt;/td&gt;
&lt;td&gt;捕获应用程序的日志。Kubernetes 没有内置的机制直接来暴露或推送日志到后端。&lt;/td&gt;
&lt;td&gt;各组织将需要在其应用程序中建立这一功能，或附加一个有信誉的第三方工具来实现这一功能。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Sidecar 容器与其他容器一起在 Pod 中运行，可以被配置为将日志流向日志文件或日志后端。Sidecar 容器也可以被配置为作为另一个标准功能容器的流量代理，它被打包和部署。&lt;/p&gt;
&lt;p&gt;为了确保这些日志代理在工作节点之间的连续性，通常将它们作为 DaemonSet 运行。为这种方法配置 DaemonSet，可以确保每个节点上都有一份日志代理的副本，而且对日志代理所做的任何改变在集群中都是一致的。&lt;/p&gt;
&lt;h3 id=&#34;seccomp-审计模式&#34;&gt;Seccomp: 审计模式&lt;/h3&gt;
&lt;p&gt;除了上述的节点和容器日志外，记录系统调用也是非常有益的。在 Kubernetes 中审计容器系统调用的一种方法是使用安全计算模式（seccomp）工具。这个工具默认是禁用的，但可以用来限制容器的系统调用能力，从而降低内核的攻击面。Seccomp 还可以通过使用审计配置文件记录正在进行的调用。&lt;/p&gt;
&lt;p&gt;自定义 seccomp 配置文件用于定义哪些系统调用是允许的，以及未指定调用的默认动作。为了在 Pod 中启用自定义 seccomp 配置文件，Kubernetes 管理员可以将他们的 seccomp 配置文件 JSON 文件写入到 &lt;code&gt;/var/lib/kubelet/seccomp/&lt;/code&gt; 目录，并将 &lt;code&gt;seccompProfile&lt;/code&gt; 添加到 Pod 的 &lt;code&gt;securityContext&lt;/code&gt;。自定义的 &lt;code&gt;seccompProfile&lt;/code&gt; 还应该包括两个字段。&lt;code&gt;Type: Localhost&lt;/code&gt; 和 &lt;code&gt;localhostProfile: myseccomppolicy.json&lt;/code&gt;。记录所有的系统调用可以帮助管理员了解标准操作需要哪些系统调用，使他们能够进一步限制 seccomp 配置文件而不失去系统功能。&lt;/p&gt;
&lt;h3 id=&#34;syslog&#34;&gt;SYSLOG&lt;/h3&gt;
&lt;p&gt;Kubernetes 默认将 kubelet 日志和容器运行时日志写入 journald，如果该服务可用的话。如果组织希望对默认情况下不使用的系统使用 syslog 工具，或者从整个集群收集日志并将其转发到 syslog 服务器或其他日志存储和聚合平台，他们可以手动配置该功能。Syslog 协议定义了一个日志信息格式化标准。Syslog 消息包括一个头——由时间戳、主机名、应用程序名称和进程 ID（PID）组成，以及一个以明文书写的消息。Syslog 服务，如 syslog-ng® 和 rsyslog，能够以统一的格式收集和汇总整个系统的日志。许多 Linux 操作系统默认使用 rsyslog 或 journald——一个事件日志守护程序，它优化了日志存储并通过 journalctl 输出 syslog 格式的日志。在运行某些 Linux 发行版的节点上，syslog 工具默认在操作系统层面记录事件。运行这些 Linux 发行版的容器，默认也会使用 syslog 收集日志。由 syslog 工具收集的日志存储在每个适用的节点或容器的本地文件系统中，除非配置了一个日志聚合平台来收集它们。&lt;/p&gt;
&lt;h2 id=&#34;siem-平台&#34;&gt;SIEM 平台&lt;/h2&gt;
&lt;p&gt;安全信息和事件管理（SIEM）软件从整个组织的网络中收集日志。SIEM 软件将防火墙日志、应用程序日志等汇集在一起；将它们解析出来，提供一个集中的平台，分析人员可以从这个平台上监控系统安全。SIEM 工具在功能上有差异。一般来说，这些平台提供日志收集、威胁检测和警报功能。有些包括机器学习功能，可以更好地预测系统行为并帮助减少错误警报。在其环境中使用这些平台的组织可以将它们与 Kubernetes 集成，以更好地监测和保护集群。用于管理 Kubernetes 环境中的日志的开源平台是作为 SIEM 平台的替代品存在的。&lt;/p&gt;
&lt;p&gt;容器化环境在节点、Pod、容器和服务之间有许多相互依赖的关系。在这些环境中，Pod 和容器不断地在不同的节点上被关闭和重启。这给传统的 SIEM 带来了额外的挑战，它们通常使用 IP 地址来关联日志。即使是下一代的 SIEM 平台也不一定适合复杂的 Kubernetes 环境。然而，随着 Kubernetes 成为最广泛使用的容器编排平台，许多开发 SIEM 工具的组织已经开发了专门用于 Kubernetes 环境的产品变化，为这些容器化环境提供全面的监控解决方案。管理员应该了解他们平台的能力，并确保他们的日志充分捕捉到环境，以支持未来的事件响应。&lt;/p&gt;
&lt;h2 id=&#34;警报&#34;&gt;警报&lt;/h2&gt;
&lt;p&gt;Kubernetes 本身并不支持警报功能；然而，一些具有警报功能的监控工具与 Kubernetes 兼容。如果 Kubernetes 管理员选择配置一个警报工具在 Kubernetes 环境中工作，有几个指标是管理员应该监控和配置警报的。&lt;/p&gt;
&lt;p&gt;可能触发警报的案例包括但不限于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;环境中的任何机器上的磁盘空间都很低。&lt;/li&gt;
&lt;li&gt;记录卷上的可用存储空间正在减少。&lt;/li&gt;
&lt;li&gt;外部日志服务脱机。&lt;/li&gt;
&lt;li&gt;一个以 root 权限运行的 Pod 或应用程序。&lt;/li&gt;
&lt;li&gt;一个账户对他们没有权限的资源提出的请求。&lt;/li&gt;
&lt;li&gt;一个正在使用或获得特权的匿名账户。&lt;/li&gt;
&lt;li&gt;Pod 或工作节点的 IP 地址被列为 Pod 创建请求的源 ID。&lt;/li&gt;
&lt;li&gt;异常的系统调用或失败的 API 调用。&lt;/li&gt;
&lt;li&gt;用户 / 管理员的行为不正常（即在不寻常的时间或从不寻常的地点），以及&lt;/li&gt;
&lt;li&gt;显著偏离标准操作指标基线。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当存储不足时发出警报，可以帮助避免因资源有限而导致的性能问题和日志丢失，并帮助识别恶意的加密劫持企图。可以调查有特权的 Pod 执行案例，以确定管理员是否犯了一个错误，一个真实的用例需要升级特权，或者一个恶意行为者部署了一个有特权的 Pod。可疑的 Pod 创建源 IP 地址可能表明，恶意的网络行为者已经突破了容器并试图创建一个恶意的 Pod。&lt;/p&gt;
&lt;p&gt;将 Kubernetes 与企业现有的 SIEM 平台整合，特别是那些具有机器学习 / 大数据功能的平台，可以帮助识别审计日志中的违规行为并减少错误警报。如果配置这样的工具与 Kubernetes 一起工作，它应该被配置为这些情况和任何其他适用于用例的情况被配置为触发警报。&lt;/p&gt;
&lt;p&gt;当疑似入侵发生时，能够自动采取行动的系统有可能被配置为在管理员对警报作出反应时采取步骤以减轻损害。在 Pod IP 被列为 Pod 创建请求的源 ID 的情况下，一个可以实施的缓解措施是自动驱逐 Pod，以保持应用程序的可用性，但暂时停止对集群的任何损害。这样做将允许一个干净的 Pod 版本被重新安排到一个节点上。然后，调查人员可以检查日志，以确定是否发生了漏洞，如果是的话，调查恶意行为者是如何执行潜在威胁的，以便可以部署一个补丁。&lt;/p&gt;
&lt;h2 id=&#34;服务网格&#34;&gt;服务网格&lt;/h2&gt;
&lt;p&gt;服务网格是一个平台，通过允许将这些通信逻辑编码到服务网格中，而不是在每个微服务中，来简化应用程序中的微服务通信。将这种通信逻辑编码到各个微服务中是很难扩展的，当故障发生时很难调试，而且很难保证安全。使用服务网格可以简化开发人员的工作。服务网格可以：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当一个服务中断时，重新定向流量。&lt;/li&gt;
&lt;li&gt;收集性能指标以优化通信。&lt;/li&gt;
&lt;li&gt;允许管理服务与服务之间的通信加密。&lt;/li&gt;
&lt;li&gt;收集服务间通信的日志。&lt;/li&gt;
&lt;li&gt;从每个服务中收集日志。&lt;/li&gt;
&lt;li&gt;帮助开发者诊断微服务或通信机制的问题和故障。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;服务网格还可以帮助将服务迁移到混合或多云环境。虽然服务网格不是必须的，但它们是一种高度适合 Kubernetes 环境的选择。托管的 Kubernetes 服务通常包括他们自己的服务网格。然而，其他几个平台也是可用的，如果需要的话，是可以高度定制的。其中一些包括一个生成和轮换证书的证书颁发机构，允许服务之间进行安全的 TLS 认证。管理员应该考虑使用服务网格来加强 Kubernetes 集群的安全性。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-5集群利用服务网格将日志与网络安全结合起来&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f5.jpg&#34; alt=&#34;图 5：集群利用服务网格，将日志与网络安全结合起来&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 5：集群利用服务网格，将日志与网络安全结合起来
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;容错性&#34;&gt;容错性&lt;/h2&gt;
&lt;p&gt;应制定容错策略，以确保日志服务的可用性。这些策略可以根据具体的 Kubernetes 用例而有所不同。一个可以实施的策略是，如果在存储容量超标的情况下，绝对有必要允许新的日志覆盖最旧的日志文件。&lt;/p&gt;
&lt;p&gt;如果日志被发送到外部服务，应该建立一种机制，以便在发生通信中断或外部服务故障时将日志存储在本地。一旦与外部服务的通信恢复，应制定策略，将本地存储的日志推送到外部服务器上。&lt;/p&gt;
&lt;h2 id=&#34;工具&#34;&gt;工具&lt;/h2&gt;
&lt;p&gt;Kubernetes 不包括广泛的审计功能。然而，该系统的构建是可扩展的，允许用户自由开发自己的定制解决方案，或选择适合自己需求的现有附加组件。最常见的解决方案之一是添加额外的审计后端服务，它可以使用 Kubernetes 记录的信息，并为用户执行额外的功能，如扩展搜索参数、数据映射功能和警报功能。已经使用 SIEM 平台的企业可以将 Kubernetes 与这些现有的功能进行整合。&lt;/p&gt;
&lt;p&gt;开源监控工具，如 Cloud Native Computing Foundation 的 Prometheus®、Grafana Labs 的 Grafana® 和 Elasticsearch 的 Elastic Stack (ELK)®—— 可用于进行事件监控、运行威胁分析、管理警报，以及收集资源隔离参数、历史使用情况和运行容器的网络统计数据。在审计访问控制和权限配置时，扫描工具可以通过协助识别 RBAC 中的风险权限配置而发挥作用。NSA 和 CISA 鼓励在现有环境中使用入侵检测系统（IDS）的组织考虑将该服务也整合到他们的 Kubernetes 环境中。这种整合将使企业能够监测并有可能杀死有异常行为迹象的容器，从而使容器能够从最初的干净镜像中重新启动。许多云服务提供商也为那些希望得到更多管理和可扩展解决方案的人提供容器监控服务。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>10. 业界案例</title>
      <link>https://lib.jimmysong.io/spiffe/practitioners-stories/</link>
      <pubDate>Fri, 07 Oct 2022 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/spiffe/practitioners-stories/</guid>
      <description>&lt;p&gt;本章包括五个业界案例，他们是现实世界中部署了 SPIFFE 和 SPIRE 的企业的工程师。&lt;/p&gt;
&lt;h2 id=&#34;uber用加密身份确保下一代和传统基础设施的安全&#34;&gt;Uber：用加密身份确保下一代和传统基础设施的安全&lt;/h2&gt;
&lt;p&gt;Ryan Turner，软件工程师，Uber&lt;/p&gt;
&lt;p&gt;在过去十年中，Uber 已经成为爆炸性增长的典型代表。随着软件服务的数量和我们运营的地理规模的增长，复杂性和风险也在增加。为了满足不断增长的需求，我们开始建立我们的下一代基础设施平台。同时，几年前，我们看到开源项目 SPIFFE 和 SPIRE 的一些早期动力。&lt;/p&gt;
&lt;p&gt;我们立即看到了 SPIFFE 所能带来的价值，使我们能够加强我们的下一代基础设施安全态势。我们在 Uber 上线了 SPIRE，现在正使用它在各种工作负载环境中使用可加密验证的身份建立信任。我们从一些应用服务和内部服务开始，比如一个工作流引擎，它通过访问整个平台的数据，旋转多个动态工作负载来完成特定任务。SPIRE 向我们的工作负载提供 SPIFFE 身份，跨越我们的应用周期。SPIFFE 用于验证服务，帮助我们避免可能导致生产问题的错误配置。&lt;/p&gt;
&lt;h3 id=&#34;使用-spire-改造传统堆栈&#34;&gt;使用 SPIRE 改造传统堆栈&lt;/h3&gt;
&lt;p&gt;SPIRE 现在是 Uber 的下一个基础设施的关键组成部分，但我们也在使用 sidecar 的方法，将认证改造成传统的基础设施。虽然 SPIFFE 和 SPIRE 通常都是在现代的云原生架构中工作，但我们可以将这些项目迅速适应我们专有的遗留堆栈。SPIRE 可以在 Uber 的下一代和传统基础设施中提供一个关键的信任桥梁，并对内部安全和开发人员的效率产生积极影响。&lt;/p&gt;
&lt;p&gt;在我们的旅程中，SPIFFE 社区一直非常支持我们，帮助我们找到解决方案。因此，我们的工程师也积极为项目做出代码贡献。&lt;/p&gt;
&lt;h3 id=&#34;安全开发和审计团队正在受益于-spiffe&#34;&gt;安全、开发和审计团队正在受益于 SPIFFE&lt;/h3&gt;
&lt;p&gt;SPIFFE 使我们的安全团队对后端基础设施更有信心，对基于网络的安全控制的依赖性更低。由于我们处理的是金融数据，而且是跨地域经营，我们必须控制对金融和客户数据的访问。有了 SPIRE，我们可以为访问控制提供一个强有力的证明身份。它帮助我们满足这些要求，并在这个过程中减少审计团队的负担。&lt;/p&gt;
&lt;p&gt;我们 Uber 的开发团队使用一致的客户端库，使用基于 SPIFFE 的身份创建 AuthZ 策略。这些项目使开发团队能够利用 X.509 和 JWT 等工作量大的身份基元，而不需要深入了解信任引导、安全引入、凭证供应或轮换等复杂主题。&lt;/p&gt;
&lt;h2 id=&#34;pinterest用-spiffe-克服身份危机&#34;&gt;Pinterest：用 SPIFFE 克服身份危机&lt;/h2&gt;
&lt;p&gt;Jeremy Krach，高级安全工程师，Pinterest&lt;/p&gt;
&lt;p&gt;2015 年，Pinterest 出现了身份危机。该公司的基础设施正在向不同的方向发展。每个新系统都以其独特的方式解决认证 —— 身份问题。开发人员每个月都要花几个小时的时间在会议和安全审查上，以设计、建立威胁模型和实施他们的定制身份解决方案，或将他们的新服务与不同的身份模型的依赖关系整合。很明显，安全团队需要建立一个通用的基础设施，以一种通用的方式提供身份，可以在我们的异构服务中使用。&lt;/p&gt;
&lt;p&gt;这个系统的最初草案将身份委托给机器，作为基于主机名的 X.509 证书。它被大量用于秘密管理（见 &lt;a href=&#34;https://github.com/pinterest/knox&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Knox&lt;/a&gt;），但还没有出现更广泛的采用。随着我们不断扩大规模，特别是像 Kubernetes 这样的多租户系统，我们需要更精细的身份，这些身份并不与我们基础设施中的特定主机相联系，而是与服务本身的身份相联系。进入 SPIFFE。&lt;/p&gt;
&lt;h3 id=&#34;用-spiffe-将复杂的问题扁平化&#34;&gt;用 SPIFFE 将复杂的问题扁平化&lt;/h3&gt;
&lt;p&gt;SPIFFE 现在为我们的大部分基础设施提供统一的身份。我们最初从 Kubernetes 开始，因为在那个多租户环境中需求是最明确的。后来，我们将其他基础设施转移到 SPIFFE，作为其主要的身份识别形式。因此，Pinterest 的几乎每个服务都有一个标准化的名字，我们可以使用，没有晦涩的惯例或不连贯的方案。它帮助我们统一和规范了我们的身份惯例，这与其他内部项目保持一致，以确定服务属性，如服务所有权。&lt;/p&gt;
&lt;p&gt;我们利用 SPIFFE 作为 ACL 中的身份，用于秘密管理、TLS 服务之间的相互通信，甚至是通用授权策略（通过 &lt;a href=&#34;https://www.openpolicyagent.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OPA&lt;/a&gt;，另一个 CNCF 项目）。Knox，Pinterest 的开源秘密管理服务，使用 SPIFFE X.509 身份文件作为支持的认证方法之一。请看我们关于 &lt;a href=&#34;https://medium.com/pinterest-engineering/secret-management-in-multi-tenant-environments-debc9236a744&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在 Knox 中添加 SPIFFE 支持的博文&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;开发安全和运维又开始和谐相处了&#34;&gt;开发、安全和运维又开始和谐相处了&lt;/h3&gt;
&lt;p&gt;SPIFFE 使安全团队更容易编写授权策略。开发者的速度明显提高，因为我们的工程师不必担心自定义方案或不同的集成认证。由于我们现在有一个标准的方式来解释我们整个基础设施的身份，所以计费和所有权团队更容易确定谁拥有一项服务。有了强大的身份意识，对于记录和追踪一致性也很方便。我们对 SPIFFE 项目的未来感到兴奋，并感谢它能够帮助我们解决身份危机！。&lt;/p&gt;
&lt;h2 id=&#34;字节跳动为网络规模的服务提供拨号音认证&#34;&gt;字节跳动：为网络规模的服务提供拨号音认证&lt;/h2&gt;
&lt;p&gt;Eli Nesterov，安全工程经理，字节跳动&lt;/p&gt;
&lt;p&gt;TikTok 背后的公司字节跳动已经在全球范围内建立和部署了大规模的互联网服务，为数百万用户提供服务。我们支持这些服务的基础设施是私有数据中心和公共云供应商的组合。我们的应用程序以数千个微服务的形式在多个 Kubernetes 集群和跨平台的专用节点上运行。&lt;/p&gt;
&lt;p&gt;随着我们规模的扩大，我们的平台上有多种认证机制，包括 PKI、JWT 令牌、Kerberos、OAuth 和自定义框架。在这些认证机制中加入大量的编程语言，操作的复杂性和风险就更大了。对我们的安全和运维团队来说，管理这些认证方案在操作上变得复杂。在认证框架出现已知漏洞的情况下，我们无法迅速采取行动，因为每个框架都必须单独处理。在某些情况下，他们有代码级的依赖性，这使得改变变得更加困难。跨地域的审计和合规性是一个挑战，因为每个平台特定的认证方法都必须被单独审查和管理。&lt;/p&gt;
&lt;p&gt;总体上走向基于零信任的架构，以及努力提高我们的开发人员的生产力，迫使我们为我们的服务建立一个统一的身份管理平面，以满足我们不断增长的需求。&lt;/p&gt;
&lt;h3 id=&#34;使用-spire-构建网络规模的-pki&#34;&gt;使用 SPIRE 构建网络规模的 PKI&lt;/h3&gt;
&lt;p&gt;要建立一个能在不同的基础设施岛屿或像我们这样的平台上工作的身份系统是很难的。我们可以创建自己的，但这需要大量的努力。我们选择了 SPIRE，因为它在支持我们需要的各种平台和网络规模方面提供了规模和灵活性。由于它提供了基于标准 X.509 证书的加密身份，它可以帮助我们轻松地启用相互 TLS，在默认情况下，它符合许多合规性要求。可扩展性和开源性是另一个优点，因为我们可以很容易地将它与我们现有的控制平面和数据堆栈集成。&lt;/p&gt;
&lt;h3 id=&#34;透明的认证简化了操作&#34;&gt;透明的认证简化了操作&lt;/h3&gt;
&lt;p&gt;有了 SPIRE，我们可以在我们所有的平台上部署一致的“拨号音 &amp;ldquo;认证。现在，认证和安全的负担从开发人员那里被封装起来，因此他们可以专注于业务或应用逻辑。这从整体上提高了我们的部署速度。我们也不太可能因为配置问题而出现&amp;rdquo; 生产错误 &amp;ldquo;，例如在生产中使用开发凭证。&lt;/p&gt;
&lt;p&gt;使用 SPIRE 的标准化认证也简化了合规性和审计，因为我们有跨信任域和平台的相互 TLS。SPIRE 还允许我们在身份分配方面转向一个更半分散的模式，即身份系统是本地的，比如一个数据中心。这提高了我们的整体可用性，使我们能够很好地恢复。&lt;/p&gt;
&lt;p&gt;有了 SPIRE，我们几乎是“面向未来 &amp;quot; 的，因为它可以扩展和适应，以满足我们不断增长的业务需求。&lt;/p&gt;
&lt;h2 id=&#34;anthem用-spiffe-保护云原生医疗应用的安全&#34;&gt;Anthem：用 SPIFFE 保护云原生医疗应用的安全&lt;/h2&gt;
&lt;p&gt;Bobby Samuel，Anthem 人工智能工程副总裁&lt;/p&gt;
&lt;p&gt;行业内不断上升的医疗成本迫使像 Anthem 这样的组织迅速创新，重新思考我们与供应商、雇主团体和个人的互动方式。作为这一举措的一部分，我们正在开发大量的应用程序，这些应用程序将帮助我们通过安全地开放医疗数据的访问来推动成本下降。我们已经开始在 Kubernetes 等云原生技术的基础上建立配套的下一代基础设施。这个新的基础设施将推动快速创新，并吸引更广泛的组织和开发人员的生态系统。这方面的一个例子是我们的 HealthOS 平台。HealthOS 将使第三方能够建立 HealthApp 能力，以提供到前端界面，利用去识别的健康数据的海洋。&lt;/p&gt;
&lt;p&gt;但是，在几乎每一个大型企业，特别是医疗机构，都有人试图以恶意的方式获取他们的数据。受保护的医疗信息（PHI）的售价比金融信息高得多；因此，黑客和脚本小子等恶意行为者发现医疗系统和相应的健康信息非常有利可图。随着云原生架构的采用，风险和复杂性进一步上升。由于威胁半径大大增加，而人工安全审查和流程成为云规模的抑制因素，因此发生漏洞的风险更高。&lt;/p&gt;
&lt;h3 id=&#34;为零信任架构打下基础&#34;&gt;为零信任架构打下基础&lt;/h3&gt;
&lt;p&gt;我们不能依靠传统的基于参数的安全工具和流程来保护我们的下一代应用程序和基础设施。零信任是一种精细的、自动化的安全方法，对我们来说很有意义，特别是在未来，因为我们计划跨组织边界和云供应商进行操作。用户和服务的身份和认证是零信任安全模型的核心原则之一。零信任使我们能够减少对基于网络的控制的依赖，而不是对每个系统或工作负载进行认证。SPIFFE 和 SPIRE 为我们的零信任安全架构提供了一个基础认证层。它们允许每个工作负载在开始通信之前以加密方式证明 &amp;quot; 他们是谁”。&lt;/p&gt;
&lt;h3 id=&#34;摆脱秘密管理&#34;&gt;摆脱秘密管理&lt;/h3&gt;
&lt;p&gt;通常，当你想到认证时，你会想到用户名、密码和 bear token。不幸的是，这些类型的凭证正在成为 Amthem 的风险和复杂性的来源。它们往往是长期存在的，对它们的管理或轮换是很棘手的。我们想摆脱这种一般的秘密管理做法。与其问一项服务 &amp;ldquo;你有什么”，我们想问的是&amp;rdquo; 你是谁 &amp;ldquo;。简而言之，我们想转向加密身份，如 SPIFFE。我们可以看到未来使用强证明身份的额外好处，比如在工作负载之间建立相互的 TLS，并将身份传导到应用程序中。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../images/f10-0.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;利用-spiffe-将安全作为基础设施的一部分来建设&#34;&gt;利用 SPIFFE 将安全作为基础设施的一部分来建设&lt;/h3&gt;
&lt;p&gt;安全往往被开发团队认为是部署的障碍。DevOps 团队希望能更快地部署新的创新功能。然而，他们不得不通过与安全控制有关的人工工单、流程、集成和审查。在 Anthem，我们加倍努力为我们的开发团队消除障碍，使安全成为基础设施的一项功能。随着 SPIFFE 等技术的采用，我们可以将安全控制的复杂性从开发团队中抽象出来，并在各种平台上提供一致的规则。SPIFFE 以及其他基于零信任的技术，将帮助我们在大多数情况下将系统供应时间从三个月缩短到两周以内。在 SPIFFE 的引领下，安全正在成为 Anthem 的一个推动因素。&lt;/p&gt;
&lt;h2 id=&#34;square将信任扩展到云端&#34;&gt;Square：将信任扩展到云端&lt;/h2&gt;
&lt;p&gt;Michael Weissbacher 和 Mat Byczkowski，高级安全工程师，Square&lt;/p&gt;
&lt;p&gt;Square 提供各种各样的金融服务。在其生命周期中，该公司从内部发展了新的业务部门，如资本和现金，但也收购了 Weebly 和 Stitch Labs 等公司。不同的业务部门使用不同的技术，可以从不同的数据中心和云端运作，同时仍然需要无缝沟通。&lt;/p&gt;
&lt;p&gt;我们内部开发的服务识别系统需要扩展到 Square 为其数据中心开发的内部架构之外。我们希望将该系统扩展到云端，我们希望提供一个同样安全的系统，并在未来几年内为我们提供良好的服务。我们最理想的是寻找一个基于开放标准的工具，同时能与 Envoy 代理无缝集成。SPIFFE 和 SPIRE 都支持我们的发展目标，以及与多个云和部署工具合作的独立平台。&lt;/p&gt;
&lt;h3 id=&#34;一个能与流行的开源项目合作的开放标准&#34;&gt;一个能与流行的开源项目合作的开放标准&lt;/h3&gt;
&lt;p&gt;由于 SPIFFE 是基于现有的开放标准，如 X.509 证书，它为我们的服务身份提供了一条清晰的升级路径。Envoy 是 Square 的应用程序如何进行通信的基础构建块。由于 SPIRE 支持 Envoy 的 Secrets Discovery API，因此获得 X509-SVID 很容易。Envoy 内置访问控制，可以使用 SPIFFE 身份来决定允许哪些应用程序进行通信。&lt;/p&gt;
&lt;p&gt;我们将 SPIRE 架构与现有的服务身份识别系统并行部署，然后对各种内部工具和框架进行修改，以支持这两个系统。接下来，我们将 SPIRE 与部署系统集成，在 SPIRE 中注册所有服务。这意味着我们可以对 SPIRE 的频繁的 SVID 轮换进行压力测试。最后，我们使用功能标志来慢慢选择服务，使其在服务与服务的调用中开始使用 SVID。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;跨云和数据中心的无缝、安全连接&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SPIFFE 和 SPIRE 使我们的安全基础设施团队能够提供一个重要的桥梁，安全地连接不同的平台和技术。我们仍处于转移到 SPIRE 的早期迁移阶段，但我们所做的改变使我们能够将我们的生产型 AWS EKS 基础设施与部署在 Square 数据中心的服务无缝连接。我们现在正在努力在我们的信任域之间进行自动联合，因为我们之前只是手动进行联合。我们使用 SPIFFE 身份作为标准，甚至用于我们公司的定制身份工作。&lt;/p&gt;
&lt;p&gt;我们也非常高兴能参与到 SPIFFE 社区中来，在我们的旅程中，每个人都很友好，也很有帮助。这个社区还提供了一个额外的好处，那就是为一般的零信任系统提供了一个很好的讨论系统设计想法的地方。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>升级和应用安全实践</title>
      <link>https://lib.jimmysong.io/kubernetes-hardening-guidance/upgrading-and-application-security-practices/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/kubernetes-hardening-guidance/upgrading-and-application-security-practices/</guid>
      <description>&lt;p&gt;遵循本文件中概述的加固指南是确保在 Kubernetes 协调容器上运行的应用程序安全的一个步骤。然而，安全是一个持续的过程，跟上补丁、更新和升级是至关重要的。具体的软件组件因个人配置的不同而不同，但整个系统的每一块都应尽可能保持安全。这包括更新：Kubernetes、管理程序、虚拟化软件、插件、环境运行的操作系统、服务器上运行的应用程序，以及 Kubernetes 环境中托管的任何其他软件。&lt;/p&gt;
&lt;p&gt;互联网安全中心（CIS）发布了保护软件安全的基准。管理员应遵守 Kubernetes 和任何其他相关系统组件的 CIS 基准。管理员应定期检查，以确保其系统的安全性符合当前安全专家对最佳实践的共识。应定期对各种系统组件进行漏洞扫描和渗透测试，主动寻找不安全的配置和零日漏洞。任何发现都应在潜在的网络行为者发现和利用它们之前及时补救。&lt;/p&gt;
&lt;p&gt;随着更新的部署，管理员也应该跟上从环境中删除任何不再需要的旧组件。使用托管的 Kubernetes 服务可以帮助自动升级和修补 Kubernetes、操作系统和网络协议。然而，管理员仍然必须为他们的容器化应用程序打补丁和升级。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>附录 A：非 root 应用的 Dockerfile 示例</title>
      <link>https://lib.jimmysong.io/kubernetes-hardening-guidance/appendix/a/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/kubernetes-hardening-guidance/appendix/a/</guid>
      <description>&lt;p&gt;下面的例子是一个 Dockerfile，它以非 root 用户和非 group 成员身份运行一个应用程序。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; ubuntu:latest&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 升级和安装 make 工具&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; apt update &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt install -y make&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 从一个名为 code 的文件夹中复制源代码，并使用 make 工具构建应用程序。&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COPY&lt;/span&gt; ./code&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; make /code&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 创建一个新的用户（user1）和新的组（group1）；然后切换到该用户的上下文中。&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; useradd user1 &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; groupadd group1&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;USER&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; user1:group1&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 设置容器的默认入口&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CMD&lt;/span&gt; /code/app&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>附录 B：只读文件系统的部署模板示例</title>
      <link>https://lib.jimmysong.io/kubernetes-hardening-guidance/appendix/b/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/kubernetes-hardening-guidance/appendix/b/</guid>
      <description>&lt;p&gt;下面是一个使用只读根文件系统的 Kubernetes 部署模板的例子。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;apps/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Deployment&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;web&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;web&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;web&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;web&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;web&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;containers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;sleep&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;999&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ubuntu:latest&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;web&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;securityContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;readOnlyRootFilesystem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#使容器的文件系统成为只读&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumeMounts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;mountPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/writeable/location/here&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#创建一个可写卷&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;volName&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;emptyDir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;volName&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>附录 C：Pod 安全策略示例</title>
      <link>https://lib.jimmysong.io/kubernetes-hardening-guidance/appendix/c/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/kubernetes-hardening-guidance/appendix/c/</guid>
      <description>&lt;p&gt;下面是一个 Kubernetes Pod 安全策略的例子，它为集群中运行的容器执行了强大的安全要求。这个例子是基于&lt;a href=&#34;https://kubernetes.io/docs/concepts/policy/pod-security-policy/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;官方的 Kubernetes 文档&lt;/a&gt;。我们鼓励管理员对该策略进行修改，以满足他们组织的要求。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;policy/v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;PodSecurityPolicy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;restricted&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;annotations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;seccomp.security.alpha.kubernetes.io/allowedProfileNames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;docker/default,runtime/default&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apparmor.security.beta.kubernetes.io/allowedProfileNames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;runtime/default&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;seccomp.security.alpha.kubernetes.io/defaultProfileName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;runtime/default&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apparmor.security.beta.kubernetes.io/defaultProfileName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;runtime/default&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;privileged&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 需要防止升级到 root&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;allowPrivilegeEscalation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;requiredDropCapabilities&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;ALL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;s1&#34;&gt;&amp;#39;configMap&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;s1&#34;&gt;&amp;#39;emptyDir&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;s1&#34;&gt;&amp;#39;projected&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;s1&#34;&gt;&amp;#39;secret&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;s1&#34;&gt;&amp;#39;downwardAPI&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;s1&#34;&gt;&amp;#39;persistentVolumeClaim&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 假设管理员设置的 persistentVolumes 是安全的&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hostNetwork&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hostIPC&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hostPID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;runAsUser&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rule&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;MustRunAsNonRoot&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 要求容器在没有 root 的情况下运行 seLinux&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rule&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;RunAsAny&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 假设节点使用的是 AppArmor 而不是 SELinux&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;supplementalGroups&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rule&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;MustRunAs&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ranges&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 禁止添加到 root 组&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;min&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;65535&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;runAsGroup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rule&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;MustRunAs&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ranges&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 禁止添加到 root 组&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;min&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;65535&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;fsGroup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rule&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;MustRunAs&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ranges&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 禁止添加到 root 组&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;min&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;65535&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;readOnlyRootFilesystem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>附录 D：命名空间示例</title>
      <link>https://lib.jimmysong.io/kubernetes-hardening-guidance/appendix/d/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/kubernetes-hardening-guidance/appendix/d/</guid>
      <description>&lt;p&gt;下面的例子是为每个团队或用户组，可以使用 kubectl 命令或 YAML 文件创建一个 Kubernetes 命名空间。应避免使用任何带有 &lt;code&gt;kube&lt;/code&gt; 前缀的名称，因为它可能与 Kubernetes 系统保留的命名空间相冲突。&lt;/p&gt;
&lt;p&gt;Kubectl 命令来创建一个命名空间。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl create namespace &amp;lt;insert-namespace-name-here&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;要使用 YAML 文件创建命名空间，创建一个名为 my-namespace.yaml 的新文件，内容如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Namespace&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;&amp;lt;insert-namespace-name-here&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;应用命名空间，使用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl create –f ./my-namespace.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;要在现有的命名空间创建新的 Pod，请切换到所需的命名空间：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl config use-context &amp;lt;insert-namespace-here&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;应用新的 Deployment，使用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl apply -f deployment.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;另外，也可以用以下方法将命名空间添加到 kubectl 命令中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl apply -f deployment.yaml --namespace&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;lt;insert-namespace-here&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或在 YAML 声明中的元数据下指定 &lt;code&gt;namespace：&amp;lt;insert-namespace-here&amp;gt;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;一旦创建，资源不能在命名空间之间移动。必须删除该资源，然后在新的命名空间中创建。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>附录 E：网络策略示例</title>
      <link>https://lib.jimmysong.io/kubernetes-hardening-guidance/appendix/e/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/kubernetes-hardening-guidance/appendix/e/</guid>
      <description>&lt;p&gt;网络策略根据使用的网络插件而不同。下面是一个网络策略的例子，参考 &lt;a href=&#34;https://kubernetes.io/docs/tasks/administer-cluster/declare-network-policy/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes 文档&lt;/a&gt;将 nginx 服务的访问限制在带有标签访问的 Pod 上。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;NetworkPolicy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;example-access-nginx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;prod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#这可以是任何一个命名空间，或者在不使用命名空间的情况下省略。&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;podSelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;nginx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ingress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;podSelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;access&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;新的 &lt;code&gt;NetworkPolicy&lt;/code&gt; 可以通过以下方式应用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl apply -f policy.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一个默认的拒绝所有入口的策略：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;NetworkPolicy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;deny-all-ingress&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;podSelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;policyType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;Ingress&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一个默认的拒绝所有出口的策略：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;NetworkPolicy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;deny-all-egress&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;podSelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;policyType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;Egress&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>附录 F：LimitRange 示例</title>
      <link>https://lib.jimmysong.io/kubernetes-hardening-guidance/appendix/f/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/kubernetes-hardening-guidance/appendix/f/</guid>
      <description>&lt;p&gt;在 Kubernetes 1.10 和更新版本中，&lt;code&gt;LimitRange&lt;/code&gt; 支持被默认启用。下面的 YAML 文件为每个容器指定了一个 &lt;code&gt;LimitRange&lt;/code&gt;，其中有一个默认的请求和限制，以及最小和最大的请求。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;LimitRange&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cpu-min-max-demo-lr&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;limits&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cpu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;defaultRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cpu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cpu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;min&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cpu 0.5&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Container&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;LimitRange&lt;/code&gt; 可以应用于命名空间，使用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl apply -f &amp;lt;example-LimitRange&amp;gt;.yaml --namespace&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;lt;Enter-Namespace&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在应用了这个 &lt;code&gt;LimitRange&lt;/code&gt; 配置的例子后，如果没有指定，命名空间中创建的所有容器都会被分配到默认的 CPU 请求和限制。命名空间中的所有容器的 CPU 请求必须大于或等于最小值，小于或等于最大 CPU 值，否则容器将不会被实例化。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>附录 G：ResourceQuota 示例</title>
      <link>https://lib.jimmysong.io/kubernetes-hardening-guidance/appendix/g/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/kubernetes-hardening-guidance/appendix/g/</guid>
      <description>&lt;p&gt;通过将 YAML 文件应用于命名空间或在 Pod 的配置文件中指定要求来创建 &lt;code&gt;ResourceQuota&lt;/code&gt; 对象，以限制命名空间内的总体资源使用。下面的例子是基于 &lt;a href=&#34;https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/quota-memory-cpu-namespace/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes 官方文档&lt;/a&gt;的一个命名空间的配置文件示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ResourceQuota&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;example-cpu-mem-resourcequota&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hard&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;requests.cpu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;requests.memory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;1Gi&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;limits.cpu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;limits.memory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;2Gi&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以这样应用这个 &lt;code&gt;ResourceQuota&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl apply -f example-cpu-mem-resourcequota.yaml -- &lt;span class=&#34;nv&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;lt;insert-namespace-here&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个 &lt;code&gt;ResourceQuota&lt;/code&gt; 对所选择的命名空间施加了以下限制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个容器都必须有一个内存请求、内存限制、CPU 请求和 CPU 限制。&lt;/li&gt;
&lt;li&gt;所有容器的总内存请求不应超过 1 GiB&lt;/li&gt;
&lt;li&gt;所有容器的总内存限制不应超过 2 GiB&lt;/li&gt;
&lt;li&gt;所有容器的 CPU 请求总量不应超过 1 个 CPU&lt;/li&gt;
&lt;li&gt;所有容器的总 CPU 限制不应超过 2 个 CPU&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>附录 H：加密示例</title>
      <link>https://lib.jimmysong.io/kubernetes-hardening-guidance/appendix/h/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/kubernetes-hardening-guidance/appendix/h/</guid>
      <description>&lt;p&gt;要对秘密数据进行静态加密，下面的加密配置文件提供了一个例子，以指定所需的加密类型和加密密钥。将加密密钥存储在加密文件中只能稍微提高安全性。Secret 将被加密，但密钥将在 &lt;code&gt;EncryptionConfiguration&lt;/code&gt; 文件中被访问。这个例子是基于 &lt;a href=&#34;https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes 的官方文档&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;apiserver.config.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;EncryptionConfiguration&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;secrets&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;providers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;aescbc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;keys&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;key1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;secret&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;&amp;lt;base 64 encoded secret&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;identity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;要使用该加密文件进行静态加密，请在重启 API 服务器时设置 &lt;code&gt;--encryption-provider-config&lt;/code&gt; 标志，并注明配置文件的位置。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>附录 I：KMS 配置实例</title>
      <link>https://lib.jimmysong.io/kubernetes-hardening-guidance/appendix/i/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/kubernetes-hardening-guidance/appendix/i/</guid>
      <description>&lt;p&gt;要用密钥管理服务（KMS）提供商插件来加密 Secret，可以使用以下加密配置 YAML 文件的例子来为提供商设置属性。这个例子是基于 &lt;a href=&#34;https://kubernetes.io/docs/tasks/administer-cluster/kms-provider/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes 的官方文档&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;apiserver.config.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;EncryptionConfiguration&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;secrets&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;providers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;kms&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;myKMSPlugin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;endpoint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;unix://tmp/socketfile.sock&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cachesize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;timeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;3s&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;identity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;要配置 API 服务器使用 KMS 提供商，请将 &lt;code&gt;--encryption-provider-config&lt;/code&gt; 标志与配置文件的位置一起设置，并重新启动 API 服务器。&lt;/p&gt;
&lt;p&gt;要从本地加密提供者切换到 KMS，请将 &lt;code&gt;EncryptionConfiguration&lt;/code&gt; 文件中的 KMS 提供者部分添加到当前加密方法之上，如下所示。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;apiserver.config.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;EncryptionConfiguration&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;secrets&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;providers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;kms&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;myKMSPlugin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;endpoint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;unix://tmp/socketfile.sock&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cachesize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;timeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;3s&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;aescbc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;keys&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;key1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;secret&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;&amp;lt;base64 encoded secret&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;重新启动 API 服务器并运行下面的命令来重新加密所有与 KMS 供应商的 Secret。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl get secrets --all-namespaces -o json &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; kubectl replace -f -
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>附录 J：pod-reader RBAC 角色</title>
      <link>https://lib.jimmysong.io/kubernetes-hardening-guidance/appendix/j/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/kubernetes-hardening-guidance/appendix/j/</guid>
      <description>&lt;p&gt;要创建一个 pod-reader 角色，创建一个 YAML 文件，内容如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Role&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;your-namespace-name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;pod-reader&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;apiGroups&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# &amp;#34;&amp;#34; 表示核心 API 组&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;pods&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;verbs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;get&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;watch&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;list&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;应用角色：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl apply --f role.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;要创建一个全局性的 pod-reader &lt;code&gt;ClusterRole&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ClusterRole&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# &amp;#34;namespace&amp;#34; 被省略了，因为 ClusterRoles 没有被绑定到一个命名空间上&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;global-pod-reader&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiGroups&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# &amp;#34;&amp;#34; 表示核心 API 组&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;pods&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;verbs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;get&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;watch&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;list&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;应用角色：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl apply --f clusterrole.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>附录 K：RBAC RoleBinding 和 ClusterRoleBinding 示例</title>
      <link>https://lib.jimmysong.io/kubernetes-hardening-guidance/appendix/k/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/kubernetes-hardening-guidance/appendix/k/</guid>
      <description>&lt;p&gt;要创建一个 &lt;code&gt;RoleBinding&lt;/code&gt;，需创建一个 YAML 文件，内容如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 这个角色绑定允许 &amp;#34;jane&amp;#34; 读取 &amp;#34;your-namespace-name&amp;#34; 的 Pod 命名空间&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 你需要在该命名空间中已经有一个名为 &amp;#34;pod-reader&amp;#34;的角色。&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;RoleBinding&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;read-pods&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;your-namespace-name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;subjects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 你可以指定一个以上的 &amp;#34;subject&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;jane&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# &amp;#34;name&amp;#34; 是大小写敏感的&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiGroup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;roleRef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# &amp;#34;roleRef&amp;#34; 指定绑定到一个 Role/ClusterRole&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Role&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 必须是 Role 或 ClusterRole&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;pod-reader&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 这必须与你想绑定的 Role 或 ClusterRole 的名字相匹配&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiGroup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;应用 &lt;code&gt;RoleBinding&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl apply --f rolebinding.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;要创建一个&lt;code&gt;ClusterRoleBinding&lt;/code&gt;，请创建一个 YAML 文件，内容如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 这个集群角色绑定允许 &amp;#34;manager&amp;#34; 组中的任何人在任何命名空间中读取 Pod 信息。&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ClusterRoleBinding&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;global-pod-reader&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;subjects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 你可以指定一个以上的 &amp;#34;subject&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Group&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;manager&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Name 是大小写敏感的&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiGroup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;roleRef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# &amp;#34;roleRef&amp;#34; 指定绑定到一个 Role/ClusterRole&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ClusterRole&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 必须是 Role 或 ClusterRole&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;global-pod-reader&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 这必须与你想绑定的 Role 或 ClusterRole 的名字相匹配&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiGroup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;应用 &lt;code&gt;RoleBinding&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl apply --f clusterrolebinding.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>附录 L：审计策略</title>
      <link>https://lib.jimmysong.io/kubernetes-hardening-guidance/appendix/l/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/kubernetes-hardening-guidance/appendix/l/</guid>
      <description>&lt;p&gt;下面是一个审计策略，它以最高级别记录所有审计事件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;audit.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Policy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;level&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;RequestResponse&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 这个审计策略记录了 RequestResponse 级别的所有审计事件&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这种审计策略在最高级别上记录所有事件。如果一个组织有可用的资源来存储、解析和检查大量的日志，那么在最高级别上记录所有事件是一个很好的方法，可以确保当事件发生时，所有必要的背景信息都出现在日志中。如果资源消耗和可用性是一个问题，那么可以建立更多的日志规则来降低非关键组件和常规非特权操作的日志级别，只要满足系统的审计要求。如何建立这些规则的例子可以在 &lt;a href=&#34;https://kubernetes.io/docs/tasks/debug-application-cluster/audit/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes 官方文档&lt;/a&gt;中找到。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>附录 M：向 kube-apiserver 提交审计策略文件的标志示例</title>
      <link>https://lib.jimmysong.io/kubernetes-hardening-guidance/appendix/m/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/kubernetes-hardening-guidance/appendix/m/</guid>
      <description>&lt;p&gt;在控制平面，用文本编辑器打开 &lt;code&gt;kube-apiserver.yaml&lt;/code&gt; 文件。编辑 &lt;code&gt;kube-apiserver&lt;/code&gt; 配置需要管理员权限。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo vi /etc/kubernetes/manifests/kube-apiserver.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 &lt;code&gt;kube-apiserver.yaml&lt;/code&gt; 文件中添加以下文字：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;--audit-policy-file=/etc/kubernetes/policy/audit-policy.yaml --audit-log-path=/var/log/audit.log --audit-log-maxage=1825
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;audit-policy-file&lt;/code&gt; 标志应该设置为审计策略的路径，而 &lt;code&gt;audit-log-path&lt;/code&gt; 标志应该设置为所需的审计日志写入的安全位置。还有一些其他的标志，比如这里显示的 &lt;code&gt;audit-log-maxage&lt;/code&gt; 标志，它规定了日志应该被保存的最大天数，还有一些标志用于指定要保留的最大审计日志文件的数量，最大的日志文件大小（兆字节）等等。启用日志记录的唯一必要标志是 &lt;code&gt;audit-policy-file&lt;/code&gt; 和 &lt;code&gt;audit-log-path&lt;/code&gt; 标志。其他标志可以用来配置日志，以符合组织的政策。&lt;/p&gt;
&lt;p&gt;如果用户的 &lt;code&gt;kube-apiserver&lt;/code&gt; 是作为 Pod 运行的，那么就有必要挂载卷，并配置策略和日志文件位置的 &lt;code&gt;hostPath&lt;/code&gt; 以保留审计记录。这可以通过在 &lt;a href=&#34;https://kubernetes.io/docs/tasks/debug-application-cluster/audit/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes 文档中&lt;/a&gt;指出的 &lt;code&gt;kube-apiserver.yaml&lt;/code&gt; 文件中添加以下部分来完成：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumeMounts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;mountPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/etc/kubernetes/audit-policy.yaml&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;audit&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;readOnly&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;mountPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/var/log/audit.log&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;audit-log&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;readOnly&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;hostPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/etc/kubernetes/audit-policy.yaml&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;audit&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;hostPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/var/log/audit.log&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;FileOrCreate&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;audit-log&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>附录 N：webhook 配置</title>
      <link>https://lib.jimmysong.io/kubernetes-hardening-guidance/appendix/n/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/kubernetes-hardening-guidance/appendix/n/</guid>
      <description>&lt;p&gt;YAML 文件示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Config&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;preferences&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;clusters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;example-cluster&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cluster&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;http://127.0.0.1:8080&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#web endpoint address for the log files to be sent to&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;audit-webhook-service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;users&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;example-users&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;example-user&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;example-password&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;contexts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;example-context&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cluster&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;example-cluster&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;example-user&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;current-context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;example-context&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#source: https://dev.bitolog.com/implement-audits-webhook/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;由 webhook 发送的审计事件是以 HTTP POST 请求的形式发送的，请求体中包含 JSON 审计事件。指定的地址应该指向一个能够接受和解析这些审计事件的端点，无论是第三方服务还是内部配置的端点。&lt;/p&gt;
&lt;p&gt;向 &lt;code&gt;kube-apiserve&lt;/code&gt;r 提交 webhook 配置文件的标志示例：&lt;/p&gt;
&lt;p&gt;在控制面编辑 &lt;code&gt;kube-apiserver.yaml&lt;/code&gt; 文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo vi /etc/kubernetes/manifests/kube-apiserver.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 kube-apiserver.yaml 文件中添加以下文字&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;--audit-webhook-config-file=/etc/kubernetes/policies/webhook-policy.yaml
--audit-webhook-initial-backoff=5
--audit-webhook-mode=batch
--audit-webhook-batch-buffer-size=5
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;audit-webhook-initial-backoff&lt;/code&gt; 标志决定了在一个初始失败的请求后要等待多长时间才能重试。可用的 webhook 模式有 &lt;code&gt;batch&lt;/code&gt;、&lt;code&gt;block&lt;/code&gt; 和 &lt;code&gt;blocking-stric&lt;/code&gt; 的。当使用批处理模式时，有可能配置最大等待时间、缓冲区大小等。Kubernetes 官方文档包含了其他配置选项的更多细节&lt;a href=&#34;https://kubernetes.io/docs/tasks/debug-application-cluster/audit/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;审计&lt;/a&gt;和 &lt;a href=&#34;https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;kube-apiserver&lt;/code&gt;&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>构建安全的 Kubernetes 环境：OWASP Kubernetes Top 10</title>
      <link>https://lib.jimmysong.io/blog/top-owasp-kubernetes/</link>
      <pubDate>Thu, 12 Oct 2023 10:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/blog/top-owasp-kubernetes/</guid>
      <description>&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/top-owasp-kubernetes/featured_hubf9157d733e5865b7420640d9145af30_19673_5e13e17c7b9e684ceb33a5bb499975b8.webp 400w,
               /blog/top-owasp-kubernetes/featured_hubf9157d733e5865b7420640d9145af30_19673_1509ac94e17a56ef956ee33219fee7eb.webp 760w,
               /blog/top-owasp-kubernetes/featured_hubf9157d733e5865b7420640d9145af30_19673_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://lib.jimmysong.io/blog/top-owasp-kubernetes/featured_hubf9157d733e5865b7420640d9145af30_19673_5e13e17c7b9e684ceb33a5bb499975b8.webp&#34;
               width=&#34;760&#34;
               height=&#34;419&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;本文译自：&lt;a href=&#34;https://sysdig.com/blog/top-owasp-kubernetes/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://sysdig.com/blog/top-owasp-kubernetes/&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;摘要：OWASP Kubernetes Top 10 强调了 Kubernetes 生态系统中的关键风险和漏洞。它涵盖了诸如准入控制器中的配置错误，密钥管理故障，漏洞管理，身份验证机制失效以及过时和易受攻击的 Kubernetes 组件等主题。建议包括使用像 Falco 这样的工具来检测安全问题，对静态密钥进行加密，解决安全配置问题，确保日志记录和审计，扫描容器镜像以检测漏洞，管理依赖关系，保护对 Kubernetes 的访问以及及时了解 CVE 情况。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;使用 Kubernetes 时最大的关切之一是是否符合安全态势，并考虑到所有可能的威胁。因此，OWASP 创造了 OWASP Kubernetes Top 10，以帮助识别最可能的风险。&lt;/p&gt;
&lt;p&gt;OWASP Top 10 项目是对安全从业人员和工程师非常有用的认知和指导资源。它们也可以映射到其他安全框架，帮助事件响应工程师了解 Kubernetes 的威胁。MITRE ATT&amp;amp;CK 技术也常用于记录攻击者的技术，并帮助蓝队了解保护环境的最佳方法。此外，我们可以检查 Kubernetes 的威胁模型，了解所有的攻击面和主要的攻击向量。&lt;/p&gt;
&lt;p&gt;OWASP Kubernetes Top 10 将所有可能的风险按照总体普遍性或可能性排序。在这项研究中，我们略微修改了顺序。我们将其中一些风险分组到同一类别中，如配置错误、监控或漏洞。我们还推荐一些工具或技术来审计您的配置，并确保您的安全态势是最合适的。&lt;/p&gt;
&lt;h2 id=&#34;什么是-owasp-kubernetes&#34;&gt;什么是 OWASP Kubernetes？&lt;/h2&gt;
&lt;p&gt;OWASP（Open Web Application Security Project）是一个致力于改善软件安全的非营利基金会。OWASP 侧重于 Web 应用程序安全（故其名称），但随着现代系统设计的特性，它的范围已经扩大。&lt;/p&gt;
&lt;p&gt;随着应用程序开发从传统运行在虚拟机后面的单片架构转向在云基础设施上运行的现代微服务工作负载，重要的是为每个应用程序环境更新安全要求。&lt;/p&gt;
&lt;p&gt;这就是为什么 OWASP 基金会创建了 OWASP Kubernetes Top 10 - 专为 Kubernetes 环境设计的十大最常见攻击向量列表。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-owasp-kubernetes-top-10&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;OWASP Kubernetes Top 10&#34; srcset=&#34;
               /blog/top-owasp-kubernetes/image-6_hu127e6f33183b84c5464d523f248eec0e_60906_2a881728b367d5d53efe3ad2b3bc8ab6.webp 400w,
               /blog/top-owasp-kubernetes/image-6_hu127e6f33183b84c5464d523f248eec0e_60906_ee771d850d191b9647c6b615cea64b79.webp 760w,
               /blog/top-owasp-kubernetes/image-6_hu127e6f33183b84c5464d523f248eec0e_60906_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://lib.jimmysong.io/blog/top-owasp-kubernetes/image-6_hu127e6f33183b84c5464d523f248eec0e_60906_2a881728b367d5d53efe3ad2b3bc8ab6.webp&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      OWASP Kubernetes Top 10
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;在上图中，我们突出显示了 OWASP Kubernetes 中的每个风险影响的组件或部分，映射到一个通用的 Kubernetes 威胁模型以帮助理解。这项分析还深入研究了每个 OWASP 风险，提供了关于为何该威胁突出的技术细节，以及常见的缓解措施。将风险分组成三类并按可能性排序也很有帮助。风险类别包括：&lt;/p&gt;
&lt;h3 id=&#34;配置错误&#34;&gt;配置错误&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;K01:2022 不安全的工作负载配置&lt;/li&gt;
&lt;li&gt;K09:2022 集群组件配置错误&lt;/li&gt;
&lt;li&gt;K03:2022 过于宽松的 RBAC 配置&lt;/li&gt;
&lt;li&gt;K07:2022 缺失网络分割控制&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;缺乏可见性&#34;&gt;缺乏可见性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;K05:2022 日志和监控不足&lt;/li&gt;
&lt;li&gt;K04:2022 缺乏集中策略强制执行&lt;/li&gt;
&lt;li&gt;K08:2022 机密管理故障&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;漏洞管理&#34;&gt;漏洞管理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;K02:2022 供应链漏洞&lt;/li&gt;
&lt;li&gt;K06:2022 身份验证机制失效&lt;/li&gt;
&lt;li&gt;K10:2022 过时且容易受攻击的 Kubernetes 组件&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;配置错误-1&#34;&gt;配置错误&lt;/h3&gt;
&lt;h3 id=&#34;不安全的工作负载配置&#34;&gt;不安全的工作负载配置&lt;/h3&gt;
&lt;p&gt;安全始终是云服务提供商提供的所有服务的首要考虑因素。像 AWS、GCP 和 Azure 这样的云服务提供商实施了一系列沙盒功能、虚拟防火墙功能以及对底层服务的自动更新，以确保您的业务在任何时间和地点都保持安全。这些措施也减轻了在本地环境中传统安全负担的一些压力。然而，云环境应用了所谓的共享安全模型，这意味着部分责任在云服务的消费者身上，需要在其响应环境中实施这些安全防护措施。责任也会根据云消费模型和提供类型而变化。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-os&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;OS&#34; srcset=&#34;
               /blog/top-owasp-kubernetes/image-7_hue37c58340c95c6d54cf909e69ef7c68c_25660_978fa53aee0d054649c14ee6237e39ba.webp 400w,
               /blog/top-owasp-kubernetes/image-7_hue37c58340c95c6d54cf909e69ef7c68c_25660_74221301ea7aea2dd26163c0f3beed5a.webp 760w,
               /blog/top-owasp-kubernetes/image-7_hue37c58340c95c6d54cf909e69ef7c68c_25660_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://lib.jimmysong.io/blog/top-owasp-kubernetes/image-7_hue37c58340c95c6d54cf909e69ef7c68c_25660_978fa53aee0d054649c14ee6237e39ba.webp&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      OS
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;租户的管理员最终必须确保工作负载使用安全镜像，在已打补丁/更新的操作系统（OS）上运行，并确保基础设施配置持续进行审核和补救。云原生工作负载中的配置错误是对敌手获取访问您环境的最常见途径之一。&lt;/p&gt;
&lt;p&gt;操作系统&lt;/p&gt;
&lt;p&gt;容器化工作负载的好处之一是您选择的镜像通常已预先加载了与您的应用程序基础镜像功能相匹配的依赖关系。这些镜像预先打包了一些通用系统库和其他第三方组件，这些组件对于工作负载并非必需。在某些情况下，例如在微服务体系结构（MSA）中，给定的容器镜像可能太臃肿，无法提供性能良好的操作该微服务的容器。&lt;/p&gt;
&lt;p&gt;我们建议在容器化工作负载中使用最小化、精简的镜像，例如文件大小要小得多的 Alpine Linux 镜像。这些轻量级镜像在大多数情况下都非常理想。由于其中打包的组件较少，也就&lt;/p&gt;
&lt;p&gt;减少了被攻击的可能性。如果需要额外的软件包或库，可以考虑从基本的 Alpine 镜像开始，并逐渐添加所需的软件包/库，以保持预期的行为/性能。&lt;/p&gt;
&lt;p&gt;审核工作负载&lt;/p&gt;
&lt;p&gt;CIS Kubernetes Benchmark 可以作为发现配置错误的起点。比如，开源项目 kube-bench 可以使用 YAML 文件设置测试来检查您的集群是否符合 CIS Kubernetes Benchmark。&lt;/p&gt;
&lt;p&gt;示例 CIS Benchmark 控制&lt;/p&gt;
&lt;p&gt;最小化 root 容器的准入（5.2.6）&lt;/p&gt;
&lt;p&gt;Linux 容器工作负载可以作为任何 Linux 用户运行。然而，作为 root 用户运行的容器会增加容器逃逸（特权升级，然后在 Linux 主机中进行侧向移动）的可能性。CIS 基准建议所有容器应作为定义的非 UID 0 用户运行。&lt;/p&gt;
&lt;p&gt;减少 root 容器准入的 Kubernetes 审核工具之一是 kube-admission-webhook。这是一个 Kubernetes 准入控制器 Webhook，允许您验证和变更传入的 Kubernetes API 请求。您可以使用它来强制执行安全策略，例如禁止在您的集群中创建 root 容器。&lt;/p&gt;
&lt;p&gt;如何使用 OPA 防止工作负载配置错误&lt;/p&gt;
&lt;p&gt;诸如 Open Policy Agent（OPA）之类的工具可用作策略引擎，用于检测这些常见的配置错误。OPA 准入控制器为您提供了高级别的声明性语言，以在整个堆栈上编写和强制执行策略。&lt;/p&gt;
&lt;p&gt;假设您想为前面提到的 Alpine 镜像构建一个准入控制器。但是，Kubernetes 的某些用户想将 securityContext 设置为 privileged=true。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Pod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;alpine&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;containers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;alpine:3.2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;/bin/sh&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;-c&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;sleep 60m&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;imagePullPolicy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;IfNotPresent&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;alpine&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;securityContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;privileged&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;restartPolicy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Always&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这是 Kubernetes 中的一个特权 pod 的示例。在特权模式下运行 pod 意味着该 pod 可以访问主机的资源和内核功能。为了防止特权 pod，OPA Gatekeeper 准入控制器的 .rego 文件应该看起来类似于：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-rego&#34; data-lang=&#34;rego&#34;&gt;package kubernetes.admission
deny[msg] {
    c := input.containers[_]
    c.securityContext.privileged
    msg := sprintf(&amp;#34;Privileged container is not allowed: %v, securityContext: %v&amp;#34;, [c.name, c.securityContext])
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在这种情况下，输出应该类似于以下内容：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Error from server (Privileged container is not allowed: alpine, securityContext: {&amp;#34;privileged&amp;#34;: true}): error when creating &amp;#34;STDIN&amp;#34;: admission webhook &amp;#34;validating-webhook.openpolicyagent.org&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;集群组件配置错误&#34;&gt;集群组件配置错误&lt;/h3&gt;
&lt;p&gt;核心 Kubernetes 组件中的配置错误比预期的要常见得多。为了防止这种情况，持续和自动审核基础设施即代码（IaC）和 K8s（YAML）清单，而不是手动检查它们，将减少配置错误。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-集群组件配置错误&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;集群组件配置错误&#34; srcset=&#34;
               /blog/top-owasp-kubernetes/image-9_hu04d6383e149badebff5956d6ba302694_21611_da7285b6cd5d2ab8d14a144a32f50e3d.webp 400w,
               /blog/top-owasp-kubernetes/image-9_hu04d6383e149badebff5956d6ba302694_21611_0d7d30470a95a12f84f98873fa0f0fc5.webp 760w,
               /blog/top-owasp-kubernetes/image-9_hu04d6383e149badebff5956d6ba302694_21611_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://lib.jimmysong.io/blog/top-owasp-kubernetes/image-9_hu04d6383e149badebff5956d6ba302694_21611_da7285b6cd5d2ab8d14a144a32f50e3d.webp&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      集群组件配置错误
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;最危险的配置错误之一是 Kubelet 中的匿名认证设置，它允许非经过身份验证的请求发送到 Kubelet。强烈建议检查您的 Kubelet 配置，并确保以下标志设置为 false。&lt;/p&gt;
&lt;p&gt;在审核工作负载时，重要的是要记住有多种部署应用程序的方式。使用各种集群组件的配置文件，可以为这些组件授权特定的读取/写入权限。对于 Kubelet，通常情况下，对于 kubelet 的 HTTPS 端点的所有请求，如果没有被其他配置的身份验证方法拒绝，则被视为匿名请求，并被赋予用户名 system:anonymous 和组 system:unauthenticated。&lt;/p&gt;
&lt;p&gt;要禁用这些未经身份验证的请求的匿名访问，只需在启动 kubelet 时使用特性标志 &amp;ndash;anonymous-auth=false。在审核诸如 kubelet 之类的集群组件时，我们可以看到 kubelet 使用与 API 服务器相同的请求属性方法授权 API 请求。因此，我们可以定义权限，如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;POST&lt;/li&gt;
&lt;li&gt;GET&lt;/li&gt;
&lt;li&gt;PUT&lt;/li&gt;
&lt;li&gt;PATCH&lt;/li&gt;
&lt;li&gt;DELETE&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是，还有许多其他集群组件需要关注，不仅仅是 kubelet。例如，kubectl 插件以与 kubectl 命令本身相同的权限运行，因此如果插件受到威胁，可能会用于升级权限并访问集群中的敏感资源。&lt;/p&gt;
&lt;p&gt;根据 Kubernetes 的 CIS 基准报告，我们建议为所有集群组件启用以下设置。&lt;/p&gt;
&lt;h3 id=&#34;etcd&#34;&gt;etcd&lt;/h3&gt;
&lt;p&gt;etcd 数据库提供了一个高可用的键值存储，Kubernetes 使用它来集中存储所有集群数据。保持 etcd 安全很重要，因为它存储配置数据以及 K8s Secrets。我们强烈建议定期备份 etcd 数据，以避免数据丢失。&lt;/p&gt;
&lt;p&gt;幸运的是，etcd 支持一个内置的快照功能。可以使用 etcdctl snapshot save 命令从活动集群成员中获取快照。获取快照不会对性能产生影响。以下是将 keyspace 从 $ENDPOINT 服务到文件 snapshotdb 中获取快照的示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;ETCDCTL_API&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;etcdctl&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endpoints&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$ENDPOINT&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;snapshot&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;save&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;snapshotdb&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;kube-apiserver&#34;&gt;kube-apiserver&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://sysdig.com/learn-cloud-native/kubernetes-101/kubernetes-api-overview/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes API 服务器&lt;/a&gt; 用于验证和配置 API 对象的数据，包括 pods、services、ReplicationControllers 等。API 服务器提供 REST 操作服务，并提供了集群共享状态的前端，通过它，所有其他组件进行交互。它对集群的运行至关重要，具有极高的价值，因为攻击目标的重要性不可低估。从安全的角度来看，所有连接到 API 服务器的连接、控制平面内的通信以及控制平面与 kubelet 组件之间的通信都应只能通过 TLS 连接进行访问。&lt;/p&gt;
&lt;p&gt;默认情况下，kube-apiserver 的 TLS 是未配置的。如果在 Kube-bench 的结果中标记了这一点，只需在 kube-apiserver 中使用特性标志 &lt;code&gt;--tls-cert-file=[file]&lt;/code&gt; 和 &lt;code&gt;--tls-private-key-file=[file]&lt;/code&gt; 启用 TLS。由于 Kubernetes 集群往往会定期扩展和缩减，我们建议使用 Kubernetes 的 &lt;a href=&#34;https://kubernetes.io/docs/reference/access-authn-authz/kubelet-tls-bootstrapping/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TLS 引导功能&lt;/a&gt;。这允许在 Kubernetes 集群内自动进行证书签名和 TLS 配置，而不是遵循上述手动工作流程。&lt;/p&gt;
&lt;p&gt;定期旋转这些证书也非常重要，特别是对于寿命较长的 Kubernetes 集群。&lt;/p&gt;
&lt;p&gt;幸运的是，在 Kubernetes v.1.8 或更高版本中，有&lt;a href=&#34;https://kubernetes.io/docs/reference/access-authn-authz/kubelet-tls-bootstrapping/#certificate-rotation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;自动化工具可以帮助旋转这些证书&lt;/a&gt;。API 服务器请求也应该进行身份验证，我们将在“破碎的身份验证机制”部分中介绍。&lt;/p&gt;
&lt;h3 id=&#34;coredns&#34;&gt;CoreDNS&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://coredns.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CoreDNS&lt;/a&gt; 是一种 DNS 服务器技术，可以作为 Kubernetes 集群的 DNS，由&lt;a href=&#34;https://www.cncf.io/projects/coredns/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNCF&lt;/a&gt; 托管。自 Kubernetes 版本 v.1.11 开始，CoreDNS 取代了 kube-dns。在集群内部进行名称解析对于定位 K8s 中的编排和临时工作负载以及固有的服务至关重要。&lt;/p&gt;
&lt;p&gt;CoreDNS 解决了在 kube-dns 中发现的许多安全漏洞，特别是在 dnsmasq（DNS 解析器）中。这个 DNS 解析器负责缓存来自 SkyDNS 的响应，后者负责执行最终的 DNS 解析服务。&lt;/p&gt;
&lt;p&gt;除了解决 kube-dns 中 dnsmasq 功能的安全漏洞之外，CoreDNS 还解决了 SkyDNS 中的性能问题。使用 kube-dns 还涉及到一个旁路代理，用于监控健康状况并处理 DNS 服务的指标报告。&lt;/p&gt;
&lt;p&gt;CoreDNS 通过在一个容器内提供 kube-dns 的所有功能来解决许多与安全和性能相关的问题。然而，它仍然可能会受到威胁。因此，我们建议再次使用 kube-bench 来进行对 CoreDNS 的合规性检查。&lt;/p&gt;
&lt;h2 id=&#34;过于宽松的-rbac-配置&#34;&gt;过于宽松的 RBAC 配置&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://sysdig.com/learn-cloud-native/kubernetes-security/kubernetes-rbac/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;基于角色的访问控制&lt;/a&gt;（RBAC）是一种根据组织内个别用户的角色来调节对计算机或网络资源的访问的方法。RBAC 配置错误可能会允许攻击者提升权限并完全控制整个集群。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-过于宽松的-rbac-配置&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;过于宽松的 RBAC 配置&#34; srcset=&#34;
               /blog/top-owasp-kubernetes/image-10_hua74e593a53a34aedfe36a4cd5e1b4af8_56396_72106ec6bf5f9f45ffb2940db4457034.webp 400w,
               /blog/top-owasp-kubernetes/image-10_hua74e593a53a34aedfe36a4cd5e1b4af8_56396_61c2ac738ee7478dd7deae7863fef60b.webp 760w,
               /blog/top-owasp-kubernetes/image-10_hua74e593a53a34aedfe36a4cd5e1b4af8_56396_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://lib.jimmysong.io/blog/top-owasp-kubernetes/image-10_hua74e593a53a34aedfe36a4cd5e1b4af8_56396_72106ec6bf5f9f45ffb2940db4457034.webp&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      过于宽松的 RBAC 配置
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;创建 RBAC 规则相当简单。例如，要创建一个宽松策略以允许对 Kubernetes 集群的“default”网络命名空间中的 pods 进行只读的 CRUD 操作（即获取、监视、列举），但阻止对这些 pods 进行创建、更新或删除操作，策略会类似于以下示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Role&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;pod-reader&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;apiGroups&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# &amp;#34;&amp;#34; 表示核心 API 组&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;pods&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;verbs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;get&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;watch&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;list&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在长期管理这些 RBAC 规则时会出现问题。管理员可能需要管理 &lt;strong&gt;ClusterRole&lt;/strong&gt; 资源，以避免在每个网络命名空间上构建单独的角色，如上所示。ClusterRoles 允许我们为这些工作负载构建集群范围的规则以授予访问权限。&lt;/p&gt;
&lt;p&gt;然后可以使用 RoleBindings 将上述角色绑定到用户。&lt;/p&gt;
&lt;p&gt;与其他身份验证和访问管理（IAM）实践类似，我们需要确保每个用户在 Kubernetes 中对资源具有正确的访问权限，而不会对单个资源授予过多权限。下面的示例清单应该显示了我们建议在 Kubernetes 中将角色绑定到服务帐户或用户。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;RoleBinding&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;read-pods&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Subjects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;nigeldouglas&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiGroup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;roleRef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Role&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;pod-reader&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiGroup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过扫描 RBAC 配置错误，我们可以积极加强集群的安全姿态，同时简化授权流程。云原生团队授予权限过多的主要原因之一是由于在生产环境中管理单个 RBAC 策略的复杂性。换句话说，集群内可能有太多用户和角色需要通过手动审查清单代码来进行管理。这就是为什么有专门的工具来处理 RBAC 的管理、审计和合规性检查的原因。&lt;/p&gt;
&lt;h3 id=&#34;审计-rbac&#34;&gt;审计 RBAC&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cyberark/kubernetes-rbac-audit&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RBAC 审计&lt;/a&gt; 是由 CyberArk 团队创建的工具。该工具旨在扫描 Kubernetes 集群中存在的 RBAC 中的风险角色，需要 python3。可以通过以下单个命令运行这个 Python 工具：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;ExtensiveRoleCheck&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;py&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;clusterRole&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clusterroles&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;json&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;role&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Roles&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;json&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rolebindings&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rolebindings&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;json&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cluseterolebindings&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clusterrolebindings&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;json&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出应该类似于：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/top-owasp-kubernetes/image-11_hue062bd65edd5e4d6bc23fa262a5b6aa2_26347_bcd0b48d00fb756c87b3261d966d399c.webp 400w,
               /blog/top-owasp-kubernetes/image-11_hue062bd65edd5e4d6bc23fa262a5b6aa2_26347_4708c9fe98aa244d2636c1217dba8c64.webp 760w,
               /blog/top-owasp-kubernetes/image-11_hue062bd65edd5e4d6bc23fa262a5b6aa2_26347_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://lib.jimmysong.io/blog/top-owasp-kubernetes/image-11_hue062bd65edd5e4d6bc23fa262a5b6aa2_26347_bcd0b48d00fb756c87b3261d966d399c.webp&#34;
               width=&#34;760&#34;
               height=&#34;369&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;kubiscan&#34;&gt;Kubiscan&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cyberark/KubiScan&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubiscan&lt;/a&gt; 是由 CyberArk 团队构建的另一个工具。与 RBAC 审计不同，此工具旨在扫描 Kubernetes 集群中的风险权限，而不是 RBAC 角色。同样，此工具需要 Python v.3.6 或更高版本才能运行。&lt;/p&gt;
&lt;p&gt;要查看所有示例，请运行 &lt;code&gt;python3 KubiScan.py -e&lt;/code&gt; 或在容器内运行 &lt;code&gt;kubiscan -e&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/top-owasp-kubernetes/image-12_hu70f387f3ea38f3c8ecaa61b2c14245cd_763343_0d77a3abf6e2aba78f95cfd627ad2ab0.webp 400w,
               /blog/top-owasp-kubernetes/image-12_hu70f387f3ea38f3c8ecaa61b2c14245cd_763343_5a24128f5ce08e77a2ed95300cdbd17f.webp 760w,
               /blog/top-owasp-kubernetes/image-12_hu70f387f3ea38f3c8ecaa61b2c14245cd_763343_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://lib.jimmysong.io/blog/top-owasp-kubernetes/image-12_hu70f387f3ea38f3c8ecaa61b2c14245cd_763343_0d77a3abf6e2aba78f95cfd627ad2ab0.webp&#34;
               width=&#34;760&#34;
               height=&#34;442&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;krane&#34;&gt;Krane&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/appvia/krane&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Krane&lt;/a&gt; 是用于 Kubernetes RBAC 的静态分析工具。与 Kubiscan 类似，它识别 K8s RBAC 设计中可能存在的安全风险，并提出了如何缓解这些风险的建议。&lt;/p&gt;
&lt;p&gt;这些工具之间的主要区别在于 Krane 提供了集群当前 RBAC 安全姿态的仪表板，并允许您浏览其定义。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/top-owasp-kubernetes/image-13_hub4312c3c34e3b8f2d11b2885c6e5b7f2_304068_c9246ed0e052e809c1a79d94b9de1c74.webp 400w,
               /blog/top-owasp-kubernetes/image-13_hub4312c3c34e3b8f2d11b2885c6e5b7f2_304068_354fe7eb737727a85a046f9b4904e318.webp 760w,
               /blog/top-owasp-kubernetes/image-13_hub4312c3c34e3b8f2d11b2885c6e5b7f2_304068_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://lib.jimmysong.io/blog/top-owasp-kubernetes/image-13_hub4312c3c34e3b8f2d11b2885c6e5b7f2_304068_c9246ed0e052e809c1a79d94b9de1c74.webp&#34;
               width=&#34;760&#34;
               height=&#34;687&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;如果您想对正在运行的集群运行 RBAC 报告，您必须提供一个 kubectl 上下文，如下所示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;krane&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;report&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;sr&#34;&gt;&amp;lt;kubectl-context&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果您希望在上述树状设计中查看您的 RBAC 设计，并带有网络拓扑图以及最新的报告发现，您需要通过以下命令启动仪表板服务器：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;krane&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dashboard&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nigel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eks&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cluster&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;-c&lt;/code&gt; 特性标志指向您环境中的一个集群名称。如果您想要所有集群的仪表板，请从上述命令中删除 &lt;code&gt;-c&lt;/code&gt; 的引用。&lt;/p&gt;
&lt;h2 id=&#34;缺失的网络分割控制&#34;&gt;缺失的网络分割控制&lt;/h2&gt;
&lt;p&gt;Kubernetes 默认定义了所谓的“&lt;a href=&#34;https://en.wikipedia.org/wiki/Flat_network&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;扁平网络&lt;/a&gt;”设计。&lt;/p&gt;
&lt;p&gt;这允许工作负载在没有任何先前配置的情况下自由相互通信。然而，他们可以在没有任何限制的情况下执行此操作。如果攻击者能够利用正在运行的工作负载，他们实质上将可以访问对集群中所有其他 pod 进行数据外泄。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/top-owasp-kubernetes/image-14_huba0d0faf7a816a503cc829e40095e259_67546_5c3e1a5be0f6278e708ebae64c0fd094.webp 400w,
               /blog/top-owasp-kubernetes/image-14_huba0d0faf7a816a503cc829e40095e259_67546_0a6da49e81864cb42ea8fe0a5c67cda3.webp 760w,
               /blog/top-owasp-kubernetes/image-14_huba0d0faf7a816a503cc829e40095e259_67546_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://lib.jimmysong.io/blog/top-owasp-kubernetes/image-14_huba0d0faf7a816a503cc829e40095e259_67546_5c3e1a5be0f6278e708ebae64c0fd094.webp&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;在其组织中专注于零信任架构的集群运营商将希望更仔细地查看 Kubernetes 网络策略，以确保服务得到适当限制。&lt;/p&gt;
&lt;p&gt;Kubernetes 提供了解决正确配置网络分割控制的解决方案。在这里，我们向您展示了其中的两个。&lt;/p&gt;
&lt;h3 id=&#34;使用-istio-的服务网格&#34;&gt;使用 Istio 的服务网格&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/istio/istio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;/a&gt; 提供了一种服务网格解决方案。这使得安全和网络团队能够管理跨微服务的流量流向，执行策略，并聚合遥测数据，以便对进出微服务的网络流量进行微分割。&lt;/p&gt;
&lt;p&gt;在撰写本文时，该服务依赖于在集群中的每个微服务实现一组旁路代理。然而，Istio 项目计划在今年某个时候&lt;a href=&#34;https://istio.io/latest/blog/2022/introducing-ambient-mesh/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;转向无旁路代理方法&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;旁路技术称为“Envoy”。我们依赖 Envoy 来处理集群内服务之间的入口/出口流量，以及从服务到服务网格架构中的外部服务的流量。使用代理的明显优势在于它们提供了一个安全的微服务网格，提供流量镜像、发现、丰富的第7层流量路由、熔断器、策略执行、遥测记录/报告功能，以及最重要的是，所有通信都自动使用自动证书轮换的 mTLS！&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;security.istio.io/v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;AuthorizationPolicy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;httpbin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;DENY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespaces&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;prod&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;To&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;operation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;methods&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;POST&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上述的 &lt;strong&gt;Istio AuthorizationPolicy&lt;/strong&gt; 将所有来自“prod”生产命名空间的请求的动作设置为“DENY”，并将其应用于“default”命名空间中所有工作负载上的“POST”方法。&lt;/p&gt;
&lt;p&gt;这个策略非常有用。与只能在 L3/L4（网络层）基于 IP 地址和端口丢弃流量的 Calico 网络策略不同，授权策略会根据 HTTP/S 动词（如 POST/GET）在 L7（应用层）拒绝流量。这在实施 Web 应用程序防火墙（WAF）时非常重要。&lt;/p&gt;
&lt;p&gt;了解更多关于 &lt;a href=&#34;https://sysdig.com/blog/monitor-istio/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 监控如何帮助您&lt;/a&gt; 保证您的 Istio 服务处于良好状态的信息。&lt;/p&gt;
&lt;h3 id=&#34;cni&#34;&gt;CNI&lt;/h3&gt;
&lt;p&gt;值得注意的是，虽然服务网格有许多优点，比如通过相互 TLS（mTLS）对工作负载之间的流量进行加密以及 HTTP/s 流量控制，但也存在一些管理服务网格的复杂性。在集群中每个工作负载旁边使用旁路代理会给您的集群增加额外的负担，以及在生产环境中遇到问题时解决这些旁路代理会带来不必要的问题。&lt;/p&gt;
&lt;p&gt;许多组织选择默认仅实施容器网络接口（CNI）。正如其名字所示，CNI 是集群的网络接口。像 &lt;a href=&#34;https://github.com/projectcalico&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Project Calico&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/cilium&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cilium&lt;/a&gt; 这样的 CNI 都带有自己的策略实施。而 Istio 则在 L7 流量上执行流量控制，CNI 更倾向于关注网络层流量（L3/L4）。&lt;/p&gt;
&lt;p&gt;下面的 &lt;strong&gt;CiliumNetworkPolicy&lt;/strong&gt; 示例将所有带有标签 app=frontend 的端点限制为仅能够在端口 80 上使用 TCP 发送数据包，发送到任何第三层目的地：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;cilium.io/v2&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;CiliumNetworkPolicy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;l4-rule&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;endpointSelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;frontend&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Egress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;toPorts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;80&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;protocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;TCP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们提到了使用 Istio AuthorizationPolicy 在 L7/应用层提供类似 WAF 的功能。然而，如果对手向 pod/端点发送大量的 TCP/UDP 流量，网络层仍然可能发生&lt;a href=&#34;https://sysdig.com/learn-cloud-native/cloud-security/what-is-a-dos-attack/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;分布式拒绝服务&lt;/a&gt;（DDoS）攻击。类似地，它可以用于防止受损的工作负载与已知/恶意的 C2 服务器通信，这些服务器基于固定的 IP 和端口。&lt;/p&gt;
&lt;p&gt;您想深入了解吗？了解有关 &lt;a href=&#34;https://sysdig.com/blog/denial-of-service-kubernetes-calico-falco/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;如何在 Kubernetes 中使用 Calico 和 Falco 防止 DDoS 攻击&lt;/a&gt; 的更多信息。&lt;/p&gt;
&lt;h2 id=&#34;缺乏可见性-1&#34;&gt;缺乏可见性&lt;/h2&gt;
&lt;h2 id=&#34;日志和监控不足&#34;&gt;日志和监控不足&lt;/h2&gt;
&lt;p&gt;Kubernetes 默认提供了审计日志记录功能。&lt;a href=&#34;https://kubernetes.io/docs/tasks/debug/debug-cluster/audit/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;审计日志记录&lt;/a&gt;以时间顺序显示各种与安全相关的事件。这些活动可能是由用户、使用 Kubernetes API 的应用程序或控制平面本身生成的。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/top-owasp-kubernetes/image-15_huacb9bdcfee4a4577155d0e1682f9fe70_68500_a30859263eb06b51ae4e81115e1ddcee.webp 400w,
               /blog/top-owasp-kubernetes/image-15_huacb9bdcfee4a4577155d0e1682f9fe70_68500_a499c75668ab92243b4582bac9369d33.webp 760w,
               /blog/top-owasp-kubernetes/image-15_huacb9bdcfee4a4577155d0e1682f9fe70_68500_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://lib.jimmysong.io/blog/top-owasp-kubernetes/image-15_huacb9bdcfee4a4577155d0e1682f9fe70_68500_a30859263eb06b51ae4e81115e1ddcee.webp&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;然而，还有其他日志来源需要关注——不仅限于 Kubernetes 审计日志。它们可以包括特定于主机的操作系统日志、网络活动日志（如 DNS，您可以&lt;a href=&#34;https://sysdig.com/blog/how-to-monitor-coredns/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;监视 Kubernetes 附加组件 CoreDNS&lt;/a&gt;），以及还充当 Kubernetes 云基础的云提供商。&lt;/p&gt;
&lt;p&gt;如果没有一个集中的工具来存储所有这些零星的日志来源，我们在发生违规案例时会很难使用它们。这就是像 Prometheus、Grafana 和 Falco 这样的工具有用的地方。&lt;/p&gt;
&lt;h3 id=&#34;prometheus&#34;&gt;Prometheus&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/prometheus/prometheus&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Prometheus&lt;/a&gt; 是一个开源、社区驱动的项目，用于监控现代云原生应用程序和 Kubernetes。它是 CNCF 的一员，并拥有活跃的开发者和用户社区。&lt;/p&gt;
&lt;h3 id=&#34;grafana&#34;&gt;Grafana&lt;/h3&gt;
&lt;p&gt;与 Prometheus 类似，&lt;a href=&#34;https://github.com/grafana/grafana&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Grafana&lt;/a&gt; 是一个拥有庞大社区支持的开源工具。Grafana 允许您查询、可视化、警报和理解您的指标，无论它们存储在何处。用户可以创建、探索并与团队共享仪表板。&lt;/p&gt;
&lt;h3 id=&#34;falco运行时检测&#34;&gt;Falco（运行时检测）&lt;/h3&gt;
&lt;p&gt;Falco 是一个云原生的运行时安全项目，是 Kubernetes 威胁检测的事实标准。Falco 通过观察您的应用程序和容器的行为在运行时检测威胁。Falco 通过 Falco 插件将威胁检测扩展到云环境中。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/top-owasp-kubernetes/image-16_hu3dca0d72583cb574b3a8d41698024177_23642_cf3fbf1c772b20d276d162a542f8a7b6.webp 400w,
               /blog/top-owasp-kubernetes/image-16_hu3dca0d72583cb574b3a8d41698024177_23642_7fd86006594536937c37e279087e51f8.webp 760w,
               /blog/top-owasp-kubernetes/image-16_hu3dca0d72583cb574b3a8d41698024177_23642_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://lib.jimmysong.io/blog/top-owasp-kubernetes/image-16_hu3dca0d72583cb574b3a8d41698024177_23642_cf3fbf1c772b20d276d162a542f8a7b6.webp&#34;
               width=&#34;760&#34;
               height=&#34;278&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Falco 是第一个作为 CNCF 孵化级项目加入的运行时安全项目。Falco 充当安全摄像头，实时检测所有 Kubernetes 环境中的意外行为、入侵和数据盗窃。Falco v.0.13 添加了对 &lt;a href=&#34;https://falco.org/docs/event-sources/kubernetes-audit/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes 审计事件&lt;/a&gt; 的支持，这是对对系统调用事件的现有支持的补充。Kubernetes v1.11 引入了审计事件的改进实现，并提供了对 kube-apiserver 请求和响应的日志记录。&lt;/p&gt;
&lt;p&gt;由于几乎所有的集群管理任务都是通过 API 服务器执行的，审计日志可以有效地跟踪对集群所做的更改。&lt;/p&gt;
&lt;p&gt;示例包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建和销毁 pod、服务、部署、守护进程等。&lt;/li&gt;
&lt;li&gt;创建、更新和删除 ConfigMap 或 secrets。&lt;/li&gt;
&lt;li&gt;订阅对任何端点所做的更改。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;缺乏集中策略执行&#34;&gt;缺乏集中策略执行&lt;/h2&gt;
&lt;p&gt;在需要跨多个集群和多云环境执行规则时，强制执行安全策略变得困难。默认情况下，安全团队需要分别在每个异构环境中管理风险。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/top-owasp-kubernetes/image-17_hub23e97faef9b9fb774d353c9b19c9ee8_54438_d01d1fcf9deba93bc4af03ae31b32c42.webp 400w,
               /blog/top-owasp-kubernetes/image-17_hub23e97faef9b9fb774d353c9b19c9ee8_54438_57f390b622896103126294fb11dc281e.webp 760w,
               /blog/top-owasp-kubernetes/image-17_hub23e97faef9b9fb774d353c9b19c9ee8_54438_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://lib.jimmysong.io/blog/top-owasp-kubernetes/image-17_hub23e97faef9b9fb774d353c9b19c9ee8_54438_d01d1fcf9deba93bc4af03ae31b32c42.webp&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;没有默认的方法可以从集中位置检测、纠正和防止配置错误，这意味着集群可能会潜在地面临威胁。&lt;/p&gt;
&lt;h3 id=&#34;准入控制器&#34;&gt;准入控制器&lt;/h3&gt;
&lt;p&gt;一个&lt;a href=&#34;https://sysdig.com/blog/kubernetes-admission-controllers/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;准入控制器&lt;/a&gt;会在请求持久化到 Kubernetes API 服务器之前拦截它。请求必须先经过身份验证和授权，然后才能决定是否允许执行该请求。例如，您可以创建以下准入控制器配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;apiserver.config.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;AdmissionConfiguration&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;plugins&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ImagePolicyWebhook&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;configuration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;imagePolicy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kubeConfigFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;&amp;lt;path-to-kubeconfig-file&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;allowTTL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;denyTTL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;retryBackoff&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;500&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;defaultAllow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ImagePolicyWebhook 配置引用了一个 kubeconfig 格式的文件，该文件设置了与后端的连接。此准入控制器的目的是确保后端通过 TLS 进行通信。&lt;/p&gt;
&lt;p&gt;allowTTL: 50 设置了以秒为单位缓存批准的时间，同样，denyTTL: 50 设置了以秒为单位缓存拒绝的时间。准入控制器可以用于限制创建、删除、修改对象或连接到代理的请求。&lt;/p&gt;
&lt;p&gt;不幸的是，AdmissionConfiguration 资源仍然需要在每个集群中单独管理。如果我们忘记在其中一个集群上应用此文件，它将失去此策略条件。幸运的是，像 Open Policy Agent（OPA）的 &lt;a href=&#34;https://github.com/open-policy-agent/kube-mgmt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kube-Mgmt&lt;/a&gt; 工具可以帮助在 Kubernetes 中管理 OPA 实例的策略和数据，而不是单独管理准入控制器。&lt;/p&gt;
&lt;p&gt;kube-mgmt 工具会自动发现存储在 Kubernetes 中 ConfigMaps 中的策略和 JSON 数据，并将它们加载到 OPA 中。可以使用特性标志 &lt;code&gt;--enable-policy=false&lt;/code&gt; 禁用策略，或者同样可以通过单个标志禁用数据：&lt;code&gt;--enable-data=false&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;准入控制是执行需要 Kubernetes 上下文的策略的容器安全策略的重要组成部分，它为您的集群创建了最后一道防线。我们稍后会提及图像扫描，但请知道 &lt;a href=&#34;https://sysdig.com/blog/image-scanning-admission-controller/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;也可以通过 Kubernetes 准入控制器来强制执行图像扫描。&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;运行时检测&#34;&gt;运行时检测&lt;/h3&gt;
&lt;p&gt;如果它们镜像相同的配置，我们需要将安全策略配置的部署标准化到所有集群中。在根本不同的集群配置的情况下，它们可能需要设计独特的安全策略。无论哪种情况，我们如何知道在每个集群环境中部署了哪些安全策略？这就是 Falco 发挥作用的地方。&lt;/p&gt;
&lt;p&gt;假设集群没有使用 kube-mgmt，并且没有集中的方式来管理这些准入控制器。用户意外地创建了一个在 ConfigMap 清单中公开了私密凭据的 ConfigMap。不幸的是，新创建的集群中未配置任何准入控制器来阻止此行为。在单个规则中，当发生此行为时，Falco 可以向管理员发出警报：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- &lt;span class=&#34;nt&#34;&gt;rule&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Create/Modify Configmap With Private Credentials&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;desc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;    Detect creating/modifying a configmap containing a private credential&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;condition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;kevt and configmap and kmodify and contains_private_credentials&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;-&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;    K8s configmap with private credential (user=%ka.user.name verb=%ka.verb
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;    configmap=%ka.req.configmap.name namespace=%ka.target.namespace)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;priority&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;warning&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;k8s_audit&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;exceptions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;configmaps&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;fields&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;ka.target.namespace&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;ka.req.configmap.name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在上述 Falco 规则中，我们使用 Kubernetes 审计日志来显示在任何 Namespace 中可能在 ConfigMaps 中暴露的私密凭据的示例。将私密凭据定义为以下任何条件：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;condition: (ka.req.configmap.obj contains &amp;#34;aws_access_key_id&amp;#34; or
ka.req.configmap.obj contains &amp;#34;aws-access-key-id&amp;#34; or
ka.req.configmap.obj contains &amp;#34;aws_s3_access_key_id&amp;#34; or
ka.req.configmap.obj contains &amp;#34;aws-s3-access-key-id&amp;#34; or
ka.req.configmap.obj contains &amp;#34;password&amp;#34; or
ka.req.configmap.obj contains &amp;#34;passphrase&amp;#34;)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;机密管理失败&#34;&gt;机密管理失败&lt;/h2&gt;
&lt;p&gt;在 Kubernetes 中，&lt;a href=&#34;https://kubernetes.io/docs/concepts/configuration/secret/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Secret&lt;/a&gt; 是一个旨在保存敏感数据（如密码或令牌）的对象。为了避免将这类敏感数据放在您的应用程序代码中，我们可以在 Pod 规范中简单地引用 K8s 密钥。这使得工程师们可以避免直接在 Pod 清单或容器镜像中硬编码凭据和敏感数据。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/top-owasp-kubernetes/image-18_hu85f7c15111fd5e24f483d2b1cdf0d1cb_67311_31ff8be2200516f140035de71bfec686.webp 400w,
               /blog/top-owasp-kubernetes/image-18_hu85f7c15111fd5e24f483d2b1cdf0d1cb_67311_654e4cfc547b694e63e84a5e737f7ea4.webp 760w,
               /blog/top-owasp-kubernetes/image-18_hu85f7c15111fd5e24f483d2b1cdf0d1cb_67311_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://lib.jimmysong.io/blog/top-owasp-kubernetes/image-18_hu85f7c15111fd5e24f483d2b1cdf0d1cb_67311_31ff8be2200516f140035de71bfec686.webp&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;尽管存在这种设计，K8s Secrets 仍然可能会受到威胁。本地 K8s 密钥机制实质上是一个抽象层 - 数据仍然存储在前述的 etcd 数据库中，从而构建了一种完整的安全性。因此，对于企业来说，评&lt;/p&gt;
&lt;h3 id=&#34;在静态环境中加密秘密&#34;&gt;在静态环境中加密秘密&lt;/h3&gt;
&lt;p&gt;Kubernetes 使用的 etcd 数据库存在一个主要弱点，即它包含通过 Kubernetes API 可访问的所有数据，因此可能允许攻击者更长时间地查看秘密信息。这就是为什么在静态环境中加密秘密信息非常重要的原因。&lt;/p&gt;
&lt;p&gt;从版本 v.1.7 开始，&lt;a href=&#34;https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes 支持在静态环境中加密&lt;/a&gt;。此选项将在 etcd 中加密 Secret 资源，防止获取 etcd 备份访问权限的方当查看这些秘密内容。虽然此功能目前处于测试阶段并且默认情况下未启用，但在备份未加密或攻击者获得对 etcd 的读取权限时，它提供了额外的防御层。&lt;/p&gt;
&lt;p&gt;以下是创建 EncryptionConfiguration 自定义资源的示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;apiserver.config.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;EncryptionConfiguration&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;secrets&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;providers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;aescbc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Keys&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;key1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;secret&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;&amp;lt;BASE 64 ENCODED SECRET&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;identity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;解决安全配置错误&#34;&gt;解决安全配置错误&lt;/h3&gt;
&lt;p&gt;除了确保秘密在静态环境中加密之外，我们还需要防止秘密落入错误的手中。我们讨论了漏洞管理、镜像扫描和网络策略强制执行如何保护应用程序免受威胁。然而，为了防止秘密（敏感凭据）泄漏，我们应该尽可能地锁定 RBAC。&lt;/p&gt;
&lt;p&gt;将所有服务账户和用户访问权限保持在&lt;a href=&#34;https://sysdig.com/blog/cspm-least-privilege-principle/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;最小特权&lt;/a&gt;水平。不应该出现用户“共享凭据”的情况 - 本质上使用诸如“admin”或“default”之类的服务账户。每个用户都应该有明确定义的服务账户名称，例如‘Nigel’，‘William’或‘Douglas’。在这种情况下，如果服务账户执行了不应该执行的操作，我们可以轻松审计账户活动和/或审计集群中安装的第三方插件和软件的 RBAC 配置，以确保对像‘Nigel’这样的用户不必要地授予对 Kubernetes 秘密的完全提升的管理员权限。&lt;/p&gt;
&lt;p&gt;在下面的场景中，我们将创建一个用于授予对“test”命名空间中的秘密进行读取访问权限的 ClusterRole。在这种情况下，分配给此集群角色的用户将无法访问此奇异特定命名空间之外的秘密。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ClusterRole&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;secret-reader&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;apiGroups&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;secrets&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;verbs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;get&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;watch&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;list&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;确保已部署日志记录和审计&#34;&gt;确保已部署日志记录和审计&lt;/h3&gt;
&lt;p&gt;应用程序日志帮助开发人员和安全团队更好地了解应用程序内部发生了什么。对于开发人员来说，主要用例是帮助调试影响其应用程序性能的问题。在许多情况下，日志会被发送到监控解决方案（如 Grafana 或 Prometheus）中，以改进响应群集事件（例如可用性或性能问题）的时间。大多数现代应用程序，包括容器引擎，在默认情况下都支持某种日志记录机制。&lt;/p&gt;
&lt;p&gt;容器化应用程序最容易且最常采用的日志记录方法是写入标准输出（&lt;em&gt;stdout&lt;/em&gt;）和标准错误流。在以下针对&lt;a href=&#34;https://falco.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Falco&lt;/a&gt;的示例中，每个警报都会打印一行。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;stdout_output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;enabled&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了识别由事件引发的潜在安全问题，Kubernetes 管理员可以简单地将事件数据（如云审计日志或一般主机系统调用）流式传输到 Falco 威胁检测引擎中。&lt;/p&gt;
&lt;p&gt;通过将来自 Falco 安全引擎的标准输出（&lt;em&gt;stdout&lt;/em&gt;）流式传输到&lt;a href=&#34;https://www.fluentd.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Fluentd&lt;/a&gt;或&lt;a href=&#34;https://www.elastic.co/logstash/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Logstash&lt;/a&gt;，平台工程或安全运维等其他团队可以轻松从云和容器环境中捕获事件数据。组织可以将更有用的安全信号存储在&lt;a href=&#34;https://www.elastic.co/elasticsearch/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Elasticsearch&lt;/a&gt;或其他 SIEM 解决方案中，而不仅仅是在原始事件数据中。&lt;/p&gt;
&lt;p&gt;还可以创建仪表板以可视化安全事件并向警报应急响应团队发出警报：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;10:20:22.408091526: File created below /dev by untrusted program &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;nigel.douglas &lt;span class=&#34;nv&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;%proc.cmdline &lt;span class=&#34;nv&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;%fd.name&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;漏洞管理-1&#34;&gt;漏洞管理&lt;/h2&gt;
&lt;h2 id=&#34;供应链漏洞&#34;&gt;供应链漏洞&lt;/h2&gt;
&lt;p&gt;在详述由配置错误引起的四个风险之后，我们现在将详细说明与漏洞相关的风险。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/top-owasp-kubernetes/image-19_hu33929bd03a9f0a6660e91332be39a958_65738_72b610091756b76652098015a659b134.webp 400w,
               /blog/top-owasp-kubernetes/image-19_hu33929bd03a9f0a6660e91332be39a958_65738_2da07912c326c80c3ee998c0fe488ac9.webp 760w,
               /blog/top-owasp-kubernetes/image-19_hu33929bd03a9f0a6660e91332be39a958_65738_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://lib.jimmysong.io/blog/top-owasp-kubernetes/image-19_hu33929bd03a9f0a6660e91332be39a958_65738_72b610091756b76652098015a659b134.webp&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://sysdig.com/blog/software-supply-chain-security/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;供应链攻击&lt;/a&gt;正在上升，就像&lt;a href=&#34;https://www.sans.org/blog/what-you-need-to-know-about-the-solarwinds-supply-chain-attack/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;太阳风暴&lt;/a&gt;事件所示。太阳风暴软件解决方案 &amp;lsquo;Orion&amp;rsquo; 受到了俄罗斯威胁组织&lt;a href=&#34;https://attack.mitre.org/groups/G0016/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;APT29&lt;/a&gt;（通常称为 Cozy Bear）的威胁。这是一次持续很长时间的&lt;a href=&#34;https://en.wikipedia.org/wiki/Zero-day_%28computing%29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;零日&lt;/a&gt;攻击，这意味着在其环境中运行 Orion 的太阳风暴客户不知道受到了威胁。APT29 的对手可能通过这种太阳风暴漏洞访问非隔离的 Orion 实例。&lt;/p&gt;
&lt;p&gt;太阳风暴只是企业安全堆栈中受到威胁解决方案的一个例子。在 Kubernetes 的情况下，单个容器化工作负载可能依赖于数百个第三方组件和依赖项，使得在每个阶段信任来源变得极其困难。这些挑战包括但不限于图像完整性、图像组成和已知的软件漏洞。&lt;/p&gt;
&lt;p&gt;让我们更深入地了解每个方面。&lt;/p&gt;
&lt;h3 id=&#34;镜像&#34;&gt;镜像&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=wr4gpKBO3ug&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;容器镜像&lt;/a&gt;代表了封装了应用程序及其所有软件依赖项的二进制数据。容器镜像是可执行的软件包，可以独立运行（一旦实例化为运行中的容器）并对其运行时环境做出非常明确的假设。&lt;/p&gt;
&lt;p&gt;Sysdig 威胁研究团队对超过 250,000 个 Linux 镜像进行了&lt;a href=&#34;https://sysdig.com/blog/analysis-of-supply-chain-attacks-through-public-docker-images/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;分析&lt;/a&gt;，以了解在 Docker Hub 上的容器镜像中隐藏着哪些恶意载荷。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/top-owasp-kubernetes/image-20_hu13606428c051241abcad03024e228f59_73020_9486fb4a5bd46fa2666d2ee643460e19.webp 400w,
               /blog/top-owasp-kubernetes/image-20_hu13606428c051241abcad03024e228f59_73020_707c0de3fd60d0d7021184e1d88db448.webp 760w,
               /blog/top-owasp-kubernetes/image-20_hu13606428c051241abcad03024e228f59_73020_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://lib.jimmysong.io/blog/top-owasp-kubernetes/image-20_hu13606428c051241abcad03024e228f59_73020_9486fb4a5bd46fa2666d2ee643460e19.webp&#34;
               width=&#34;682&#34;
               height=&#34;524&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Sysdig TRT 根据几个类别收集了恶意镜像，如上所示。分析重点放在两个主要类别上：恶意 IP 地址或域名以及机密信息。这两者都对下载和部署在公共注册表（如 Docker Hub）中可用的镜像的人构成威胁，使其环境面临较高风险。&lt;/p&gt;
&lt;p&gt;可以在&lt;a href=&#34;https://sysdig.com/blog/image-scanning-best-practices/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;12 个镜像扫描最佳实践&lt;/a&gt;的研究中找到有关图像扫描的其他指导。无论您是刚开始在生产环境中运行容器和 Kubernetes，还是想要在当前的 DevOps 工作流程中嵌入更多安全性，都可以使用此建议。&lt;/p&gt;
&lt;h3 id=&#34;依赖关系&#34;&gt;依赖关系&lt;/h3&gt;
&lt;p&gt;当您的集群中有大量资源时，您可能会很容易失去了解它们之间所有关系的能力。即使是“小”集群也可能由于容器化和编排而拥有比预期更多的服务。在管理分布式团队跨多集群或多云环境时，跟踪所有服务、资源和依赖关系会更具挑战性。&lt;/p&gt;
&lt;p&gt;Kubernetes 默认情况下不提供可视化显示部署、服务、持久卷索赔（PVC）等之间依赖关系的机制。&lt;a href=&#34;https://github.com/benc-uk/kubeview&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;KubeView&lt;/a&gt;是一个出色的开源工具，用于查看和审计集群内部的依赖关系。它绘制了 API 对象及其相互连接的方式。数据实时从 Kubernetes API 中获取。某些对象（Pods、ReplicaSets、部署）的状态以红/绿色进行编码，以表示它们的状态和健康状况。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34;
           src=&#34;https://lib.jimmysong.io/blog/top-owasp-kubernetes/image-21.gif&#34;
           loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;注册表&#34;&gt;注册表&lt;/h3&gt;
&lt;p&gt;注册表是一个无状态、可扩展的服务器端应用程序，用于存储和分发容器镜像。&lt;/p&gt;
&lt;p&gt;实现镜像的 Kubernetes 资源（如 pod、部署等）将使用 imagePull 密钥来保存身份验证所需的凭据，以便对各种镜像注册表进行身份验证。与我们在本节讨论的许多问题一样，在标准的 Kubernetes 部署中，没有固有的方式来扫描镜像以检测漏洞。&lt;/p&gt;
&lt;p&gt;但即使在专用的私有镜像注册表上，您也应该扫描镜像以检测漏洞。但 Kubernetes 默认情况下不提供此功能。您应该在用于构建它们的 CI/CD 流水线中扫描镜像，作为一种“向左移动”的安全方法的一部分。有关更多详细信息，请参阅研究[“向左移动：开发者驱动的安全”](&lt;a href=&#34;https://sysdig.com/blog/strengthen-cybersecurity-with-shift-left-and-shield-right-practices/#:~:text=your&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://sysdig.com/blog/strengthen-cybersecurity-with-shift-left-and-shield-right-practices/#:~:text=your&lt;/a&gt; cybersecurity strategy.-,Shift left%3A Developer-driven security,-An exploitable vulnerability)。&lt;/p&gt;
&lt;p&gt;Sysdig 提供了有关如何在常见的 CI/CD 服务中执行此操作的详细技术指导和示例，为防止流水线中的漏洞提供了另一层安全：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://sysdig.com/blog/image-scanning-github-actions/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sysdig.com/blog/gitlab-ci-cd-image-scanning/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gitlab pipelines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sysdig.com/blog/container-image-scanning-for-azure-pipelines-with-sysdig/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Azure pipelines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sysdig.com/blog/docker-scanning-jenkins/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Jenkins&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们可以添加的另一层安全措施是对发送到我们的注册表或仓库中的镜像进行&lt;a href=&#34;https://sysdig.com/blog/secure-kubernetes-deployment-signature-verification/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;签名和验证&lt;/a&gt;的过程。这通过确保真实性和完整性来减少供应链攻击。它保护了我们的 Kubernetes 开发和部署，并提供了更好的控制，以便随时运行我们正在运行的容器的清单。&lt;/p&gt;
&lt;h2 id=&#34;破损的认证机制&#34;&gt;破损的认证机制&lt;/h2&gt;
&lt;p&gt;安全地访问您的 Kubernetes 集群应该是一项优先任务，而在 Kubernetes 中进行适当的身份验证对于避免在初始攻击阶段面临大多数威胁至关重要。K8s 管理员可以直接通过 K8s API 或通过 K8s 仪表板与集群交互。从技术上讲，K8s 仪表板反过来会与这些 API 进行通信，例如 API 服务器或 Kubelet API。普遍强制执行身份验证是一项关键的安全最佳实践。&lt;/p&gt;
&lt;p&gt;正如&lt;a href=&#34;https://sysdig.com/blog/detecting-cryptomining-attacks-in-the-wild/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2019 年特斯拉加密挖矿事件&lt;/a&gt;所示，攻击者渗透了未受密码保护的 Kubernetes 仪表板。由于 Kubernetes 是高度可配置的，许多组件最终未被启用，或者使用基本身份验证以便在许多不同的环境中工作。这在集群和云安全姿态方面存在挑战。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/top-owasp-kubernetes/image-22_hua8a8250235ae337fd595f12a4f8bcee7_80679_7b3cf36aa177778b489f30055a8b046b.webp 400w,
               /blog/top-owasp-kubernetes/image-22_hua8a8250235ae337fd595f12a4f8bcee7_80679_9b3faebe0049a4aba077738b53e7724e.webp 760w,
               /blog/top-owasp-kubernetes/image-22_hua8a8250235ae337fd595f12a4f8bcee7_80679_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://lib.jimmysong.io/blog/top-owasp-kubernetes/image-22_hua8a8250235ae337fd595f12a4f8bcee7_80679_7b3cf36aa177778b489f30055a8b046b.webp&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;如果一个人想要对我们的集群进行身份验证，主要关注的区域将是凭证管理。最可能的情况是它们会因偶然错误而暴露，例如在 &lt;em&gt;.kubeconfig&lt;/em&gt; 等配置文件中泄露。&lt;/p&gt;
&lt;p&gt;在您的 Kubernetes 集群内部，服务和机器之间的&lt;a href=&#34;https://kubernetes.io/docs/reference/access-authn-authz/authentication&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;身份验证&lt;/a&gt;基于服务账户。避免使用证书进行最终用户身份验证或集群外部的服务账户令牌是很重要的，因为这会增加风险。因此，建议定期扫描可能因错误而暴露的密钥或证书。&lt;/p&gt;
&lt;p&gt;OWASP 建议，无论选择哪种身份验证机制，&lt;strong&gt;我们都应该强制人们提供第二种身份验证方法&lt;/strong&gt;。例如，如果您使用云 IAM 功能而未启用 2FA，我们应该能够在运行时在您的云或 Kubernetes 环境中检测它，以加快检测和响应速度。为此，我们可以使用&lt;a href=&#34;https://falco.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Falco&lt;/a&gt;，这是一个开源的威胁检测引擎，它根据一组 YAML 格式的规则在运行时触发警报。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- &lt;span class=&#34;nt&#34;&gt;rule&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Console Login Without Multi Factor Authentication&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;desc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Detects a console login without using MFA.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;condition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;-&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;    aws.eventName=&amp;#34;ConsoleLogin&amp;#34; and not aws.errorCode exists and
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;    jevt.value[/userIdentity/type]!=&amp;#34;AssumedRole&amp;#34; and
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;    jevt.value[/responseElements/ConsoleLogin]=&amp;#34;Success&amp;#34; and
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;    jevt.value[/additionalEventData/MFAUsed]=&amp;#34;No&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;-&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;    Detected a console login without MFA (requesting user=%aws.user, requesting
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;    IP=%aws.sourceIP, AWS region=%aws.region)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;priority&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;critical&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;aws_cloudtrail&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;exceptions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;过时和易受攻击的-kubernetes-组件&#34;&gt;过时和易受攻击的 Kubernetes 组件&lt;/h2&gt;
&lt;p&gt;在 Kubernetes 中进行有效的漏洞管理是困难的。然而，有一组&lt;a href=&#34;https://sysdig.com/blog/vulnerability-assessment/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;最佳实践要遵循&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/top-owasp-kubernetes/image-23_hu353f67ac11ddff92ec7c7e8ba609f711_62866_989ea208fde2bf0841953ca504aad600.webp 400w,
               /blog/top-owasp-kubernetes/image-23_hu353f67ac11ddff92ec7c7e8ba609f711_62866_3f0c97ba5df65e7c113ed6be5988fc42.webp 760w,
               /blog/top-owasp-kubernetes/image-23_hu353f67ac11ddff92ec7c7e8ba609f711_62866_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://lib.jimmysong.io/blog/top-owasp-kubernetes/image-23_hu353f67ac11ddff92ec7c7e8ba609f711_62866_989ea208fde2bf0841953ca504aad600.webp&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Kubernetes 管理员必须遵循最新的 CVE 数据库，监视漏洞披露，并在适用的情况下应用相关的补丁。否则，Kubernetes 集群可能会受到这些已知漏洞的影响，使得攻击者更容易执行技术以完全控制您的基础设施，并有可能向您部署集群的云租户进行攻击。&lt;/p&gt;
&lt;p&gt;Kubernetes 中开源组件的大量存在，以及项目发布的节奏，使得 CVE 管理特别困难。在版本&lt;a href=&#34;https://sysdig.com/blog/kubernetes-1-25-whats-new/#3203&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;1.25 的 Kubernetes&lt;/a&gt;中，推出了一个新的安全 Feed 到 Alpha 阶段，其中对影响 Kubernetes 组件的 CVE 列表进行了分组和更新，详见&lt;a href=&#34;https://kubernetes.io/docs/reference/issues-security/official-cve-feed/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;（官方 CVE Feed）&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;以下是一些著名的漏洞：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://sysdig.com/blog/cve-2021-25735-kubernetes-admission-bypass/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CVE-2021-25735&lt;/a&gt; – Kubernetes 验证入场网络钩子绕过&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sysdig.com/blog/detect-cve-2020-8554-using-falco/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CVE-2020-8554&lt;/a&gt; – Kubernetes 中未修补的中间人攻击（MITM）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sysdig.com/blog/how-to-detect-kubernetes-vulnerability-cve-2019-11246-using-falco/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CVE-2019-11246&lt;/a&gt; – 影响 kubectl 工具的高严重性漏洞。如果利用，可能导致目录遍历。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sysdig.com/blog/privilege-escalation-kubernetes-dashboard/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CVE-2018-18264&lt;/a&gt; – 通过 Kubernetes 仪表板进行特权升级&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要检测这些易受攻击的组件，您应该使用检查或扫描 Kubernetes 集群的工具，例如 &lt;a href=&#34;https://github.com/kubescape/kubescape&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;kubescape&lt;/a&gt; 或 &lt;a href=&#34;https://github.com/openclarity/kubeclarity&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;kubeclarity&lt;/a&gt; – 或者考虑使用商业平台，例如 &lt;a href=&#34;https://sysdig.com/products/secure/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Sysdig Secure&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;今天，发布的漏洞直接针对 Linux Kernel，影响运行在我们集群上的容器，而不是 Kubernetes 组件本身。即便如此，我们必须密切关注每一个新发现的漏洞，并制定尽快减轻风险的计划。&lt;/p&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;
&lt;p&gt;OWASP Kubernetes 前 10 名旨在帮助安全从业者、系统管理员和软件开发人员在 Kubernetes 生态系统周围优先考虑风险。前 10 名是一个根据从不同成熟度和复杂性的组织收集的数据支持的常见风险的优先级排序列表。&lt;/p&gt;
&lt;p&gt;我们涵盖了许多可以帮助解决 OWASP Kubernetes 前 10 名中概述的差距的开源项目。然而，部署和操作这些零散的工具需要大量的人力和广泛的技能集来进行有效的管理。虽然没有单一的解决方案可以解决上述所有功能，但 Sysdig Secure 提供了一种统一的平台方法，用于检测和防止在构建、交付和运行时出现的威胁。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;检测镜像、容器注册表或 Kubernetes 依赖项中已知的漏洞。&lt;/li&gt;
&lt;li&gt;在 Sysdig Secure 平台中集成了 Kubernetes 入场控制器，用户可以接受或阻止容器工作负载中的易受攻击的部分进入运行时。&lt;/li&gt;
&lt;li&gt;通过自动生成网络策略来自动修复与网络相关的威胁。&lt;/li&gt;
&lt;li&gt;最后，通过一个托管的 Prometheus 实例提供了对所有集群活动的深度可见性。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>什么是 CNAPP（容器化应用保护平台）?</title>
      <link>https://lib.jimmysong.io/blog/what-is-cnapp/</link>
      <pubDate>Thu, 06 Jul 2023 11:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/blog/what-is-cnapp/</guid>
      <description>&lt;p&gt;译者注：本文译自 Sysdig 公司的网站，Sysdig 是一家提供容器安全、监控和故障排除解决方案的公司，其产品帮助用户在容器化环境中实现可观测性和安全性。这篇文章介绍了 CNAPP，CNAPP 是一个端到端的云安全解决方案，可提供实时威胁检测、简化符合性、改善 DevOps 协作、操作效率等多种好处。它通过整合安全控件、提供集中式管理和运行时洞察力等方式，增强组织的整体安全姿态。&lt;/p&gt;
&lt;h2 id=&#34;总览&#34;&gt;总览&lt;/h2&gt;
&lt;p&gt;CNAPP（容器化应用程序保护平台）是一种综合性的、全方位的安全策略，贯穿整个应用程序的生命周期（SDLC）。随着云计算的快速普及和现代应用程序的日益复杂，传统的安全措施往往无法有效地保护免受复杂的网络威胁。&lt;/p&gt;
&lt;p&gt;CNAPP 结合了“向左倾斜”和“向右防御”安全概念，提供了全面和强大的安全策略，确保了应用程序在整个生命周期中的保护。&lt;/p&gt;
&lt;p&gt;通过将安全向左移动，组织可以利用从应用程序开发过程的最开始阶段就开始的安全控制、漏洞扫描和合规性检查。&lt;/p&gt;
&lt;p&gt;“向右防御”概念侧重于在应用程序运行时阶段实时检测和响应安全事件。尽管在开发过程中尽最大努力保护应用程序，但漏洞可能仍然存在，或者新的威胁可能出现，因此 CNAPP 必须采用并简化这两个概念。&lt;/p&gt;
&lt;h2 id=&#34;cnapp-解决方案的关键特征是什么&#34;&gt;CNAPP 解决方案的关键特征是什么？&lt;/h2&gt;
&lt;p&gt;CNAPP 提供的安全功能涵盖软件供应链的许多阶段，确保了在开发和运营生命周期中的全面保护。Gartner 将这些功能分为四个主要类别。&lt;/p&gt;
&lt;h3 id=&#34;构件扫描&#34;&gt;构件扫描&lt;/h3&gt;
&lt;p&gt;构件扫描是支持向左安全方法的关键 CNAPP 组件之一。向左移动风险可见性和扫描需要与开发组织使用的开发管道工具集成。&lt;/p&gt;
&lt;p&gt;构件扫描有两个主要领域，无论构件是源代码还是已编译的二进制文件。它们是软件组成分析（SCA）和应用程序安全测试。&lt;/p&gt;
&lt;p&gt;SCA 评估构件以查找它所包含的任何开放源代码库。然后，它标记所使用的库的版本和许可证。有了这些信息，它可以列出任何常见漏洞和曝光（CVE）及其评级，并将其作为报告或元数据附加到存储库中该构件的附加信息。&lt;/p&gt;
&lt;p&gt;应用程序安全测试分为三个主要分组：静态（SAST）、动态（DAST）和交互式（IAST）。SAST 查看源代码或已构建的构件，寻找代码中可以发现的最佳实践和常见错误，例如未经检查的缓冲区。DAST 将构件视为黑盒子，运行时对其进行探测。它像攻击者一样戳它，寻找诸如输入验证或未安全页面之类的内容。IAST 在应用程序运行时内部工作，但仅分析应用程序代码的执行方式。它最常在 QA 团队运行功能测试的环境中看到。&lt;/p&gt;
&lt;h3 id=&#34;云配置&#34;&gt;云配置&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;云安全姿态管理（CSPM）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CSPM 是持续监控、检测和纠正云安全配置不正确以确保云基础架构正确配置和锁定的过程。它验证正在运行的内容，并对任何与其预期的不匹配的内容发出警报。例如，开放的端口或拥有比所需权限更多访问权限的安全角色。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;云基础架构权限管理（CIEM）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CIEM 是管理单个或多云环境中的身份标识的访问权、权限或特权的安全过程。此过程有助于识别和避免由权限高于或广泛于应有权限而产生的风险。&lt;/p&gt;
&lt;p&gt;CIEM 安全涵盖的问题示例包括未吊销长期未使用的凭据或向 EC2 实例授予不需要的通配符权限。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基础架构即代码（IaC）扫描&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;云原生生态系统的一个重要吸引力是自动化应用程序运行所需的一切。IaC 可以是 CloudFormation 模板、Kubernetes 清单、Docker 文件或 Terraform 计划等。IaC 扫描的想法是在它们进入生产环境之前发现明显的安全漏洞并防止它们发生问题。&lt;/p&gt;
&lt;p&gt;IaC 扫描解决方案应包括以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;防止漂移：在部署之前扫描 IaC 文件。将生产中的误配置映射回源。&lt;/li&gt;
&lt;li&gt;优先风险：根据应用程序上下文、要求和依赖关系优先处理安全修复。&lt;/li&gt;
&lt;li&gt;在源处修正：接收源处的修复建议，自动生成拉取请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;运行时保护&#34;&gt;运行时保护&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;云工作负载保护（CWPP）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这是 CNAPP 安全套件的运行时执行部分。它支持实现零信任模型，其中没有任何内容自动信任。&lt;/p&gt;
&lt;p&gt;它将执行以下操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运行时检测：在容器运行时检测和防止可疑行为。自动化容器威胁响应。&lt;/li&gt;
&lt;li&gt;系统硬化：通过使用限制性配置减少其漏洞表面，保护在主机上运行的 Linux 主机或基于 VM 的工作负载。&lt;/li&gt;
&lt;li&gt;漏洞管理：在容器映像中（CI/CD 流水线）和注册表中检测容器映像中的漏洞。&lt;/li&gt;
&lt;li&gt;网络安全：强制执行 Kubernetes 原生网络策略，包括分段，并向下提供网络流量可视化到容器级别。&lt;/li&gt;
&lt;li&gt;合规性：验证容器合规性并确保在容器内进行文件完整性监视。&lt;/li&gt;
&lt;li&gt;事件响应：为 Kubernetes 和其管理的容器提供取证分析和事件响应，即使容器已消失。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;近期 Gartner 强调了运行时安全的重要性，并指出“支持提供多种运行时可见性技术的 CNAPP 供应商，包括传统代理、&lt;a href=&#34;https://sysdig.com/blog/sysdig-and-falco-now-powered-by-ebpf/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;扩展的伯克利数据包过滤器（eBPF）支持&lt;/a&gt;、快照、特权容器和 Kubernetes（K8s）集成，以提供最大的部署灵活性。”&lt;/p&gt;
&lt;h3 id=&#34;云检测和响应cdr&#34;&gt;云检测和响应（CDR）&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://sysdig.com/learn-cloud-native/detection-and-response/cdr-an-overview/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云检测和响应（CDR）&lt;/a&gt;在 CNAPP 中发挥关键作用，为云环境专门设计高级威胁检测、事件响应和持续监控能力。CNAPP 中的 CDR 利用云本地安全控制（如云工作负载保护平台（CWPP）和云安全姿态管理（CSPM）工具）实时获取云资产、配置和活动的可见性。通过持续监控和分析云日志、网络流量和用户行为，CDR 有助于检测威胁指标（IOCs）、异常和可疑活动，这些活动可能表明安全事件或漏洞。&lt;/p&gt;
&lt;p&gt;一旦检测到潜在的威胁或漏洞，CDR 通过提供自动化或指导响应操作来实现快速的事件响应。它促进了安全事件的隔离、调查和纠正，帮助组织最小化潜在影响并减轻进一步的风险。&lt;/p&gt;
&lt;p&gt;将 CDR 集成到 CNAPP 中创建了一个综合性的安全解决方案，结合了主动的云安全控制、漏洞管理、安全编码实践和持续监控和响应能力。它确保云原生应用在其整个生命周期中都受到保护，从开发到部署等，预防新兴威胁，并使组织能够在其云环境中保持强大的安全姿态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;图 1：Gartner 的 CNAPP 详细视图&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;为什么-cnapp-必须具有运行时洞见&#34;&gt;为什么 CNAPP 必须具有运行时洞见？&lt;/h2&gt;
&lt;p&gt;CNAPP 正在成为一个接受和分析多个数据源的平台。随着采用基于容器/Kubernetes 的微服务，数据量正在爆炸式增长。这可能很快导致大量高保真和低保真信号，最终引发一个问题：你如何集中注意力处理云本地基础架构中最关键的风险？&lt;/p&gt;
&lt;p&gt;这就是拥有关于当前运行情况的深入了解如何帮助您缩小需要紧急关注的事项列表的地方。简单地说，了解当前正在运行的情况（即运行时见解）是安全和 DevOps 团队采取行动处理最关键的风险所需的必要上下文。最终，这个上下文可以在开发生命周期的早期反馈回来，使 CNAPP 的“向左位移”使用案例更好地具有可操作的优先级。&lt;/p&gt;
&lt;h2 id=&#34;运行时见解在日常工作中的实际应用示例&#34;&gt;运行时见解在日常工作中的实际应用示例&lt;/h2&gt;
&lt;p&gt;以下是 CNAPP 将有助于实现有价值和一致的策略执行的一些示例：&lt;/p&gt;
&lt;h3 id=&#34;示例-1正在使用的软件包&#34;&gt;示例 1：正在使用的软件包&lt;/h3&gt;
&lt;p&gt;构建团队已经在构建和测试管道中实施了安全扫描，这非常棒。假设一个 SCA 工具正在针对存储艺术品的注册表运行，并使用 CVE 数据库中的已知漏洞标记它们。如果已经在生产中使用的某个东西被标记为新的关键警报会发生什么？如果它足够严重，比如 Log4Shell 漏洞，那么受影响的应用程序需要立即关闭或以其他方式减轻潜在攻击。强大的 CNAPP 利用运行时见解来确定是否已经在使用易受攻击的库，然后根据情况优先考虑风险和减轻措施。此外，您应该能够自动响应这种类型的事件。&lt;/p&gt;
&lt;h3 id=&#34;示例-2正在使用的权限&#34;&gt;示例 2：正在使用的权限&lt;/h3&gt;
&lt;p&gt;一个组织利用 Amazon Web Services（AWS）作为云基础架构。为特定项目创建了一个名为“CreateS3BucketAdmin”的自定义权限，但不再使用。此权限授予完全管理访问权限，以创建和管理 AWS 帐户中的 S3 存储桶。&lt;/p&gt;
&lt;p&gt;这种情况带来了重大的安全风险。如果被攻击，攻击者可以利用这个未使用的权限创建和操作 S3 存储桶，可能导致数据暴露、数据丢失或未经授权访问敏感信息。&lt;/p&gt;
&lt;p&gt;CNAPP 可以在识别和减轻此类安全风险方面发挥关键作用。它可以根据您的用户行为和其通常使用的权限进行自动定义策略。这些信息可以用于生成理想的基线，最好是编码化的，并且可以强制执行。这个“正在使用”的权限策略作为过滤器工作，并自动生成建议，可以使这个过程更加高效。&lt;/p&gt;
&lt;h2 id=&#34;cnapp-如何工作&#34;&gt;CNAPP 如何工作？&lt;/h2&gt;
&lt;p&gt;CNAPP 通过将运行时风险可见性、云风险可见性和开发工件风险可见性的需求结合在一个坚实的平台中，实现了云安全的整合。&lt;/p&gt;
&lt;p&gt;为了具有这种集成的能力，CNAPP 通常遵循两种不同的工具仪表板：&lt;a href=&#34;https://sysdig.com/blog/cloud-kill-security-agents/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;基于代理和无代理&lt;/a&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基于代理&lt;/strong&gt; 保持接近工作负载。它需要在受检测机器上与工作负载一起执行的代理（通常称为传感器或探针）。在同一主机上可以实时查看运行时情况，并且可以访问系统级上下文信息，这是其他情况下不可用的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;无代理&lt;/strong&gt; 是由云提供商提供的 API 启用的，可以在不需要代理运行的工作负载中收集相关上下文。它通常利用快照的能力，在时间点上的副本上推迟安全扫描，使原始工作负载保持不变。虽然这种方法缺乏代理提供的深入运行时见解，但它为处理不需要依赖实时数据的问题提供了无摩擦的解决方案，例如构建资产清单或在审计日志中识别已知的漏洞和异常行为。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;强大的 CNAPP 解决方案需要采用这两种工具仪表板方法，以达到最大的有效性。使用代理获得运行时实时可见性和更好的系统级上下文信息，使用无代理在审计日志中识别已知的漏洞和异常行为。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;cnapp-解决方案能否与我的现有安全工具和系统集成&#34;&gt;CNAPP 解决方案能否与我的现有安全工具和系统集成？&lt;/h2&gt;
&lt;p&gt;CNAPP 需要集成到开发组织使用的运行时云环境和开发流程工具中。&lt;/p&gt;
&lt;h3 id=&#34;集成到cicd管道中&#34;&gt;集成到CI/CD管道中&lt;/h3&gt;
&lt;p&gt;CNAPP必须集成到您的CI/CD开发工具集中，以限制构建时的漏洞和配置错误暴露的风险。此集成对于工件扫描（无论是源代码还是编译二进制文件）都是至关重要的，并且它扩展到涵盖工件审计/日志记录遥测。&lt;/p&gt;
&lt;h3 id=&#34;与云提供商集成&#34;&gt;与云提供商集成&lt;/h3&gt;
&lt;p&gt;随着无代理工具的发展，CNAPP 供应商增加了与云提供商的集成水平，以利用提供的 API 来收集相关上下文，而不需要代理运行在工作负载的旁边。&lt;/p&gt;
&lt;p&gt;大多数现有的 CNAPP 都支持三个主要的云提供商：Amazon Web Services（AWS）、Microsoft Azure 和 Google Cloud Platform（GCP）。此外，一些供应商将其集成扩展到其他提供商，如 Oracle Cloud、IBM Cloud、Alibaba Cloud、VMware Tanzu 等。因此，请确保选择支持您基础架构的解决方案。&lt;/p&gt;
&lt;h3 id=&#34;与基础架构即代码iac工具集成&#34;&gt;与基础架构即代码（IaC）工具集成&lt;/h3&gt;
&lt;p&gt;通过这种集成，CNAPP 可以在部署之前扫描 IaC 文件并检测运行时漂移。一个例子是 Git 集成，用于根据预定义策略扫描传入的 Pull Request（PR），以查找安全违规行为。扫描评估的结果在 PR 本身中呈现。如果通过，用户可以合并；如果失败，用户无法合并。在 PR 中提供的信息也针对问题区域进行了定位，以帮助用户进行纠正。&lt;/p&gt;
&lt;h3 id=&#34;与关键管理系统kms的集成&#34;&gt;与关键管理系统（KMS）的集成&lt;/h3&gt;
&lt;p&gt;这是允许对加密或签名资源进行&lt;a href=&#34;https://blog.sigstore.dev/how-to-verify-container-images-with-kyverno-using-kms-cosign-and-workload-identity-1e07d2b85061/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;扫描&lt;/a&gt;的必要条件。&lt;/p&gt;
&lt;h2 id=&#34;案例研究一家领先的机器人公司如何通过-cnapp-实现成本节约减少警报和工具整合&#34;&gt;案例研究：一家领先的机器人公司如何通过 CNAPP 实现成本节约、减少警报和工具整合&lt;/h2&gt;
&lt;p&gt;最近，一家领先的机器人公司采用了 CNAPP 来增强其云安全基础设施。通过实施 CNAPP，公司实现了显著的收益，包括安全工具的整合、警报的减少和成本节约。&lt;/p&gt;
&lt;p&gt;在采用 CNAPP 之前，该公司使用了 6 种不同的安全工具，每种工具在其云环境中具有特定的安全功能。这种分散的方法导致了操作复杂性、重叠的功能和增加的维护成本。随着 CNAPP 的引入，该公司能够将所有安全工具整合到一个平台上，简化其安全操作并减少管理开销。&lt;/p&gt;
&lt;p&gt;CNAPP 的实施也在优化警报管理流程方面发挥了关键作用。通过利用该平台的先进&lt;a href=&#34;https://sysdig.com/learn-cloud-native/detection-and-response/what-is-threat-detection-and-response-tdr/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;威胁检测和响应能力&lt;/a&gt;以及运行时洞察力来关注正在使用的软件包并优先考虑风险，该公司的安全警报数量显著减少了 30%。通过智能和上下文驱动的警报优先级排序，实现了这一改进，使安全团队能够专注于最重要的威胁，同时最小化噪音和误报。因此，团队的效率和响应能力显着提高，使他们能够迅速处理真正的安全事件。&lt;/p&gt;
&lt;p&gt;此外，通过 CNAPP 合并安全工具带来了实质性的成本节约。通过消除多个安全工具的许可费用、维护成本和操作开销，该组织实现了总体安全支出的 20% 的降低。CNAPP 提供的简化管理和流程优化不仅降低了成本，还释放了宝贵的资源，使公司能够将它们用于其他战略性举措。&lt;/p&gt;
&lt;p&gt;总的来说，采用 CNAPP 导致了整合的安全基础设施、简化的警报管理和显著的成本节约。这种全面统一的云安全方法促进了操作效率的提高、改善了事件响应能力，并增强了组织的安全姿态。&lt;/p&gt;
&lt;h2 id=&#34;cnapp-工具能为我的组织提供什么好处&#34;&gt;CNAPP 工具能为我的组织提供什么好处？&lt;/h2&gt;
&lt;h3 id=&#34;1-增强云安全&#34;&gt;1. 增强云安全&lt;/h3&gt;
&lt;p&gt;CNAPP 是一个端到端的解决方案，可在任何工作负载、云或服务上提供广度，使组织能够在其云基础设施中保持一致的威胁检测和可见性。它还提供了深度，通过结合各种技术，如机器学习（ML）、规则、威胁供稿等，使其能够有效地检测和应对威胁。CNAPP 还通过提供攻击路径分析等预防性控制来减少云原生环境中的攻击面。&lt;/p&gt;
&lt;h3 id=&#34;2-实时威胁检测&#34;&gt;2. 实时威胁检测&lt;/h3&gt;
&lt;p&gt;CNAPP 提供实时的先进威胁检测能力。它利用云原生安全控件和运行时可见性技术，及时识别安全事件、异常和威胁迹象（IOCs）。CNAPP 提供端到端的检测，使组织能够迅速响应新兴威胁并最小化安全漏洞的影响。&lt;/p&gt;
&lt;h3 id=&#34;3-简化符合性&#34;&gt;3. 简化符合性&lt;/h3&gt;
&lt;p&gt;CNAPP 通过提供符合行业标准和最佳实践的安全控件和机制，帮助组织满足监管和合规要求。它有助于识别和消除安全漏洞，确保应用程序符合 PCI DSS、HIPAA、GDPR 等合规框架。&lt;/p&gt;
&lt;h3 id=&#34;4-改善-devops-协作&#34;&gt;4. 改善 DevOps 协作&lt;/h3&gt;
&lt;p&gt;CNAPP 促进了开发和安全团队之间的协作和对齐，并在安全和数字创新之间找到了平衡。它与&lt;a href=&#34;https://sysdig.com/blog/essential-workflows-for-secure-devops/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DevOps 工具和流程&lt;/a&gt;集成，使安全能够无缝地纳入持续集成和持续部署（CI/CD）流程中。&lt;/p&gt;
&lt;h3 id=&#34;5-操作效率&#34;&gt;5. 操作效率&lt;/h3&gt;
&lt;p&gt;通过整合安全控件并提供集中式管理，CNAPP 简化了安全操作。它为检测、响应和管理安全事件提供了一个单一的视图。&lt;/p&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;
&lt;p&gt;使用 CNAPP，组织可以整合云原生安全工具，简化操作，优先考虑风险，增强其整体安全姿态。&lt;/p&gt;
&lt;p&gt;通过利用 CNAPP 的运行时洞察力，企业可以：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于组织使用的内容&lt;strong&gt;优先考虑风险&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;实现持续和&lt;strong&gt;实时检测&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;使用&lt;strong&gt;攻击路径分析&lt;/strong&gt;增强数据可视化，突出环境配置中存在的差距。&lt;/li&gt;
&lt;li&gt;在云环境中&lt;strong&gt;实现端到端的检测&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>基于角色的访问控制：五种常见的授权模型</title>
      <link>https://lib.jimmysong.io/blog/role-based-access-control-five-common-authorization-patterns/</link>
      <pubDate>Fri, 24 Feb 2023 15:20:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/blog/role-based-access-control-five-common-authorization-patterns/</guid>
      <description>&lt;p&gt;我们从最简单的基于 IDP 的 RBAC 开始，最终将基于组的 RBAC 与细粒度的权限和细粒度的资源相结合。&lt;/p&gt;
&lt;p&gt;授权很复杂，因为每个应用程序都必须发明自己的授权模型。但是，有一些陈旧的路径可以作为大多数应用程序的良好起点。这篇文章将描述这些模式以及 &lt;a href=&#34;https://topaz.sh/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Topaz&lt;/a&gt; 开源项目或 &lt;a href=&#34;https://www.aserto.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Aserto&lt;/a&gt; 授权服务等授权平台如何帮助你实施他们。&lt;/p&gt;
&lt;h2 id=&#34;角色作为用户属性&#34;&gt;角色作为用户属性&lt;/h2&gt;
&lt;p&gt;最简单的授权模式将一组角色建模为用户的属性。这些角色可以在身份提供者 (IDP) 中配置，并且通常作为范围嵌入到 IDP 生成的访问令牌中。&lt;/p&gt;
&lt;p&gt;一些应用程序完全基于嵌入在访问令牌中的角色（或离散权限）进行授权。但这有一些&lt;a href=&#34;https://www.aserto.com/blog/oauth2-scopes-are-not-permissions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;缺点&lt;/a&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;角色/权限/范围爆炸&lt;/strong&gt;：角色/权限越多，访问令牌中需要嵌入的范围就越多，从而导致大小问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IDP 和应用程序之间的耦合&lt;/strong&gt;：每当向应用程序添加新权限时，也必须修改访问令牌中生成其他范围的代码。这通常由有权访问 IDP 的安全/身份和访问团队完成，并且它引入了工作流程的复杂性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一旦发布&lt;/strong&gt;，访问令牌就很难失效。只要访问令牌有效，经过身份验证的用户就拥有权限，即使他们的角色在令牌颁发后发生了变化。这反过来又会导致安全漏洞。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在这种情况下，使用 Topaz 等授权服务具有以下优势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加了一个明确的授权系统，让应用程序实时检查用户是否仍然拥有该角色或权限。&lt;/li&gt;
&lt;li&gt;授权代码可以从应用程序中提取并表示为策略。这使得在整个应用程序中更容易推理授权逻辑。&lt;/li&gt;
&lt;li&gt;每个 API 可以有不同的授权策略，其中包含授权操作的逻辑。一个示例策略可以是“如果用户具有‘管理员’或‘编辑者’角色，或者‘创建’权限，则允许该操作。”&lt;/li&gt;
&lt;li&gt;任何角色更改（或用户全局“禁用”标志的值）都可以近乎实时地传输到授权系统。这解决了与盲目信任访问令牌中嵌入的范围相关的安全问题。&lt;/li&gt;
&lt;li&gt;角色到权限的映射可以在授权系统中完成。因此，IDP 只需要知道用户到角色的映射，而不需要知道权限。这有助于将应用程序与 IDP 分离。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;基于组的-rbac&#34;&gt;基于组的 RBAC&lt;/h2&gt;
&lt;p&gt;下一个模式依赖组（和组层次结构）作为组织用户。&lt;/p&gt;
&lt;p&gt;通常通过使用户成为组的成员来分配这些角色。组成员身份意味着用户已被授予角色。组可以组织成层次结构。例如，“auditor”组可以包括“internal-auditors”和“external-auditors”。这两个组又可以包括特定用户。&lt;/p&gt;
&lt;p&gt;这本质上是 LDAP 和 Active Directory 所围绕的模型。因此，大多数授权系统都支持将组作为其模型的核心部分。&lt;/p&gt;
&lt;p&gt;例如，Topaz 和 Aserto 有一个内置的“组”对象类型。组对象类型具有“成员”关系类型，其目标可以是任何主体（用户或组）。此模型允许一个组包含在其他组中。检查组成员资格是传递性的：当使用用户和组实例调用 Topaz 的 check_relation 内置函数时，它将遍历组层次结构并直接或传递地返回 true，如果用户是组的成员。&lt;/p&gt;
&lt;p&gt;以下策略（用 Open Policy Agent 的 &lt;a href=&#34;https://www.openpolicyagent.org/docs/latest/policy-language/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Rego&lt;/a&gt; 语言编写）使用 Topaz 的内置 check_relation 来评估用户是否是一个组并允许行动：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;allowed&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;ds&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;check_relation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;subject&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;relation&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;object_type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;group&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;member&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;object&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;s2&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;group&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;s2&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;resource&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;由于可以通过多个角色授予权限，因此策略可能需要检查每个相应组的组成员资格。例如，如果用户是任何 Viewers、Editors 或 Administrators 组的成员，则可以授予 Can View 权限。这将通过以下策略实现：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;groups&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;viewer&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;editor&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;admin&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;allowed&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;ds&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;check_relation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;subject&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;relation&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;object_type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;group&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;member&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;object&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;group&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;groups&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但这可能会变得复杂，并且可以说它只是将复杂性从应用程序逻辑转移到了策略上。下一个模式旨在解决这个问题。&lt;/p&gt;
&lt;h2 id=&#34;具有细粒度权限的基于组的-rbac&#34;&gt;具有细粒度权限的基于组的 RBAC&lt;/h2&gt;
&lt;p&gt;RBAC 代表基于角色的访问控制。权限可以包含在多个角色中。在上面的示例中，可以查看权限可能包含在查看者、编辑者和管理员角色中。更具可扩展性的授权系统将定义一组离散的权限并将这些权限分配给角色。&lt;/p&gt;
&lt;p&gt;授权系统通常将权限定义为一级的概念。策略可以检查用户是否具有权限，而不是检查用户是否是组的成员。&lt;/p&gt;
&lt;p&gt;下面的 Aserto 清单文件就是这样做的。它定义了一个“系统”对象类型，其下有两种关系类型：“editor”和“viewer”。“editor”关系类型包括“viewer”关系类型的所有权限，加上 can-edit 权限。查看者关系类型包含一种权限：can-view。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;system&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;editor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;union&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;viewer&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;permissions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;can-edit&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;viewer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;permissions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;can-view&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果用户（或组）具有“editor”角色，Topaz 内置的 check_permission 会在评估用户是否具有 can-view 权限时返回 true。这是因为“editor”角色可传递地包含“viewer 角色”，因此具有可以查看的权限。&lt;/p&gt;
&lt;h2 id=&#34;专有域对象的细粒度的授权&#34;&gt;专有域对象的细粒度的授权&lt;/h2&gt;
&lt;p&gt;到目前为止，我们一直在处理“全局”角色。许多应用程序希望将权限授予它们管理的一组对象。例如，Google Drive 等文件共享应用程序将“文件夹”和“文件”定义为对象类型。文件夹和文件都可以有一个父文件夹。这些对象中的每一个都有一组关系（“所有者”、“编辑者”、“评论者”和“查看者”），并且“所有者”可以将这些角色授予用户和组。因此，可以将这些权限分配给离散的文件夹和文件，而不是对每个文件和文件夹具有编辑权限的全局“编辑器”角色。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://research.google/pubs/pub48190/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google 的 Zanzibar&lt;/a&gt; 是支持 Google 文档和许多其他 Google 应用程序的授权系统，它实现了这个模型。Zanzibar 启发了许多授权系统，包括 Airbnb 的 Himeji、Carta 的 AuthZ 和几个开源实现，包括 Topaz。&lt;/p&gt;
&lt;p&gt;使用 Topaz，你可以定义特定领域的对象类型和关系类型。可以为每种关系类型定义权限（和/或其他关系类型的联合）。可以在&lt;a href=&#34;https://github.com/aserto-dev/topaz-samples/blob/main/gdrive/model/manifest.yaml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;此处&lt;/a&gt;找到支持此模型的清单的完整示例。&lt;/p&gt;
&lt;p&gt;纯粹以评估主体（用户和组）和客体（例如文件夹和文件）之间的关系（例如“viewer”、“editor”）的形式建立的授权模型可以用非常简单的策略来表达：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;allowed&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;ds&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;check_permission&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;subject&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;permission&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;policy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;object&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;s2&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;resource&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;s2&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;resource&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;结合基于组的-rbac-和-fga&#34;&gt;结合基于组的 RBAC 和 FGA&lt;/h2&gt;
&lt;p&gt;大多数现实世界的应用程序都实现了基于组的 RBAC 和细粒度授权的某种组合。通常，授权涉及检查全局角色（例如，“editor”），然后检查用户是否有权访问特定资源（例如，列表）。用户需要满足这两个条件才能编辑此列表中的项目。&lt;/p&gt;
&lt;p&gt;另一个例子是“super-admin”，一个可以做任何事情的角色。访问检查包括允许用户通过关系访问特定对象的逻辑，以及允许访问具有这些提升角色的用户的逻辑。&lt;/p&gt;
&lt;p&gt;Topaz 还支持这些场景，因为它建立在策略和基于关系的访问控制的组合之上。为了扩展前面的示例，我们可以在策略中添加另一个“允许”子句。如果用户已被授予对特定对象的特定权限，或者如果他们是“super-admin”，则此子句将允许操作：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;allowed&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;n&#34;&gt;ds&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;check_permission&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;s2&#34;&gt;&amp;#34;subject&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;s2&#34;&gt;&amp;#34;permission&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;policy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;s2&#34;&gt;&amp;#34;object&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;s2&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;resource&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;s2&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;resource&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;allowed&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;roles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;super-admin&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;我们介绍了五种常见的授权模型，从最简单的基于 IDP 的 RBAC，到基于组的 RBAC 与细粒度权限和细粒度资源的结合。&lt;/p&gt;
&lt;p&gt;Topaz 支持所有这些模型，同样重要的是，它可以通过改进授权策略轻松地从简单模型发展到更复杂的模型。&lt;/p&gt;
&lt;p&gt;最终，每个成功的应用程序都需要一套深入的授权功能。在你的旅程中尽早采用像 Topaz 或 Aserto 这样的授权平台可以使你的应用程序面向未来，并且可以更轻松地根据你不断扩展的需求改进你的授权模型。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>如何将服务网格作为安全模型的一部分，以分层形式将微服务安全与传统安全结合起来</title>
      <link>https://lib.jimmysong.io/blog/how-service-mesh-layers-microservices-security-with-traditional-security-to-move-fast-safely/</link>
      <pubDate>Thu, 05 Jan 2023 14:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/blog/how-service-mesh-layers-microservices-security-with-traditional-security-to-move-fast-safely/</guid>
      <description>&lt;p&gt;本文是 Tetrate 即将出版的《Istio in Production》一书中摘录的服务网格最佳实践系列的第一篇，作者是 Tetrate 创始工程师 Zack Butcher。&lt;/p&gt;
&lt;p&gt;我们接到许多实施网格的企业的问题，其中之一是“我还需要哪些控制，而网格提供哪些控制？”换句话说，他们想知道网格如何适应现有的安全模型。我们发现，网格最适合作为一组安全控制的内圈，这些控制从物理网络到应用本身的每一层都被实施。&lt;/p&gt;
&lt;h2 id=&#34;服务网格作为通用策略执行点&#34;&gt;服务网格作为通用策略执行点&lt;/h2&gt;
&lt;p&gt;我们看到网格的 Sidecar 作为通用策略执行点（&lt;a href=&#34;https://csrc.nist.gov/publications/detail/sp/800-204b/final&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NIST SP 800-204B：使用服务网格的基于属性的访问控制&lt;/a&gt;）。由于它拦截了所有进出应用程序的流量，Sidecar 为我们提供了一个强大的位置来实现各种策略。我们可以实现传统的安全策略，如基于应用程序标识而非网络位置的更高保证的应用程序之间的授权。但我们也可以实施之前不切实际或需要与应用程序深度参与的策略。例如，网格允许您编写以下策略：“后端可以从数据库读取（使用应用级身份进行身份验证和授权），但前提是请求具有有效的最终用户凭证并具有读取范围（使用最终用户身份进行身份验证和授权）。”&lt;/p&gt;
&lt;p&gt;虽然服务网格提供了一个强大，动态和一致的安全基线，您可以在其上构建应用程序安全模型，但网格本身永远无法提供应用程序所需的 100% 运行时安全。例如，由于 Sidecar 位于用户空间中，网格在减轻许多类型的网络拒绝服务攻击方面不如传统防火墙机制。另一方面，由于同样的原因，网格在减轻许多应用级拒绝服务攻击方面比传统基础设施更有效。&lt;/p&gt;
&lt;h2 id=&#34;作为一个强大的中间层&#34;&gt;作为一个强大的中间层&lt;/h2&gt;
&lt;p&gt;网格作为基础架构的强大中间层：位于物理网络和所实施的 L3/L4 控制之上，但位于应用程序之下。这允许更脆弱和更难以改变的松散配置 —— 允许更高层的更大敏捷性 —— 因为控制体系在更高层被考虑。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-1增加细粒度策略层以增强传统安全&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 1：增加细粒度策略层以增强传统安全。&#34; srcset=&#34;
               /blog/how-service-mesh-layers-microservices-security-with-traditional-security-to-move-fast-safely/f1_huae8a35f32b66687363b4bb0a6229c7fe_99227_3c160c89a73c9c504e8056d88aebba3b.webp 400w,
               /blog/how-service-mesh-layers-microservices-security-with-traditional-security-to-move-fast-safely/f1_huae8a35f32b66687363b4bb0a6229c7fe_99227_dca55d1428bab775c70d9a1253198a48.webp 760w,
               /blog/how-service-mesh-layers-microservices-security-with-traditional-security-to-move-fast-safely/f1_huae8a35f32b66687363b4bb0a6229c7fe_99227_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://lib.jimmysong.io/blog/how-service-mesh-layers-microservices-security-with-traditional-security-to-move-fast-safely/f1_huae8a35f32b66687363b4bb0a6229c7fe_99227_3c160c89a73c9c504e8056d88aebba3b.webp&#34;
               width=&#34;760&#34;
               height=&#34;629&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 1：增加细粒度策略层以增强传统安全。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;网格提供的主要安全功能是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作为 X.509 证书的&lt;strong&gt;运行时身份&lt;/strong&gt;，用于在传输期间加密，以及服务之间通信的身份验证和授权。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;策略执行点&lt;/strong&gt;，用于在网格中的所有应用程序上实施一致的最终用户身份验证和授权。&lt;/li&gt;
&lt;li&gt;服务身份和最终用户身份的&lt;strong&gt;运行时策略执行&lt;/strong&gt;（例如，“A 只能使用具有读取范围的有效最终用户凭证与 B 进行通信”）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;速率限制和弹性功能&lt;/strong&gt;，用于减轻常见的应用级拒绝服务攻击，并保护免受常见的级联故障模式的影响。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WAF&lt;/strong&gt; 和其他&lt;strong&gt;深层包检测&lt;/strong&gt;功能，用于内部流量，而不仅仅是在边缘。&lt;/li&gt;
&lt;li&gt;来自网格中所有应用程序的&lt;strong&gt;一致的操作遥测&lt;/strong&gt;，可用于理解、实施和审核安全策略。&lt;/li&gt;
&lt;li&gt;具有动态运行时更新的&lt;strong&gt;策略即代码&lt;/strong&gt;（Policy-as-code）模型，独立于应用程序生命周期。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;服务网格作为分层防御的一部分&#34;&gt;服务网格作为分层防御的一部分&lt;/h2&gt;
&lt;p&gt;考虑到网格的安全功能，我们认为，组织采用它作为分层防御方法的一部分是最合理的。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-2每层策略的示例以及一个示例部署拓扑&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 2：每层策略的示例以及一个示例部署拓扑。&#34; srcset=&#34;
               /blog/how-service-mesh-layers-microservices-security-with-traditional-security-to-move-fast-safely/f2_hu51229ea213419ff3448aa105a91e4832_89514_754f08ee5c071f0703625be9db973cb0.webp 400w,
               /blog/how-service-mesh-layers-microservices-security-with-traditional-security-to-move-fast-safely/f2_hu51229ea213419ff3448aa105a91e4832_89514_0819e3da7a8b88b57b8c620b3d5f9cb7.webp 760w,
               /blog/how-service-mesh-layers-microservices-security-with-traditional-security-to-move-fast-safely/f2_hu51229ea213419ff3448aa105a91e4832_89514_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://lib.jimmysong.io/blog/how-service-mesh-layers-microservices-security-with-traditional-security-to-move-fast-safely/f2_hu51229ea213419ff3448aa105a91e4832_89514_754f08ee5c071f0703625be9db973cb0.webp&#34;
               width=&#34;760&#34;
               height=&#34;395&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 2：每层策略的示例以及一个示例部署拓扑。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;l3-层的敏捷性粗粒度的入口和出口策略以及-l7-的细粒度控制&#34;&gt;L3 层的敏捷性：粗粒度的入口和出口策略以及 L7 的细粒度控制&lt;/h2&gt;
&lt;p&gt;在边缘的 L3 控制（如防火墙）在粗粒度的入口和出口策略方面仍然有效，但通常会减慢应用程序开发敏捷性。由于网格提供了细粒度的服务间授权，所以可以在 L3 上设置更广泛的策略，为平台、安全和应用程序团队提供更多敏捷性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实施对外部服务的访问控制&lt;/strong&gt;。网格的出口代理特别适用于实施应用程序到外部服务的控制，而只有出口代理本身被外出防火墙 allow-listed：这为平台或安全团队在管理哪些应用程序允许与企业基础架构之外的通信提供了很多敏捷性，同时保持现有的基于周界的模型。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用加密和动态访问控制代替“可达性即授权”&lt;/strong&gt;。网格可以开始有效地取代 VPN 和基于 IPSec 的网络“可达性即授权”模式，提供传输中的加密，以及每个应用而不是每个主机的认证和授权。&lt;/p&gt;
&lt;h2 id=&#34;l4-层的改进更扁平和易于管理的网络微分段&#34;&gt;L4 层的改进：更扁平和易于管理的网络微分段&lt;/h2&gt;
&lt;p&gt;微分段之类的控制可以通过网格进一步改进：尽管我们可能允许整个（小）子网在基于分段的策略中进行通信，但我们可以使用网格按方法和动词对单独的服务间通信进行控制。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;补充现有的微分段同时展平网络&lt;/strong&gt;。通过提供细粒度的服务间控制，网格往往会补充现有的微分段策略，同时使得组织更容易管理的较平的网络得以采用（例如，在云环境中）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用工作负载身份启用传输期间的加密（mTLS）和服务级别访问控制&lt;/strong&gt;。传输层几乎总是处理加密传输，网格通过根据 SPIFFE 规范发布和轮换短期（&amp;lt;24 小时）工作负载身份证书来为应用程序实现此功能，从而允许传输期间的加密以及服务级别的身份验证和授权。&lt;/p&gt;
&lt;h2 id=&#34;l7-层的增强无处不在的边缘和访问控制&#34;&gt;L7 层的增强：无处不在的边缘和访问控制&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;为所有流量提供边缘控制&lt;/strong&gt;。L7 控制，如 Web 应用程序防火墙（WAF）以及“API 网关功能”（如流量限制）几乎总是在边缘实施。网格可以通过为网格中所有流量（包括内部的“东西”通信）启用相同的功能来增强这些现有部署。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;简化应用程序的访问控制&lt;/strong&gt;。除了使边缘控制无处不在之外，网格还可以在应用程序看到请求之前执行端用户身份验证和粗粒度授权，从而大大简化应用程序本身必须执行的访问控制。在未来，我们将看到越来越多的访问控制功能从应用程序迁移到网格中。&lt;/p&gt;
&lt;h2 id=&#34;总结和展望&#34;&gt;总结和展望&lt;/h2&gt;
&lt;p&gt;我们认为，服务网格最适合作为现有安全模型的一部分，通过在传统安全控制之上添加更细粒度的安全策略来实现。作为一个通用策略执行点，网格在更改最困难的较低层提供了更松散的策略，将敏捷性推向堆栈的顶部，其中更多的上下文允许在更高层实现更特定的控制。这种强大的安全层对于大多数组织来说都是采用分层防御深度方法的最佳选择。&lt;/p&gt;
&lt;h2 id=&#34;接下来服务网格部署最佳实践&#34;&gt;接下来：服务网格部署最佳实践&lt;/h2&gt;
&lt;p&gt;我们服务网格最佳实践系列博客文章的下一篇将讨论部署拓扑。在多个集群的真实基础架构中部署服务网格时存在一些移动部分。在下一篇文章中，我们将更详细地研究：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;控制平面应如何部署在应用程序附近。&lt;/li&gt;
&lt;li&gt;应该如何部署入口，以促进安全和敏捷性。&lt;/li&gt;
&lt;li&gt;如何使用 Envoy 促进跨集群的负载平衡。&lt;/li&gt;
&lt;li&gt;证书在网格中应该是什么样子的。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;如果您不熟悉服务网格和 Kubernetes 安全性，我们在 &lt;a href=&#34;https://tetr8.io/academy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate Academy&lt;/a&gt; 提供了一系列免费在线课程，可以让您快速了解 Istio 和 Envoy。&lt;/p&gt;
&lt;p&gt;如果您正在寻找一种快速将 Istio 投入生产的方法，请查看 &lt;a href=&#34;https://tetr8.io/tid&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate Istio Distribution (TID)&lt;/a&gt;。TID 是 Tetrate 的强化、完全上游的 Istio 发行版，具有经过 FIPS 验证的构建和支持。这是开始使用 Istio 的好方法，因为您知道您有一个值得信赖的发行版，有一个支持您的专家团队，并且如果需要，还可以选择快速获得 FIPS 合规性。&lt;/p&gt;
&lt;p&gt;一旦启动并运行 Istio，您可能需要更简单的方法来管理和保护您的服务，而不仅仅是 Istio 中可用的方法，这就是 Tetrate Service Bridge 的用武之地。您可以&lt;a href=&#34;https://tetr8.io/tsb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在这里&lt;/a&gt;详细了解 Tetrate Service Bridge 如何使服务网格更安全、更易于管理和弹性，或&lt;a href=&#34;https://tetr8.io/contact&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;联系我们进行快速演示&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>在生产中大规模自动化 Istio CA 轮换</title>
      <link>https://lib.jimmysong.io/blog/automate-istio-ca-rotation-in-production-at-scale/</link>
      <pubDate>Tue, 20 Dec 2022 14:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/blog/automate-istio-ca-rotation-in-production-at-scale/</guid>
      <description>&lt;p&gt;Istio 的核心功能之一是通过管理网格中服务的身份来促进零信任网络架构。为了在网格中检索用于 mTLS 通信的有效证书，各个工作负载向 &lt;em&gt;istiod&lt;/em&gt; 发出证书签名请求 (CSR)。Istiod 反过来验证请求并使用证书颁发机构（CA）&lt;a href=&#34;https://istio.io/latest/docs/concepts/security/#pki&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;签署 CSR 以生成证书&lt;/a&gt;。默认情况下，Istio 为此目的使用自己的自签名 CA，但最佳实践是通过为每个 Istio 部署创建一个中间 CA，&lt;a href=&#34;https://lib.jimmysong.io/blog/istio-trust/&#34;&gt;将 Istio 集成到您现有的 PKI 中&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;如果您正在管理多个集群，这意味着颁发多个中间 CA，每个中间 CA 都应设置为在几个月或更短的时间内到期。管理这些 CA 的生命周期至关重要，因为它们必须在过期或坏事发生之前进行轮换。本文将向您展示如何简化此 CA 管理以&lt;strong&gt;降低风险&lt;/strong&gt;并&lt;strong&gt;提高系统的整体稳定性&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;轮换 CA 时的一个关键步骤是确保实际使用新的 CA。默认情况下，Istio 仅在启动时加载其 CA。但是，Istio 可以配置为监视更改并在更新时自动重新加载其 CA。本教程取自我们与管理大量 Istio 部署的企业客户合作开发的生产手册，将展示如何配置 Istio 以自动重新加载其 CA。我们还将介绍如何配置 &lt;a href=&#34;https://cert-manager.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cert-manager&lt;/a&gt; 以在 Istio 的中间 CA 到期前定期自动轮换，以&lt;strong&gt;提高在多个集群上管理 CA 的操作效率&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;先决条件&#34;&gt;先决条件&lt;/h2&gt;
&lt;p&gt;对于本教程，您至少需要以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个正在运行的 Kubernetes 集群。像 &lt;a href=&#34;https://minikube.sigs.k8s.io/docs/start/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;minikube&lt;/a&gt; 或类似的简化的 Kubernetes 安装适用于演示目的；&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cert-manager.io/docs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istioctl&lt;/a&gt; v1.14.2 或更高版本；&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cert-manager.io/docs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cert-manager&lt;/a&gt; v1.7.2 或更高版本。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;任务-a安装和配置-cert-manager-以自动轮换-istio-的-ca&#34;&gt;任务 A：安装和配置 cert-manager 以自动轮换 Istio 的 CA&lt;/h2&gt;
&lt;h3 id=&#34;步骤-a1安装证书管理器&#34;&gt;步骤 A1：安装证书管理器&lt;/h3&gt;
&lt;p&gt;以下命令将在您的集群中安装 cert-manager。要安装更新版本的证书管理器，请更改 GitHub URL。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.10.1/cert-manager.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;步骤-a2配置-ca&#34;&gt;步骤 A2：配置 CA&lt;/h3&gt;
&lt;p&gt;出于演示目的，我们将设置一个自签名 CA，但&lt;strong&gt;不要在生产中使用自签名 CA&lt;/strong&gt;。出于生产目的，您应该 &lt;a href=&#34;https://tetrate.io/blog/istio-trust/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;将 cert-manager 配置为使用现有的 PKI&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cat &lt;span class=&#34;s&#34;&gt;&amp;lt;&amp;lt; EOF | kubectl apply -f -
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;apiVersion: cert-manager.io/v1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;kind: Issuer
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;metadata:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  name: selfsigned
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  namespace: cert-manager
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;spec:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  selfSigned: {}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;apiVersion: cert-manager.io/v1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;kind: Certificate
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;metadata:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  name: selfsigned-ca
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  namespace: cert-manager
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;spec:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  isCA: true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  duration: 21600h # 900d
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  secretName: selfsigned-ca
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  commonName: certmanager-ca
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  subject:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    organizations:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;      - cert-manager
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  issuerRef:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    name: selfsigned
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    kind: Issuer
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    group: cert-manager.io
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;apiVersion: cert-manager.io/v1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;kind: ClusterIssuer
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;metadata:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  name: selfsigned-ca
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;spec:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  ca:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    secretName: selfsigned-ca
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;EOF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;步骤-a3为-istio-配置中间-ca&#34;&gt;步骤 A3：为 Istio 配置中间 CA&lt;/h3&gt;
&lt;p&gt;设置中间 CA Istio 将用于签署工作负载证书，设置为每 60 天（1440 小时）证书轮换一次，并在 15 天（360 小时）到期前更新：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl create namespace istio-system
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cat &lt;span class=&#34;s&#34;&gt;&amp;lt;&amp;lt; EOF | kubectl apply -f -
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;apiVersion: cert-manager.io/v1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;kind: Certificate
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;metadata:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  name: cacerts
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  namespace: istio-system
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;spec:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  secretName: cacerts
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  duration: 1440h
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  renewBefore: 360h
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  commonName: istiod.istio-system.svc
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  isCA: true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  usages:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    - digital signature
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    - key encipherment
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    - cert sign
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  dnsNames:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    - istiod.istio-system.svc
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  issuerRef:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    name: selfsigned-ca
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    kind: ClusterIssuer
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    group: cert-manager.io
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;EOF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：Cert-manager 将证书和密钥公开为 &lt;a href=&#34;https://kubernetes.io/docs/concepts/configuration/secret/#secret-types&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;kubernetes.io/tls&lt;/code&gt; Secret&lt;/a&gt;。Istio 可以使用从 &lt;a href=&#34;https://istio.io/latest/news/releases/1.14.x/announcing-1.14.2/#changes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;1.14.2 版本&lt;/a&gt;开始的 &lt;code&gt;kubernetes.io/tls&lt;/code&gt; 类型的 Secret。&lt;/p&gt;
&lt;h2 id=&#34;任务-b安装和配置-istio-以自动更新其-ca&#34;&gt;任务 B：安装和配置 Istio 以自动更新其 CA&lt;/h2&gt;
&lt;p&gt;使用 &lt;code&gt;istioctl&lt;/code&gt; 安装 Istio。以下 IstioOperator 配置设置环境变量&lt;code&gt;AUTO_RELOAD_PLUGIN_CERTS=true&lt;/code&gt; 以使 Istio 在更新时自动重新加载其 CA：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;istioctl operator init
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cat &lt;span class=&#34;s&#34;&gt;&amp;lt;&amp;lt; EOF | istioctl apply --skip-confirmation -f -
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;apiVersion: install.istio.io/v1alpha1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;kind: IstioOperator
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;metadata:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  name: demo-istio-install
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  namespace: istio-system
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;spec:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  profile: demo
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  components:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    pilot:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;      k8s:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;        env:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;        - name: AUTO_RELOAD_PLUGIN_CERTS
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;          value: &amp;#34;true&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;EOF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;任务-c配置和验证-istio-的中间-ca-轮换&#34;&gt;任务 C：配置和验证 Istio 的中间 CA 轮换&lt;/h2&gt;
&lt;h3 id=&#34;步骤-c1配置轮换中间-ca&#34;&gt;步骤 C1：配置轮换中间 CA&lt;/h3&gt;
&lt;p&gt;假设需求发生了变化，我们需要将 CA 轮换周期从 60 天（1440 小时）缩短到 30 天（720 小时）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cat &lt;span class=&#34;s&#34;&gt;&amp;lt;&amp;lt; EOF | kubectl apply -f -
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;apiVersion: cert-manager.io/v1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;kind: Certificate
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;metadata:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  name: cacerts
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  namespace: istio-system
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;spec:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  secretName: cacerts
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  duration: 720h 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  renewBefore: 360h
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  commonName: istiod.istio-system.svc
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  isCA: true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  usages:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    - digital signature
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    - key encipherment
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    - cert sign
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  dnsNames:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    - istiod.istio-system.svc
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  issuerRef:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    name: selfsigned-ca
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    kind: ClusterIssuer
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    group: cert-manager.io
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;EOF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;步骤-c2验证新的中间-ca-是否已重新加载&#34;&gt;步骤 C2：验证新的中间 CA 是否已重新加载&lt;/h3&gt;
&lt;p&gt;查看日志应该会显示 CA 更改：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl logs -l &lt;span class=&#34;nv&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;istiod -n istio-system -f
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;您应该在日志输出中看到类似这样的内容：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;2022-08-11T20:18:41.493247Z	info	Update Istiod cacerts
2022-08-11T20:18:41.493483Z	info	Using kubernetes.io/tls secret type for signing ca files
2022-08-11T20:18:41.716843Z	info	Istiod has detected the newly added intermediate CA and updated its key and certs accordingly
2022-08-11T20:18:41.717170Z	info	x509 cert - Issuer: &amp;#34;CN=istiod.istio-system.svc&amp;#34;, Subject: &amp;#34;&amp;#34;, SN: 1c43c1686425ee2e63f2db90bd3cf17f, NotBefore: &amp;#34;2022-08-11T20:16:41Z&amp;#34;, NotAfter: &amp;#34;2032-08-08T20:18:41Z&amp;#34;
2022-08-11T20:18:41.717220Z	info	x509 cert - Issuer: &amp;#34;CN=certmanager-ca,O=cert-manager&amp;#34;, Subject: &amp;#34;CN=istiod.istio-system.svc&amp;#34;, SN: c172b51eeb4a2891fe66f30babb42bb0, NotBefore: &amp;#34;2022-08-11T20:17:25Z&amp;#34;, NotAfter: &amp;#34;2022-08-13T20:17:25Z&amp;#34;
2022-08-11T20:18:41.717254Z	info	x509 cert - Issuer: &amp;#34;CN=certmanager-ca,O=cert-manager&amp;#34;, Subject: &amp;#34;CN=certmanager-ca,O=cert-manager&amp;#34;, SN: ea1760f2dcf9806a8c997c4bc4b2fb30, NotBefore: &amp;#34;2022-08-11T20:13:33Z&amp;#34;, NotAfter: &amp;#34;2025-01-27T20:13:33Z&amp;#34;
2022-08-11T20:18:41.717256Z	info	Istiod certificates are reloaded
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;正如我们所见，使用 cert-manager 来自动化 Istio CA 轮换可以轻松高效地处理关键操作功能。将 Istio 配置为自动重新加载其 CA 无需手动重启 Istio，从而消除了潜在的人为错误来源。&lt;/p&gt;
&lt;p&gt;服务网格是一种强大的工具，可用于实施零信任安全实践并大规模提高业务敏捷性和连续性。为服务网格建立有效的运营实践对于利用这种力量至关重要。作为 Istio 和 Envoy 的创始人和核心贡献者，我们 Tetrate 每天都在帮助我们的客户做到这一点。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>将 Istio 纳入信任链：使用现有 PKI 作为信任根</title>
      <link>https://lib.jimmysong.io/blog/istio-trust/</link>
      <pubDate>Tue, 20 Dec 2022 11:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/blog/istio-trust/</guid>
      <description>&lt;p&gt;当我们与想要使用 Istio 的客户或用户交流时，这一个问题时长会出现——Istio 中的证书信任如何工作的？Istio 有自己的证书颁发机构，而我们也有自己的证书颁发机构，如何确保它们相互信任？&lt;/p&gt;
&lt;p&gt;简而言之，通过中间签名证书将 Istio 纳入到您现有的信任链中。&lt;/p&gt;
&lt;p&gt;如果您使用 Istio 作为演示或开箱即用，它将拥有自己的自签名证书 —— 它是自己的根证书。对于在多个集群中运行 Istio 的用户来说，这是一个常见的痛点：他们无意中创建了两个互不不信任的孤岛，因此没有安全通信。&lt;/p&gt;
&lt;p&gt;以下是如何通过让 Istio 信任您现有的 PKI 的步骤。&lt;/p&gt;
&lt;h2 id=&#34;简述&#34;&gt;简述&lt;/h2&gt;
&lt;p&gt;这是简短的版本：您应该通过为每个 Istio 部署创建一个中间签名证书来让 Istio 信任您现有的 PKI（并且每个集群应该有一个 Istio 部署）。然后你会：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;启用跨 Istio 部署的通信&lt;/li&gt;
&lt;li&gt;允许细粒度的证书撤销，而无需同时在整个基础架构中强制使用新证书（如果这听起来像是等待发生的重大中断，那么您是对的）。&lt;/li&gt;
&lt;li&gt;启用签名证书的轻松轮换。您需要做的就是创建一个新的中间件并使用新证书重新启动 Istio。因为它在同一个信任根中，所以一切都继续工作。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Istio 必须适应您现有的架构，以在组织内实现增量采用 —— 使网格适应您的组织，而不是让组织来适应网格。从了解对中间证书签名密钥的需求开始，将为您的成功做好准备，并使任何基础架构或环境更改更加顺利。&lt;/p&gt;
&lt;h2 id=&#34;详述&#34;&gt;详述&lt;/h2&gt;
&lt;p&gt;我们先来了解一下证书验证的过程。在基本证书中，证书检查从信任根开始，向下延伸到特定身份（叶子）。证书路径验证算法是我们确保证书可信的方式。当我们使用 TLS 等安全协议连接到另一台机器时，服务器会向我们提供部分或全部证书链以证明其身份。如果链中的证书被确定为无效，则证书链将被拒绝且不会建立信任。如果我们顺利到达链的末端，则路径（以及证书）是有效的。成功！我们可以信任服务器！&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-带有叶证书中间证书和根证书的证书链服务器可以选择发送整个链或者只发送一部分只要有足够的链从根到叶我们就可以验证证书&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;带有叶证书、中间证书和根证书的证书链。服务器可以选择发送整个链，或者只发送一部分；只要有足够的链从根到叶，我们就可以验证证书。&#34; srcset=&#34;
               /blog/istio-trust/f1_huec9d872c6d7b9744e61eee3d5c25daf4_47186_0a555bb03c90fdc04900b318972e9218.webp 400w,
               /blog/istio-trust/f1_huec9d872c6d7b9744e61eee3d5c25daf4_47186_02390ee732353ac91d0a51c4146d1d54.webp 760w,
               /blog/istio-trust/f1_huec9d872c6d7b9744e61eee3d5c25daf4_47186_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://lib.jimmysong.io/blog/istio-trust/f1_huec9d872c6d7b9744e61eee3d5c25daf4_47186_0a555bb03c90fdc04900b318972e9218.webp&#34;
               width=&#34;760&#34;
               height=&#34;428&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      带有叶证书、中间证书和根证书的证书链。服务器可以选择发送整个链，或者只发送一部分；只要有足够的链从根到叶，我们就可以验证证书。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;当 TLS 握手时，路径验证算法不关心有多少证书链驻留在我们的信任包中。基于我们带来的和他们提供的证书，它只关心我们能否构建一条从服务器的叶节点到我们的捆绑包中的信任根的链。上面的示例显示验证发生在证书交换中，这足以让叶子在证书颁发机构中找到它的位置。&lt;/p&gt;
&lt;p&gt;当您在生产环境中运行 Istio 时，您将拥有多个叶节点和中间节点，但&lt;strong&gt;只有一个根节点。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-具有根三个中间签名-ca-和四个叶证书由树中的各种中间体颁发的-pki-证书树&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;具有根、三个中间签名 CA 和四个叶证书（由树中的各种中间体颁发）的 PKI 证书树。&#34; srcset=&#34;
               /blog/istio-trust/f2_hub07c1aca55232d4eaaa7450e9ad8d1b6_39066_3bad8109ce0409abfc7ebddce7746631.webp 400w,
               /blog/istio-trust/f2_hub07c1aca55232d4eaaa7450e9ad8d1b6_39066_300ffc05783a2a10663726f35cb8ba73.webp 760w,
               /blog/istio-trust/f2_hub07c1aca55232d4eaaa7450e9ad8d1b6_39066_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://lib.jimmysong.io/blog/istio-trust/f2_hub07c1aca55232d4eaaa7450e9ad8d1b6_39066_3bad8109ce0409abfc7ebddce7746631.webp&#34;
               width=&#34;760&#34;
               height=&#34;428&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      具有根、三个中间签名 CA 和四个叶证书（由树中的各种中间体颁发）的 PKI 证书树。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;这就是为什么要在现有 PKI 中建立信任，因为有以下三个主要好处：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可以在 Istio 部署之间的交叉通信&lt;/li&gt;
&lt;li&gt;细粒度证书撤销&lt;/li&gt;
&lt;li&gt;轻松轮换证书&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;跨-istio-部署的通信&#34;&gt;跨 Istio 部署的通信&lt;/h3&gt;
&lt;p&gt;对于 Istio，有两种方法可以确保跨部署的通信 —— 简单的方法和困难的方法。&lt;/p&gt;
&lt;p&gt;困难的方法涉及 Istio 运维人员采取耗时、复杂且昂贵的步骤来确保两个根同时在另一个的证书颁发机构 (CA) 捆绑包中。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-我们可以通过确保所有参与方的根都在-ca-捆绑包中来确保跨不同根的信任如果它们不是彼此信任包的一部分则来自每个-citadel-的证书不能用于跨集群通信&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;我们可以通过确保所有参与方的根都在 CA 捆绑包中来确保跨不同根的信任。如果它们不是彼此信任包的一部分，则来自每个 Citadel 的证书不能用于跨集群通信。&#34; srcset=&#34;
               /blog/istio-trust/f3_hude18225d1ce4b392db5d8b58e87abe4b_41877_20c55ff2089db821acd01473dd1b95f9.webp 400w,
               /blog/istio-trust/f3_hude18225d1ce4b392db5d8b58e87abe4b_41877_a320a604a120946eddc0b8a918a83f77.webp 760w,
               /blog/istio-trust/f3_hude18225d1ce4b392db5d8b58e87abe4b_41877_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://lib.jimmysong.io/blog/istio-trust/f3_hude18225d1ce4b392db5d8b58e87abe4b_41877_20c55ff2089db821acd01473dd1b95f9.webp&#34;
               width=&#34;760&#34;
               height=&#34;428&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      我们可以通过确保所有参与方的根都在 CA 捆绑包中来确保跨不同根的信任。如果它们不是彼此信任包的一部分，则来自每个 Citadel 的证书不能用于跨集群通信。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;简单的方法是为每个部署使用单独的中间签名证书部署 Istio，所有这些证书都共享相同的根。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-当-citadel-使用来自同一根-pki-的中间证书时最容易促进跨集群通信我们看到与上面相同的-pki-树但中间-ca-被标记为不同集群中的-citadel-实例&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;当 Citadel 使用来自同一根 PKI 的中间证书时，最容易促进跨集群通信。我们看到与上面相同的 PKI 树，但中间 CA 被标记为不同集群中的 Citadel 实例。&#34; srcset=&#34;
               /blog/istio-trust/f4_huea09a22d92f6268de8b161fb6b4726d3_47023_6de4ed0096c5b2d01e95bcc97b774aa2.webp 400w,
               /blog/istio-trust/f4_huea09a22d92f6268de8b161fb6b4726d3_47023_872c7cc9e7eebce0c7bc2ace9a5cb0af.webp 760w,
               /blog/istio-trust/f4_huea09a22d92f6268de8b161fb6b4726d3_47023_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://lib.jimmysong.io/blog/istio-trust/f4_huea09a22d92f6268de8b161fb6b4726d3_47023_6de4ed0096c5b2d01e95bcc97b774aa2.webp&#34;
               width=&#34;760&#34;
               height=&#34;428&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      当 Citadel 使用来自同一根 PKI 的中间证书时，最容易促进跨集群通信。我们看到与上面相同的 PKI 树，但中间 CA 被标记为不同集群中的 Citadel 实例。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;当涉及到细粒度撤销和证书轮换时，这一决定的连锁反应是巨大的。&lt;/p&gt;
&lt;h3 id=&#34;细粒度证书撤销&#34;&gt;细粒度证书撤销&lt;/h3&gt;
&lt;p&gt;撤销证书会将证书标记为不再受信任。当证书路径验证算法从叶节点走到根节点时，会对每个证书进行吊销状态检查。这使您能够撤销对单个组件或整个部署部分的信任。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-使用与之前相同的-pki-树我们展示了在树的一部分中撤销中间-ca-如何使该中间证书以及由它创建的叶证书无效&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;使用与之前相同的 PKI 树，我们展示了在树的一部分中撤销中间 CA 如何使该中间证书以及由它创建的叶证书无效。&#34; srcset=&#34;
               /blog/istio-trust/f5_hu92686c7061f8ad32642b37636ba403bb_46338_6af7ef9444a8817e913abcf911ff07e5.webp 400w,
               /blog/istio-trust/f5_hu92686c7061f8ad32642b37636ba403bb_46338_ba29366385e5cb00e2e032d275fea663.webp 760w,
               /blog/istio-trust/f5_hu92686c7061f8ad32642b37636ba403bb_46338_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://lib.jimmysong.io/blog/istio-trust/f5_hu92686c7061f8ad32642b37636ba403bb_46338_6af7ef9444a8817e913abcf911ff07e5.webp&#34;
               width=&#34;760&#34;
               height=&#34;428&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      使用与之前相同的 PKI 树，我们展示了在树的一部分中撤销中间 CA 如何使该中间证书以及由它创建的叶证书无效。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;这很重要，因为如果签名密钥被泄露，恶意行为者可能会通过出示您的客户认为是有效证书来冒充您的服务器。这在 Istio 中更为重要，因为我们使用证书来识别彼此的工作负载 —— 攻击者可以伪装成您网格中的任何服务！&lt;/p&gt;
&lt;p&gt;通常，处理撤销是管理任何 PKI 中最困难的部分。Istio 帮助降低这种风险的方法之一是颁发非常短暂的证书。典型的吊销列表最多可能需要 24 小时才能在整个组织中传播。Istio 颁发的证书有效期少于 12 小时，因此几乎不需要撤销 Istio 颁发的身份证书。您只需要担心为每个 Istio 部署创建的签名证书。&lt;/p&gt;
&lt;h3 id=&#34;轻松轮换证书&#34;&gt;轻松轮换证书&lt;/h3&gt;
&lt;p&gt;与吊销一样，中间证书的轮换更容易。优点包括，如果您能够按集群轮换证书而不是在根节点轮换证书，您将体验到更少的停机时间（以及相关的复杂性，即在任何地方发布一个带有新根的更新的 CA 包）。而且，就像任何好的 PKI 一样，这可以让您使根离线并安全地存储起来。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;用简单的方法来做！将 Istio 引入您现有的信任根中，以避免痛苦和心痛。中间签名证书的存在是为了让采用 Istio 更容易、更安全。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>如何使用 Hashicorp Vault 作为一种更安全的方式来存储 Istio 证书</title>
      <link>https://lib.jimmysong.io/blog/how-to-use-hashicorp-vault-as-a-more-secure-way-to-store-istio-certificates/</link>
      <pubDate>Mon, 19 Dec 2022 13:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/blog/how-to-use-hashicorp-vault-as-a-more-secure-way-to-store-istio-certificates/</guid>
      <description>&lt;p&gt;在本文中，我们将探讨如何使用 Hashicorp Vault 作为一种比使用 Kubernetes &lt;a href=&#34;https://kubernetes.io/docs/concepts/configuration/secret&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Secret&lt;/a&gt; 更安全的方式来存储 Istio 证书。默认情况下，Secret 使用 base64 编码存储在 &lt;em&gt;etcd&lt;/em&gt; 中。在安全策略严格的环境中，这可能是不可接受的，因此需要额外的措施来保护它们。一种此类解决方案涉及将机密存储在外部机密存储提供程序中，例如 &lt;a href=&#34;https://www.vaultproject.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HashiCorp Vault&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Vault 可以托管在 Kubernetes 集群内部和外部。在本案例中，我们将探索使用托管在 Kubernetes 外部的 Vault，以便它可以同时为多个集群提供秘密。该设置也非常适合探索 Istio 的&lt;a href=&#34;https://istio.io/latest/docs/setup/install/multicluster&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;多集群功能&lt;/a&gt;，它需要一个共享的信任域。&lt;/p&gt;
&lt;p&gt;利用 &lt;code&gt;vault-agent-init&lt;/code&gt; 容器，我们可以将证书和私钥材料注入实际的 Istio 控制平面 Pod，以便它们使用外部 CA 证书进行引导。这避免了依赖 Secret 来引导 Istio 控制平面。该技术也完全适用于入口和出口证书。&lt;/p&gt;
&lt;p&gt;有关如何在 Istio 中使用和管理证书的更多信息，请参见官方文档：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/zh/docs/concepts/security/#pki&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;身份和证书管理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/zh/docs/tasks/security/cert-management/plugin-ca-cert&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;插入 CA 证书&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/zh/docs/tasks/security/cert-management/custom-ca-k8s&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;使用 Kubernetes CSR 的自定义 CA 集成&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有关基于实际生产经验的最佳实践，另请查看以下 &lt;a href=&#34;https://tetrate.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate&lt;/a&gt; 的博客文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://lib.jimmysong.io/blog/istio-trust/&#34;&gt;在 Istio 中构建证书信任链：将现有 PKI 作为信任根&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://lib.jimmysong.io/blog/automate-istio-ca-rotation-in-production-at-scale&#34;&gt;在生产中大规模自动化 Istio CA 轮换&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这篇博文附带的代码可以在以下存储库中找到：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/tetratelabs/istio-vault-ext-certs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/tetratelabs/istio-vault-ext-certs&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;istiod-证书处理&#34;&gt;&lt;strong&gt;Istiod 证书处理&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;尽管上述博文中解释了一些决策逻辑，但也值得参考&lt;a href=&#34;https://github.com/istio/istio/blob/master/pilot/pkg/bootstrap/istio_ca.go&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;源代码&lt;/a&gt;以查找一些未记录的行为。&lt;/p&gt;
&lt;p&gt;在 Istio 的源码 &lt;code&gt;istio/pilot/pkg/bootstrap/istio_ca.go&lt;/code&gt; 文件中，你将看到：为了向后兼容，Istio 保留了对用于自签名证书 &lt;code&gt;cacerts&lt;/code&gt; Secret 的支持。它安装在相同的位置，如果发现了就会被使用——创建秘密就足够了，不需要额外的选项。在旧安装程序中，&lt;code&gt;LocalCertDir&lt;/code&gt; 被硬编码到 &lt;code&gt;/etc/cacerts&lt;/code&gt; 并使用 &lt;code&gt;cacerts&lt;/code&gt;  Secret 安装。已删除对签署其他根 CA 的支持——太危险，没有明确的用例。&lt;/p&gt;
&lt;p&gt;默认配置，用于向后兼容 Citadel：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果 &lt;code&gt;istio-system&lt;/code&gt; 中存在 &lt;code&gt;cacerts&lt;/code&gt; 秘密，将被挂载。它可能包含一个可选的 &lt;code&gt;root-cert.pem&lt;/code&gt;，
带有额外的根和可选的 &lt;code&gt;{ca-key, ca-cert, cert-chain}.pem&lt;/code&gt; 由用户提供的根 CA。&lt;/li&gt;
&lt;li&gt;如果未找到用户提供的根 CA，则使用 &lt;code&gt;istio-ca-secret&lt;/code&gt; Secret，以及 &lt;code&gt;ca-cert.pem&lt;/code&gt; 和 &lt;code&gt;ca-key.pem&lt;/code&gt; 文件。&lt;/li&gt;
&lt;li&gt;如果两者均未找到，将创建 &lt;code&gt;istio-ca-secret&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;带有 &lt;code&gt;caTLSRootCert&lt;/code&gt; 文件的 &lt;code&gt;istio-security&lt;/code&gt; ConfigMap 将用于根证书，并在需要时创建。该 ConfigMap 由节点代理使用，不再可能在 sds-agent 中使用，但我们仍保留它以向后兼容。将与 node-agent 一起删除。sds-agent 使用 K8S root 直接调用 &lt;code&gt;NewCitadelClient&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了指示 Istio 从其他地方获取证书，而不是标准 Kubernetes Secret，我们将利用 &lt;em&gt;istio-pilot&lt;/em&gt;（又名 istiod 或 Istio 控制平面）的环境变量（&lt;a href=&#34;https://istio.io/latest/docs/reference/commands/pilot-discovery&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;见此文档&lt;/a&gt;），从 Kubernetes Pod 中的另一个位置获取证书。这是必需的，因为 &lt;code&gt;vault-agent-init&lt;/code&gt; 注入容器将创建一个新的挂载卷 &lt;code&gt;/vault/secrets&lt;/code&gt; ，以放置从外部 Vault 服务器拉出的证书和私钥。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;变量名称&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;默认值&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ROOT_CA_DIR&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;字符串&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/etc/cacerts&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;本地或安装的 CA 根目录的位置&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;pod-内的-vault-agent-init-容器注解&#34;&gt;Pod 内的 &lt;code&gt;vault-agent-init&lt;/code&gt; 容器注解&lt;/h2&gt;
&lt;p&gt;我们将利用 Vault 注入器注解来指示 Sidecar 提取哪些数据以及在这样做时使用什么 Vault 角色。我们还确保容器在我们实际的主容器之前运行，因此后者可以获取证书和密钥材料以正确引导自身。&lt;a href=&#34;https://developer.hashicorp.com/vault/docs/platform/k8s/injector/annotations&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;此处&lt;/a&gt;列举并记录了 Vault 注解。我们将在本教程中使用的相关注释如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;注解&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;默认值&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vault.hashicorp.com/agent-inject&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;配置是否为 Pod 显式启用或禁用注入。这应该设置为 true 或 false。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vault.hashicorp.com/agent-init-first&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;如果为 true，则将 Pod 配置为首先运行 Vault Agent init 容器（如果为 false，则最后运行）。当其他 init 容器需要预填充的秘密时，这很有用。这应该设置为 true 或 false。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vault.hashicorp.com/role&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;–&lt;/td&gt;
&lt;td&gt;配置 Vault 代理自动验证方法使用的 Vault 角色。&lt;code&gt;vault.hashicorp.com/agent-configmap&lt;/code&gt; 未设置时需要。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vault.hashicorp.com/auth-path&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;–&lt;/td&gt;
&lt;td&gt;配置 Kubernetes 身份验证方法的身份验证路径。默认为 &lt;code&gt;auth/kubernetes&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vault.hashicorp.com/agent-inject-secret-&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;–&lt;/td&gt;
&lt;td&gt;配置 Vault 代理以从容器所需的 Vault 中检索秘密。Secret 的名称是 &lt;code&gt;vault.hashicorp.com/agent-inject-secret-&lt;/code&gt; 之后的任意唯一字符串，例如 &lt;code&gt;vault.hashicorp.com/agent-inject-secret-foobar&lt;/code&gt; 该值是 secret 所在的 Vault 中的路径。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vault.hashicorp.com/agent-inject-template-&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;–&lt;/td&gt;
&lt;td&gt;配置 Vault Agent 应该用于呈现秘密的模板。模板的名称是 v&lt;code&gt;ault.hashicorp.com/agent-inject-template-&lt;/code&gt; 之后的任何唯一字符串，例如 &lt;code&gt;vault.hashicorp.com/agent-inject-template-foobar&lt;/code&gt;。这应该映射到 &lt;code&gt;vault.hashicorp.com/agent-inject-secret-&lt;/code&gt; 中提供的相同唯一值。如果未提供，则使用默认的通用模板。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;vault-server-considerations&#34;&gt;Vault 服务器注意事项&lt;/h2&gt;
&lt;p&gt;Vault 支持多种客户端验证自己的方法。我们将利用 &lt;a href=&#34;https://developer.hashicorp.com/vault/docs/auth/kubernetes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes 身份验证后端&lt;/a&gt;，这意味着我们将利用 Kubernetes ServiceAccount JWT 令牌验证。请注意，自 Kubernetes 1.24 以来，不再自动生成 ServiceAccount 令牌。您仍然可以手动创建这些 API 令牌，如&lt;a href=&#34;https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#manually-create-an-api-token-for-a-serviceaccount&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;此处所述&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;至于证书和私钥材料的存储，我们有两种选择：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.hashicorp.com/vault/docs/secrets/pki&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PKI 秘密引擎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.hashicorp.com/vault/docs/secrets/kv&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;KV 秘密引擎&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为 PKI 秘密引擎不提供精简的 API 来检索我们需要的证书和私钥，并且因为 PKI 秘密引擎会为每次调用（例如，每次 &lt;em&gt;istiod&lt;/em&gt; 重启）生成一个新的中间证书，我们将使用通用的 KV 秘密引擎，将我们需要的所有值存储在一个简单的键值数据结构中。我们假设中间证书的更新是通过一些服务门户或 CI/CD 过程在外部处理的，这些过程也将更新的中间证书存储在 Vault 服务器中。&lt;/p&gt;
&lt;p&gt;Istio 的控制平面 Pod 需要以下文件才能在 CA 中正确引导其构建：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;值（PEM 编码）&lt;/th&gt;
&lt;th&gt;细节&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ca-key.pem&lt;/td&gt;
&lt;td&gt;私钥&lt;/td&gt;
&lt;td&gt;中间证书的私钥，用作 &lt;em&gt;istiod&lt;/em&gt; 的根 CA。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ca-cert.pem&lt;/td&gt;
&lt;td&gt;CA 公共证书&lt;/td&gt;
&lt;td&gt;中间证书，用作 &lt;em&gt;istiod&lt;/em&gt; 的根 CA。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;root-cert.pem&lt;/td&gt;
&lt;td&gt;CA 根证书&lt;/td&gt;
&lt;td&gt;我们新生成的中间证书的信任根。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cert-chain.pem&lt;/td&gt;
&lt;td&gt;完整的证书链&lt;/td&gt;
&lt;td&gt;中间证书在顶部，根证书在底部。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;设置&#34;&gt;设置&lt;/h2&gt;
&lt;p&gt;如果要遵循本地设置，则安装软件的先决条件包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;kubectl&lt;/em&gt; 与 Kubernetes 集群交互（&lt;a href=&#34;https://kubernetes.io/docs/tasks/tools/#kubectl&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;下载&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;&lt;em&gt;helm&lt;/em&gt; 安装 Vault injector 和 Istio chart（&lt;a href=&#34;https://helm.sh/docs/intro/install&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;下载&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;用于配置 Vault 服务器的 &lt;em&gt;vault cli&lt;/em&gt; 工具（&lt;a href=&#34;https://developer.hashicorp.com/vault/tutorials/getting-started/getting-started-install#install-vault&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;下载&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果您想要本地演示环境，请按照&lt;a href=&#34;https://github.com/tetratelabs/istio-vault-ext-certs/blob/main/local-setup.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;此处&lt;/a&gt;的说明进行操作，该说明使用 &lt;code&gt;docker-compose&lt;/code&gt; 启动一个 Vault 服务器和两个独立的 k3s 集群。如果您使用自己的 Kubernetes 集群和外部托管的 Vault 实例，请跳至下一节。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;docker-compose&lt;/em&gt; 启动本地环境（&lt;a href=&#34;https://github.com/docker/compose/releases&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;下载&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了取得进展，我们希望根据您的环境设置以下 shell 变量。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;VAULT_SERVER&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;K8S_API_SERVER_1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;K8S_API_SERVER_2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;vault-kubernetes-身份验证后端&#34;&gt;&lt;strong&gt;Vault Kubernetes 身份验证后端&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;正如在有关 &lt;a href=&#34;#vault-server-considerations&#34;&gt;Vault 服务器注意事项&lt;/a&gt;的介绍部分中提到的，我们将使用 &lt;a href=&#34;https://developer.hashicorp.com/vault/docs/auth/kubernetes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes 身份验证后端&lt;/a&gt;。由于 &lt;em&gt;istiod&lt;/em&gt; 将从 Vault 服务器获取证书和私钥材料，让我们从在两个集群中创建相应的服务账户开始。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl --kubeconfig kubecfg1.yml create ns istio-system
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl --kubeconfig kubecfg2.yml create ns istio-system
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl --kubeconfig kubecfg1.yml apply -f istio-sa.yml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl --kubeconfig kubecfg2.yml apply -f istio-sa.yml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ServiceAccount、Secret 和 ClusterRoleBinding 如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# istio-sa.yaml&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ServiceAccount&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istiod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio-system&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# added for istio helm installation&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istiod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app.kubernetes.io/managed-by&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Helm&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;release&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio-istiod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;annotations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# added for istio helm installation&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta.helm.sh/release-name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio-istiod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta.helm.sh/release-namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio-system&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Secret&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istiod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio-system&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;annotations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kubernetes.io/service-account.name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istiod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;kubernetes.io/service-account-token&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ClusterRoleBinding&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;role-tokenreview-binding&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;roleRef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiGroup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ClusterRole&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;system:auth-delegator&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;subjects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ServiceAccount&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istiod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio-system&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;注意：&lt;em&gt;我们在 istiod ServiceAccount 上添加了 Helm 标签和注解，以免与稍后的 Istio Helm 部署发生冲突。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在两个集群中创建 ServiceAccount 后，让我们将它们的 Secret 令牌和 ca.cert 值存储在 output 文件夹中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mkdir -p ./output
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl --kubeconfig kubecfg1.yml get secret -n istio-system istiod -o go-template&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;{{ .data.token }}&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; base64 --decode &amp;gt; output/istiod1.jwt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl --kubeconfig kubecfg1.yml config view --raw --minify --flatten -o &lt;span class=&#34;nv&#34;&gt;jsonpath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;{.clusters[].cluster.certificate-authority-data}&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; base64 --decode &amp;gt; output/k8sapi-cert1.pem
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl --kubeconfig kubecfg2.yml get secret -n istio-system istiod -o go-template&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;{{ .data.token }}&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; base64 --decode &amp;gt; output/istiod2.jwt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl --kubeconfig kubecfg2.yml config view --raw --minify --flatten -o &lt;span class=&#34;nv&#34;&gt;jsonpath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;{.clusters[].cluster.certificate-authority-data}&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; base64 --decode &amp;gt; output/k8sapi-cert2.pem
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;关于 Kubernetes API 证书和 istiod ServiceAccount JWT 令牌的详细内容的更多信息可以在&lt;a href=&#34;https://github.com/tetratelabs/istio-vault-ext-certs/blob/main/output&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;找到，在这里我们也更深入地描述了 Vault 的交互过程，即通过 REST API 调用来验证和获取秘密。在调试权限拒绝的问题时，这些可以派上用场。&lt;/p&gt;
&lt;p&gt;让我们根据刚刚检索到的 Kubernetes CA 证书和 JWT 令牌创建必要的 Vault 身份验证配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;VAULT_ADDR&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;http://localhost:8200
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;vault login root
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;vault auth &lt;span class=&#34;nb&#34;&gt;enable&lt;/span&gt; --path&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;kubernetes-cluster1 kubernetes
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;vault auth &lt;span class=&#34;nb&#34;&gt;enable&lt;/span&gt; --path&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;kubernetes-cluster2 kubernetes
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;vault write auth/kubernetes-cluster1/config &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;kubernetes_host&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$K8S_API_SERVER_1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;kubernetes_ca_cert&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;@output/k8sapi-cert1.pem &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;token_reviewer_jwt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;cat output/istiod1.jwt&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;disable_local_ca_jwt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;vault write auth/kubernetes-cluster2/config &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;kubernetes_host&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$K8S_API_SERVER_2&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;kubernetes_ca_cert&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;@output/k8sapi-cert2.pem &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;token_reviewer_jwt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;cat output/istiod2.jwt&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;disable_local_ca_jwt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;注意：如果您使用的是 &lt;em&gt;docker-compose&lt;/em&gt; 提供的环境，则 &lt;code&gt;VAULT_ADDR&lt;/code&gt; 设置为 localhost。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;vault-kv-secret-中的-istio-证书和私钥&#34;&gt;&lt;em&gt;Vault kv&lt;/em&gt; Secret 中的 Istio 证书和私钥&lt;/h2&gt;
&lt;p&gt;接下来我们将创建一个新的自签名根证书并为我们的两个集群生成中间证书。我们将在&lt;a href=&#34;https://github.com/istio/istio/tree/master/tools/certs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;使用上游 Istio 提供的辅助 &lt;em&gt;Makefile&lt;/em&gt; 脚本：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; certs
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;make -f ../certs-gen/Makefile.selfsigned.mk root-ca
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;make -f ../certs-gen/Makefile.selfsigned.mk istiod-cluster1-cacerts
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;make -f ../certs-gen/Makefile.selfsigned.mk istiod-cluster2-cacerts
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ..
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;有关实际内容和正在设置的 X509v3 扩展的更多详细信息，请参见&lt;a href=&#34;https://github.com/tetratelabs/istio-vault-ext-certs/blob/main/certs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;此处&lt;/a&gt;。您可以通过&lt;a href=&#34;https://github.com/tetratelabs/istio-vault-ext-certs/blob/main/certs-gen&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;此处&lt;/a&gt;的 &lt;em&gt;Makefile&lt;/em&gt;文档和相应的 &lt;em&gt;Makefile&lt;/em&gt; 覆盖值微调证书。&lt;/p&gt;
&lt;p&gt;让我们将生成的证书和私钥添加到 Vault &lt;em&gt;kv&lt;/em&gt; secret 中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;VAULT_ADDR&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;http://localhost:8200
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;vault login root
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;vault secrets &lt;span class=&#34;nb&#34;&gt;enable&lt;/span&gt; -path&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;kubernetes-cluster1-secrets kv
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;vault secrets &lt;span class=&#34;nb&#34;&gt;enable&lt;/span&gt; -path&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;kubernetes-cluster2-secrets kv
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;vault kv put kubernetes-cluster1-secrets/istiod-service/certs &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;ca_key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;@certs/istiod-cluster1/ca-key.pem &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;ca_cert&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;@certs/istiod-cluster1/ca-cert.pem &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;cert_chain&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;@certs/istiod-cluster1/cert-chain.pem &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;root_cert&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;@certs/istiod-cluster1/root-cert.pem
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;vault kv put kubernetes-cluster2-secrets/istiod-service/certs &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;ca_key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;@certs/istiod-cluster2/ca-key.pem &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;ca_cert&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;@certs/istiod-cluster2/ca-cert.pem &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;cert_chain&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;@certs/istiod-cluster2/cert-chain.pem &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;root_cert&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;@certs/istiod-cluster2/root-cert.pem
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过限制对每个集群的这些证书和私钥的访问，绑定到基于 Kubernetes &lt;em&gt;istiod&lt;/em&gt; ServiceAccount 的身份验证后端：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;path &amp;#34;kubernetes-cluster1-secrets/istiod-service/certs&amp;#34; {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;  capabilities = [&amp;#34;read&amp;#34;]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;}&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; vault policy write istiod-certs-cluster1 -
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;path &amp;#34;kubernetes-cluster2-secrets/istiod-service/certs&amp;#34; {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;  capabilities = [&amp;#34;read&amp;#34;]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;}&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; vault policy write istiod-certs-cluster2 -
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;vault write auth/kubernetes-cluster1/role/istiod &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;bound_service_account_names&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;istiod &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;bound_service_account_namespaces&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;istio-system &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;policies&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;istiod-certs-cluster1 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;ttl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;24h
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;vault write auth/kubernetes-cluster2/role/istiod &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;bound_service_account_names&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;istiod &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;bound_service_account_namespaces&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;istio-system &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;policies&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;istiod-certs-cluster2  &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;ttl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;24h
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;部署-vault-inject-和-istio-helm-charts&#34;&gt;部署 &lt;em&gt;vault-inject&lt;/em&gt; 和 Istio Helm Charts&lt;/h2&gt;
&lt;p&gt;为了部署 Vault 注入器，我们将利用官方 Vault &lt;a href=&#34;https://github.com/hashicorp/vault-helm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Helm chart&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;helm repo add hashicorp https://helm.releases.hashicorp.com
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;helm repo update
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl --kubeconfig kubecfg1.yml create ns vault
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl --kubeconfig kubecfg2.yml create ns vault
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;helm --kubeconfig kubecfg1.yml install -n vault vault-inject hashicorp/vault --set &lt;span class=&#34;s2&#34;&gt;&amp;#34;injector.externalVaultAddr=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$VAULT_SERVER&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;helm --kubeconfig kubecfg2.yml install -n vault vault-inject hashicorp/vault --set &lt;span class=&#34;s2&#34;&gt;&amp;#34;injector.externalVaultAddr=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$VAULT_SERVER&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl --kubeconfig kubecfg1.yml -n vault get pods
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl --kubeconfig kubecfg2.yml -n vault get pods
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;NAME                                           READY   STATUS    RESTARTS   AGE
vault-inject-agent-injector-5776975795-9vt9w   1/1     Running   0          92s
NAME                                           READY   STATUS    RESTARTS   AGE
vault-inject-agent-injector-5776975795-9vjnx   1/1     Running   0          91s
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;要安装 Istio，我们将使用 Tetrate Istio Distro &lt;a href=&#34;https://github.com/tetratelabs/helm-charts&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Helm chart&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;helm repo add tetratelabs https://tetratelabs.github.io/helm-charts
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;helm repo update
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;helm --kubeconfig kubecfg1.yml install -n istio-system istio-base tetratelabs/base
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;helm --kubeconfig kubecfg2.yml install -n istio-system istio-base tetratelabs/base
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;helm --kubeconfig kubecfg1.yml install -n istio-system istio-istiod tetratelabs/istiod --values&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;./cluster1-values.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;helm --kubeconfig kubecfg2.yml install -n istio-system istio-istiod tetratelabs/istiod --values&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;./cluster2-values.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl --kubeconfig kubecfg1.yml -n istio-system get pods
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl --kubeconfig kubecfg2.yml -n istio-system get pods
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;请注意我们如何利用多个 Istio Helm chart 值覆盖来我们预期的目标：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注入一个 pilot Pod 环境变量 &lt;code&gt;ROOT_CA_DIR&lt;/code&gt; 来告诉 &lt;em&gt;istiod&lt;/em&gt; 从哪里获取证书和私钥&lt;/li&gt;
&lt;li&gt;告诉 &lt;code&gt;vault-agent-init&lt;/code&gt; 容器在 &lt;em&gt;istiod&lt;/em&gt; 容器之前运行，因此秘密安装在 &lt;code&gt;/vault/secrets&lt;/code&gt; 的卷中可用&lt;/li&gt;
&lt;li&gt;指示 Vault 注入器从正确的位置和数据密钥获取机密&lt;/li&gt;
&lt;li&gt;这样做时承担 Vault &lt;em&gt;istiod&lt;/em&gt; 角色&lt;/li&gt;
&lt;li&gt;覆盖默认的 Kubernetes auth-path，因为我们有多个集群&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;pilot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;env&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ROOT_CA_DIR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/vault/secrets&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;podAnnotations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;vault.hashicorp.com/agent-inject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;vault.hashicorp.com/agent-init-first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;vault.hashicorp.com/agent-inject-secret-ca-key.pem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;kubernetes-cluster1-secrets/istiod-service/certs&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;vault.hashicorp.com/agent-inject-template-ca-key.pem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        {{- with secret &amp;#34;kubernetes-cluster1-secrets/istiod-service/certs&amp;#34; -}}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        {{ .Data.ca_key }}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        {{ end -}}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;vault.hashicorp.com/agent-inject-secret-ca-cert.pem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;kubernetes-cluster1-secrets/istiod-service/certs&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;vault.hashicorp.com/agent-inject-template-ca-cert.pem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        {{- with secret &amp;#34;kubernetes-cluster1-secrets/istiod-service/certs&amp;#34; -}}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        {{ .Data.ca_cert }}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        {{ end -}}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;vault.hashicorp.com/agent-inject-secret-root-cert.pem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;kubernetes-cluster1-secrets/istiod-service/certs&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;vault.hashicorp.com/agent-inject-template-root-cert.pem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        {{- with secret &amp;#34;kubernetes-cluster1-secrets/istiod-service/certs&amp;#34; -}}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        {{ .Data.root_cert }}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        {{ end -}}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;vault.hashicorp.com/agent-inject-secret-cert-chain.pem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;kubernetes-cluster1-secrets/istiod-service/certs&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;vault.hashicorp.com/agent-inject-template-cert-chain.pem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        {{- with secret &amp;#34;kubernetes-cluster1-secrets/istiod-service/certs&amp;#34; -}}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        {{ .Data.cert_chain }}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        {{ end -}}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;vault.hashicorp.com/role&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;istiod&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;vault.hashicorp.com/auth-path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;auth/kubernetes-cluster1&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当我们查看 &lt;code&gt;vault-agent-init&lt;/code&gt; 容器日志时，我们应该看到类似这样的内容。我们的控制平面已经正确地获取了 Vault 注入的秘密。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl --kubeconfig kubecfg1.yml logs -n istio-system -l &lt;span class=&#34;nv&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;istiod -c vault-agent-init --tail&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;-1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;==&amp;gt; Vault agent started! Log data will stream in below:

  ==&amp;gt; Vault agent configuration:

                      Cgo: disabled
                Log Level: info
                  Version: Vault v1.12.0, built 2022-10-10T18:14:33Z
              Version Sha: 558abfa75702b5dab4c98e86b802fb9aef43b0eb

  2022-11-18T11:01:21.398Z [INFO]  sink.file: creating file sink
  2022-11-18T11:01:21.398Z [INFO]  sink.file: file sink configured: path=/home/vault/.vault-token mode=-rw-r-----
  2022-11-18T11:01:21.398Z [INFO]  template.server: starting template server
  2022-11-18T11:01:21.398Z [INFO]  sink.server: starting sink server
  2022-11-18T11:01:21.398Z [INFO]  auth.handler: starting auth handler
  2022-11-18T11:01:21.398Z [INFO]  auth.handler: authenticating
  2022-11-18T11:01:21.398Z [INFO] (runner) creating new runner (dry: false, once: false)
  2022-11-18T11:01:21.398Z [INFO] (runner) creating watcher
  2022-11-18T11:01:21.402Z [INFO]  auth.handler: authentication successful, sending token to sinks
  2022-11-18T11:01:21.402Z [INFO]  auth.handler: starting renewal process
  2022-11-18T11:01:21.402Z [INFO]  sink.file: token written: path=/home/vault/.vault-token
  2022-11-18T11:01:21.402Z [INFO]  sink.server: sink server stopped
  2022-11-18T11:01:21.402Z [INFO]  sinks finished, exiting
  2022-11-18T11:01:21.402Z [INFO]  template.server: template server received new token
  2022-11-18T11:01:21.402Z [INFO] (runner) stopping
  2022-11-18T11:01:21.402Z [INFO] (runner) creating new runner (dry: false, once: false)
  2022-11-18T11:01:21.402Z [INFO] (runner) creating watcher
  2022-11-18T11:01:21.402Z [INFO] (runner) starting
  2022-11-18T11:01:21.403Z [INFO]  auth.handler: renewed auth token
  2022-11-18T11:01:21.515Z [INFO] (runner) rendered &amp;#34;(dynamic)&amp;#34; =&amp;gt; &amp;#34;/vault/secrets/root-cert.pem&amp;#34;
  2022-11-18T11:01:21.515Z [INFO] (runner) rendered &amp;#34;(dynamic)&amp;#34; =&amp;gt; &amp;#34;/vault/secrets/ca-cert.pem&amp;#34;
  2022-11-18T11:01:21.515Z [INFO] (runner) rendered &amp;#34;(dynamic)&amp;#34; =&amp;gt; &amp;#34;/vault/secrets/cert-chain.pem&amp;#34;
  2022-11-18T11:01:21.516Z [INFO] (runner) rendered &amp;#34;(dynamic)&amp;#34; =&amp;gt; &amp;#34;/vault/secrets/ca-key.pem&amp;#34;
  2022-11-18T11:01:21.516Z [INFO] (runner) stopping
  2022-11-18T11:01:21.516Z [INFO]  template.server: template server stopped
  2022-11-18T11:01:21.516Z [INFO] (runner) received finish
  2022-11-18T11:01:21.516Z [INFO]  auth.handler: shutdown triggered, stopping lifetime watcher
  2022-11-18T11:01:21.516Z [INFO]  auth.handler: auth handler stopped
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当我们查看 &lt;code&gt;discovery&lt;/code&gt; 容器日志时，我们应该看到如下内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl --kubeconfig kubecfg1.yml logs -n istio-system -l &lt;span class=&#34;nv&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;istiod -c discovery --tail&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;-1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; info	Using istiod file format for signing ca files
  info	Use plugged-in cert at /vault/secrets/ca-key.pem
  info	x509 cert - Issuer: &amp;#34;CN=Intermediate CA,O=Istio,L=istiod-cluster1&amp;#34;, Subject: &amp;#34;&amp;#34;, SN: 39f67569f10d36a1fc91e9d82156b07d, NotBefore: &amp;#34;2022-11-18T11:11:59Z&amp;#34;, NotAfter: &amp;#34;2032-11-15T11:13:59Z&amp;#34;
  info	x509 cert - Issuer: &amp;#34;CN=Root CA,O=Istio&amp;#34;, Subject: &amp;#34;CN=Intermediate CA,O=Istio,L=istiod-cluster1&amp;#34;, SN: dedf298a147681d6, NotBefore: &amp;#34;2022-11-17T22:01:54Z&amp;#34;, NotAfter: &amp;#34;2024-11-16T22:01:54Z&amp;#34;
  info	x509 cert - Issuer: &amp;#34;CN=Root CA,O=Istio&amp;#34;, Subject: &amp;#34;CN=Root CA,O=Istio&amp;#34;, SN: f5bcd7e89bdb6248, NotBefore: &amp;#34;2022-11-17T22:01:52Z&amp;#34;, NotAfter: &amp;#34;2032-11-14T22:01:52Z&amp;#34;
  info	Istiod certificates are reloaded
  info	spiffe	Added 1 certs to trust domain cluster.local in peer cert verifier
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们可以看到我们的 Istio 控制平面已经正确地获取了我们的 Vault 注入证书和私钥。任务完成！&lt;/p&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;
&lt;p&gt;在本文中，我们已经使用外部 Vault 存储的证书和私钥成功引导了 Istio 控制平面。实现这一目标的步骤包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将证书和私钥存储在每个集群专用的 Vault 秘密安装路径中&lt;/li&gt;
&lt;li&gt;为每个集群设置 Kubernetes Vault 身份验证后端，链接到正确的 ServiceAccount&lt;/li&gt;
&lt;li&gt;定义适当的角色和策略以允许从 &lt;em&gt;istiod&lt;/em&gt; ServiceAccount 访问 Vault 机密&lt;/li&gt;
&lt;li&gt;将 Istio Pilot 引导程序参数调整为：
&lt;ul&gt;
&lt;li&gt;注入 &lt;em&gt;vault-agent-init&lt;/em&gt; sidecar&lt;/li&gt;
&lt;li&gt;获取包含我们的证书和私钥的正确 Vault 机密&lt;/li&gt;
&lt;li&gt;使用正确的角色和身份验证后端来这样做&lt;/li&gt;
&lt;li&gt;从正确的 vault secret 安装路径中获取证书和私钥&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们可以使用完全相同的技术来注入&lt;em&gt;入口网关&lt;/em&gt;和&lt;em&gt;出口网关&lt;/em&gt;证书。创建 Istio &lt;a href=&#34;https://istio.io/latest/docs/reference/config/networking/gateway/#ServerTLSSettings&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gateway&lt;/a&gt; 对象时，请确保将 &lt;em&gt;serverCertificate&lt;/em&gt;、&lt;em&gt;privateKey&lt;/em&gt; 和 &lt;em&gt;caCertificates&lt;/em&gt; 指向 &lt;code&gt;/vault/secrets&lt;/code&gt; 挂载卷中的正确文件。我们将把它作为练习留给读者。&lt;/p&gt;
&lt;p&gt;通过将证书注入绑定到 Kubernetes ServiceAccount，我们现在已将证书生命周期管理委托给外部秘密 Vault 实例。现在可以使用专用角色和写入/更新策略创建服务门户或 CI/CD 管道等外部流程，以提供必要的证书生命周期管理安全性。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Kubernetes 安全的 6 大零信任原则</title>
      <link>https://lib.jimmysong.io/blog/the-top-6-zero-trust-principles-for-kubernetes-security/</link>
      <pubDate>Tue, 13 Dec 2022 13:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/blog/the-top-6-zero-trust-principles-for-kubernetes-security/</guid>
      <description>&lt;p&gt;传统的网络安全依赖于围绕可信内部网络的强大防御边界，以将不良行为者拒之门外，将敏感数据拒之门外。在日益复杂的网络环境中，维护强大的边界越来越困难。&lt;/p&gt;
&lt;p&gt;零信任安全正在成为企业保护其传统和现代云原生应用程序的首选方法。零信任网络架构颠覆了边界安全的假设。在零信任网络中，每个资源都在内部受到保护，就好像它暴露在开放的互联网中一样。&lt;/p&gt;
&lt;p&gt;为了为行业和美国联邦政府建立零信任安全指南，美国国家标准与技术研究院 (NIST) 在一系列出版物中建立了零信任安全指南，从 SP 800-207 开始，介绍一般的零信任架构及其配套&lt;a href=&#34;https://tetr8.io/3zi85IC&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SP 800-204 微服务安全标准系列&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;以下是 NIST 的核心零信任架构原则以及建议在实践中应用它们的 Kubernetes 和 Istio 参考架构。&lt;/p&gt;
&lt;h2 id=&#34;零信任网络的六项原则&#34;&gt;零信任网络的六项原则&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;无论网络位置如何，所有通信都应该是安全的&lt;/strong&gt;。网络位置和可达性并不意味着信任。企业拥有或其他专用网络内部的访问请求必须满足与来自任何其他位置的通信相同的安全要求。零信任系统的一个标准是，您可以将它暴露在开放的互联网上，并且它仍然是安全的，没有未经授权的系统、数据或通信访问。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;所有通信都应加密&lt;/strong&gt;。线路上的加密可防止窃听，并确保消息真实且未被篡改。这意味着至少为所有通信实施 TLS，将&lt;a href=&#34;https://tetr8.io/3Na982k&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;mTLS 和相关的安全工作负载身份作为服务间通信的最佳实践&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对每个资源的访问都应该根据动态策略进行身份验证和授权&lt;/strong&gt;。在允许任何访问之前，对服务身份和最终用户凭据进行动态身份验证和授权。访问请求的动态上下文应该是访问决策的一部分。这可能包括行为属性，如与观察到的使用模式的偏差或请求资产的状态，如安装的软件版本、网络位置和请求的时间 / 日期。授予访问权限时，应以所需的最低权限授予它。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对资源的访问应该在空间上有界&lt;/strong&gt;。围绕资源的信任范围应尽可能小 —— 理想情况下为零。访问应该由每个能够检索和执行访问决策的资源前面的策略执行点 (PEP) 进行调解。这应该适用于所有入站、出站和服务到服务的访问。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;应及时限制对资源的访问&lt;/strong&gt;。身份验证和授权绑定到一个短暂的会话，之后它们必须重新建立。这可确保频繁做出访问决策，并使用最新的可用上下文。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对资源的访问应该是可观察的&lt;/strong&gt;。应收集并使用尽可能多的信息来改善安全态势。这允许持续监控所有资产的完整性和安全状况，并持续确保策略执行。此外，应反馈从观察中获得的见解以改进政策。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;为什么零信任安全性更好&#34;&gt;为什么零信任安全性更好&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;网络可达性不是授权&lt;/strong&gt;。与边界安全性不同，对服务的访问不会仅仅因为该服务可访问而被授予。它也必须经过明确的身份验证和授权。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;周边突破口的有限爆炸半径可防止攻击者横向移动&lt;/strong&gt;。经过身份验证和授权的工作负载免受边界破坏。及时限制凭证泄露的风险。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;细粒度策略&lt;/strong&gt;。空间边界允许高粒度的策略执行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;频繁的政策评估&lt;/strong&gt;。通过在短期会话上执行动态策略来及时绑定可确保授权基于最新的策略。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全、真实的通信&lt;/strong&gt;。加密和强大的工作负载身份限制了侦察并提供了通信的真实性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全状况和合规性的实时和可审计保证&lt;/strong&gt;。细粒度的可观察性允许实时保证和政策实施的事后审计以及故障排除和分析所需的数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;如何使用-istio-在-kubernetes-中实现零信任安全现代微服务应用程序的参考架构&#34;&gt;如何使用 Istio 在 Kubernetes 中实现零信任安全：现代微服务应用程序的参考架构&lt;/h2&gt;
&lt;p&gt;作为 NIST 的一般零信任架构标准的补充，NIST 还发布了如何将零信任原则专门应用于微服务应用程序的标准。这些标准由 Tetrate 创始工程师 Zack Butcher 共同编写，并编入&lt;a href=&#34;https://tetr8.io/3zi85IC&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NIST 的 SP 800-204 系列&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;在该标准中，NIST 建立了一个由 Kubernetes 组成的参考平台，用于编排和资源管理，并使用 Istio 服务网格提供核心安全功能。&lt;/p&gt;
&lt;h2 id=&#34;kubernetes-安全漏洞&#34;&gt;Kubernetes 安全漏洞&lt;/h2&gt;
&lt;p&gt;由于 Kubernetes 主要专注于编排、资源管理和基本连接，因此它将零信任网络安全问题留给其他方解决。Kubernetes 中的主要网络安全漏洞是（NIST SP 800-204B，§2.1.1）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;默认情况下不安全的通信&lt;/li&gt;
&lt;li&gt;缺少在 pod 之间强制执行 TLS 所需的内置证书管理机制&lt;/li&gt;
&lt;li&gt;缺乏身份和访问管理机制&lt;/li&gt;
&lt;li&gt;在 OSI L3 而非 L7 运行的防火墙策略，因此无法窥视数据包或做出元数据驱动的决策&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;服务网格填补了-kubernetes-的安全漏洞微服务应用程序的安全内核&#34;&gt;服务网格填补了 Kubernetes 的安全漏洞：微服务应用程序的安全内核&lt;/h2&gt;
&lt;p&gt;为了增强 Kubernetes 的安全性，Istio 充当 NIST 参考架构中的安全内核。Istio 满足参考监视器的三个要求（NIST SP 800-204B，§5.1）。Istio 是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不可旁路&lt;/li&gt;
&lt;li&gt;防止修改&lt;/li&gt;
&lt;li&gt;验证和测试是正确的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Envoy 数据平面通过每个服务前面以及每个入口和出口网关的不可绕过的策略执行点 (PEP) 提供参考监视器。服务网格代码独立于应用程序，因此它的生命周期可以独立管理，并且不能在运行时修改。而且，网格是系统的一个严格控制的元素，可以通过更多的眼睛和更仔细的检查来强化（NIST SP 800-204B，§5.1）。&lt;/p&gt;
&lt;p&gt;而且，作为专用的基础架构层，Istio 提供：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解决&lt;strong&gt;横切应用程序问题的&lt;/strong&gt;统一方法；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;快速解决这些问题的标准插件&lt;/strong&gt;和构建自定义插件的框架；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;简化&lt;/strong&gt;操作复杂性；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;易于管理&lt;/strong&gt;第三方开发人员和集成商；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;降低&lt;/strong&gt;开发和运营成本。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;下一步&#34;&gt;下一步&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;要从联邦安全标准的合著者那里了解有关&lt;strong&gt;如何实施零信任架构的更多信息，&lt;/strong&gt;&lt;a href=&#34;https://tetr8.io/zta-wp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;请阅读 Zack Butcher 的零信任架构白皮书&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;有关 NIST 安全建议的深入指南以及 Tetrate 如何帮助您实施该标准，请查看&lt;a href=&#34;https://tetr8.io/3Ccg6Qt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate 的微服务联邦安全要求指南&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果您正在寻找使用 Istio 投入生产的最快方式，请查看我们的开源&lt;a href=&#34;https://istio.tetratelabs.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate Istio Distro (TID)&lt;/a&gt;。TID 是经过审查的 Istio 上游发行版 ——Istio 的强化映像，具有持续支持，更易于安装、管理和升级。对于在联邦监管环境中运营的组织，Tetrate Istio Distro 是唯一&lt;a href=&#34;https://istio.tetratelabs.io/fips-request/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;具有可用 FIPS 验证构建&lt;/a&gt;的 Istio 发行版。&lt;/p&gt;
&lt;p&gt;如果您需要一种统一且一致的方式来保护和管理一系列应用程序中的服务，请查看 &lt;a href=&#34;https://tetrate.io/tetrate-service-bridge/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate Service Bridge (TSB)&lt;/a&gt;，这是我们基于 Istio 和 Envoy 构建的全面的边缘到工作负载应用程序连接平台。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>零信任 Kubernetes 安全的三大 mTLS 最佳实践</title>
      <link>https://lib.jimmysong.io/blog/top-3-mtls-best-practices-for-zero-trust-kubernetes-security/</link>
      <pubDate>Tue, 13 Dec 2022 10:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/blog/top-3-mtls-best-practices-for-zero-trust-kubernetes-security/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes&lt;/a&gt; 是编排现代云原生工作负载的事实标准。但是，它不提供开箱即用的安全通信。这意味着每个需要实施传输中加密以对其 Kubernetes 部署&lt;a href=&#34;https://tetr8.io/3FCXsDn&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;采用零信任安全态势的&lt;/a&gt;人都需要自己解决这个问题。&lt;/p&gt;
&lt;p&gt;幸运的是，有很多易于理解的方法可以实现，在本文中，我们将介绍在 Kubernetes 中实现双向 TLS（mTLS）的三大最佳实践。&lt;/p&gt;
&lt;h2 id=&#34;什么是-mtls为什么对安全来说很重要&#34;&gt;什么是 mTLS，为什么对安全来说很重要？&lt;/h2&gt;
&lt;p&gt;传输层安全性（SSL 的后继者）是部署最广泛的安全通信标准，在 HTTPS 中最为明显。TLS 非常适合在需要向客户端证明其身份的服务器之间建立既保密（防窃听）又真实（防篡改）的安全通信。但是，在双方都需要向对方证明身份的情况下（例如在 Kubernetes 应用程序中的微服务之间），TLS 是不够的。&lt;/p&gt;
&lt;p&gt;这就是双向 TLS (mTLS) 的用武之地。mTLS 是 TLS，但双方在建立安全通信通道之前向对方证明自己的身份。这是 Kubernetes 中安全通信所需的必要部分。mTLS 提供：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在线加密以确保机密性和防篡改&lt;/li&gt;
&lt;li&gt;相互的、加密的安全身份证明以确保真实性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要深入了解 mTLS 的工作原理，请参阅我们关于 &lt;a href=&#34;https://tetr8.io/3NEcL0Q&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;mTLS 的文章&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;mtls-的困难部分证明身份&#34;&gt;mTLS 的困难部分：证明身份&lt;/h2&gt;
&lt;p&gt;困难的部分是为服务建立一个安全机制来向彼此证明它们的身份。&lt;/p&gt;
&lt;p&gt;对于常规 TLS，过去很难管理向其客户端证明服务器身份的证书。&lt;a href=&#34;https://letsencrypt.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;随着 Let&amp;rsquo;s Encrypt&lt;/a&gt; 和 &lt;a href=&#34;https://en.wikipedia.org/wiki/Automatic_Certificate_Management_Environment&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ACME 协议&lt;/a&gt;的出现，这变得容易多了。然而，在像 Kubernetes 这样的动态（并且主要是私有的）环境中管理服务身份和证书更加困难，因为有许多通常是短暂的服务需要强大的、可证明的身份，但实际上不能使用公共 ACME 服务。&lt;/p&gt;
&lt;p&gt;推出自己的自动化证书管理系统是不切实际且有风险的。正确管理 mTLS 证书很困难，错误的后果很严重。您需要一种可信赖的、经过验证的方法来做到这一点；这就是服务网格的用武之地。&lt;/p&gt;
&lt;h2 id=&#34;使用服务网格nist-微服务安全标准&#34;&gt;使用服务网格，NIST 微服务安全标准&lt;/h2&gt;
&lt;p&gt;在&lt;a href=&#34;https://tetr8.io/3zi85IC&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;微服务安全标准&lt;/a&gt;中，美国国家标准与技术研究院 (NIST) 建议使用服务网格作为专用基础设施层来提供核心网络安全功能。这些核心功能之一是支持 mTLS 的强大服务身份和证书管理。而且，Istio——&lt;a href=&#34;https://tetr8.io/3UsARgY&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;使用最广泛的服务网格&lt;/a&gt;—— 为您提供开箱即用的 mTLS 支持。Istio 透明地提供基础设施 —— 包括安全命名、强大的服务身份和证书管理 —— 用于 Kubernetes 工作负载之间的安全通信以及与外界的连接。&lt;/p&gt;
&lt;p&gt;如果您想详细了解 NIST 的微服务安全标准以及 Tetrate 如何帮助满足这些标准，请查看 &lt;a href=&#34;https://tetr8.io/3Ccg6Qt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate 的微服务联邦安全要求指南&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;最佳实践一不要使用自签名证书&#34;&gt;最佳实践一：不要使用自签名证书&lt;/h2&gt;
&lt;p&gt;虽然 Istio 将为您实施 mTLS，但它默认使用自签名证书，因此您可以立即看到网格工作，只需最少的配置。这使得初始用户体验变得简单，但它并非不适合生产环境。NIST 的指南（NIST SP 800-204A，SM-DR12）是完全禁用生成自签名证书的能力。&lt;/p&gt;
&lt;h2 id=&#34;最佳实践二将-istio-的信任根植于现有-pki&#34;&gt;最佳实践二：将 Istio 的信任根植于现有 PKI&lt;/h2&gt;
&lt;p&gt;如果不应该使用 Istio 的默认自签名证书，还有什么选择？简短的回答是，您应该 &lt;a href=&#34;https://tetr8.io/3DDcAOJ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;将 Istio 的信任根植于您现有的公钥基础设施 (PKI) 中&lt;/a&gt;。这将通过确保它们都具有相同的信任根来实现跨其他集群中的 Istio 部署的通信。观看我们关于 &lt;a href=&#34;https://www.youtube.com/watch?v=4b3H7isIAnQ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;使用 Istio 的外部 CA 的视频，了解更多信息&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;最佳实践三使用中间证书&#34;&gt;最佳实践三：使用中间证书&lt;/h2&gt;
&lt;p&gt;确切地说，您如何让 Istio 信任您现有的 PKI？Tetrate 的创始工程师和 NIST 微服务安全标准的合著者 Zack Butcher &lt;a href=&#34;https://tetr8.io/3DDcAOJ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在此处提供了所有详细信息&lt;/a&gt;。但是，简而言之，我们的建议是使用您组织的根证书颁发机构颁发的中间证书。这将：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;允许细粒度的证书撤销，而无需同时在整个基础架构中强制使用新证书。&lt;/li&gt;
&lt;li&gt;启用签名证书的轻松轮换。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有关如何自动化 Istio 证书颁发机构 (CA) 轮换的分步说明，请参阅我们关于 &lt;a href=&#34;https://tetrate.io/blog/automate-istio-ca-rotation-in-production-at-scale/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在大规模生产中自动化 Istio CA 轮换的&lt;/a&gt;文章。&lt;/p&gt;
&lt;h2 id=&#34;下一步&#34;&gt;下一步&lt;/h2&gt;
&lt;p&gt;如果您不熟悉服务网格和 Kubernetes 安全性，我们在 &lt;a href=&#34;https://tetr8.io/academy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate Academy&lt;/a&gt; 提供一系列免费在线课程，可以让您快速了解 Istio 和 Envoy。&lt;/p&gt;
&lt;p&gt;如果您正在寻找一种快速将 Istio 投入生产的方法，请查看 &lt;a href=&#34;https://tetr8.io/tid&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate Istio Distribution (TID)&lt;/a&gt;。TID 是 Tetrate 的强化、完全上游的 Istio 发行版，具有经过 FIPS 验证的构建和支持。这是开始使用 Istio 的好方法，因为您知道您有一个值得信赖的发行版，有一个支持您的专家团队，并且如果需要，还可以选择快速获得 FIPS 合规性。&lt;/p&gt;
&lt;p&gt;一旦启动并运行 Istio，您可能需要更简单的方法来管理和保护您的服务，而不仅仅是 Istio 中可用的方法，这就是 Tetrate Service Bridge 的用武之地。您可以&lt;a href=&#34;https://tetr8.io/tsb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在这里&lt;/a&gt;详细了解 Tetrate Service Bridge 如何使服务网格更安全、更易于管理和弹性，或&lt;a href=&#34;https://tetr8.io/contact&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;联系我们进行快速演示&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;更多资源&#34;&gt;更多资源&lt;/h2&gt;
&lt;p&gt;观看我们的视频：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=4b3H7isIAnQ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;使用 Istio 的外部 CA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=nYJJ57WCkxE&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio Ingress Gateway 中的 SSL 证书&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=o8AnLk4Da7M&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;如何将服务网格用于混合云和遗留工作负载&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=mHR7rR83KjM&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;如何将 VM 工作负载连接到网格&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=E_D4bjvX8Xw&amp;amp;t=2s&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate 如何帮助美国国防部将 Istio 用于零信任架构&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>写给 Kubernetes 工程师的 mTLS 指南</title>
      <link>https://lib.jimmysong.io/blog/mtls-guide/</link>
      <pubDate>Thu, 16 Jun 2022 11:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/blog/mtls-guide/</guid>
      <description>&lt;h2 id=&#34;编者的话&#34;&gt;编者的话&lt;/h2&gt;
&lt;p&gt;本文翻译节选自 &lt;a href=&#34;https://buoyant.io/mtls-guide/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;A Kubernetes engineer’s guide to mTLS&lt;/a&gt;，为了便于读者理解，笔者对原文做了一点修改 &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。因为笔者最近在研究 Istio 中的身份认证及 SPIFFE，对如何在 Kubernetes 中应用 mTLS 以及为什么要使用 mTLS 产生了浓厚的兴趣，再回想起五年前手动安装 Kubernetes 时，因为给集群开启 TLS 问题而导致安装停滞不前。&lt;/p&gt;
&lt;p&gt;本文的主要观点是：在 Kubernetes 中我们不能仅依靠网络层加密，还需要 mTLS 来对客户端和服务端进行双向的传输层认证。本文将聚焦于 TLS 的真实性，以及证书管理的难题，说明服务网格对于在 Kubernetes 中开启 mTLS 带来的便利。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;Mutual TLS（双向 TLS），或称 mTLS，是 Kubernetes 中的一个热门话题，尤其是对于那些负责为应用程序提供传输层加密的人来说。但是，你有没有考虑过，什么是 mTLS，它提供什么样的安全，为什么需要 mTLS？&lt;/p&gt;
&lt;p&gt;本指南我将介绍什么是 mTLS，它与常规 TLS 的关系，以及为什么它与 Kubernetes 有关。我还会谈论 mTLS 的一些优缺点及替代方案。&lt;/p&gt;
&lt;h2 id=&#34;什么是-mtls&#34;&gt;什么是 mTLS？&lt;/h2&gt;
&lt;p&gt;对于常规 TLS，只需要服务端认证，mTLS 相对来说有一个额外的规定：客户端也要经过认证。但这意味着什么，为什么要这样做呢？&lt;/p&gt;
&lt;p&gt;在回答这些问题之前，我们需要先对 TLS 有一个基本的了解。TLS 是一个传输层协议，旨在为 TCP 连接提供安全保障（我们将在下面看到安全的确切含义）。TLS 在传输层工作，可以与任何使用 TCP 的应用层协议结合使用。例如，HTTPS 是 HTTP 与 TLS 的结合（HTTPS 中的 S 指的是 SSL，即 TLS 的前身），HTTP 不需要做任何改变来适应 TLS &lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;因为 TLS 中存在各种各样的问题，使得其从安全的角度来看是不理想的。TLS 规范复杂，而且没有得到充分的说明，有些地方并没有真正的意义，而且不管怎样，实现起来也不会 100% 符合 TLS 规范。&lt;/p&gt;
&lt;p&gt;尽管有这些担忧，TLS 还是无处不在。你现在就在使用 TLS：这个页面是通过 HTTPS 提供的，你可能在浏览器的 URL 栏中看到一个小锁图标。&lt;/p&gt;
&lt;h2 id=&#34;tls-提供什么样的安全性&#34;&gt;TLS 提供什么样的安全性？&lt;/h2&gt;
&lt;p&gt;大多数人把 TLS 与加密联系起来。但 TLS 不仅仅是这样。TLS 为连接提供了三种安全保证：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;真实性&lt;/strong&gt;：任何一方都能证明他们是自己所声称的身份。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;保密性&lt;/strong&gt;：其他人无法看到正在交换的数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;完整性&lt;/strong&gt;：收到的数据与发送的数据相同。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，虽然 TLS 确实给你提供了加密 —— 这就是它实现保密的方式 —— 但从 TLS 的角度来看，这对安全通信来说是不够的：你需要所有这三种属性。如果你没有真实性，那么有人就可以在连接的另一端进行欺骗。如果你没有完整性，那么有人可以修改通信中的关键信息。如果你没有保密性，那么任何人都可以监听。&lt;/p&gt;
&lt;p&gt;在这三种保证中，本文主要关注真实性。&lt;/p&gt;
&lt;h2 id=&#34;mtls-什么时候有用&#34;&gt;mTLS 什么时候有用？&lt;/h2&gt;
&lt;p&gt;回到我们最初的定义：mTLS 是简单的常规 TLS，其中有一个额外的规定，即客户端也要经过认证。有了对 TLS 的基本了解，我们现在可以解析这个声明了。TLS 保证了真实性，但默认情况下，这只发生在一个方向上：客户端对服务器进行认证，但服务器并不对客户端进行认证。&lt;/p&gt;
&lt;p&gt;为什么 TLS 的默认只在一个方向进行认证？因为客户端的身份往往是不相关的。例如，在加载这个页面时，你的浏览器已经验证了要访问的网站服务端的身份，但服务端并没有验证你的浏览器的身份。它实际上并不关心你的浏览器的身份。&lt;/p&gt;
&lt;p&gt;当然，不验证客户端身份对于提供网页服务是有意义的，但有很多类型的通信，客户端的身份也很重要。例如 API 调用：如果你调用像 GitHub 这样的服务，那么 GitHub 需要知道你是谁 —— 除其他原因外，这样他们就可以给你发送账单。如果不向 GitHub 提供某种客户端身份，你就不能对 GitHub 的 API 进行调用。&lt;/p&gt;
&lt;p&gt;但 GitHub 并不使用 mTLS。相反，你通过给 GitHub 一个秘密的认证令牌（token）来认证自己，这个令牌是创建账户时分配给你的。坦率地说，mTLS 设置起来很烦人（后面会有很多这方面的内容），所以如果你提供像 GitHub 这样的公共 API，你可能会只使用 auth token。&lt;/p&gt;
&lt;p&gt;然而，使用 mTLS 的认证有一些非常强大的 auth token 方法没有的优势。首先，mTLS 认证可以完全在应用程序之外完成，不需要任何应用程序级别的功能来创建、注册或管理身份。使用 auth token 时，在你进行第一次 GitHub API 调用之前，你需要登录网站，创建一个账户，获得令牌 &lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。GitHub 的 API 必须知道这个 auth token，并提供将其传递给 API 调用和管理它的方法。但有了 mTLS，一个全新的客户端就可以直接认证自己，即使从没有人见过它。而应用程序不需要知道任何关于认证的事情，也不需要提供端点来管理认证。&lt;/p&gt;
&lt;p&gt;综上所述，我们看到 mTLS 非常适合以下情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;你需要安全通信；&lt;/li&gt;
&lt;li&gt;你关心客户端的身份；&lt;/li&gt;
&lt;li&gt;不想为管理身份建立应用级流程；&lt;/li&gt;
&lt;li&gt;你可以管理实际实施的复杂性。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;有种场景具有所有这些特征，那就是微服务！&lt;/p&gt;
&lt;h2 id=&#34;使用-mtls-来保护微服务的安全&#34;&gt;使用 mTLS 来保护微服务的安全&lt;/h2&gt;
&lt;p&gt;mTLS 是保证微服务之间跨服务通信安全的好方法，原因就在上面。&lt;/p&gt;
&lt;p&gt;首先，你想要安全的通信。当我们把我们的应用程序拆分为多个服务时，我们最终会在这些服务之间的网络上发送敏感数据。任何能够进入网络的人都有可能读取这些敏感数据并伪造请求。&lt;/p&gt;
&lt;p&gt;第二，你关心客户端的身份。首先，你要确保你能知道调用是什么时候发生的，以便进行诊断，并正确记录指标等事项。此外，你可能想对这些身份进行授权（允许 A 调用 B 吗）。我们将在后面讨论更多关于授权的问题。&lt;/p&gt;
&lt;p&gt;第三，你并不真的想为管理服务身份建立应用级的流程。这不是业务逻辑，开发人员的时间最好用在其他地方。&lt;/p&gt;
&lt;p&gt;最后，如果你控制了平台，你实际上可以管理实施 mTLS 的复杂性。或者至少，比 GitHub 做得更好。在我们的 GitHub 例子中，每个用户都必须解决对 GitHub 进行身份验证的难题。这个挑战越难，对用户就越不利（对 GitHub 的底线也越不利）。但是，如果我们能在平台层面上实现 mTLS，我们就能一次性支付成本，而不是为每个服务或每个用户支付。&lt;/p&gt;
&lt;p&gt;综上所述，mTLS 非常适用于确保微服务之间的通信安全。但是有一个问题。&lt;/p&gt;
&lt;h2 id=&#34;实施-tls-的难点证书管理&#34;&gt;实施 TLS 的难点：证书管理&lt;/h2&gt;
&lt;p&gt;到目前为止，我们已经为 mTLS 描绘了一幅美好的图景。客户端和服务器愉快地相互认证，然后它们之间的通信就安全了。在实践中，阻碍 mTLS 工作的最大挑战是&lt;strong&gt;证书管理&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;TLS 中的认证是通过 &lt;strong&gt;公钥密码学&lt;/strong&gt;和&lt;strong&gt;公钥基础设施（PKI）进行的&lt;/strong&gt; 。这两者本身就是一个巨大的话题，在这篇文章中我们不会去讨论这些细节。但简而言之，它们涉及大量的证书。&lt;/p&gt;
&lt;p&gt;TLS 认证基于 X.509 证书。X.509 证书中包含&lt;strong&gt;身份&lt;/strong&gt;和&lt;strong&gt;公钥&lt;/strong&gt;。公钥有一个相应的&lt;strong&gt;私钥&lt;/strong&gt;，它不是证书的一部分。TLS 认证分两步，第一步是向对方展示你的证书，然后用私钥来证明证书中包含的身份属于你（公钥密码学的神奇之处在于，任何复制证书的人都无法进行这种证明，因为他们没有私钥。因此，你可以非常自由地使用证书，包括通过明文渠道发送证书或将其存储在公开场合）。&lt;/p&gt;
&lt;p&gt;X.509 证书是由一个 &lt;strong&gt;证书授权机构（Certificate Authority，简称 CA）&lt;/strong&gt; 签署，其中包括受 CA 信任该的身份。证书用于 TLS 认证的第二步：如果有人向你展示他们的身份并证明他们拥有该身份，你现在必须决定是否信任该身份。TLS 在这里使用了一个简单的规则：如果证书是由 CA 签署的，且你信任该 CA，那么你就应该信任该身份。如何验证 CA 对证书的签名？通过使用该 CA 本身的 X.509 证书。怎么知道是否应该信任该 CA？嗯，这个就与 TLS 协议本身无关，你会被外界告知应该信任它 &lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;CA 也签发证书。要获得证书，你首先要创建公钥和私钥对。你保留私钥，嗯，私钥 —— 千万不要在网络上发送私钥 —— 你向 CA 发送一个包含公钥和你身份的&lt;strong&gt;证书签名请求（Certificate Signing Request，简称 CSR）&lt;/strong&gt;。如果 CA 批准了这个请求，它就会创建和签署证书，并把证书发送给你。&lt;/p&gt;
&lt;p&gt;所以，证书管理就是就成了证书创建和分发流程中的挑战。我们需要确保有一个 CA，每个服务都可以向其发送 CSR，而且 CA 可以把证书发送给服务。我们还需要确保 CA 的安全，没有人能够访问任何服务的私钥，而且每个服务都知道自己的身份，而且不能被改变。&lt;/p&gt;
&lt;p&gt;在 Kubernetes 这样的环境中，服务实际上是一组不断变化的副本，可以随时创建或销毁，每个副本都需要自己的证书，这使得证书分发的挑战更加严峻。&lt;/p&gt;
&lt;p&gt;而且，由于在实践中，减少证书暴露损失（即当有人未经授权获得秘钥时）的最好方法是&lt;strong&gt;证书轮换&lt;/strong&gt;：缩短证书的寿命，在证书过期前重新颁发。这意味着我们需要每隔 n 小时为每个副本重复整个证书请求和签名的流程。&lt;/p&gt;
&lt;p&gt;如果我们想在多个集群之间扩展安全通信，需要一种方法来确保在一个集群中产生的身份可以被其他集群所使用，而且如果某个集群被破坏，我们可以禁用该集群而不禁用其他集群，这就进一步增加了证书管理的复杂性，因为这将产生更多的证书。&lt;/p&gt;
&lt;p&gt;总之，实施 mTLS 涉及到管理大量的证书，消耗大量的时间。这一挑战的复杂性令人生畏。但尽管如此，mTLS 在 Kubernetes 的世界里已经看到了一些复兴的趋势。这是因为有一门技术使 mTLS 变得可行：服务网格。&lt;/p&gt;
&lt;h2 id=&#34;kubernetesmtls-和服务网格&#34;&gt;Kubernetes、mTLS 和服务网格&lt;/h2&gt;
&lt;p&gt;服务网格是为集群开启 mTLS 的一个绝佳的机制。它不仅可以处理证书管理的挑战，还可以处理建立和接收 TLS 连接本身。它使得为集群添加 mTLS 成为一个零配置的操作：当你在 Kubernetes 集群上安装服务网格的时候，网格化的 pod 之间的所有通信都自动被 mTLS 化。对于像 mTLS 这样复杂的东西来说，这是很不可思议的。&lt;/p&gt;
&lt;p&gt;这一切之所以能够实现，是因为 Kubernetes 使一些本来非常复杂的事情，如 sidecar 模式，变得简单易行。得益于 Kubernetes，服务网格可以：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;透明地将一个 sidecar 代理注入到每个应用程序的 pod 中，并通过该代理路由所有进出 pod 的 TCP 通信。&lt;/li&gt;
&lt;li&gt;将一个内部 CA 作为其控制平面的一部分，签发 TLS 证书，并将该 CA 的证书安全地分配给所有代理。&lt;/li&gt;
&lt;li&gt;使用这个 CA 向每个代理发放短期的证书，与 pod 的 Kubernetes ServiceAccount 身份相联系。&lt;/li&gt;
&lt;li&gt;每隔 N 小时重新签发这些证书。&lt;/li&gt;
&lt;li&gt;让每个代理对所有使用这些证书的 pod 的连接执行 mTLS，确保客户端和服务器双方都有有效的身份。&lt;/li&gt;
&lt;li&gt;在连接进入应用程序之前，使用这些身份应用授权策略。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然，这只是一种简化的描述。例如，Linkerd 实际上使用了两级 CA，一个在集群层面，一个在全局层面，以便允许跨集群通信。Linkerd 可以使用多个信任根，所以你也可以轮流使用 CA。&lt;/p&gt;
&lt;h2 id=&#34;常见问题mtls-实际上能保护什么&#34;&gt;常见问题：mTLS 实际上能保护什么？&lt;/h2&gt;
&lt;p&gt;事实上，mTLS 只能用于防止特定的攻击：未经授权的网络访问。阻止入侵者嗅探网络请求中的内容，阻止冒充服务进行访问。&lt;/p&gt;
&lt;p&gt;但是有很多东西是 mTLS 不能保护的，例如未经授权主机访问。如果黑客入侵进了主机，mTLS 保护就无济于事了：入侵者可以读取密匙，嗅探或欺骗连接，颠覆 CA 并造成破坏，或任何其他恶意活动。&lt;/p&gt;
&lt;p&gt;确保 Kubernetes 的安全并不容易，实际上 mTLS 只解决了 Kubernetes 的一小部分安全漏洞。&lt;/p&gt;
&lt;h2 id=&#34;mtls-与-ipsec-或-wireguard-等网络层加密相比怎么样&#34;&gt;mTLS 与 IPSec 或 Wireguard 等网络层加密相比怎么样？&lt;/h2&gt;
&lt;p&gt;在 Kubernetes 中，一些 CNI 插件如 Calico 和 Cilium 可以通过 IPSec 或 Wireguard 等协议提供网络层加密。像服务网格一样，这种网络层加密可以提供传输层加密，而应用程序本身不需要做任何事情。&lt;/p&gt;
&lt;p&gt;虽然网络层加密可以与 mTLS 结合使用，作为一种深度防御的形式，但有几个原因可以说明网络层加密不足以替代 mTLS。&lt;/p&gt;
&lt;p&gt;如你所料，网络层加密的最大缺点是围绕身份的。因为它们在网络层工作，Wireguard 和 IPSec 只能提供网络身份，而不是工作负载身份。换句话说，它们不是使用工作负载本身固有的身份（比如 &lt;a href=&#34;https://spiffe.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIFFE&lt;/a&gt; 或者 Kubernetes 的 ServiceAccount），而是使用该工作负载运行的 IP 地址。&lt;/p&gt;
&lt;p&gt;依靠网络身份有一系列的问题，包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;身份终止在集群边界。Kubernetes 中的 IP 地址是以集群为范围的，当跨越集群边界的时候，你就必须想出另一种身份机制。因此，如果你正在进行跨集群通信，或者想要一个涵盖非 Kubernetes 工作负载的身份系统，IP 地址就会落空。&lt;/li&gt;
&lt;li&gt;没有直接的机制进行细粒度的授权。网络层方法不能访问七层信息，如 HTTP 路由、动词以及 gRPC 方法（有些复杂的 CNI 通过启动一个七层代理来解析数据，以服务网格模式来解决这个问题）。&lt;/li&gt;
&lt;li&gt;这不是零信任。零信任的安全模式要求我们将安全边界转移到尽可能细的层次。在 Kubernetes 中，这个单位就是 pod。有了服务网格的 mTLS，你的安全边界就在 pod 层面，但对于网络层的加密，你的安全边界最多只能在主机层面执行；你必须信任网络，等等。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;由于这些原因，在 Kubernetes 中 mTLS 为你提供了比仅仅依靠网络层加密更好的安全态势。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;本文删除了原文中的 Linkerd 安装的部分，将 Twillio 替换成国内读者比较熟悉的 GitHub。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;至少，在协议层面。在实践中，随着 HTTPS 的引入，HTTP 的使用方式肯定已经发生了变化。例如，像 HSTS 这样的功能现在被用来防止 HTTPS 可能发生的某些类型的攻击。&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;尽管这个客户端令牌流程没有使用 TLS 客户端认证，但它仍然依靠 TLS 服务器认证来保证安全。TLS 确保令牌来自 GitHub 而不是一个伪装者。&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;
&lt;p&gt;例如，你的浏览器带有知名公共 CA 的证书，如 Verisign、Digicert 等，这些证书在发布时被打包在一起。当你下载 Firefox 时，你相信 Mozilla 已经把正确的证书放进了浏览器。对于集群内的通信，我们将创建我们自己的 CA，这意味着我们也必须以一种安全的方式，将这个 CA 的证书分发给集群的每个部分，这些部分需要做出信任决定。&amp;#160;&lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Istio 安全最佳实践</title>
      <link>https://lib.jimmysong.io/blog/istio-security-best-practices/</link>
      <pubDate>Mon, 02 Aug 2021 13:05:42 +0800</pubDate>
      <guid>https://lib.jimmysong.io/blog/istio-security-best-practices/</guid>
      <description>&lt;h2 id=&#34;编者的话&#34;&gt;编者的话&lt;/h2&gt;
&lt;p&gt;本文译自 Istio 官方博客 &lt;a href=&#34;https://istio.io/latest/docs/ops/best-practices/security/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Security Best Practices&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Istio 的安全功能提供了强大的身份、策略、透明的 TLS 加密以及认证、授权和审计（AAA）工具来保护你的服务和数据。然而，为了充分安全地利用这些功能，必须注意遵循最佳实践。建议在继续阅读之前，先回顾一下&lt;a href=&#34;https://istio.io/latest/docs/concepts/security/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;安全概述&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;双向-tls&#34;&gt;双向 TLS&lt;/h2&gt;
&lt;p&gt;Istio 将尽可能使用&lt;a href=&#34;https://istio.io/latest/docs/concepts/security/#mutual-tls-authentication&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;双向 TLS&lt;/a&gt; 对流量进行&lt;a href=&#34;https://istio.io/latest/docs/ops/configuration/traffic-management/tls-configuration/#auto-mtls&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;自动&lt;/a&gt;加密。然而，代理在默认情况下被配置为&lt;a href=&#34;https://istio.io/latest/docs/concepts/security/#permissive-mode&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;许可模式（Permissive Mode）&lt;/a&gt;，这意味着他们将接受双向 TLS 和明文流量。&lt;/p&gt;
&lt;p&gt;虽然这是为了增量采用或允许来自没有 Istio sidecar 的客户端的流量的需要，但它也削弱了安全立场。建议在可能的情况下&lt;a href=&#34;https://istio.io/latest/docs/tasks/security/authentication/mtls-migration/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;迁移到严格模式（Strict Mode）&lt;/a&gt;，以强制使用双向 TLS。&lt;/p&gt;
&lt;p&gt;然而，仅靠双向 TLS 并不足以保证流量的安全，因为它只提供认证，而不是授权。这意味着，任何拥有有效证书的人仍然可以访问一个服务。&lt;/p&gt;
&lt;p&gt;为了完全锁定流量，建议配置&lt;a href=&#34;https://istio.io/latest/docs/tasks/security/authorization/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;授权策略&lt;/a&gt;。这允许创建细粒度的策略来允许或拒绝流量。例如，你可以只允许来自 &lt;code&gt;app&lt;/code&gt; 命名空间的请求访问 &lt;code&gt;hello-world&lt;/code&gt; 服务。&lt;/p&gt;
&lt;h2 id=&#34;授权策略&#34;&gt;授权策略&lt;/h2&gt;
&lt;p&gt;Istio &lt;a href=&#34;https://istio.io/latest/docs/concepts/security/#authorization&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;授权&lt;/a&gt;在 Istio 安全中起着关键作用。它需要努力配置正确的授权策略，以最好地保护你的集群。了解这些配置的影响是很重要的，因为 Istio 无法确定所有用户的正确授权。请全程关注本节内容。&lt;/p&gt;
&lt;h3 id=&#34;应用默认拒绝的授权策略&#34;&gt;应用默认拒绝的授权策略&lt;/h3&gt;
&lt;p&gt;我们建议你按照 default-deny 模式定义你的 Istio 授权策略，以增强集群的安全态势。默认拒绝授权模式意味着你的系统默认拒绝所有请求，而你定义了允许请求的条件。如果你错过了一些条件，流量将被意外地拒绝，而不是流量被意外地允许。后者通常是一个安全事件，而前者可能会导致糟糕的用户体验、服务中断或不符合你的 SLO/SLA。&lt;/p&gt;
&lt;p&gt;例如，在 &lt;a href=&#34;https://istio.io/latest/docs/tasks/security/authorization/authz-http/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HTTP 流量的授权任&lt;/a&gt;务中，名为 &lt;code&gt;allow-nothing&lt;/code&gt; 的授权策略确保所有流量在默认情况下被拒绝。从这里开始，其他授权策略根据特定条件允许流量。&lt;/p&gt;
&lt;h3 id=&#34;在路径规范化上定制你的系统&#34;&gt;在路径规范化上定制你的系统&lt;/h3&gt;
&lt;p&gt;Istio 授权策略可以基于 HTTP 请求中的 URL 路径。&lt;a href=&#34;https://en.wikipedia.org/wiki/URI_normalization&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;路径规范化（又称 URI 规范化）&lt;/a&gt;对传入请求的路径进行修改和标准化，从而使规范化后的路径能够以标准方式进行处理。语法上不同的路径在路径规范化后可能是等同的。&lt;/p&gt;
&lt;p&gt;Istio 支持以下请求路径的规范化方案，然后再根据授权策略进行评估和路由请求：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;选项&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;NONE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;不做任何规范化处理。Envoy 收到的任何信息都会被原封不动地转发给任何后端服务。&lt;/td&gt;
&lt;td&gt;&lt;code&gt;../%2Fa../b&lt;/code&gt; 由授权政策评估并发送给你的服务。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BASE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;这是目前 Istio 默认安装中使用的选项。这在 Envoy 代理上应用了 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto#envoy-v3-api-field-extensions-filters-network-http-connection-manager-v3-httpconnectionmanager-normalize-path&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;normalize_path&lt;/code&gt;&lt;/a&gt;选项，该选项遵循 &lt;a href=&#34;https://tools.ietf.org/html/rfc3986&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 3986&lt;/a&gt;，有额外的规范化处理，将反斜线转换成正斜线。&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/a/../b&lt;/code&gt; 被规范化为 &lt;code&gt;/b&lt;/code&gt;。&lt;code&gt;\da&lt;/code&gt; 被规范化微 &lt;code&gt;/da&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;MERGE_SLASHES&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;斜线在 &lt;em&gt;BASE&lt;/em&gt; 规范化之后被合并。&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/a//b&lt;/code&gt; 被规范化为 &lt;code&gt;/a/b&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DECODE_AND_MERGE_SLASHES&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;最严格的设置，当你默认允许所有流量。这个设置是推荐的，但要注意的是，你需要彻底测试你的授权策略路径。百分比编码的斜线和反斜线字符（&lt;code&gt;%2F&lt;/code&gt;、&lt;code&gt;%2f&lt;/code&gt;、&lt;code&gt;%5C&lt;/code&gt; 和 &lt;code&gt;%5c&lt;/code&gt;）在 MERGE_SLASHES 被规范化之前被解码为 &lt;code&gt;/&lt;/code&gt; 或 &lt;code&gt;\&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/a%2fb&lt;/code&gt; 被规范化为 &lt;code&gt;/a/b&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;该配置是通过 &lt;a href=&#34;https://istio.io/latest/docs/reference/config/istio.mesh.v1alpha1/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;mesh 配置&lt;/a&gt;中的 &lt;a href=&#34;https://istio.io/latest/docs/reference/config/istio.mesh.v1alpha1/#MeshConfig-ProxyPathNormalization&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;pathNormalization&lt;/code&gt;&lt;/a&gt;字段指定的。&lt;/p&gt;
&lt;p&gt;为了强调这一点，规范化算法是按照以下顺序进行的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;百分比解码 &lt;code&gt;%2F&lt;/code&gt;、&lt;code&gt;%2f&lt;/code&gt;、&lt;code&gt;%5C&lt;/code&gt; 和 &lt;code&gt;%5c&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc3986&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 3986&lt;/a&gt; 和其他由 Envoy 的 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto#envoy-v3-api-field-extensions-filters-network-http-connection-manager-v3-httpconnectionmanager-normalize-path&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;normalize_path&lt;/code&gt;&lt;/a&gt;选项实现的规范化。&lt;/li&gt;
&lt;li&gt;合并斜线&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;虽然这些规范化选项代表了来自 HTTP 标准和常见行业惯例的建议，但应用程序可以以它选择的任何方式解释一个 URL。当使用拒绝策略时，请确保你了解你的应用程序的行为方式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;配置的例子&#34;&gt;配置的例子&lt;/h3&gt;
&lt;p&gt;确保 Envoy 规范化请求路径以符合你的后端服务的期望，对你的系统安全至关重要。下面的例子可以作为你配置系统的参考。规范化的 URL 路径，如果选择了 &lt;code&gt;NONE&lt;/code&gt;，则是原始的 URL 路径将：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用来对照授权策略进行检查&lt;/li&gt;
&lt;li&gt;转发到后端应用程序&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;你的应用程序&lt;/th&gt;
&lt;th&gt;选择&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;依靠代理进行规范化处理&lt;/td&gt;
&lt;td&gt;&lt;code&gt;BASE&lt;/code&gt;, &lt;code&gt;MERGE_SLASHES&lt;/code&gt; or &lt;code&gt;DECODE_AND_MERGE_SLASHES&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;根据 &lt;a href=&#34;https://tools.ietf.org/html/rfc3986&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 3986&lt;/a&gt; 规范化请求路径，不合并斜线&lt;/td&gt;
&lt;td&gt;&lt;code&gt;BASE&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;根据 &lt;a href=&#34;https://tools.ietf.org/html/rfc3986&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 3986&lt;/a&gt; 规范化请求路径，合并斜线，但不对&lt;a href=&#34;https://tools.ietf.org/html/rfc3986#section-2.1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;百分比编码&lt;/a&gt;的斜线进行解码&lt;/td&gt;
&lt;td&gt;&lt;code&gt;MERGE_SLASHES&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;根据 &lt;a href=&#34;https://tools.ietf.org/html/rfc3986&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 3986&lt;/a&gt; 规范化请求路径，合并斜线，并对&lt;a href=&#34;https://tools.ietf.org/html/rfc3986#section-2.1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;百分比编码&lt;/a&gt;的斜线进行解码&lt;/td&gt;
&lt;td&gt;&lt;code&gt;DECODE_AND_MERGE_SLASHES&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;处理请求路径的方式与 &lt;a href=&#34;https://tools.ietf.org/html/rfc3986&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 3986&lt;/a&gt; 不兼容&lt;/td&gt;
&lt;td&gt;&lt;code&gt;NONE&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;如何配置&#34;&gt;如何配置&lt;/h3&gt;
&lt;p&gt;你可以使用 &lt;code&gt;istioctl&lt;/code&gt; 来更新 &lt;a href=&#34;https://istio.io/latest/docs/reference/config/istio.mesh.v1alpha1/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;mesh 配置&lt;/a&gt;：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ istioctl upgrade --set meshConfig.pathNormalization.normalization=DECODE_AND_MERGE_SLASHES
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;或通过改变你的 Operator 重写文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;l&#34;&gt;$ cat &amp;lt;&amp;lt;EOF &amp;gt; iop.yaml&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;install.istio.io/v1alpha1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;IstioOperator&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meshConfig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;pathNormalization&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;normalization&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;DECODE_AND_MERGE_SLASHES&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;EOF&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;$ istioctl install -f iop.yaml&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;另外，如果你想直接编辑 Mesh 配置，你可以将 &lt;a href=&#34;https://istio.io/latest/docs/reference/config/istio.mesh.v1alpha1/#MeshConfig-ProxyPathNormalization&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;pathNormalization&lt;/code&gt;&lt;/a&gt;添加到 &lt;a href=&#34;https://istio.io/latest/docs/reference/config/istio.mesh.v1alpha1/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;mesh 配置&lt;/a&gt;中，该配置是 &lt;code&gt;istio-&amp;lt;REVISION_ID&amp;gt;&lt;/code&gt; 的 CongfigMap，在 &lt;code&gt;istio-system&lt;/code&gt; 命名空间。例如，如果你选择 &lt;code&gt;DECODE_AND_MERGE_SLASHES&lt;/code&gt; 选项，你修改 mesh 配置如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mesh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|-&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;      ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;      pathNormalization:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        normalization: DECODE_AND_MERGE_SLASHES
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;      ...      &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;不太常见的规范化配置&#34;&gt;不太常见的规范化配置&lt;/h3&gt;
&lt;h4 id=&#34;大小写规范化&#34;&gt;大小写规范化&lt;/h4&gt;
&lt;p&gt;在某些环境中，以不区分大小写的方式比较授权策略中的路径可能是有用的。例如，将 &lt;code&gt;https://myurl/get&lt;/code&gt; 和 &lt;code&gt;https://myurl/GeT&lt;/code&gt; 等同对待。在这些情况下，可以使用下面的 &lt;code&gt;EnvoyFilter&lt;/code&gt;。这个过滤器将改变用于比较的路径和呈现给应用程序的路径。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.istio.io/v1alpha3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;EnvoyFilter&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ingress-case-insensitive&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio-system&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;configPatches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;applyTo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;HTTP_FILTER&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;GATEWAY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;listener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;filterChain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;envoy.filters.network.http_connection_manager&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;subFilter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;envoy.filters.http.router&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;patch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;operation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;INSERT_BEFORE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;envoy.lua&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;typed_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;@type&amp;#34;: &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;inlineCode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;              function envoy_on_request(request_handle)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                local path = request_handle:headers():get(&amp;#34;:path&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                request_handle:headers():replace(&amp;#34;:path&amp;#34;, string.lower(path))
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;              end              &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;了解流量采集的限制&#34;&gt;了解流量采集的限制&lt;/h2&gt;
&lt;p&gt;Istio sidecar 的工作原理是捕获入站流量和出站流量，并通过 sidecar 代理引导它们。&lt;/p&gt;
&lt;p&gt;然而，并不是所有的流量都被捕获：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重定向只处理基于 TCP 的流量。任何 UDP 或 ICMP 数据包都不会被捕获或修改。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/docs/ops/deployment/requirements/#ports-used-by-istio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Sidecar 使用的许多端口&lt;/a&gt;以及 22 号端口的入站捕获被禁用。这个列表可以通过 &lt;code&gt;traffic.sidecar.istio.io/excludeInboundPorts&lt;/code&gt; 等选项来扩展。&lt;/li&gt;
&lt;li&gt;出站捕获同样可以通过 &lt;code&gt;traffic.sidecar.istio.io/excludeOutboundPorts&lt;/code&gt; 等设置或其他方式减少。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般来说，应用程序和其 sidecar 代理之间的安全边界最小。对 sidecar 的配置是以每个模块为基础的，并且两者都在同一个网络 / 进程命名空间中运行。因此，应用程序可能有能力删除重定向规则，并删除、改变、终止或替换 sidecar 代理。这允许一个 pod 故意绕过它的 sidecar 的出站流量或故意让入站流量绕过它的 sidecar。&lt;/p&gt;
&lt;p&gt;因此，依靠 Istio 无条件地捕获所有流量是不安全的。相反，安全边界是客户端不能绕过另一个 pod 的 sidecar。&lt;/p&gt;
&lt;p&gt;例如，如果我在 9080 端口运行 &lt;code&gt;review&lt;/code&gt; 应用程序，我可以假设来自 &lt;code&gt;productpage&lt;/code&gt; 应用程序的所有流量将被 sidecar 代理捕获，其中 Istio 认证和授权策略可能适用。&lt;/p&gt;
&lt;h3 id=&#34;利用-networkpolicy-进行深度防御&#34;&gt;利用 &lt;code&gt;NetworkPolicy&lt;/code&gt; 进行深度防御&lt;/h3&gt;
&lt;p&gt;为了进一步确保流量安全，Istio 策略可以与 Kubernetes &lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/network-policies/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;网络策略&lt;/a&gt;分层。这实现了一个强大的&lt;a href=&#34;https://en.wikipedia.org/wiki/Defense_in_depth_%28computing%29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;深度防御&lt;/a&gt;策略，可以用来进一步加强你的网格的安全性。&lt;/p&gt;
&lt;p&gt;例如，你可以选择只允许流量到我们 &lt;code&gt;review&lt;/code&gt; 应用程序的 &lt;code&gt;9080&lt;/code&gt; 端口。如果集群中的 Pod 被破坏或存在安全漏洞，这可能会限制或阻止攻击者的进展。&lt;/p&gt;
&lt;h3 id=&#34;确保出口流量的安全&#34;&gt;确保出口流量的安全&lt;/h3&gt;
&lt;p&gt;一个常见的误解是，像 &lt;a href=&#34;https://istio.io/latest/docs/tasks/traffic-management/egress/egress-control/#envoy-passthrough-to-external-services&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;outboundTrafficPolicy: REGISTRY_ONLY&lt;/code&gt;&lt;/a&gt; 作为一个安全策略，防止所有对未申报服务的访问。然而，如上所述，这并不是一个强大的安全边界，应该被认为是尽力而为。&lt;/p&gt;
&lt;p&gt;虽然这对防止意外的依赖性很有用，但如果你想保证出口流量的安全，并强制要求所有出站流量通过代理，你应该依靠 &lt;a href=&#34;https://istio.io/latest/docs/tasks/traffic-management/egress/egress-gateway/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Egress Gateway&lt;/a&gt;。当与&lt;a href=&#34;https://istio.io/latest/docs/tasks/traffic-management/egress/egress-gateway/#apply-kubernetes-network-policies&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;网络策略&lt;/a&gt;相结合时，你可以强制所有的流量，或一些子集，通过出口网关。这确保了即使客户意外地或恶意地绕过他们的 sidecar，该请求也会被阻止。&lt;/p&gt;
&lt;h2 id=&#34;当使用-tls-发起时在目的地规则中配置-tls-验证&#34;&gt;当使用 TLS 发起时，在目的地规则中配置 TLS 验证&lt;/h2&gt;
&lt;p&gt;Istio 提供了从一个 sidecar 代理或网关&lt;a href=&#34;https://istio.io/latest/docs/tasks/traffic-management/egress/egress-tls-origination/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;发起 TLS&lt;/a&gt; 的能力。这使得发送纯文本 HTTP 流量的应用程序能够透明地“升级“到 HTTPS。&lt;/p&gt;
&lt;p&gt;在配置 &lt;code&gt;DestinationRule&lt;/code&gt; 的 &lt;code&gt;tls&lt;/code&gt; 设置时，必须注意指定 &lt;code&gt;caCertificates&lt;/code&gt; 字段。如果没有设置，服务器的证书将不会被验证。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.istio.io/v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;DestinationRule&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;google-tls&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;google.com&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;trafficPolicy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;SIMPLE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;caCertificates&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/etc/ssl/certs/ca-certificates.crt&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;网关&#34;&gt;网关&lt;/h2&gt;
&lt;p&gt;在运行 Istio &lt;a href=&#34;https://istio.io/latest/docs/tasks/traffic-management/ingress/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;网关&lt;/a&gt;时，涉及一些资源：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Gateways&lt;/code&gt;，它控制网关的端口和 TLS 设置。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;VirtualServices&lt;/code&gt;，控制路由逻辑。这些都是通过在网关字段中的直接引用和在网关和 &lt;code&gt;VirtualService&lt;/code&gt; 的 &lt;code&gt;hosts&lt;/code&gt; 字段中的相互约定与 &lt;code&gt;Gateway&lt;/code&gt; 相关联的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;限制-gateway-创建权限&#34;&gt;限制 &lt;code&gt;Gateway&lt;/code&gt; 创建权限&lt;/h3&gt;
&lt;p&gt;建议将 Gateway 资源的创建限制在受信任的集群管理员。这可以通过 &lt;a href=&#34;https://kubernetes.io/docs/reference/access-authn-authz/rbac/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes RBAC 策略&lt;/a&gt;或 &lt;a href=&#34;https://www.openpolicyagent.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Open Policy Agent&lt;/a&gt; 等工具实现。&lt;/p&gt;
&lt;h3 id=&#34;避免过于宽泛的-hosts-配置&#34;&gt;避免过于宽泛的 &lt;code&gt;hosts&lt;/code&gt; 配置&lt;/h3&gt;
&lt;p&gt;在可能的情况下，避免在 &lt;code&gt;Gateway&lt;/code&gt; 中进行过于广泛的 &lt;code&gt;hosts&lt;/code&gt; 设置。&lt;/p&gt;
&lt;p&gt;例如，这种配置将允许任何 VirtualService 绑定到 &lt;code&gt;Gateway&lt;/code&gt;，可能会暴露出意外的域：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;servers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;protocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;HTTP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hosts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这应该被锁定，只允许特定域或特定命名空间。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;servers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;protocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;HTTP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hosts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;foo.example.com&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 只允许 foo.example.com 的 VirtualServices&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;default/bar.example.com&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 只允许 default 命名空间 bar.example.com 的 VirtualServices&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;route-namespace/*&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 只允许 route-namespace 命名空间的 VirtualServices&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;隔离敏感服务&#34;&gt;隔离敏感服务&lt;/h3&gt;
&lt;p&gt;可能需要对敏感服务实施更严格的物理隔离。例如，你可能想为敏感的 &lt;code&gt;payment.example.com&lt;/code&gt; 运行一个&lt;a href=&#34;https://istio.io/latest/docs/setup/install/istioctl/#configure-gateways&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;专用的网关实例&lt;/a&gt;，而为不太敏感的域名如 &lt;code&gt;blog.example.com&lt;/code&gt; 和 &lt;code&gt;store.example.com&lt;/code&gt; 使用一个单一的共享网关实例。这可以提供一个更强大的深度防御，并有助于满足某些监管合规准则。&lt;/p&gt;
&lt;h3 id=&#34;在放宽的-sni-主机匹配下明确地禁用所有敏感的-http-主机&#34;&gt;在放宽的 SNI 主机匹配下，明确地禁用所有敏感的 http 主机&lt;/h3&gt;
&lt;p&gt;在不同的主机上使用多个 &lt;code&gt;Gateways&lt;/code&gt; 来定义双向 TLS 和简单 TLS 是合理的。例如，对 SNI 主机 &lt;code&gt;admin.example.com&lt;/code&gt; 使用双向 TLS，对 SNI 主机 &lt;code&gt;*.example.com&lt;/code&gt; 使用简单 TLS。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Gateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;guestgateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;istio&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ingressgateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;servers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;443&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;https&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;protocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;HTTPS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hosts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;*.example.com&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;SIMPLE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Gateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;admingateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;istio&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ingressgateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;servers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;443&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;https&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;protocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;HTTPS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hosts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;admin.example.com&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;MUTUAL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果有必要进行上述操作，强烈建议在附加到 &lt;code&gt;*.example.com&lt;/code&gt; 的 &lt;code&gt;VirtualService&lt;/code&gt; 中明确禁用 http 主机 &lt;code&gt;admin.example.com&lt;/code&gt;。原因是目前底层的 &lt;a href=&#34;https://github.com/envoyproxy/envoy/issues/6767&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;envoy 代理不需要&lt;/a&gt; http 1 头 &lt;code&gt;Host&lt;/code&gt; 或 http 2 伪头&lt;code&gt;:authority&lt;/code&gt; 的 SNI 约束后，攻击者可以重新使用 guest-SNI TLS 连接来访问 admin &lt;code&gt;VirtualService&lt;/code&gt;。http 响应代码 421 是为这种 &lt;code&gt;Host&lt;/code&gt; SNI 不匹配而设计的，可以用来实现禁用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.istio.io/v1alpha3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;VirtualService&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;disable-sensitive&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hosts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;admin.example.com&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;gateways&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;guestgateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;uri&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;prefix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;fault&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;abort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;percentage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;httpStatus&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;421&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;destination&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;dest.default.cluster.local&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;协议检测&#34;&gt;协议检测&lt;/h2&gt;
&lt;p&gt;Istio 会&lt;a href=&#34;https://istio.io/latest/docs/ops/configuration/traffic-management/protocol-selection/#automatic-protocol-selection&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;自动确定&lt;/a&gt;它所看到的流量的&lt;a href=&#34;https://istio.io/latest/docs/ops/configuration/traffic-management/protocol-selection/#automatic-protocol-selection&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;协议&lt;/a&gt;。为了避免意外或故意的漏检，可能会导致意外的流量行为，建议在可能的情况下&lt;a href=&#34;https://istio.io/latest/docs/ops/configuration/traffic-management/protocol-selection/#explicit-protocol-selection&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;明确声明协议&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;cni&#34;&gt;CNI&lt;/h2&gt;
&lt;p&gt;为了透明地捕获所有流量，Istio 依赖于 &lt;code&gt;istio-init&lt;/code&gt; &lt;code&gt;initContainer&lt;/code&gt; 所配置的 &lt;code&gt;iptables&lt;/code&gt; 规则。这增加了一个&lt;a href=&#34;https://istio.io/latest/docs/ops/deployment/requirements/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;要求&lt;/a&gt;，即 &lt;code&gt;NET_ADMIN&lt;/code&gt; 和 &lt;code&gt;NET_RAW&lt;/code&gt;&lt;a href=&#34;https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-capabilities-for-a-container&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;的能力&lt;/a&gt;必须对 pod 可用。&lt;/p&gt;
&lt;p&gt;为了减少授予 pod 的权限，Istio 提供了一个 &lt;a href=&#34;https://istio.io/latest/docs/setup/additional-setup/cni/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNI 插件&lt;/a&gt;，它消除了这个要求。&lt;/p&gt;
&lt;p&gt;Istio CNI 插件目前是一个 alpha 功能。&lt;/p&gt;
&lt;h2 id=&#34;使用加固的-docker-镜像&#34;&gt;使用加固的 docker 镜像&lt;/h2&gt;
&lt;p&gt;Istio 的默认 docker 镜像，包括那些由控制平面、网关和 sidecar 代理运行的镜像，都是基于 ubuntu 的。这提供了各种工具，如 bash 和 curl，这以方便为代价，增加了攻击面。&lt;/p&gt;
&lt;p&gt;Istio 还提供了一个基于&lt;a href=&#34;https://istio.io/latest/docs/ops/configuration/security/harden-docker-images/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;无发行版镜像的&lt;/a&gt;小型镜像，减少了镜像中的依赖性。&lt;/p&gt;
&lt;p&gt;无发行版的镜像目前是一个 alpha 功能。&lt;/p&gt;
&lt;h2 id=&#34;发布和安全策略&#34;&gt;发布和安全策略&lt;/h2&gt;
&lt;p&gt;为了确保你的集群有最新的已知漏洞的安全补丁，重要的是保持在 Istio 的最新补丁版本上，并确保你在一个&lt;a href=&#34;https://istio.io/latest/docs/releases/supported-releases&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;支持的版本&lt;/a&gt;上，仍在接收安全补丁。&lt;/p&gt;
&lt;h2 id=&#34;检测无效配置&#34;&gt;检测无效配置&lt;/h2&gt;
&lt;p&gt;虽然 Istio 在创建资源时提供了验证，但这些检查不能抓住所有阻止配置在网格中分布的问题。这可能导致应用的策略被意外地忽略，从而导致意外的结果。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在应用配置之前或之后运行 &lt;code&gt;istioctl analyze&lt;/code&gt;，以确保配置有效。&lt;/li&gt;
&lt;li&gt;监控控制平面的拒绝配置。除了日志之外，这些都是通过 &lt;code&gt;pilot_total_xds_rejects&lt;/code&gt; 指标来显示的。&lt;/li&gt;
&lt;li&gt;测试你的配置，以确保它给出预期的结果。对于安全策略来说，运行正面和负面的测试是有用的，以确保你不会意外地限制过多或过少的流量。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;避免-alpha-和实验性功能&#34;&gt;避免 alpha 和实验性功能&lt;/h2&gt;
&lt;p&gt;所有 Istio 功能和 API 都被分配了一个&lt;a href=&#34;https://istio.io/latest/docs/releases/feature-stages/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;功能状态&lt;/a&gt;，定义了它的稳定性、废止政策和安全政策。&lt;/p&gt;
&lt;p&gt;由于 alpha 和实验性功能没有那么强的安全保证，建议尽可能避免使用它们。在这些功能中发现的安全问题可能不会被立即修复，或者不遵循我们的标准&lt;a href=&#34;https://istio.io/latest/docs/releases/security-vulnerabilities/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;安全漏洞&lt;/a&gt;程序。&lt;/p&gt;
&lt;p&gt;要确定在你的集群中使用的功能状态，请查阅 &lt;a href=&#34;https://istio.io/latest/docs/releases/feature-stages/#istio-features&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 功能&lt;/a&gt;列表。&lt;/p&gt;
&lt;h2 id=&#34;锁定端口&#34;&gt;锁定端口&lt;/h2&gt;
&lt;p&gt;Istio 配置了&lt;a href=&#34;https://istio.io/latest/docs/ops/deployment/requirements/#ports-used-by-istio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;各种&lt;/a&gt;可能被锁定的&lt;a href=&#34;https://istio.io/latest/docs/ops/deployment/requirements/#ports-used-by-istio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;端口&lt;/a&gt;，以提高安全性。&lt;/p&gt;
&lt;h3 id=&#34;控制平面&#34;&gt;控制平面&lt;/h3&gt;
&lt;p&gt;Istiod 为方便起见，默认暴露了几个未经认证的明文端口。如果需要，这些端口可以被关闭。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;8080&lt;/code&gt; 端口暴露了调试接口，它提供了对集群状态的各种细节的读取权限。这可以通过在 Istiod 上设置环境变量 &lt;code&gt;ENABLE_DEBUG_ON_HTTP=false&lt;/code&gt; 来禁用。警告：许多 &lt;code&gt;istioctl&lt;/code&gt; 命令都依赖于这个接口，如果它被禁用，将无法运行。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;15010&lt;/code&gt; 端口通过明文暴露 XDS 服务。这可以通过在 Istiod 部署中添加 &lt;code&gt;--grpcAddr=&amp;quot;&amp;quot;&lt;/code&gt; 标志来禁用。注意：高度敏感的服务，如证书签署和分发服务，绝不通过明文提供。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数据平面&#34;&gt;数据平面&lt;/h3&gt;
&lt;p&gt;该代理暴露了各种端口。对外暴露的是 &lt;code&gt;15090&lt;/code&gt; 端口（遥测）和 &lt;code&gt;15021&lt;/code&gt; 端口（健康检查）。端口 &lt;code&gt;15020&lt;/code&gt; 和 &lt;code&gt;15000&lt;/code&gt; 提供调试端点。这些端口只在本地主机上暴露。因此，运行在与代理相同的 pod 中的应用程序可以访问；在 sidecar 和应用程序之间没有信任边界。&lt;/p&gt;
&lt;h2 id=&#34;配置第三方服务账户令牌&#34;&gt;配置第三方服务账户令牌&lt;/h2&gt;
&lt;p&gt;为了与 Istio 控制平面进行认证，Istio 代理将使用服务账户令牌。Kubernetes 支持这种令牌的两种形式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第三方令牌，有一个范围内的受众和到期时间。&lt;/li&gt;
&lt;li&gt;第一方令牌，没有过期，并被安装到所有的 Pod 中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于第一方令牌的属性不太安全，Istio 将默认使用第三方令牌。然而，这个功能并不是在所有的 Kubernetes 平台上都启用的。&lt;/p&gt;
&lt;p&gt;如果你使用 &lt;code&gt;istioctl&lt;/code&gt; 来安装，将会自动检测到支持。这也可以手动完成，通过传递 &lt;code&gt;--set values.global.jwtPolicy=third-party-jwt&lt;/code&gt; 或 -&lt;code&gt;-set values.global.jwtPolicy=first-party-jwt&lt;/code&gt; 进行配置。&lt;/p&gt;
&lt;p&gt;要确定你的集群是否支持第三方令牌，寻找 &lt;code&gt;TokenRequest&lt;/code&gt; API。如果这没有返回响应，那么该功能就不被支持。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl get --raw /api/v1 &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; jq &lt;span class=&#34;s1&#34;&gt;&amp;#39;.resources[] | select(.name | index(&amp;#34;serviceaccounts/token&amp;#34;))&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;serviceaccounts/token&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;singularName&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;namespaced&amp;#34;&lt;/span&gt;: true,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;group&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;authentication.k8s.io&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;v1&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;kind&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;TokenRequest&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;verbs&amp;#34;&lt;/span&gt;: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;create&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;虽然现在大多数云提供商都支持这一功能，但在 Kubernetes 1.20 之前，许多本地开发工具和自定义安装可能不支持。要启用该功能，请参考 &lt;a href=&#34;https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#service-account-token-volume-projection&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes 文档&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;配置下游连接的限制&#34;&gt;配置下游连接的限制&lt;/h2&gt;
&lt;p&gt;默认情况下，Istio（和 Envoy）对下游连接的数量没有限制。这可能被恶意行为者利用（见&lt;a href=&#34;https://istio.io/latest/news/security/istio-security-2020-007/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;安全公告 2020-007&lt;/a&gt;）。为了解决这个问题，你必须为你的环境配置一个适当的连接限制。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;通过下载 &lt;a href=&#34;https://istio.io/latest/news/security/istio-security-2020-007/custom-bootstrap-runtime.yaml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;custom-bootstrap-runtime.yaml &lt;/a&gt;创建一个 ConfigMap。根据你的部署中各个网关实例所需的并发连接数，更新 ConfigMap 中的 &lt;code&gt;global_downstream_max_connections&lt;/code&gt;。一旦达到限制，Envoy 将开始拒绝 tcp 连接。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl -n istio-system apply -f custom-bootstrap-runtime.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;入口网关部署打补丁，以使用上述配置。下载 &lt;a href=&#34;https://istio.io/latest/news/security/istio-security-2020-007/gateway-patch.yaml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gateway-patch.yaml&lt;/a&gt; 并使用以下命令应用它。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl --namespace istio-system patch deployment istio-ingressgateway --patch &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;cat gateway-patch.yaml&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;确认新的限制已经到位。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ &lt;span class=&#34;nv&#34;&gt;ISTIO_INGRESS_PODNAME&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;kubectl get pods -l &lt;span class=&#34;nv&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;istio-ingressgateway -n istio-system  -o &lt;span class=&#34;nv&#34;&gt;jsonpath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;{.items[0].metadata.name}&amp;#34;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl --namespace istio-system &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -i -t  &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ISTIO_INGRESS_PODNAME&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; -c istio-proxy -- curl -sS http://localhost:15000/runtime
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;entries&amp;#34;&lt;/span&gt;: &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;overload.global_downstream_max_connections&amp;#34;&lt;/span&gt;: &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;layer_values&amp;#34;&lt;/span&gt;: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;s2&#34;&gt;&amp;#34;250000&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;final_value&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;250000&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;layers&amp;#34;&lt;/span&gt;: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;static_layer_0&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;admin&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://lib.jimmysong.io/kubernetes-hardening-guidance/kubernetes-hardening-guidance-english/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://lib.jimmysong.io/kubernetes-hardening-guidance/kubernetes-hardening-guidance-english/</guid>
      <description>&lt;h1 id=&#34;kubernetes-hardening-guidance&#34;&gt;Kubernetes Hardening Guidance&lt;/h1&gt;
&lt;p&gt;National Security Agency Cybersecurity and Infrastructure Security Agency&lt;/p&gt;
&lt;p&gt;Cybersecurity Technical Report&lt;/p&gt;
&lt;h2 id=&#34;notices-and-history&#34;&gt;Notices and history&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Document change history&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;August 2021 1.0 Initial release&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Disclaimer of warranties and endorsement&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The information and opinions contained in this document are provided &amp;ldquo;as is&amp;rdquo; and without any warranties or guarantees. Reference herein to any specific commercial products, process, or service by trade name, trademark, manufacturer, or otherwise, does not necessarily constitute or imply its endorsement, recommendation, or favoring by the United States Government, and this guidance shall not be used for advertising or product endorsement purposes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Trademark recognition&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Kubernetes is a registered trademark of The Linux Foundation. ▪ SELinux is a registered trademark of the National Security Agency. ▪ AppArmor is a registered trademark of SUSE LLC. ▪ Windows and Hyper-V are registered trademarks of Microsoft Corporation. ▪ ETCD is a registered trademark of CoreOS, Inc. ▪ Syslog-ng is a registered trademark of One Identity Software International Designated Activity Company. ▪ Prometheus is a registered trademark of The Linux Foundation. ▪ Grafana is a registered trademark of Raintank, Inc. dba Grafana Labs ▪ Elasticsearch and ELK Stack are registered trademarks of Elasticsearch B.V.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Copyright recognition&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Information, examples, and figures in this document are based on Kubernetes Documentation by The Kubernetes Authors, published under a Creative Commons Attribution 4.0 license.&lt;/p&gt;
&lt;h2 id=&#34;publication-information&#34;&gt;Publication information&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Author(s)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;National Security Agency (NSA) Cybersecurity Directorate Endpoint Security&lt;/p&gt;
&lt;p&gt;Cybersecurity and Infrastructure Security Agency (CISA)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Contact information&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Client Requirements / General Cybersecurity Inquiries:
Cybersecurity Requirements Center, 410-854-4200, &lt;a href=&#34;mailto:Cybersecurity_Requests@nsa.gov&#34;&gt;Cybersecurity_Requests@nsa.gov&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Media inquiries / Press Desk:
Media Relations, 443-634-0721, &lt;a href=&#34;mailto:MediaRelations@nsa.gov&#34;&gt;MediaRelations@nsa.gov&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For incident response resources, contact CISA at &lt;a href=&#34;mailto:CISAServiceDesk@cisa.dhs.gov&#34;&gt;CISAServiceDesk@cisa.dhs.gov&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Purpose&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;NSA and CISA developed this document in furtherance of their respective cybersecurity missions, including their responsibilities to develop and issue cybersecurity specifications and mitigations. This information may be shared broadly to reach all appropriate stakeholders.&lt;/p&gt;
&lt;h2 id=&#34;executive-summary&#34;&gt;Executive summary&lt;/h2&gt;
&lt;p&gt;Kubernetes® is an open-source system that automates the deployment, scaling, and management of applications run in containers, and is often hosted in a cloud environment. Using this type of virtualized infrastructure can provide several flexibility and security benefits compared to traditional, monolithic software platforms. However, securely managing everything from microservices to the underlying infrastructure introduces other complexities. The hardening guidance detailed in this report is designed to help organizations handle associated risks and enjoy the benefits of using this technology.&lt;/p&gt;
&lt;p&gt;Three common sources of compromise in Kubernetes are supply chain risks, malicious threat actors, and insider threats.&lt;/p&gt;
&lt;p&gt;Supply chain risks are often challenging to mitigate and can arise in the container build cycle or infrastructure acquisition. Malicious threat actors can exploit vulnerabilities and misconfigurations in components of the Kubernetes architecture, such as the control plane, worker nodes, or containerized applications. Insider threats can be administrators, users, or cloud service providers. Insiders with special access to an organization’s Kubernetes infrastructure may be able to abuse these privileges.&lt;/p&gt;
&lt;p&gt;This guidance describes the security challenges associated with setting up and securing a Kubernetes cluster. It includes hardening strategies to avoid common misconfigurations and guide system administrators and developers of National Security Systems on how to deploy Kubernetes with example configurations for the recommended hardening measures and mitigations. This guidance details the following mitigations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scan containers and Pods for vulnerabilities or misconfigurations.&lt;/li&gt;
&lt;li&gt;Sun containers and Pods with the least privileges possible.&lt;/li&gt;
&lt;li&gt;Use network separation to control the amount of damage a compromise can cause.&lt;/li&gt;
&lt;li&gt;Use firewalls to limit unneeded network connectivity and encryption to protect confidentiality.&lt;/li&gt;
&lt;li&gt;Use strong authentication and authorization to limit user and administrator access as well as to limit the attack surface.&lt;/li&gt;
&lt;li&gt;Use log auditing so that administrators can monitor activity and be alerted to potential malicious activity.&lt;/li&gt;
&lt;li&gt;Periodically review all Kubernetes settings and use vulnerability scans to help ensure risks are appropriately accounted for and security patches are applied.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For additional security hardening guidance, see the Center for Internet Security Kubernetes benchmarks, the Docker and Kubernetes Security Technical Implementation Guides, the Cybersecurity and Infrastructure Security Agency (CISA) analysis report, and Kubernetes documentation [1], [2], [3], [6].&lt;/p&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Kubernetes, frequently abbreviated &amp;ldquo;K8s&amp;rdquo;, is an open-source container-orchestration system used to automate deploying, scaling, and managing containerized applications. It manages all elements that make up a cluster, from each microservice in an application to entire clusters. Using containerized applications as microservices can provide more flexibility and security benefits compared to monolithic software platforms, but also can introduce other complexities.&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-figure-1-high-level-view-of-kubernetes-cluster-components&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;images/f1.jpg&#34; alt=&#34;Figure 1: High-level view of Kubernetes cluster components&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Figure 1: High-level view of Kubernetes cluster components
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;This guidance focuses on security challenges and suggests hardening strategies where possible that are applicable to administrators of National Security Systems and critical infrastructure. Although this guidance is tailored to National Security Systems and critical infrastructure organizations, administrators of federal and state, local, tribal, and territorial (SLTT) government networks are also encouraged to implement the recommendations provided. Kubernetes clusters can be complex to secure and are often abused in compromises that exploit their misconfigurations. The following guidance offers specific security configurations that can help build more secure Kubernetes clusters.&lt;/p&gt;
&lt;h3 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h3&gt;
&lt;p&gt;A summary of the key recommendations from each section are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kubernetes Pod security
&lt;ul&gt;
&lt;li&gt;Use containers built to run applications as non-root users&lt;/li&gt;
&lt;li&gt;Where possible, run containers with immutable file systems&lt;/li&gt;
&lt;li&gt;Scan container images for possible vulnerabilities or misconfigurations&lt;/li&gt;
&lt;li&gt;Use a Pod Security Policy to enforce a minimum level of security including:
&lt;ul&gt;
&lt;li&gt;Preventing privileged containers&lt;/li&gt;
&lt;li&gt;Denying container features frequently exploited to breakout, such as hostPID, hostIPC, hostNetwork, allowedHostPath&lt;/li&gt;
&lt;li&gt;Rejecting containers that execute as the root user or allow elevation to root&lt;/li&gt;
&lt;li&gt;Hardening applications against exploitation using security services such as SELinux®, AppArmor®, and seccomp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Network separation and hardening
&lt;ul&gt;
&lt;li&gt;Lock down access to control plane nodes using a firewall and role-based access control (RBAC)&lt;/li&gt;
&lt;li&gt;Further limit access to the Kubernetes etcd server&lt;/li&gt;
&lt;li&gt;Configure control plane components to use authenticated, encrypted communications using Transport Layer Security (TLS) certificates&lt;/li&gt;
&lt;li&gt;Set up network policies to isolate resources. Pods and services in different namespaces can still communicate with each other unless additional separation is enforced, such as network policies&lt;/li&gt;
&lt;li&gt;Place all credentials and sensitive information in Kubernetes Secrets rather than in configuration files. Encrypt Secrets using a strong encryption method&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Authentication and authorization
&lt;ul&gt;
&lt;li&gt;Disable anonymous login (enabled by default)&lt;/li&gt;
&lt;li&gt;Use strong user authentication&lt;/li&gt;
&lt;li&gt;Create RBAC policies to limit administrator, user, and service account activity&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Log auditing
&lt;ul&gt;
&lt;li&gt;Enable audit logging (disabled by default)&lt;/li&gt;
&lt;li&gt;Persist logs to ensure availability in the case of node, Pod, or container level failure&lt;/li&gt;
&lt;li&gt;Configure a metrics logger&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Upgrading and application security practices
&lt;ul&gt;
&lt;li&gt;Immediately apply security patches and updates&lt;/li&gt;
&lt;li&gt;Perform periodic vulnerability scans and penetration tests&lt;/li&gt;
&lt;li&gt;Remove components from the environment when they are no longer needed&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;architectural-overview&#34;&gt;Architectural overview&lt;/h3&gt;
&lt;p&gt;Kubernetes uses a cluster architecture. A Kubernetes cluster is comprised of a number of control planes and one or more physical or virtual machines called worker nodes. The worker nodes host Pods, which contain one or more containers. The container is the executable image that contains a software package and all its dependencies. See &lt;strong&gt;Figure 2: Kubernetes architecture.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-figure-2-kubernetes-architecture&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;images/f2.jpg&#34; alt=&#34;Figure 2: Kubernetes architecture&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Figure 2: Kubernetes architecture
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;The control plane makes decisions about the cluster. This includes scheduling containers to run, detecting/responding to failures, and starting new Pods when the number of replicas listed in a deployment file is unsatisfied. The following logical components are all part of the control plane:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Controller manager (Default Port: 10252)&lt;/strong&gt; - monitors the Kubernetes cluster to detect and maintain several aspects of the Kubernetes environment including joining Pods to services, maintaining the correct number of Pods in a set, and responding to the loss of nodes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cloud controller manager (Default Port: 10258&lt;/strong&gt;) - an optional component used for cloud-based deployments. The cloud controller interfaces with the Cloud Service Provider to manage load balancers and virtual networking for the cluster.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kubernetes Application Programing Interface (API) Server (Default Port: 6443 or 8080)&lt;/strong&gt; - the interface through which administrators direct Kubernetes. As such, the API server is typically exposed outside of the control plane. The API Server is designed to scale and may exist on multiple control plane nodes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Etcd****®&lt;/strong&gt; &lt;strong&gt;(Default Port Range: 2379-2380)&lt;/strong&gt; - the persistent backing store where all information regarding the state of the cluster is kept. Etcd is not intended to be manipulated directly but should be managed through the API Server.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scheduler (Default Port: 10251)&lt;/strong&gt; - tracks the status of worker nodes and determines where to run Pods. Kube-scheduler is intended to be accessible only from nodes within the control plane.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Kubernetes worker nodes are physical or virtual machines dedicated to running containerized applications for the cluster. In addition to running a container engine, worker nodes host the following two services that allow orchestration from the control plane:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Kubelet (Default Port: 10251)&lt;/strong&gt; - runs on each worker node to orchestrate and verify Pod execution.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kube-proxy&lt;/strong&gt; - a network proxy that uses the host’s packet filtering capability to ensure correct packet routing in the Kubernetes cluster.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Clusters are commonly hosted using a cloud service provider (CSP) Kubernetes service or on-premises. When designing a Kubernetes environment, organizations should understand their responsibilities in securely maintaining the cluster. CSPs administer most aspects of managed Kubernetes services, but the organization may need to handle some aspects, such as authentication and authorization.&lt;/p&gt;
&lt;h2 id=&#34;threat-model&#34;&gt;Threat model&lt;/h2&gt;
&lt;p&gt;Kubernetes can be a valuable target for data and/or compute power theft. While data theft is traditionally the primary motivation, cyber actors seeking computational power (often for cryptocurrency mining) are also drawn to Kubernetes to harness the underlying infrastructure. In addition to resource theft, cyber actors may also target Kubernetes to cause a denial of service. The following threats represent some of the most likely sources of compromise for a Kubernetes cluster:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Supply Chain Risk&lt;/strong&gt; - Attack vectors to the supply chain are diverse and challenging to mitigate. Supply chain risk is the risk that an adversary may subvert any element that makes up a system, including product components, services, or personnel that help supply the end product. This can include third- party software and vendors used to create and manage the Kubernetes cluster. Supply chain compromises can affect Kubernetes at multiple levels including:
&lt;ul&gt;
&lt;li&gt;Container/Application level - The security of applications running in Kubernetes and their third-party dependencies relies on the trustworthiness of the developers and the defense of the development infrastructure. A malicious container or application from a third party could provide cyber actors with a foothold in the cluster.&lt;/li&gt;
&lt;li&gt;Infrastructure - The underlying systems hosting Kubernetes have their own software and hardware dependencies. Any compromise of systems used as worker nodes or as part of the control plane could provide cyber actors with a foothold in the cluster.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Malicious Threat Actor&lt;/strong&gt; - Malicious actors often exploit vulnerabilities to gain access from a remote location. Kubernetes architecture exposes several APIs that cyber actors could potentially leverage for remote exploitation.
&lt;ul&gt;
&lt;li&gt;Control plane - The Kubernetes control plane has a variety of components that communicate to track and manage the cluster. Cyber actors frequently take advantage of exposed control plane components lacking appropriate access controls.&lt;/li&gt;
&lt;li&gt;Worker nodes - In addition to running a container engine, worker nodes host the kubelet and kube-proxy service, which are potentially exploitable by cyber actors. Additionally, worker nodes exist outside of the locked- down control plane and may be more accessible to cyber actors.&lt;/li&gt;
&lt;li&gt;Containerized applications - Applications running inside the cluster are common targets. Applications are frequently accessible outside of the cluster, making them reachable by remote cyber actors. An actor can then pivot from an already compromised Pod or escalate privileges within the cluster using an exposed application’s internally accessible resources.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Insider Threat&lt;/strong&gt; - Threat actors can exploit vulnerabilities or use privileges given to the individual while working within the organization. Individuals from within the organization are given special knowledge and privileges that can be used against Kubernetes clusters.
&lt;ul&gt;
&lt;li&gt;Administrator - Kubernetes administrators have control over running containers, including the ability to execute arbitrary commands inside containerized environments. Kubernetes-enforced RBAC authorization can help reduce the risk by restricting access to sensitive capabilities. However, because Kubernetes lacks two-person integrity controls, there must be at least one administrative account capable of gaining control of the cluster. Administrators often have physical access to the systems or hypervisors, which could also be used to compromise the Kubernetes environment.&lt;/li&gt;
&lt;li&gt;User - Containerized application users may have knowledge and credentials to access containerized services in the Kubernetes cluster. This level of access could provide sufficient means to exploit either the application itself or other cluster components.&lt;/li&gt;
&lt;li&gt;Cloud Service or Infrastructure Provider - Access to physical systems or hypervisors managing Kubernetes nodes could be used to compromise a Kubernetes environment. Cloud Service Providers often have layers of technical and administrative controls to protect systems from privileged administrators.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;kubernetes-pod-security&#34;&gt;Kubernetes Pod security&lt;/h2&gt;
&lt;p&gt;Pods are the smallest deployable Kubernetes unit and consist of one or more containers. Pods are often a cyber actor’s initial execution environment upon exploiting a container. For this reason, Pods should be hardened to make exploitation more difficult and to limit the impact of a successful compromise.&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-figure-3-pod-components-with-sidecar-proxy-as-logging-container&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;images/f3.jpg&#34; alt=&#34;Figure 3: Pod components with sidecar proxy as logging container&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Figure 3: Pod components with sidecar proxy as logging container
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;non-root-containers-and-rootless-container-engines&#34;&gt;&amp;ldquo;Non-root&amp;rdquo; containers and &amp;ldquo;rootless&amp;rdquo; container engines&lt;/h3&gt;
&lt;p&gt;By default, many container services run as the privileged root user, and applications execute inside the container as root despite not requiring privileged execution. Preventing root execution by using non-root containers or a rootless container engine limits the impact of a container compromise. Both of these methods affect the runtime environment significantly, so applications should be thoroughly tested to ensure compatibility.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Non-root containers&lt;/strong&gt;: container engines allow containers to run applications as a non-root user with non-root group membership. Typically, this non-default setting is configured when the container image is built. &lt;strong&gt;Appendix A: Example Dockerfile for non-root application&lt;/strong&gt; shows an example Dockerfile that runs an application as a non-root user. Alternatively, Kubernetes can load containers into a Pod with SecurityContext:runAsUser specifying a non-zero user. While the runAsUser directive effectively forces non-root execution at deployment, NSA and CISA encourage developers to build container applications to execute as a non-root user. Having non-root execution integrated at build time provides better assurance that applications will function correctly without root privileges.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rootless container engines&lt;/strong&gt;: some container engines can run in an unprivileged context rather than using a daemon running as root. In this scenario, execution would appear to use the root user from the containerized application’s perspective, but execution is remapped to the engine’s user context on the host. While rootless container engines add an effective layer of security, many are currently released as experimental and should not be used in a production environment. Administrators should be aware of this emerging technology and seek adoption of rootless container engines when vendors release a stable version compatible with Kubernetes.&lt;/p&gt;
&lt;h3 id=&#34;immutable-container-file-systems&#34;&gt;Immutable container file systems&lt;/h3&gt;
&lt;p&gt;By default, containers are permitted mostly unrestricted execution within their own context. A cyber actor who has gained execution in a container can create files, download scripts, and modify the application within the container. Kubernetes can lock down a container’s file system, thereby preventing many post-exploitation activities. However, these limitations also affect legitimate container applications and can potentially result in crashes or anomalous behavior. To prevent damaging legitimate applications, Kubernetes administrators can mount secondary read/write file systems for specific directories where applications require write access. &lt;strong&gt;Appendix B: Example deployment template for read-only filesystem&lt;/strong&gt; shows an example immutable container with a writable directory.&lt;/p&gt;
&lt;h3 id=&#34;building-secure-container-images&#34;&gt;Building secure container images&lt;/h3&gt;
&lt;p&gt;Container images are usually created by either building a container from scratch or by building on top of an existing image pulled from a repository. In addition to using trusted repositories to build containers, image scanning is key to ensuring deployed containers are secure. Throughout the container build workflow, images should be scanned to identify outdated libraries, known vulnerabilities, or misconfigurations, such as insecure ports or permissions.&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-figure-4-a-container-build-workflow-optimized-with-webhook-and-admission-controller&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;images/f4.jpg&#34; alt=&#34;Figure 4: A container build workflow, optimized with webhook and admission controller&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Figure 4: A container build workflow, optimized with webhook and admission controller
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;One approach to implementing image scanning is by using an admission controller. An admission controller is a Kubernetes-native feature that can intercept and process requests to the Kubernetes API prior to persistence of the object, but after the request is authenticated and authorized. A custom or proprietary webhook can be implemented to scan any image before it is deployed in the cluster. This admission controller could block deployments if the image doesn’t comply with the organization’s security policies defined in the webhook configuration [4].&lt;/p&gt;
&lt;h3 id=&#34;pod-security-policies&#34;&gt;Pod Security Policies&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Pod creation adheres to the least restrictive authorized policy.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A Pod Security Policy (PSP) is a cluster-wide policy that specifies security requirements/defaults for Pods to execute within the cluster. While security mechanisms are often specified within Pod/deployment configurations, PSPs establish a minimum security threshold to which all Pods must adhere. Some PSP fields provide default values used when a Pod’s configuration omits a field. Other PSP fields are used to deny the creation of non-conformant Pods. PSPs are enforced through a Kubernetes admission controller, so PSPs can only enforce requirements during Pod creation. PSPs do not affect Pods already running in the cluster.&lt;/p&gt;
&lt;p&gt;PSPs are useful technical controls to enforce security measures in the cluster. PSPs are particularly effective for clusters managed by admins with tiered roles. In these cases, top-level admins can impose defaults to enforce requirements on lower-level admins. NSA and CISA encourage organizations to adapt the Kubernetes hardened PSP template in &lt;strong&gt;Appendix C: Example Pod Security Policy&lt;/strong&gt; to their needs. The following table describes some widely applicable PSP components.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Table I: Pod Security Policy components&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name(s)&lt;/th&gt;
&lt;th&gt;Usage&lt;/th&gt;
&lt;th&gt;Recommendations&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;privileged&lt;/td&gt;
&lt;td&gt;Controls whether Pods can run privileged containers.&lt;/td&gt;
&lt;td&gt;Set to false.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hostPID, hostIPC&lt;/td&gt;
&lt;td&gt;Controls whether containers can share host process namespaces.&lt;/td&gt;
&lt;td&gt;Set to false.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hostNetwork&lt;/td&gt;
&lt;td&gt;Controls whether containers can use the host network.&lt;/td&gt;
&lt;td&gt;Set to false.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;allowedHostPaths&lt;/td&gt;
&lt;td&gt;Limits containers to specific paths of the host file system.&lt;/td&gt;
&lt;td&gt;Use a &amp;ldquo;dummy&amp;rdquo; path name (such as &amp;ldquo;/foo&amp;rdquo; marked as read-only). Omitting this field results in no admission restrictions being placed on containers.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;readOnlyRootFilesystem&lt;/td&gt;
&lt;td&gt;Requires the use of a read only root file system.&lt;/td&gt;
&lt;td&gt;Set to true when possible.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;runAsUser, runAsGroup, supplementalGroups, fsGroup&lt;/td&gt;
&lt;td&gt;Controls whether container applications can run with root privileges or with root group membership.&lt;/td&gt;
&lt;td&gt;- Set &lt;code&gt;runAsUser&lt;/code&gt; to &lt;code&gt;MustRunAsNonRoot&lt;/code&gt;.- Set &lt;code&gt;runAsGroup&lt;/code&gt; to non-zero (See the example in Appendix C: Example Pod Security Policy).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;- Set supplementalGroups to non- zero (see example in appendix C).- Set fsGroup to non-zero (See the example in Appendix C: Example Pod Security Policy).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;allowPrivilegeEscalation&lt;/td&gt;
&lt;td&gt;Restricts escalation to root privileges.&lt;/td&gt;
&lt;td&gt;Set to false. This measure is required to effectively enforce &amp;ldquo;runAsUser: MustRunAsNonRoot&amp;rdquo; settings.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;seLinux&lt;/td&gt;
&lt;td&gt;Sets the SELinux context of the container.&lt;/td&gt;
&lt;td&gt;If the environment supports SELinux, consider adding SELinux labeling to further harden the container.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AppArmor annotations&lt;/td&gt;
&lt;td&gt;Sets the AppArmor profile used by containers.&lt;/td&gt;
&lt;td&gt;Where possible, harden containerized applications by employing AppArmor to constrain exploitation.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;seccomp annotations&lt;/td&gt;
&lt;td&gt;Sets the seccomp profile used to sandbox containers.&lt;/td&gt;
&lt;td&gt;Where possible, use a seccomp auditing profile to identify required syscalls for running applications; then enable a seccomp profile to block all other syscalls.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: PSPs do not automatically apply to the entire cluster for the following reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First, before PSPs can be applied, the PodSecurityPolicy plugin must be enabled for the Kubernetes admission controller, part of kube-apiserver.&lt;/li&gt;
&lt;li&gt;Second, the policy must be authorized through RBAC. Administrators should verify the correct functionality of implemented PSPs from each role within their cluster’s organization.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Administrators should be cautious in environments with multiple PSPs as Pod creation adheres to the &lt;em&gt;least restrictive&lt;/em&gt; authorized policy. The following command describes all Pod Security Policies for the given namespace, which can help to identify problematic overlapping policies:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl get psp -n &amp;lt;namespace&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;protecting-pod-service-account-tokens&#34;&gt;Protecting Pod service account tokens&lt;/h3&gt;
&lt;p&gt;By default, Kubernetes automatically provisions a service account when creating a Pod and mounts the account’s secret token within the Pod at runtime. Many containerized applications do not require direct access to the service account as Kubernetes orchestration occurs transparently in the background. If an application is compromised, account tokens in Pods can be gleaned by cyber actors and used to further compromise the cluster. When an application does not need to access the service account directly, Kubernetes administrators should ensure that Pod specifications disable the secret token being mounted. This can be accomplished using the &amp;ldquo;automountServiceAccountToken: false&amp;rdquo; directive in the Pod’s YAML specification.&lt;/p&gt;
&lt;h3 id=&#34;hardening-container-engines&#34;&gt;Hardening container engines&lt;/h3&gt;
&lt;p&gt;Some platforms and container engines provide additional options to harden the containerized environments. A powerful example is the use of hypervisors to provide container isolation. Hypervisors rely on hardware to enforce the virtualization boundary rather than the operating system. Hypervisor isolation is more secure than traditional container isolation. Container engines running on the Windows® operating system can be configured to use the built-in Windows hypervisor, Hyper-V®, to enhance security. Additionally, some security focused container engines natively deploy each container within a lightweight hypervisor for defense-in-depth. Hypervisor-backed containers mitigate container breakouts.&lt;/p&gt;
&lt;h2 id=&#34;network-separation-and-hardening&#34;&gt;Network separation and hardening&lt;/h2&gt;
&lt;p&gt;Cluster networking is a central concept of Kubernetes. Communication between containers, Pods, services, and external services must be taken into consideration. By default, there are few network policies in place to separate resources and prevent lateral movement or escalation if a cluster is compromised. Resource separation and encryption can be an effective way to limit a cyber actor’s movement and escalation within a cluster.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Key points&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use network policies and firewalls to separate and isolate resources.&lt;/li&gt;
&lt;li&gt;Secure the control plane.&lt;/li&gt;
&lt;li&gt;Encrypt traffic and sensitive data (such as Secrets) at rest.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;namespaces&#34;&gt;Namespaces&lt;/h3&gt;
&lt;p&gt;Kubernetes namespaces are one way to partition cluster resources among multiple individuals, teams, or applications within the same cluster. &lt;em&gt;By default, namespaces are not automatically isolated&lt;/em&gt;. However, namespaces do assign a label to a scope, which can be used to specify authorization rules via RBAC and networking policies. In addition to network isolation, policies can limit storage and compute resources to provide better control over Pods at the namespace level.&lt;/p&gt;
&lt;p&gt;There are three namespaces by default, and they cannot be deleted:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;kube-system (for Kubernetes components)&lt;/li&gt;
&lt;li&gt;kube-public (for public resources)&lt;/li&gt;
&lt;li&gt;default (for user resources)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;User Pods should not be placed in kube-system or kube-public, as these are reserved for cluster services. A YAML file, shown in &lt;strong&gt;Appendix D: Example namespace&lt;/strong&gt;, can be used to create new namespaces. Pods and services in different namespaces can still communicate with each other unless additional separation is enforced, such as network policies.&lt;/p&gt;
&lt;h3 id=&#34;network-policies&#34;&gt;Network policies&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Network Policies Checklist&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use CNI plugin that supports NetworkPolicy API&lt;/li&gt;
&lt;li&gt;Create policies that select Pods using podSelector and/or the namespaceSelector&lt;/li&gt;
&lt;li&gt;Use a default policy to deny all ingress and egress traffic. Ensures unselected Pods are isolated to all namespaces except kube-system&lt;/li&gt;
&lt;li&gt;Use LimitRange and ResourceQuota policies to limit resources on a namespace or Pod level&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Network policies control traffic flow between Pods, namespaces, and external IP addresses. By default, no network policies are applied to Pods or namespaces, resulting in unrestricted ingress and egress traffic within the Pod network. Pods become isolated through a network policy that applies to the Pod or the Pod’s namespace. Once a Pod is selected in a network policy, it rejects any connections that are not specifically allowed by any applicable policy object.&lt;/p&gt;
&lt;p&gt;To create network policies, a network plugin that supports the NetworkPolicy API is required. Pods are selected using the podSelector and/or the namespaceSelector options. An example network policy is shown in &lt;strong&gt;Appendix E: Example network policy&lt;/strong&gt;. Network policy formatting may differ depending on the container network interface (CNI) plugin used for the cluster. Administrators should use a default policy selecting all Pods to deny all ingress and egress traffic and ensure any unselected Pods are isolated. Additional policies could then relax these restrictions for permissible connections.&lt;/p&gt;
&lt;p&gt;External IP addresses can be used in ingress and egress policies using ipBlock, but different CNI plugins, cloud providers, or service implementations may affect the order of NetworkPolicy processing and the rewriting of addresses within the cluster.&lt;/p&gt;
&lt;h3 id=&#34;resource-policies&#34;&gt;Resource policies&lt;/h3&gt;
&lt;p&gt;In addition to network policies, LimitRange and ResourceQuota are two policies that can limit resource usage for namespaces or nodes. A LimitRange policy constrains individual resources per Pod or container within a particular namespace, e.g., by enforcing maximum compute and storage resources. Only one LimitRange constraint can be created per namespace as shown in the example YAML file of &lt;strong&gt;Appendix F: Example LimitRange&lt;/strong&gt;. Kubernetes 1.10 and newer supports LimitRange by default. Unlike LimitRange policies that apply to each Pod or container individually, ResourceQuotas are restrictions placed on the aggregate resource usage for an entire namespace, such as limits placed on total CPU and memory usage. If a user tries to create a Pod that violates a LimitRange or ResourceQuota policy, the Pod creation fails. An example ResourceQuota policy is shown in &lt;strong&gt;Appendix G: Example ResourceQuota&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;control-plane-hardening&#34;&gt;Control plane hardening&lt;/h3&gt;
&lt;p&gt;The control plane is the core of Kubernetes and gives users the ability to view containers, schedule new Pods, read Secrets, and execute commands in the cluster. Because of these sensitive capabilities, the control plane should be highly protected. In addition to secure configurations such as TLS encryption, RBAC, and a strong authentication method, network separation can help prevent unauthorized users from accessing the control plane. The Kubernetes API server runs on ports 6443 and 8080, which should be protected by a firewall to accept only expected traffic. Port 8080, by default, is accessible without TLS encryption from the local machine, and the request bypasses authentication and authorization modules. The insecure port can be disabled using the API server flag &amp;ndash;insecure-port=0. The Kubernetes API server should not be exposed to the Internet or an untrusted network. Network policies can be applied to the kube-system namespace to limit internet access to the kube-system. If a default deny policy is implemented to all namespaces, the kube-system namespace must still be able to communicate with other control plane segments and worker nodes.&lt;/p&gt;
&lt;p&gt;The following table lists the control plane ports and services:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Table II: Control plane ports&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Protocol&lt;/th&gt;
&lt;th&gt;Direction&lt;/th&gt;
&lt;th&gt;Port Range&lt;/th&gt;
&lt;th&gt;Purpose&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;TCP&lt;/td&gt;
&lt;td&gt;Inbound&lt;/td&gt;
&lt;td&gt;6443 or 8080 if not disabled&lt;/td&gt;
&lt;td&gt;Kubernetes API server&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TCP&lt;/td&gt;
&lt;td&gt;Inbound&lt;/td&gt;
&lt;td&gt;2379-2380&lt;/td&gt;
&lt;td&gt;etcd server client API&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TCP&lt;/td&gt;
&lt;td&gt;Inbound&lt;/td&gt;
&lt;td&gt;10250&lt;/td&gt;
&lt;td&gt;kubelet API&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TCP&lt;/td&gt;
&lt;td&gt;Inbound&lt;/td&gt;
&lt;td&gt;10251&lt;/td&gt;
&lt;td&gt;kube-scheduler&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TCP&lt;/td&gt;
&lt;td&gt;Inbound&lt;/td&gt;
&lt;td&gt;10252&lt;/td&gt;
&lt;td&gt;kube-controller-manager&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TCP&lt;/td&gt;
&lt;td&gt;Inbound&lt;/td&gt;
&lt;td&gt;10258&lt;/td&gt;
&lt;td&gt;cloud-controller-manager (optional)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;etcd&#34;&gt;Etcd&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;The etcd backend database is a critical control plane component and the most important piece to secure within the cluster.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The etcd backend database stores state information and cluster Secrets. It is a critical control plane component, and gaining write access to etcd could give a cyber actor root access to the entire cluster. Etcd should only be accessed through the API server where the cluster’s authentication method and RBAC policies can restrict users. The etcd data store can run on a separate control plane node allowing a firewall to limit access to only the API servers. Administrators should set up TLS certificates to enforce HTTPS communication between the etcd server and API servers. The etcd server should be configured to only trust certificates assigned to API servers.&lt;/p&gt;
&lt;h4 id=&#34;kubeconfig-files&#34;&gt;Kubeconfig Files&lt;/h4&gt;
&lt;p&gt;The kubeconfig files contain sensitive information about clusters, users, namespaces, and authentication mechanisms. Kubectl uses the configuration files stored in the $HOME/.kube directory on the worker node and control plane local machines. Cyber actors can exploit access to this configuration directory to gain access to and modify configurations or credentials to further compromise the cluster. The configuration files should be protected from unintended changes, and unauthenticated non-root users should be blocked from accessing the files.&lt;/p&gt;
&lt;h3 id=&#34;worker-node-segmentation&#34;&gt;Worker node segmentation&lt;/h3&gt;
&lt;p&gt;A worker node can be a virtual or physical machine, depending on the cluster’s implementation. Because nodes run the microservices and host the web applications for the cluster, they are often the target of exploits. If a node becomes compromised, an administrator should proactively limit the attack surface by separating the worker nodes from other network segments that do not need to communicate with the worker nodes or Kubernetes services. A firewall can be used to separate internal network segments from the external facing worker nodes or the entire Kubernetes service depending on the network. Examples of services that may need to be separated from the possible attack surface of the worker nodes are confidential databases or internal services that would not need to be internet accessible.&lt;/p&gt;
&lt;p&gt;The following table lists the worker node ports and services:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Table III: Worker node ports&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Protocol&lt;/th&gt;
&lt;th&gt;Direction&lt;/th&gt;
&lt;th&gt;Port Range&lt;/th&gt;
&lt;th&gt;Purpose&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;TCP&lt;/td&gt;
&lt;td&gt;Inbound&lt;/td&gt;
&lt;td&gt;10250&lt;/td&gt;
&lt;td&gt;kubelet API&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TCP&lt;/td&gt;
&lt;td&gt;Inbound&lt;/td&gt;
&lt;td&gt;30000-32767&lt;/td&gt;
&lt;td&gt;NodePort Services&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;encryption&#34;&gt;Encryption&lt;/h3&gt;
&lt;p&gt;Administrators should configure all traffic in the Kubernetes cluster—including between components, nodes, and the control plane—to use TLS 1.2 or 1.3 encryption. Encryption can be set up during installation or afterward using TLS bootstrapping, detailed in the Kubernetes documentation, to create and distribute certificates to nodes. For all methods, certificates must be distributed amongst nodes to communicate securely.&lt;/p&gt;
&lt;h3 id=&#34;secrets&#34;&gt;Secrets&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;By default, Secrets are stored as unencrypted base64-encoded strings and can be retrieved by anyone with API access.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Kubernetes Secrets maintain sensitive information, such as passwords, OAuth tokens, and SSH keys. Storing sensitive information in Secrets provides greater access control than storing passwords or tokens in YAML files, container images, or environment variables. By default, Kubernetes stores Secrets as unencrypted base64-encoded strings that can be retrieved by anyone with API access. Access can be restricted by applying RBAC policies to the &lt;em&gt;secrets&lt;/em&gt; resource.&lt;/p&gt;
&lt;p&gt;Secrets can be encrypted by configuring data-at-rest encryption on the API server or by using an external Key Management Service (KMS), which may be available through a cloud provider. To enable Secret data-at-rest encryption using the API server, administrators should change the kube-apiserver manifest file to execute using the &amp;ndash;encryption-provider-config argument. An example encryption- provider-config file is shown in &lt;strong&gt;Appendix H: Example encryption&lt;/strong&gt;. Using a KMS provider prevents the raw encryption key from being stored on the local disk. To encrypt Secrets with a KMS provider, the encryption-provider-config file should specify the KMS provider as shown in &lt;strong&gt;Appendix I: Example KMS configuration&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;After applying the encryption-provider-config file, administrators should run the following command to read and encrypt all Secrets:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl get secrets --all-namespaces -o json &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; kubectl replace -f -
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;protecting-sensitive-cloud-infrastructure&#34;&gt;Protecting sensitive cloud infrastructure&lt;/h3&gt;
&lt;p&gt;Kubernetes is often deployed on virtual machines in a cloud environment. As such, administrators should carefully consider the attack surface of the virtual machines on which the Kubernetes worker nodes are running. In many cases, Pods running on these virtual machines have access to sensitive cloud metadata services on a non-routable address. These metadata services provide cyber actors with information about the cloud infrastructure and possibly even short-lived credentials for cloud resources. Cyber actors abuse these metadata services for privilege escalation [5]. Kubernetes administrators should prevent Pods from accessing cloud metadata services by using network policies or through the cloud configuration policy. Because these services vary based on the cloud provider, administrators should follow vendor guidance to harden these access vectors.&lt;/p&gt;
&lt;h2 id=&#34;authentication-and-authorization&#34;&gt;Authentication and authorization&lt;/h2&gt;
&lt;p&gt;Authentication and authorization are the primary mechanisms to restrict access to cluster resources. Cyber actors can scan for well-known Kubernetes ports and access the cluster’s database or make API calls without being authenticated if the cluster is misconfigured. User authentication is not a built-in feature of Kubernetes. However, several methods exist for administrators to add authentication to a cluster.&lt;/p&gt;
&lt;h3 id=&#34;authentication&#34;&gt;Authentication&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Administrators must add an authentication method to the cluster to implement authentication and authorization mechanisms.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Kubernetes clusters have two types of users: service accounts and normal user accounts. Service accounts handle API requests on behalf of Pods. Authentication is typically managed automatically by Kubernetes through the ServiceAccount Admission Controller using bearer tokens. The bearer tokens are mounted into Pods at well-known locations and can be used from outside the cluster if the tokens are left unsecured. Because of this, access to Pod Secrets should be restricted to those with a need to view them using Kubernetes RBAC. For normal users and admin accounts, there is no automatic authentication method for users. Administrators must add an authentication method to the cluster to implement authentication and authorization mechanisms.&lt;/p&gt;
&lt;p&gt;Kubernetes assumes that a cluster-independent service manages user authentication. The Kubernetes documentation lists several ways to implement user authentication including client certificates, bearer tokens, authentication plugins, and other authentication protocols. At least one user authentication method should be implemented. When multiple authentication methods are implemented, the first module to successfully authenticate the request short-circuits the evaluation. Administrators should not use weak methods such as static password files. Weak authentication methods could allow cyber actors to authenticate as legitimate users.&lt;/p&gt;
&lt;p&gt;Anonymous requests are requests that are rejected by other configured authentication methods and are not tied to any individual user or Pod. In a server set up for token authentication with anonymous requests enabled, a request without a token present would be performed as an anonymous request. In Kubernetes 1.6 and newer, anonymous requests are enabled by default. When RBAC is enabled, anonymous requests require explicit authorization of the &lt;code&gt;system:anonymous&lt;/code&gt; user or &lt;code&gt;system:unauthenticated&lt;/code&gt; group. Anonymous requests should be disabled by passing the &lt;code&gt;--anonymous-auth=false&lt;/code&gt; option to the API server. Leaving anonymous requests enabled could allow a cyber actor to access cluster resources without authentication.&lt;/p&gt;
&lt;h3 id=&#34;role-based-access-control&#34;&gt;Role-based access control&lt;/h3&gt;
&lt;p&gt;RBAC is one method to control access to cluster resources based on the roles of individuals within an organization. RBAC is enabled by default in Kubernetes version 1.6 and newer. To check if RBAC is enabled in a cluster using kubectl, execute &lt;code&gt;kubectl api-version&lt;/code&gt;. The API version for &lt;code&gt;rbac.authorization.k8s.io/v1&lt;/code&gt; should be listed if enabled. Cloud Kubernetes services may have a different way of checking whether RBAC is enabled for the cluster. If RBAC is not enabled, start the API server with the &amp;ndash;authorization-mode flag in the following command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;kube-apiserver --authorization-mode=RBAC&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Leaving authorization-mode flags, such as AlwaysAllow, in place allows all authorization requests, effectively disabling all authorization and limiting the ability to enforce least privilege for access.&lt;/p&gt;
&lt;p&gt;Two types of permissions can be set: Roles and ClusterRoles. Roles set permissions for particular namespaces, whereas ClusterRoles set permissions across all cluster resources regardless of namespace. Roles and ClusterRoles can only be used to add permissions. There are no deny rules. If a cluster is configured to use RBAC and anonymous access is disabled, the Kubernetes API server will deny permissions not explicitly allowed. An example RBAC Role is shown in &lt;strong&gt;Appendix J: Example pod-reader RBAC Role&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;A Role or ClusterRole defines a permission but does not tie the permission to a user. RoleBindings and ClusterRoleBindings are used to tie a Role or ClusterRole to a user, group, or service account. RoleBindings grant permissions in Roles or ClusterRoles to users, groups, or service accounts in a defined namespace. ClusterRoles are created independent of namespaces and can then be granted to individuals using a RoleBinding to limit the namespace scope. ClusterRoleBindings grant users, groups, or service accounts ClusterRoles across all cluster resources. An example RBAC RoleBinding and ClusterRoleBinding is shown in &lt;strong&gt;Appendix K: Example RBAC RoleBinding and ClusterRoleBinding&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;To create or update Roles and ClusterRoles, a user must have the permissions contained in the new role at the same scope or possess explicit permission to perform the escalate verb on the Roles or ClusterRoles resources in the rbac.authorization.k8s.io API group. After a binding is created, the Role or ClusterRole is immutable. The binding must be deleted to change a role.&lt;/p&gt;
&lt;p&gt;Privileges assigned to users, groups, and service accounts should follow the principle of least privilege, giving only required permissions to resources. Users or user groups can be limited to particular namespaces where required resources reside. By default, a service account is created for each namespace for Pods to access the Kubernetes API. RBAC policies can be used to specify allowed actions from the service accounts in each namespace. Access to the Kubernetes API is limited by creating an RBAC Role or ClusterRole with the appropriate API request verb and desired resource on which the action can be applied. Tools exist that can help audit RBAC policies by printing users, groups, and service accounts with their associated assigned Roles and ClusterRoles.&lt;/p&gt;
&lt;h2 id=&#34;log-auditing&#34;&gt;Log auditing&lt;/h2&gt;
&lt;p&gt;Logs capture activity in the cluster. Auditing logs is necessary, not only for ensuring that services are operating and configured as intended, but also for ensuring the security of the system. Systematic audit requirements mandate consistent and thorough checks of security settings to help identify compromises. Kubernetes is capable of capturing audit logs for cluster actions and monitoring basic CPU and memory usage information; however, it does not natively provide in-depth monitoring or alerting services.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Key points&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Establish Pod baselines at creation to enable anomalous activity identification.&lt;/li&gt;
&lt;li&gt;Perform logging at the host level, application level, and on the cloud if applicable.&lt;/li&gt;
&lt;li&gt;Integrate existing network security tools for aggregate scans, monitoring, alerts, and analysis.&lt;/li&gt;
&lt;li&gt;Set up local log storage to prevent loss in case of a communication failure.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;logging&#34;&gt;Logging&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Kubernetes auditing capabilities are disabled by default, so if no audit policy has been written, nothing is logged.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;System administrators running applications within Kubernetes should establish an effective logging, monitoring, and alerting system for their environment. Logging Kubernetes events alone is not enough to provide a full picture of the actions occurring on the system. Logging should also be performed at the host level, application level, and on the cloud if applicable. These logs can then be correlated with any external authentication and system logs as applicable to provide a full view of the actions taken throughout the environment for use by security auditors and incident responders.&lt;/p&gt;
&lt;p&gt;Within the Kubernetes environment, administrators should monitor/log the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;API request history&lt;/li&gt;
&lt;li&gt;Performance metrics&lt;/li&gt;
&lt;li&gt;Deployments&lt;/li&gt;
&lt;li&gt;Resource consumption&lt;/li&gt;
&lt;li&gt;Operating system calls&lt;/li&gt;
&lt;li&gt;Protocols, permission changes&lt;/li&gt;
&lt;li&gt;Network traffic&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When a Pod is created or updated, administrators should capture detailed logs of the network communications, response times, requests, resource consumption, and any other relevant metrics to establish a baseline. As detailed in the previous section, anonymous accounts should be disabled, but logging policies should still record actions taken by anonymous accounts to identify anomalous activity.&lt;/p&gt;
&lt;p&gt;RBAC policy configurations should be audited periodically and whenever changes occur to the organization’s system administrators. Doing so ensures access controls are adjusted in compliance with the RBAC policy-hardening guidance outlined in the role- based access control section.&lt;/p&gt;
&lt;p&gt;Audits should include comparisons of current logs to the baseline measurements of normal activities to identify significant changes in any of the logged metrics and events. System administrators should investigate significant changes—e.g., a change in application usage or installation of malicious processes such as a cryptominer—to determine the root cause. Audits of internal and external traffic logs should be conducted to ensure all intended security constraints on connections have been configured properly and are working as intended. Administrators can also use these audits as systems evolve to identify when external access may no longer be needed and can be restricted.&lt;/p&gt;
&lt;p&gt;Logs can be streamed to an external logging service to ensure availability to security professionals outside of the cluster, identify abnormalities as close to real time as possible, and protect logs from being deleted if a compromise occurs. If using this method, logs should be encrypted during transit with TLS 1.2 or 1.3 to ensure cyber actors cannot access the logs in transit and gain valuable information about the environment. Another precaution to take when utilizing an external log server is to configure the log forwarder within Kubernetes with append-only access to the external storage. This helps protect the externally stored logs from being deleted or overwritten from within the cluster.&lt;/p&gt;
&lt;h4 id=&#34;kubernetes-native-audit-logging-configuration&#34;&gt;Kubernetes native audit logging configuration&lt;/h4&gt;
&lt;p&gt;The kube-apiserver resides on the Kubernetes control plane and acts as the front end, handling internal and external requests for a cluster. Each request, whether generated by a user, an application, or the control plane, produces an audit event at each stage in its execution. When an audit event registers, the kube-apiserver checks for an audit policy file and applicable rule. If such a rule exists, the server logs the event at the level defined by the first matched rule. Kubernetes’ built-in auditing capabilities are not enabled by default, so if no audit policy has been written, nothing is logged.&lt;/p&gt;
&lt;p&gt;Cluster administrators must write an audit policy YAML file to establish the rules and specify the desired audit level at which to log each type of audit event. This audit policy file is then passed to the kube-apiserver with the appropriate flags. For a rule to be considered valid, it must specify one of the four audit levels: &lt;code&gt;None&lt;/code&gt;, &lt;code&gt;Metadata&lt;/code&gt;, &lt;code&gt;Request&lt;/code&gt;, or &lt;code&gt;RequestResponse&lt;/code&gt;. &lt;strong&gt;Appendix L: Audit Policy&lt;/strong&gt; shows the contents of an audit policy file that logs all events at the RequestResponse level. &lt;strong&gt;Appendix M: Example flags with which to submit Audit Policy file to kube-apiserver&lt;/strong&gt; shows where the kube-apiserver configuration file is located and provides an example of the flags by which the audit policy file can be passed to the kube-apiserver. &lt;strong&gt;Appendix M&lt;/strong&gt; also provides directions for how to mount the volumes and configure the host path if necessary.&lt;/p&gt;
&lt;p&gt;The kube-apiserver includes configurable logging and webhook backends for audit logging. The logging backend writes the audit events specified to a log file, and the webhook backend can be configured to send the file to an external HTTP API. The &amp;ndash;audit-log-path and &amp;ndash;audit-log-maxage flags, set in the example in &lt;strong&gt;Appendix M&lt;/strong&gt;, are two examples of the flags that can be used to configure the log backend, which writes audit events to a file. The &lt;code&gt;log-path&lt;/code&gt; flag is the minimum configuration required to enable logging and the only configuration necessary for the logging backend. The default format for these log files is JSON, though this can also be changed if necessary. Additional configuration options for the logging backend can be found in the Kubernetes documentation.&lt;/p&gt;
&lt;p&gt;To push the audit logs to the organization’s SIEM platform, a webhook backend can be manually configured via a YAML file submitted to the kube-apiserver. An example webhook configuration file and the flags needed to pass the file to the kube-apiserver to attach the webhook backend are located in &lt;strong&gt;Appendix N: Webhook configuration&lt;/strong&gt;. An exhaustive list of the configuration options, which can be set in the kube-apiserver for the webhook backend, can be found in the Kubernetes documentation.&lt;/p&gt;
&lt;h4 id=&#34;worker-node-and-container-logging&#34;&gt;Worker node and container logging&lt;/h4&gt;
&lt;p&gt;There are many ways for logging capabilities to be configured within a Kubernetes architecture. In the built-in method of log management, the kubelet on each node is responsible for managing logs. It stores and rotates log files locally based on its policies for individual file length, storage duration, and storage capacity. These logs are controlled by the kubelet and can be accessed from the command line. The following command prints the logs of a container within a Pod:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl logs &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-f&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-p&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; POD &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-c CONTAINER&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The -f flag may be used if the logs are to be streamed, the -p flag may be used if logs from previous instances of a container exist and are desired, and the -c flag can be used to specify a container if there are more than one in the Pod. If an error occurs that causes a container, Pod, or node to die, the native logging solution in Kubernetes does not provide a method to preserve logs stored in the failed object. NSA and CISA recommend configuring a remote logging solution to preserve logs should a node fail. Options for remote logging include:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Remote logging option&lt;/th&gt;
&lt;th&gt;Reason to use&lt;/th&gt;
&lt;th&gt;Configuration implementation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Running a logging agent on every node to push logs to a backend&lt;/td&gt;
&lt;td&gt;Gives the node the ability to expose logs or push logs to a backend, preserving them outside of the node in the case of a failure.&lt;/td&gt;
&lt;td&gt;Configure an independent container in a Pod to run as a logging agent, giving it access to the node’s application log files and configuring it to forward logs to the organization’s SIEM.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Using a sidecar container in each Pod to push logs to an output stream&lt;/td&gt;
&lt;td&gt;Used to push logs to separate output streams. This can be a useful option when application containers write multiple log files of different formats.&lt;/td&gt;
&lt;td&gt;Configure sidecar container for each log type and use to redirect these log files to their individual output streams, where they can be handled by the kubelet. The node-level logging agent can thenforward these logs onto the SIEM or other backend.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Running a logging agent on every node to push logs to a backend&lt;/td&gt;
&lt;td&gt;Gives the node the ability to expose logs or push logs to a backend, preserving them outside of the node in the case of a failure.&lt;/td&gt;
&lt;td&gt;Configure an independent container in a Pod to run as a logging agent, giving it access to the node’s application log files and configuring it to forward logs to the organization’s SIEM.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Using a sidecar container in each Pod to push logs to an output stream&lt;/td&gt;
&lt;td&gt;Used to push logs to separate output streams. This can be a useful option when application containers write multiple log files of different formats.&lt;/td&gt;
&lt;td&gt;Configure sidecar container for each log type and use to redirect these log files to their individual output streams, where they can be handled by the kubelet. The node-level logging agent can thenforward these logs onto the SIEM or other backend.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;A sidecar container is run in a Pod with other containers and can be configured to stream logs to a log file or logging backend. A sidecar container can also be configured to act as a traffic proxy for another standard functionality container with which it is packaged and deployed.&lt;/p&gt;
&lt;p&gt;In order to ensure continuity of these logging agents across worker nodes, it is common to run them as a DaemonSet. Configuring a DaemonSet for this method ensures that there is a copy of the logging agent on every node at all times and that any changes made to the logging agent are consistent across the cluster.&lt;/p&gt;
&lt;h4 id=&#34;seccomp-audit-mode&#34;&gt;Seccomp: audit mode&lt;/h4&gt;
&lt;p&gt;In addition to the node and container logging described above, it can be highly beneficial to log system calls. One method for auditing container system calls in Kubernetes is to use the Secure Compute Mode (seccomp) tool. This tool is disabled by default but can be used to limit a container’s system call abilities, thereby lowering the kernel’s attack surface. Seccomp can also log what calls are being made by using an audit profile.&lt;/p&gt;
&lt;p&gt;A custom seccomp profile is used to define which system calls are allowed and default actions for calls not specified. To enable a custom seccomp profile within a Pod, Kubernetes admins can write their seccomp profile JSON file to the /var/lib/kubelet/seccomp/ directory and add a seccompProfile to the Pod’s securityContext. A custom seccompProfile should also include two fields: Type: Localhost and localhostProfile: myseccomppolicy.json. Logging all system calls can help administrators know what system calls are needed for standard operations allowing them to restrict the seccomp profile further without losing system functionality.&lt;/p&gt;
&lt;h4 id=&#34;syslog&#34;&gt;SYSLOG&lt;/h4&gt;
&lt;p&gt;Kubernetes, by default, writes kubelet logs and container runtime logs to journald if the service is available. If organizations wish to utilize syslog utilities for systems that do not use them by default—or to collect logs from across the cluster and forward them to a syslog server or other log storage and aggregation platform—they can configure that capability manually. Syslog protocol defines a log message-formatting standard. Syslog messages include a header—consisting of a timestamp, hostname, application name, and process ID (PID)—and a message written in plaintext. Syslog services such as syslog-ng® and rsyslog are capable of collecting and aggregating logs from across a system in a unified format. Many Linux operating systems by default use rsyslog or journald—an event logging daemon, which optimizes log storage and output logs in syslog format via journalctl. The syslog utility, on nodes running certain Linux distributions logs events, by default, at the operating system level. Containers running these Linux distributions will, by default, collect logs using syslog as well. The logs that are collected by syslog utilities are stored in the local file system on each applicable node or container unless a log aggregation platform is configured to collect them.&lt;/p&gt;
&lt;h3 id=&#34;siem-platforms&#34;&gt;SIEM platforms&lt;/h3&gt;
&lt;p&gt;Security Information and Event Management (SIEM) software collects logs from across an organization’s network. SIEM software brings together firewall logs, application logs, and more; parsing them out to provide a centralized platform from which analysts can monitor system security. SIEM tools have variations in their capabilities. Generally, these platforms provide log collection, threat detection, and alerting capabilities. Some include machine learning capabilities, which can better predict system behavior and help to reduce false alerts. Organizations using these platforms in their environment can integrate them with Kubernetes to better monitor and secure clusters. Open source platforms for managing logs from a Kubernetes environment exist as an alternative to SIEM platforms.&lt;/p&gt;
&lt;p&gt;Containerized environments have many interdependencies between nodes, Pods, containers, and services. In these environments, Pods and containers are constantly being taken down and restarted on different nodes. This presents an extra challenge for traditional SIEMs, which typically use IP addresses to correlate logs. Even next-gen SIEM platforms may not always be suited to the complex Kubernetes environment. However, as Kubernetes has emerged as the most widely used container orchestration platform, many of the organizations developing SIEM tools have developed variations of their products specifically designed to work with the Kubernetes environment, providing full monitoring solutions for these containerized environments. Administrators should be aware of their platform’s capabilities and ensure that their logging sufficiently captures the environment to support future incident responses.&lt;/p&gt;
&lt;h3 id=&#34;alerting&#34;&gt;Alerting&lt;/h3&gt;
&lt;p&gt;Kubernetes does not natively support alerting; however, several monitoring tools with alerting capabilities are compatible with Kubernetes. If Kubernetes administrators choose to configure an alerting tool to work within a Kubernetes environment, there are several metrics for which administrators should monitor and configure alerts.&lt;/p&gt;
&lt;p&gt;Examples of cases that could trigger alerts include but are not limited to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;low disk space on any of the machines in the environment,&lt;/li&gt;
&lt;li&gt;available storage space on a logging volume running low,&lt;/li&gt;
&lt;li&gt;external logging service going offline,&lt;/li&gt;
&lt;li&gt;a Pod or application running with root permissions,&lt;/li&gt;
&lt;li&gt;requests being made by an account for resources they do not have permission for,&lt;/li&gt;
&lt;li&gt;an anonymous account being used or gaining privileges,&lt;/li&gt;
&lt;li&gt;Pod or Worker Node IP addresses being listed as the source ID of a Pod creation request,&lt;/li&gt;
&lt;li&gt;unusual system calls or failed API calls,&lt;/li&gt;
&lt;li&gt;user/admin behavior that is abnormal (i.e. at unusual times or from an unusual location), and&lt;/li&gt;
&lt;li&gt;significant deviations from the standard operation metrics baseline.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Alerting when storage is low can help avoid performance issues and log loss due to limited resources and help identify malicious cryptojacking attempts. Cases of privileged Pod execution can be investigated to determine if an administrator made a mistake, an authentic use case necessitates escalated privileges, or a malicious actor deployed a privileged Pod. Suspicious Pod creation source IP addresses could indicate that a malicious cyber actor has broken out of a container and is attempting to create a malicious Pod.&lt;/p&gt;
&lt;p&gt;Integrating Kubernetes with an organization’s existing SIEM platform, especially those with machine learning/big data capabilities, can be useful in identifying irregularities in audit logs and cutting down on false alerts. If configuring such a tool to work with Kubernetes, it should be configured so that these cases and any others applicable to the use case are configured to trigger alerts.&lt;/p&gt;
&lt;p&gt;Systems capable of acting automatically when suspected intrusions occur could potentially be configured to take steps to mitigate compromises while administrators respond to alerts. In the case of a Pod IP being listed as the source ID of a Pod creation request, one mitigation that could be implemented to keep the application available but temporarily stop any compromises of the cluster would be to automatically evict the Pod. Doing so would allow a clean version of the Pod to be rescheduled onto one of the nodes. Investigators can then examine the logs to determine if a breach occurred and, if so, how the malicious actors executed the compromise so that a patch can be deployed.&lt;/p&gt;
&lt;h3 id=&#34;service-meshes&#34;&gt;Service meshes&lt;/h3&gt;
&lt;p&gt;Service meshes are platforms that streamline microservice communications within an application by allowing for the logic of these communications to be coded into the service mesh rather than within each microservice. Coding this communication logic into individual microservices is difficult to scale, difficult to debug as failures occur, and difficult to secure. Using a service mesh can simplify this for developers. The mesh can:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;redirect traffic when a service is down,&lt;/li&gt;
&lt;li&gt;gather performance metrics for optimizing communications,&lt;/li&gt;
&lt;li&gt;allow management of service-to-service communication encryption,&lt;/li&gt;
&lt;li&gt;collect logs for service-to-service communication,&lt;/li&gt;
&lt;li&gt;collect logs from each service, and&lt;/li&gt;
&lt;li&gt;help developers diagnose problems and failures of microservices orcommunication mechanisms.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Service meshes can also help with migrating services to hybrid or multi-cloud environments. While service meshes are not necessary, they are an option that is highly suitable to the Kubernetes environment. Managed Kubernetes services often include their own service mesh. However, several other platforms are also available and, if desired, are highly customizable. Some of these include a Certificate Authority that generates and rotates certificates, allowing for secure TLS authentication between services. Administrators should consider using service meshes to harden Kubernetes cluster security.&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-figure-5-cluster-leveraging-service-mesh-to-integrate-logging-with-network-security&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;images/f5.jpg&#34; alt=&#34;Figure 5: Cluster leveraging service mesh to integrate logging with network security&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Figure 5: Cluster leveraging service mesh to integrate logging with network security
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;fault-tolerance&#34;&gt;Fault tolerance&lt;/h3&gt;
&lt;p&gt;Fault tolerance policies should be put in place to ensure logging service availability. These policies could differ depending on the specific Kubernetes use case. One policy that can be put in place is to allow new logs to overwrite the oldest log files if absolutely necessary in the event of storage capacity being exceeded.&lt;/p&gt;
&lt;p&gt;If logs are being sent to an external service, a mechanism should be in place for logs to be stored locally if a communication loss or external service failure occurs. Once communication to the external service is restored, a policy should be in place for the locally stored logs to be pushed up to the external server.&lt;/p&gt;
&lt;h3 id=&#34;tools&#34;&gt;Tools&lt;/h3&gt;
&lt;p&gt;Kubernetes does not include extensive auditing capabilities. However, the system is built to be extensible, allowing users the freedom to develop their own custom solution or to choose an existing add-on that suits their needs. One of the most common solutions is to add additional audit backend services, which can use the information logged by Kubernetes and perform additional functions for users, such as extended search parameters, data mapping features, and alerting functionality. Organizations that already use SIEM platforms can integrate Kubernetes with these existing capabilities. Open-source monitoring tools—such as the Cloud Native Computing Foundation’s Prometheus®, Grafana Labs’ Grafana®, and Elasticsearch’s Elastic Stack (ELK)®—are available to conduct event monitoring, run threat analytics, manage alerting, and collect resource isolation parameters, historical usage, and network statistics on running containers. Scanning tools can be useful when auditing the access control and permission configurations by assisting in identifying risky permission configurations in RBAC. NSA and CISA encourage organizations utilizing Intrusion Detection Systems (IDSs) on their existing environment to consider integrating that service into their Kubernetes environment as well. This integration would allow an organization to monitor for—and potentially kill containers showing signs of—unusual behavior so the containers can be restarted from the initial clean image. Many cloud service providers also provide container monitoring services for those wanting more managed and scalable solutions.&lt;/p&gt;
&lt;h2 id=&#34;upgrading-and-application-security-practices&#34;&gt;Upgrading and application security practices&lt;/h2&gt;
&lt;p&gt;Following the hardening guidance outlined in this document is a step toward ensuring the security of applications running on Kubernetes orchestrated containers. However, security is an ongoing process, and it is vital to keep up with patches, updates, and upgrades. The specific software components vary depending on the individual configuration, but each piece of the overall system should be kept as secure as possible. This includes updating: Kubernetes, hypervisors, virtualization software, plugins, operating systems on which the environment is running, applications running on the servers, and any other software hosted in the Kubernetes environment.&lt;/p&gt;
&lt;p&gt;The Center for Internet Security (CIS) publishes benchmarks for securing software. Administrators should adhere to the CIS benchmarks for Kubernetes and any other relevant system components. Administrators should check periodically to ensure their system&amp;rsquo;s security is compliant with the current security experts’ consensus on best practices. Periodic vulnerability scans and penetration tests should be performed on the various system components to proactively look for insecure configurations and zero-day vulnerabilities. Any discoveries should be promptly remediated before potential cyber actors can discover and exploit them.&lt;/p&gt;
&lt;p&gt;As updates are deployed, administrators should also keep up with removing any old components that are no longer needed from the environment. Using a managed Kubernetes service can help to automate upgrades and patches for Kubernetes, operating systems, and networking protocols. However, administrators must still patch and upgrade their containerized applications.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Works cited&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[1]  Center for Internet Security, &amp;ldquo;Kubernetes,&amp;rdquo; 2021. [Online]. Available: &lt;a href=&#34;https://cisecurity.org/resources/?type=benchmark&amp;amp;search=kubernetes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://cisecurity.org/resources/?type=benchmark&amp;search=kubernetes&lt;/a&gt;.
[2]  DISA, &amp;ldquo;Kubernetes STIG,&amp;rdquo; 2021. [Online]. Available: &lt;a href=&#34;https://dl.dod.cyber.mil.wp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://dl.dod.cyber.mil.wp&lt;/a&gt;- content/uploads/stigs/zip/U_Kubernetes_V1R1_STIG.zip. [Accessed 8 July 2021]
[3]  The Linux Foundation, &amp;ldquo;Kubernetes Documentation,&amp;rdquo; 2021. [Online]. Available: &lt;a href=&#34;https://kubernetes.io/docs/home/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://kubernetes.io/docs/home/&lt;/a&gt;. [Accessed 8 July 2021].
[4]  The Linux Foundation, &amp;ldquo;11 Ways (Not) to Get Hacked,&amp;rdquo; 18 07 2018. [Online]. Available: &lt;a href=&#34;https://kubernetes.io/blog/2018/07/18/11-ways-not-to-get-hacked/#10-&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://kubernetes.io/blog/2018/07/18/11-ways-not-to-get-hacked/#10-&lt;/a&gt; scan-images-and-run-ids. [Accessed 8 July 2021].
[5]  MITRE, &amp;ldquo;Unsecured Credentials: Cloud Instance Metadata API.&amp;rdquo; MITRE ATT&amp;amp;CK, 2021. [Online]. Available: &lt;a href=&#34;https://attack.mitre.org/techniques/T1552/005/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://attack.mitre.org/techniques/T1552/005/&lt;/a&gt;. [Accessed 8 July 2021].
[6]  CISA, &amp;ldquo;Analysis Report (AR21-013A): Strengthening Security Configurations to Defend Against Attackers Targeting Cloud Services.&amp;rdquo; Cybersecurity and Infrastructure Security Agency, 14 January 2021. [Online]. Available:https://us- cert.cisa.gov/ncas/analysis-reports/ar21-013a [Accessed 8 July 2021].&lt;/p&gt;
&lt;h2 id=&#34;appendix-a-example-dockerfile-for-non-root-application&#34;&gt;Appendix A: Example Dockerfile for non-root application&lt;/h2&gt;
&lt;p&gt;The following example is a Dockerfile that runs an application as a non-root user with non-group membership. The lines highlighted in red below are the portion specific to using non-root.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dockerfile&#34; data-lang=&#34;dockerfile&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; ubuntu:latest&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#Update and install the make utility&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; apt update &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt install -y make&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#Copy the source from a folder called &amp;#34;code&amp;#34; and build the application with the make utility&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COPY&lt;/span&gt; . /code&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; make /code&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#Create a new user (user1) and new group (group1); then switch into that user’s context&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; useradd user1 &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; groupadd group1&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;USER&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; user1:group1&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#Set the default entrypoint for the container CMD /code/app&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;appendix-b-example-deployment-template-for-read-only-file-systemfilesystem&#34;&gt;Appendix B: Example deployment template for read-only file systemfilesystem&lt;/h2&gt;
&lt;p&gt;The following is an example Kubernetes deployment template that uses a read-only root file system. The lines highlighted in red below are the portion specific to making the container’s filesystem read-only. The lines highlighted in blue are the portion showing how to create a writeable volume for applications requiring this capability.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;apps/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Deployment&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;web&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;web&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;web&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;web&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;web&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;containers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;sleep&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;999&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ubuntu:latest&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;web&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;securityContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;readOnlyRootFilesystem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumeMounts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;mountPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/writeable/location/here&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;volName&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;emptyDir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;volName&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;appendix-c-example-pod-security-policy&#34;&gt;Appendix C: Example Pod Security Policy&lt;/h2&gt;
&lt;p&gt;The following is an example Kubernetes Pod Security Policy that enforces strong security requirements for containers running in the cluster. This example is based on official Kubernetes documentation: &lt;a href=&#34;https://kubernetes.io/docs/concepts/policy/pod-security-policy/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://kubernetes.io/docs/concepts/policy/pod-security-policy/&lt;/a&gt;. Administrators are encouraged to tailor the policy to meet their organization’s requirements.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;policy/v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;PodSecurityPolicy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;restricted&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;annotations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;seccomp.security.alpha.kubernetes.io/allowedProfileNames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;docker/default,runtime/default&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apparmor.security.beta.kubernetes.io/allowedProfileNames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;runtime/default&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;seccomp.security.alpha.kubernetes.io/defaultProfileName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;runtime/default&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apparmor.security.beta.kubernetes.io/defaultProfileName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;runtime/default&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;privileged&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Required to prevent escalations to root. &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;allowPrivilegeEscalation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;requiredDropCapabilities&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;ALL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;s1&#34;&gt;&amp;#39;configMap&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;s1&#34;&gt;&amp;#39;emptyDir&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;s1&#34;&gt;&amp;#39;projected&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;s1&#34;&gt;&amp;#39;secret&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;s1&#34;&gt;&amp;#39;downwardAPI&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;s1&#34;&gt;&amp;#39;persistentVolumeClaim&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Assume persistentVolumes set up by admin are safe&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hostNetwork&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hostIPC&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hostPID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;runAsUser&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rule&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#39;MustRunAsNonRoot&amp;#39; # Require the container to run without root seLinux&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rule&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;RunAsAny&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# This assumes nodes are using AppArmor rather than SELinux&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;supplementalGroups&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rule&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;MustRunAs&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ranges&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Forbid adding the root group.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;min&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;65535&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;runAsGroup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rule&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;MustRunAs&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ranges&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Forbid adding the root group.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;min&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;65535&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;fsGroup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rule&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;MustRunAs&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ranges&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Forbid adding the root group.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;min&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;65535&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;readOnlyRootFilesystem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;appendix-d-example-namespace&#34;&gt;Appendix D: Example namespace&lt;/h2&gt;
&lt;p&gt;The following example is for each team or group of users, a Kubernetes namespace can be created using either a kubectl command or YAML file. Any name with the prefix kube- should be avoided as it may conflict with Kubernetes system reserved namespaces.&lt;/p&gt;
&lt;p&gt;Kubectl command to create a namespace:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl create namespace &amp;lt;insert-namespace-name-here&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To create namespace using YAML file, create a new file called my-namespace.yaml with the contents:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Namespace&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;&amp;lt;insert-namespace-name-here&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Apply the namespace using:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl create –f ./my-namespace.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To create new Pods in an existing namespace, switch to the desired namespace using:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl config use-context &amp;lt;insert-namespace-here&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Apply new deployment using:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl apply -f deployment.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Alternatively, the namespace can be added to the kubectl command using:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl apply -f deployment.yaml --namespace&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;lt;insert-namespace-here&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;or specify &lt;code&gt;namespace: &amp;lt;insert-namespace-here&amp;gt;&lt;/code&gt; under metadata in the YAML declaration.&lt;/p&gt;
&lt;p&gt;Once created, resources cannot be moved between namespaces. The resource must be deleted, then created in the new namespace.&lt;/p&gt;
&lt;h2 id=&#34;appendix-e-example-network-policy&#34;&gt;Appendix E: Example network policy&lt;/h2&gt;
&lt;p&gt;Network policies differ depending on the network plugin used. The following is an example network policy to limit access to the nginx service to Pods with the label access using the Kubernetes documentation: &lt;a href=&#34;https://kubernetes.io/docs/tasks/administer-cluster/declare-network-policy/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://kubernetes.io/docs/tasks/administer-cluster/declare-network-policy/&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;NetworkPolicy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;example-access-nginx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;prod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#this can any namespace or be left out if no namespace is used&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;podSelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;nginx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ingress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;podSelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;access&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The new NetworkPolicy can be applied using:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl apply -f policy.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A default deny all ingress policy:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;NetworkPolicy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;deny-all-ingress&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;podSelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;policyType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;Ingress&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A default deny all egress policy:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;NetworkPolicy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;deny-all-egress&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;podSelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;policyType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;Egress&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;appendix-f-example-limitrange&#34;&gt;Appendix F: Example LimitRange&lt;/h2&gt;
&lt;p&gt;LimitRange support is enabled by default in Kubernetes 1.10 and newer. The following YAML file specifies a LimitRange with a default request and limit, as well as a min and max request, for each container.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;LimitRange&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cpu-min-max-demo-lr&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;limits&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cpu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;defaultRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cpu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cpu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;min&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cpu 0.5&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Container&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A LimitRange can be applied to a namespace with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl apply -f &amp;lt;example-LimitRange&amp;gt;.yaml --namespace&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;lt;Enter-Namespace&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After this example LimitRange configuration is applied, all containers created in the namespace are assigned the default CPU request and limit if not specified. All containers in the namespace must have a CPU request greater than or equal to the minimum value and less than or equal to the maximum CPU value or the container will not be instantiated.&lt;/p&gt;
&lt;h2 id=&#34;appendix-g-example-resourcequota&#34;&gt;Appendix G: Example ResourceQuota&lt;/h2&gt;
&lt;p&gt;ResourceQuota objects to limit aggregate resource usage within a namespace are created by applying a YAML file to a namespace or specifying requirements in the configuration file of Pods. The following example is based on official Kubernetes documentation: &lt;a href=&#34;https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/quota-memory-cpu-namespace/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/quota-memory-cpu-namespace/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Configuration file for a namespace:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ResourceQuota&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;example-cpu-mem-resourcequota&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hard&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;requests.cpu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;requests.memory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;1Gi&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;limits.cpu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;limits.memory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;2Gi&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This ResourceQuota can be applied with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl apply -f example-cpu-mem-resourcequota.yaml -- &lt;span class=&#34;nv&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;lt;insert-namespace-here&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This ResourceQuota places the following constraints on the chosen namespace:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Every container must have a memory request, memory limit, CPU request, and CPU limit&lt;/li&gt;
&lt;li&gt;Aggregate memory request for all containers should not exceed 1 GiB&lt;/li&gt;
&lt;li&gt;Total memory limit for all containers should not exceed 2 GiB&lt;/li&gt;
&lt;li&gt;Aggregate CPU request for all containers should not exceed 1 CPU&lt;/li&gt;
&lt;li&gt;Total CPU limit for all containers should not exceed 2 CPUs&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;appendix-h-example-encryption&#34;&gt;Appendix H: Example encryption&lt;/h2&gt;
&lt;p&gt;To encrypt Secret data at rest, the following encryption configuration file provides an example to specify the type of encryption desired and the encryption key. Storing the encryption key in the encryption file only slightly improves security. The Secrets will be encrypted, but the key will be accessible in the EncryptionConfiguration file. This example is based on official Kubernetes documentation: &lt;a href=&#34;https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;apiserver.config.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;EncryptionConfiguration&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;secrets&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;providers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;aescbc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;keys&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;key1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;secret&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;&amp;lt;base 64 encoded secret&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;identity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To enable encryption at rest with this encryption file, restart the API server with the &lt;code&gt;--encryption- provider-config&lt;/code&gt; flag set with the location to the configuration file.&lt;/p&gt;
&lt;h2 id=&#34;appendix-i-example-kms-configuration&#34;&gt;Appendix I: Example KMS configuration&lt;/h2&gt;
&lt;p&gt;To encrypt Secrets with a Key Management Service (KMS) provider plugin, the following example encryption configuration YAML file can be used to set the properties for the provider. This example is based on official Kubernetes documentation: &lt;a href=&#34;https://kubernetes.io/docs/tasks/administer-cluster/kms-provider/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://kubernetes.io/docs/tasks/administer-cluster/kms-provider/&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;apiserver.config.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;EncryptionConfiguration&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;secrets&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;providers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;kms&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;myKMSPlugin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;endpoint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;unix://tmp/socketfile.sock&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cachesize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;timeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;3s&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;identity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To configure the API server to use the KMS provider, set the &lt;code&gt;--encryption- provider-config&lt;/code&gt; flag with the location of the configuration file and restart the API server.&lt;/p&gt;
&lt;p&gt;To switch from a local encryption provider to KMS, add the KMS provider section of the EncryptionConfiguration file above the current encryption method, as shown below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;apiserver.config.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;EncryptionConfiguration&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;secrets&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;providers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;kms&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;myKMSPlugin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;endpoint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;unix://tmp/socketfile.sock&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cachesize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;timeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;3s&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;aescbc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;keys&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;key1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;secret&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;&amp;lt;base64 encoded secret&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Restart the API server and run the command below to re-encrypt all Secrets with the KMS provider.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl get secrets --all-namespaces -o json &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; kubectl replace -f -
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;appendix-j-example-pod-reader-rbac-role&#34;&gt;Appendix J: Example pod-reader RBAC Role&lt;/h2&gt;
&lt;p&gt;To create a pod-reader Role, create a YAML file with the following contents:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Role&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;your-namespace-name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;pod-reader&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;apiGroups&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# &amp;#34;&amp;#34; indicates the core API group&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;pods&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;verbs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;get&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;watch&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;list&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Apply the Role using:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl apply --f role.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To create a global-pod-reader ClusterRole:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ClusterRole&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# &amp;#34;namespace&amp;#34; omitted since ClusterRoles are not bound to a namespace&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;global-pod-reader&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiGroups&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# &amp;#34;&amp;#34; indicates the core API group&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;pods&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;verbs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;get&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;watch&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;list&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Apply the Role using:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl apply --f clusterrole.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;appendix-k-example-rbac-rolebinding-and-clusterrolebinding&#34;&gt;Appendix K: Example RBAC RoleBinding and ClusterRoleBinding&lt;/h2&gt;
&lt;p&gt;To create a RoleBinding, create a YAML file with the following contents:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# This role binding allows &amp;#34;jane&amp;#34; to read Pods in the &amp;#34;your- namespace-name&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# namespace.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# You need to already have a Role names &amp;#34;pod-reader&amp;#34; in that namespace.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;RoleBinding&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;read-pods&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;your-namespace-name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;subjects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# You can specify more than one &amp;#34;subject&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;jane&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# &amp;#34;name&amp;#34; is case sensitive&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiGroup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;roleRef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# &amp;#34;roleRef&amp;#34; specifies the binding to a Role/ClusterRole # kind: Role # this must be a Role or ClusterRole&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# this must match the name of the Role or ClusterRole you wish to bind&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# to&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;pod-reader&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiGroup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Apply the RoleBinding using:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl apply --f rolebinding.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To create a ClusterRoleBinding, create a YAML file with the following contents:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# This cluster role binging allows anyone in the &amp;#34;manager&amp;#34; group to read&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Pod information in any namespace.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ClusterRoleBinding&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;global-pod-reader&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;subjects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# You can specify more than one &amp;#34;subject&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Group&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;manager&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Name is case sensitive&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiGroup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;roleRef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# &amp;#34;roleRef&amp;#34; specifies the binding to a Role/ClusterRole&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ClusterRole&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# this must be a Role or ClusterRole&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;global-pod-reader&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# this must match the name of the Role or ClusterRole you wish to bind to&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiGroup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Apply the RoleBinding using:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl apply --f clusterrolebinding.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;appendix-l-audit-policy&#34;&gt;Appendix L: Audit Policy&lt;/h2&gt;
&lt;p&gt;The following is an Audit Policy that logs all audit events at the highest level:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;audit.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Policy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;level&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;RequestResponse&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# This audit policy logs all audit events at the RequestResponse level&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This audit policy logs all events at the highest level. If an organization has the resources available to store, parse, and examine a large number of logs, then logging all events at the highest level is a good way of ensuring that, when an event occurs, all necessary contextual information is present in the logs. If resource consumption and availability is a concern, then more logging rules can be established to lower the logging level of non- critical components and routine non-privileged actions, as long as audit requirements for the system are being met. An example of how to establish these rules can be found in the official Kubernetes documentation: &lt;a href=&#34;https://kubernetes.io/docs/tasks/debug-application-cluster/audit/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://kubernetes.io/docs/tasks/debug-application-cluster/audit/&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;appendix-m-example-flags-with-which-to-submit-audit-policy-file-to-kube-apiserver&#34;&gt;Appendix M: Example flags with which to submit Audit Policy file to kube-apiserver&lt;/h2&gt;
&lt;p&gt;In the control plane, open the kube-apiserver.yaml file in a text editor. Editing the kube-apiserver configuration requires administrator privileges.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo vi /etc/kubernetes/manifests/kube-apiserver.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Add the following text to the kube-apiserver.yaml file:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;--audit-policy-file=/etc/kubernetes/policy/audit-policy.yaml --audit-log-path=/var/log/audit.log --audit-log-maxage=1825
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The audit-policy-file flag should be set with the path to the audit policy, and the audit-log-path flag should be set with the desired secure location for the audit logs to be written to. Other additional flags exist, such as the &lt;code&gt;audit-log-maxage&lt;/code&gt; flag shown here, which stipulates the maximum number of days the logs should be kept, and flags for specifying the maximum number of audit log files to retain, max log file size in megabytes, etc. The only flags necessary to enable logging are the &lt;code&gt;audit-policy-file&lt;/code&gt; and &lt;code&gt;audit-log-path&lt;/code&gt; flags. The other flags can be used to configure logging to match the organization’s policies.&lt;/p&gt;
&lt;p&gt;If a user’s kube-apiserver is run as a Pod, then it is necessary to mount the volume and configure hostPath of the policy and log file locations for audit records to be retained. This can be done by adding the following sections to the kube- apiserver.yaml file as noted in the Kubernetes documentation: &lt;a href=&#34;https://kubernetes.io/docs/tasks/debug-application-cluster/audit/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://kubernetes.io/docs/tasks/debug-application-cluster/audit/&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumeMounts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;mountPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/etc/kubernetes/audit-policy.yaml&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;audit&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;readOnly&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;mountPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/var/log/audit.log&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;audit-log&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;readOnly&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;hostPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/etc/kubernetes/audit-policy.yaml&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;audit&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;hostPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/var/log/audit.log&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;FileOrCreate&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;audit-log&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;appendix-n-webhook-configuration&#34;&gt;Appendix N: Webhook configuration&lt;/h2&gt;
&lt;p&gt;YAML file example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Config&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;preferences&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;clusters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;example-cluster&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cluster&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;http://127.0.0.1:8080&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#web endpoint address for the log files to be sent to&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;audit-webhook-service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;users&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;example-users&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;example-user&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;example-password&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;contexts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;example-context&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cluster&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;example-cluster&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;example-user&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;current-context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;example-context&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#source: https://dev.bitolog.com/implement-audits-webhook/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The audit events sent by the webhook are sent as HTTP POST requests with the JSON audit events in the request body. The address specified should point to an endpoint capable of accepting and parsing these audit events, whether it is a third-party service or an in-house configured endpoint.&lt;/p&gt;
&lt;p&gt;Example flags that submit webhook configuration file to &lt;code&gt;kube-apiserver&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;In the control plane edit the &lt;code&gt;kube-apiserver.yaml&lt;/code&gt; file&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo vi /etc/kubernetes/manifests/kube-apiserver.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;add the following text to the kube-apiserver.yaml file&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;--audit-webhook-config-file=/etc/kubernetes/policies/webhook-policy.yaml
--audit-webhook-initial-backoff=5
--audit-webhook-mode=batch
--audit-webhook-batch-buffer-size=5
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The audit-webhook-initial-backoff flag determines how long to wait after an initial failed request before retrying. The available webhook modes are batch, blocking, and blocking-strict. When using batch mode, it is possible to configure the maximum wait, buffer size, and more. The official Kubernetes documentation contains more details on the other configuration options: &lt;a href=&#34;https://kubernetes.io/docs/tasks/debug-application-cluster/audit/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://kubernetes.io/docs/tasks/debug-application-cluster/audit/&lt;/a&gt; and &lt;a href=&#34;https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
