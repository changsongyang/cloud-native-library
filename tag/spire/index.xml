<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SPIRE | 云原生资料库</title>
    <link>https://lib.jimmysong.io/tag/spire/</link>
      <atom:link href="https://lib.jimmysong.io/tag/spire/index.xml" rel="self" type="application/rss+xml" />
    <description>SPIRE</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><lastBuildDate>Mon, 23 Oct 2023 00:00:00 +0800</lastBuildDate>
    <image>
      <url>https://lib.jimmysong.io/media/sharing.png</url>
      <title>SPIRE</title>
      <link>https://lib.jimmysong.io/tag/spire/</link>
    </image>
    
    <item>
      <title>在 Envoy 中集成 SPIRE</title>
      <link>https://lib.jimmysong.io/spiffe-and-spire/examples/envoy/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/spiffe-and-spire/examples/envoy/</guid>
      <description>&lt;p&gt;本文指导你如何配置 Envoy 代理与 SPIFFE 和 SPIRE 配合使用。&lt;/p&gt;
&lt;p&gt;Envoy 是一种流行的开源服务代理，广泛用于提供抽象、安全、经过身份验证和加密的服务间通信。Envoy 拥有丰富的配置系统，允许灵活地与第三方进行交互。&lt;/p&gt;
&lt;p&gt;该配置系统的一个组成部分是 Secret Discovery Service 协议或 SDS。Envoy 使用 SDS 从 SDS 提供者检索和维护更新的“密钥”。在 TLS 身份验证的上下文中，这些密钥是 TLS 证书、私钥和可信 CA 证书。SPIRE 代理可以配置为 Envoy 的 SDS 提供者，使其能够直接向 Envoy 提供所需的密钥材料以进行 TLS 身份验证。SPIRE 代理还会根据需要重新生成短期密钥和证书。&lt;/p&gt;
&lt;p&gt;有关如何将 SPIRE 与 Envoy 集成的基于 Kubernetes 的示例，请参阅&lt;a href=&#34;https://github.com/spiffe/spire-tutorials/tree/main/k8s/envoy-x509&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;使用 X.509 证书集成 Envoy&lt;/a&gt;和&lt;a href=&#34;https://github.com/spiffe/spire-tutorials/tree/main/k8s/envoy-jwt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;使用 JWT 集成 Envoy&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;工作原理&#34;&gt;工作原理&lt;/h2&gt;
&lt;p&gt;当 Envoy 连接到 SPIRE 代理提供的 SDS 服务器时，代理会对 Envoy 进行验证，并确定应向 Envoy 公开哪些服务标识和 CA 证书，以通过 SDS。&lt;/p&gt;
&lt;p&gt;随着服务标识和 CA 证书的轮换，更新会流式传输回 Envoy，使其可以立即将其应用于新连接，无需中断或停机，并且无需私钥接触磁盘。换句话说，SPIRE 丰富的定义和验证服务的方法可以用于定位 Envoy 进程、为其定义标识，并为其提供 Envoy 可用于 TLS 通信的 X.509 证书和信任信息。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/spire_plus_envoy.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;高级别图示，显示了两个 Envoy 代理在使用 SPIRE 代理 SDS 实现获取用于相互认证的 TLS 通信的密钥的两个服务之间。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;配置-spire&#34;&gt;配置 SPIRE&lt;/h2&gt;
&lt;p&gt;在 SPIRE v0.10 版本中，默认启用了 SDS 支持，因此不需要进行 SPIRE 配置更改。在早期版本的 SPIRE 中，SPIRE 代理配置文件中需要设置 &lt;code&gt;enable_sds = true&lt;/code&gt;。该设置现已停用，应在 SPIRE v0.10 及更高版本的 SPIRE 代理配置文件中删除该设置。&lt;/p&gt;
&lt;h2 id=&#34;配置-envoy&#34;&gt;配置 Envoy&lt;/h2&gt;
&lt;h3 id=&#34;spire-代理集群&#34;&gt;SPIRE 代理集群&lt;/h3&gt;
&lt;p&gt;必须配置 Envoy 以与 SPIRE 代理通信，方法是配置一个指向 SPIRE 代理提供的 Unix 域套接字的集群。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;clusters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;spire_agent&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;connect_timeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;25s&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;http2_protocol_options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hosts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;pipe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/tmp/spire-agent/public/api.sock&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;connect_timeout&lt;/code&gt; 影响当 Envoy 在启动时 SPIRE 代理未运行或 SPIRE 代理重新启动时，Envoy 能够快速响应的速度。&lt;/p&gt;
&lt;h3 id=&#34;tls-证书&#34;&gt;TLS 证书&lt;/h3&gt;
&lt;p&gt;要从 SPIRE 获取 TLS 证书和私钥，可以在 TLS 上下文中设置 SDS 配置。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;tls_context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;common_tls_context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tls_certificate_sds_secret_configs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;spiffe://example.org/backend&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;sds_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;api_config_source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;api_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;GRPC&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;grpc_services&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;envoy_grpc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cluster_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;spire_agent&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;TLS 证书的名称是 Envoy 作为代理的服务的 SPIFFE ID。&lt;/p&gt;
&lt;h3 id=&#34;验证上下文&#34;&gt;验证上下文&lt;/h3&gt;
&lt;p&gt;Envoy 使用可信 CA 证书来验证对等证书。验证上下文提供这些可信 CA 证书。SPIRE 可以为每个信任域提供验证上下文。&lt;/p&gt;
&lt;p&gt;要获取信任域的验证上下文，可以在 TLS 上下文的 SDS 配置中配置验证上下文，将验证上下文的名称设置为信任域的 SPIFFE ID。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;tls_context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;common_tls_context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;validation_context_sds_secret_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;spiffe://example.org&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;sds_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;api_config_source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;api_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;GRPC&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;grpc_services&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;envoy_grpc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cluster_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;spire_agent&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;SPIFFE 和 SPIRE 的重点是促进安全身份验证作为授权的构建块，而不是授权本身，因此验证上下文中的授权相关字段（例如 &lt;code&gt;match_subject_alt_names&lt;/code&gt;）不在其范围之内。相反，我们建议你利用 Envoy 的广泛过滤器框架执行授权。&lt;/p&gt;
&lt;p&gt;此外，你可以配置 Envoy 以将客户端证书详细信息转发到目标服务，使其能够执行自己的授权步骤，例如使用嵌入在客户端 X.509-SVID 的 URI SAN 中的 SPIFFE ID。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SPIFFE 基本概念</title>
      <link>https://lib.jimmysong.io/spiffe-and-spire/concept/spiffe/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/spiffe-and-spire/concept/spiffe/</guid>
      <description>&lt;p&gt;SPIFFE，即普适安全生产身份框架（Secure Production Identity Framework for Everyone），是一套开源标准，用于在动态和异构环境中安全地进行身份识别。采用 SPIFFE 的系统无论在哪里运行，都可以轻松可靠地相互认证。&lt;/p&gt;
&lt;p&gt;SPIFFE 开源规范的核心是——通过简单 API 定义了一个短期的加密身份文件 SVID。然后，工作负载进行认证时可以使用该身份文件，例如建立 TLS 连接或签署和验证 JWT 令牌等。&lt;/p&gt;
&lt;p&gt;SPIFFE 已经在云原生应用中得到了大量的应用，尤其是在 Istio 和 Envoy 中。下面将向你介绍 SPIFFE 的一些基本概念。&lt;/p&gt;
&lt;h2 id=&#34;工作负载&#34;&gt;工作负载&lt;/h2&gt;
&lt;p&gt;工作负载是一个单一的软件实体，通过特定配置部署，用于单一目的；它可能包括多个运行中的软件实例，所有这些实例执行相同的任务。术语“工作负载”可能涵盖软件系统的各种不同定义，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运行 Python Web 应用程序的 Web 服务器，部署在一组虚拟机上，前面有一个负载均衡器。&lt;/li&gt;
&lt;li&gt;一个 MySQL 数据库的实例。&lt;/li&gt;
&lt;li&gt;处理队列中条目的工作程序。&lt;/li&gt;
&lt;li&gt;一组独立部署的系统共同工作，例如使用数据库服务的 Web 应用程序。Web 应用程序和数据库也可以分别被视为工作负载。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于 SPIFFE 来说，工作负载往往比物理或虚拟节点更精细 - 通常精细到节点上的单个进程。对于在容器编排器中托管的工作负载而言，这对于多个工作负载可以共存（但在彼此之间隔离）于单个节点的情况非常重要。&lt;/p&gt;
&lt;p&gt;对于 SPIFFE 来说，工作负载也可能跨越多个节点 - 例如，一个可以在多台机器上同时运行的弹性缩放的 Web 服务器。&lt;/p&gt;
&lt;p&gt;尽管在不同的上下文中，将何为工作负载的粒度会有所不同，但对于 SPIFFE 的目的而言，&lt;em&gt;假定&lt;/em&gt;工作负载与其他工作负载隔离得足够好，以至于恶意的工作负载在发放证书后无法窃取另一个工作负载的凭据。此隔离的稳固性以及其实现机制超出了 SPIFFE 的范围。&lt;/p&gt;
&lt;h2 id=&#34;spiffe-id&#34;&gt;SPIFFE ID&lt;/h2&gt;
&lt;p&gt;SPIFFE ID 是一个字符串，唯一且具体地标识一个工作负载。SPIFFE ID 也可以分配给工作负载运行在的中间系统（如一组虚拟机）。例如，&lt;strong&gt;spiffe://acme.com/billing/payments&lt;/strong&gt; 是一个有效的 SPIFFE ID。&lt;/p&gt;
&lt;p&gt;SPIFFE ID 是一个&lt;a href=&#34;https://tools.ietf.org/html/rfc3986&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;统一资源标识符 (URI)&lt;/a&gt;，其格式如下：&lt;strong&gt;spiffe://信任域/工作负载标识符&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;工作负载标识符&lt;/em&gt;唯一地标识&lt;a href=&#34;https://spiffe.io/docs/latest/spiffe-about/spiffe-concepts/#trust-domain&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;信任域&lt;/a&gt;中的特定工作负载。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/spiffe/spiffe/blob/main/standards/SPIFFE.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIFFE 规范&lt;/a&gt;详细描述了 SPIFFE ID 的格式和用途。&lt;/p&gt;
&lt;h2 id=&#34;信任域&#34;&gt;信任域&lt;/h2&gt;
&lt;p&gt;信任域对应于系统的信任根。信任域可以代表运行其独立 SPIFFE 基础设施的个人、组织、环境或部门。在相同信任域中标识的所有工作负载都会收到可以与信任域的根密钥进行验证的身份文件。&lt;/p&gt;
&lt;p&gt;通常建议将位于不同物理位置（例如不同数据中心或云区域）或应用不同安全实践的环境（例如与生产环境相比的暂存或实验环境）的工作负载保持在不同的信任域中。&lt;/p&gt;
&lt;h2 id=&#34;spiffe-可验证身份文件svid&#34;&gt;SPIFFE 可验证身份文件（SVID）&lt;/h2&gt;
&lt;p&gt;SVID 是工作负载用于向资源或调用方证明其身份的文档。如果由 SPIFFE ID 信任域内的权威签名，SVID 被认为是有效的。&lt;/p&gt;
&lt;p&gt;一个 SVID 包含一个单一的 SPIFFE ID，代表了呈现它的服务的身份。它将 SPIFFE ID 编码在一个密码学可验证的文档中，支持两种当前支持的格式之一：X.509 证书或 JWT 令牌。&lt;/p&gt;
&lt;p&gt;由于令牌容易受到&lt;em&gt;重放攻击&lt;/em&gt;，在传输中获取了令牌后，攻击者可以使用它来冒充一个工作负载，因此建议尽可能使用 X.509-SVIDs。但是，在某些情况下，JWT 令牌格式可能是唯一的选择，例如当你的架构在两个工作负载之间有一个 L7 代理或负载均衡器时。&lt;/p&gt;
&lt;p&gt;有关 SVID 的详细信息，请参阅&lt;a href=&#34;https://github.com/spiffe/spiffe/blob/main/standards/X509-SVID.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SVID 规范&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;spiffe-工作负载-api&#34;&gt;SPIFFE 工作负载 API&lt;/h2&gt;
&lt;p&gt;工作负载 API 提供以下功能：&lt;/p&gt;
&lt;p&gt;对于 X.509 格式的身份文件（X.509-SVID）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;其身份，以 SPIFFE ID 形式描述。&lt;/li&gt;
&lt;li&gt;与该 ID 相关的私钥，可用于代表工作负载对数据进行签名。还创建了相应的短暂的 X.509 证书，即 X509-SVID。这可用于建立 TLS 连接或以其他方式对其他工作负载进行身份验证。&lt;/li&gt;
&lt;li&gt;一组证书 - 称为&lt;a href=&#34;https://spiffe.io/docs/latest/spiffe-about/spiffe-concepts/#trust-bundle&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;信任捆绑包&lt;/a&gt; - 可用于验证另一个工作负载呈现的 X.509-SVID。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于 JWT 格式的身份文件（JWT-SVID）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;其身份，以 SPIFFE ID 形式描述。&lt;/li&gt;
&lt;li&gt;JWT 令牌&lt;/li&gt;
&lt;li&gt;一组证书 - 称为&lt;a href=&#34;https://spiffe.io/docs/latest/spiffe-about/spiffe-concepts/#trust-bundle&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;信任捆绑包&lt;/a&gt; - 可用于验证其他工作负载的身份。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;与&lt;a href=&#34;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Amazon EC2 实例元数据 API&lt;/a&gt;和&lt;a href=&#34;https://cloud.google.com/compute/docs/storing-retrieving-metadata&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google GCE 实例元数据 API&lt;/a&gt;类似，工作负载 API 不要求调用工作负载具有自己的身份知识，或在调用 API 时拥有任何身份验证令牌。这意味着你的应用程序无需将任何身份验证密钥与工作负载一起部署。&lt;/p&gt;
&lt;p&gt;然而，与这些其他 API 不同，工作负载 API 是平台无关的，并且可以在进程级别以及内核级别识别运行的服务 - 这使其适用于与容器调度器（如 Kubernetes）一起使用。&lt;/p&gt;
&lt;p&gt;为了最小化由于密钥泄露或被破坏而造成的风险，所有私钥（及相应的证书）都是短暂的，会经常自动轮换。在相应的密钥到期之前，工作负载可以从工作负载 API 请求新的密钥和信任捆绑包。&lt;/p&gt;
&lt;h2 id=&#34;信任捆绑包&#34;&gt;信任捆绑包&lt;/h2&gt;
&lt;p&gt;在使用 X.509-SVID 时，信任捆绑包用于由目标工作负载验证源工作负载的身份。信任捆绑包是一个包含一个或多个证书颁发机构（CA）根证书的集合，工作负载应将其视为可信任的。信任捆绑包包含了验证 X.509 和 JWT SVID 的公钥材料。&lt;/p&gt;
&lt;p&gt;用于验证 X.509 SVID 的公钥材料是一组证书。用于验证 JWT 的公钥材料是一个原始的公钥。信任捆绑包的内容经常会发生变化。在调用工作负载 API 时，工作负载会检索信任捆绑包。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SPIFFE ID 和 SVID</title>
      <link>https://lib.jimmysong.io/spiffe-and-spire/standard/spiffe-id/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/spiffe-and-spire/standard/spiffe-id/</guid>
      <description>&lt;p&gt;SPIFFE 标准提供了一个规范，用于在异构环境和组织边界中引导和颁发服务的身份。它包括各种规范，每个规定了 SPIFFE 功能的特定子集的操作。&lt;/p&gt;
&lt;p&gt;特别是本文档作为 SPIFFE 标准的核心规范。虽然在 SPIFFE 范围内还有其他规范，但符合本文档就足以实现 SPIFFE 合规性，并获得 SPIFFE 标准本身的互操作性好处。&lt;/p&gt;
&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;
&lt;p&gt;本文档提出了正式的 SPIFFE 规范。它定义了 SPIFFE 标准的两个最基本组件：SPIFFE 身份和 SPIFFE 可验证身份文档。&lt;/p&gt;
&lt;p&gt;第 2 节概述了 SPIFFE 身份（SPIFFE ID）及其命名空间。SPIFFE ID 被定义为符合&lt;a href=&#34;https://tools.ietf.org/html/rfc3986&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 3986&lt;/a&gt;标准的 URI，包括“信任域名”和相关路径。信任域名作为 URI 的授权组件，用于识别发放给定身份的系统。以下示例演示了如何构造 SPIFFE ID：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;spiffe://trust-domain-name/path&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;有效的 SPIFFE ID 必须将方案设置为&lt;code&gt;spiffe&lt;/code&gt;，包含非零的信任域名，并且不能包含查询或片段组件。换句话说，SPIFFE ID 由&lt;code&gt;spiffe&lt;/code&gt;方案和一个特定站点的&lt;code&gt;hier-part&lt;/code&gt;（其中包括授权组件和可选路径）完全定义。&lt;/p&gt;
&lt;h3 id=&#34;信任域&#34;&gt;信任域&lt;/h3&gt;
&lt;p&gt;信任域对应于系统的信任根。信任域可以代表独立运行其自己的 SPIFFE 基础设施的个人、组织、环境或部门。&lt;/p&gt;
&lt;p&gt;信任域名称通常是自我注册的，与公共 DNS 不同，没有委托权机构来断言并注册基本域名到实际的法律实体，或者断言该法律实体对任何特定信任域名拥有公正和正当的权利。&lt;/p&gt;
&lt;p&gt;信任域名被定义为 URI 的授权组件，并应用以下限制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;授权组件的&lt;code&gt;host&lt;/code&gt;部分不得为空。&lt;/li&gt;
&lt;li&gt;授权组件的&lt;code&gt;userinfo&lt;/code&gt;和&lt;code&gt;port&lt;/code&gt;部分必须为空。&lt;/li&gt;
&lt;li&gt;授权组件的&lt;code&gt;host&lt;/code&gt;部分必须小写。&lt;/li&gt;
&lt;li&gt;授权组件的&lt;code&gt;host&lt;/code&gt;部分只能包含字母、数字、点、破折号和下划线（[a-z0-9.-_]）。&lt;/li&gt;
&lt;li&gt;授权组件的&lt;code&gt;host&lt;/code&gt;部分不能包含百分比编码的字符。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;请注意，此定义不排除用点分四段表示法表示的 IPv4 地址，但排除了 IPv6 地址。DNS 名称是有效信任域名的严格子集。实现在处理信任域名时，无论它们是有效的 IP 地址还是有效的 DNS 名称，都不得以不同方式处理它们。&lt;/p&gt;
&lt;h4 id=&#34;信任域名称冲突&#34;&gt;信任域名称冲突&lt;/h4&gt;
&lt;p&gt;信任域操作员可以自由选择任何他们认为合适的信任域名称：没有中央权威机构来监管或注册信任域名称。因此，不能保证全局唯一性，也没有技术手段阻止不同的信任域使用相同的信任域名称。&lt;/p&gt;
&lt;p&gt;为防止意外碰撞（两个信任域选择相同的名称），建议操作员选择高度可能全球唯一的信任域名称。即使信任域名称不是 DNS 名称，但如果可用，使用注册的域名作为信任域名的后缀将降低意外碰撞的可能性；例如，如果信任域操作员拥有域名&lt;code&gt;example.com&lt;/code&gt;，那么使用类似&lt;code&gt;trust_domain_name.example.com&lt;/code&gt;的信任域名可能不会产生冲突。当信任域名在没有操作员输入的情况下自动生成时，强烈建议随机生成一个唯一的名称（例如 UUID）。&lt;/p&gt;
&lt;p&gt;发生冲突时，这些信任域将继续独立运行，但将无法联合（相互连接）。因为每个信任域使用独特的信任根，由一个信任域发放的身份声明将在另一个信任域中验证失败。&lt;/p&gt;
&lt;h3 id=&#34;路径&#34;&gt;路径&lt;/h3&gt;
&lt;p&gt;SPIFFE ID 的路径组件允许唯一标识给定的工作负载。路径的含义是开放式的，由管理员负责定义。&lt;/p&gt;
&lt;p&gt;有效的 SPIFFE ID 路径组件必须遵循以下规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;路径组件不能包含百分比编码的字符。&lt;/li&gt;
&lt;li&gt;路径组件不能包含空段或相对路径修饰符（即&lt;code&gt;.&lt;/code&gt;、&lt;code&gt;..&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;路径组件不能以斜杠结尾。&lt;/li&gt;
&lt;li&gt;单个路径段只能包含字母、数字、点、破折号和下划线（[a-zA-Z0-9.-_]）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;路径可以是分层的，类似于文件系统路径。路径的具体含义保留给实施者，不属于 SVID 规范的范围之内。以下是一些示例和约定。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;直接标识服务&lt;/p&gt;
&lt;p&gt;通常，直接标识服务是有价值的。例如，管理员可能会决定在特定一组节点上运行的任何进程都应该能够以特定的身份呈现自己。例如：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;spiffe://staging.example.com/payments/mysql&lt;/code&gt;
或
&lt;code&gt;spiffe://staging.example.com/payments/web-fe&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;上述两个 SPIFFE ID 指代了两个不同的组件 - mysql 数据库服务和一个运行在暂存环境中的支付服务的 web 前端。环境“staging”的含义和“payments”作为高级服务集合的含义由实施者定义。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;标识服务所有者&lt;/p&gt;
&lt;p&gt;通常，更高级别的编排器和平台可能已经内置了它们自己的身份概念（如 Kubernetes 服务账户或 AWS/GCP 服务账户），直接将 SPIFFE 身份映射到这些身份是很有帮助的。例如：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;spiffe://k8s-west.example.com/ns/staging/sa/default&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在这个示例中，example.com 的管理员正在运行一个名为 k8s-west.example.com 的 Kubernetes 集群，该集群有一个“staging”命名空间，在其中有一个名为“default”的服务账户（sa）。这些都是由 SPIFFE 管理员定义的约定，而不是本规范所保证的断言。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不透明的 SPIFFE 身份&lt;/p&gt;
&lt;p&gt;上述示例是说明性的，在最一般的情况下，SPIFFE 路径可能是不透明的，不包含任何可见的分层信息。例如，地理位置、逻辑系统分区和/或服务名称等元数据可以由注册身份及其属性的次级系统提供。可以查询以检索与 SPIFFE 标识符相关联的任何元数据。例如：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;spiffe://example.com/9eebccd2-12bf-40a6-b262-65fe0487d453&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;最大-spiffe-id-长度&#34;&gt;最大 SPIFFE ID 长度&lt;/h3&gt;
&lt;p&gt;如&lt;a href=&#34;https://tools.ietf.org/html/rfc3986&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 3986&lt;/a&gt;定义的 URI 没有最大长度。出于互操作性考虑，SPIFFE 实现必须支持最长为 2048 字节的 SPIFFE URI，并且不应生成长度大于 2048 字节的 URI。&lt;a href=&#34;https://tools.ietf.org/html/rfc3986&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 3986&lt;/a&gt;仅允许 ASCII 字符，因此 SPIFFE ID 的推荐最大长度为 2048 字节。&lt;/p&gt;
&lt;p&gt;所有 URI 组件都会影响 URI 的长度，包括“spiffe”方案、“：//”分隔符、信任域名和路径组件。非 ASCII 字符在将其编码为 ASCII 字符后会影响 URI 的长度。请注意，&lt;a href=&#34;https://tools.ietf.org/html/rfc3986&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 3986&lt;/a&gt;为 URI 的“host”组件定义了最大长度为 255 个字符；因此，信任域名的最大长度为 255 字节。&lt;/p&gt;
&lt;h3 id=&#34;spiffe-id-解析&#34;&gt;SPIFFE ID 解析&lt;/h3&gt;
&lt;p&gt;SPIFFE ID 遵循由&lt;a href=&#34;https://tools.ietf.org/html/rfc3986&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 3986&lt;/a&gt;定义的 URI 规范。SPIFFE ID 的方案和信任域名对大小写不敏感，而路径对大小写敏感。&lt;/p&gt;
&lt;h2 id=&#34;spiffe-可验证身份文档&#34;&gt;SPIFFE 可验证身份文档&lt;/h2&gt;
&lt;p&gt;SPIFFE 可验证身份文档（SVID）是工作负载将其身份通信给资源或调用者的机制。如果 SVID 已由 SPIFFE ID 所在信任域内的授权方签名，则认为 SVID 是有效的。&lt;/p&gt;
&lt;h3 id=&#34;svid-信任&#34;&gt;SVID 信任&lt;/h3&gt;
&lt;p&gt;SPIFFE 信任根植于给定 ID 的信任域。每个信任域必须存在一个签名授权机构，该授权机构必须携带自己的 SVID。签名授权机构的 SPIFFE ID 应该驻留在其具有权威性的信任域中，并且不应具有路径组件。授权机构的 SVID 然后形成了给定信任域的信任基础。&lt;/p&gt;
&lt;p&gt;如果需要，可以通过使用外部信任域授权机构的私钥对授权机构的 SVID 进行签名来实现信任链。如果不需要链接信任，那么授权机构的 SVID 将进行自签名。&lt;/p&gt;
&lt;h3 id=&#34;svid-组件&#34;&gt;SVID 组件&lt;/h3&gt;
&lt;p&gt;SVID 是一个相当简单的构造，包括三个基本组件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个 SPIFFE ID&lt;/li&gt;
&lt;li&gt;一个有效的签名&lt;/li&gt;
&lt;li&gt;一个可选的公钥&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SPIFFE ID 和公钥（如果存在）必须包含在签名的有效载荷的一部分中。如果包含了公钥，则相应的私钥将由发放 SVID 的实体保留，并用于证明对 SVID 本身的所有权。&lt;/p&gt;
&lt;p&gt;个别的 SVID 规范可能要求或以其他方式允许在 SVID 中包含超出此处描述的内容。所包含信息的性质可能或可能不会严格由相关的 SPIFFE 规范定义 - 例如，JWT-SVID 规范允许用户在 SVID 本身中包含任意信息。在相关 SVID 规范未明确指定此附加信息的情况下，操作者在将此信息用作安全决策的输入时应格外小心，特别是如果要验证的 SVID 属于不同的信任域。有关更多信息，请参阅安全注意事项部分。&lt;/p&gt;
&lt;h3 id=&#34;svid-格式&#34;&gt;SVID 格式&lt;/h3&gt;
&lt;p&gt;SVID 本身不是一种文件类型。已经存在许多文件格式可以满足 SPIFFE SVID 的需求，我们不希望重新发明这些格式。相反，我们定义了一组特定于格式的规范，规范化了 SVID 信息的编码。&lt;/p&gt;
&lt;p&gt;为了使 SVID 被视为有效，它必须利用已定义相应规范的文件类型。在撰写本文时，唯一受支持的文件类型是 X.509 和 JWT。请注意，特定于格式的 SVID 规范可能会升级本文中规定的要求。&lt;/p&gt;
&lt;h2 id=&#34;安全注意事项&#34;&gt;安全注意事项&lt;/h2&gt;
&lt;p&gt;本节包含在使用 SPIFFE ID 和 SVID 时实施者和用户应考虑的安全注意事项。&lt;/p&gt;
&lt;h3 id=&#34;svid-断言&#34;&gt;SVID 断言&lt;/h3&gt;
&lt;p&gt;SVID 始终包含一组数据 - 至少是一个 SPIFFE ID。有时，此数据代表了信任域授权机构对 SVID 主体所做的断言。在从此数据中解释含义时，必须小心确保所有涉及方都充分理解所使用信息的含义和重要性。&lt;/p&gt;
&lt;p&gt;在考虑给定断言的相对安全性时，有四个主要问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先是时间上的准确性 - SVID 在到期之前一段时间内是有效的，SVID 中的断言在 SVID 的整个生命周期内是否为真？&lt;/li&gt;
&lt;li&gt;其次，断言的范围和影响 - 断言最初是在什么上下文下进行的，它的影响有多大？&lt;/li&gt;
&lt;li&gt;第三是解释和含义的问题 - 断言对授权机构和消费者是否具有相同的含义或解释，或者存在着不同的解释可能性？&lt;/li&gt;
&lt;li&gt;最后，断言本身的真实性在某些情况下可能会受到质疑。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本节探讨了这四个关注领域的所有方面，并提供了操作者可以评估任何给定 SVID 断言的相对安全性的指导方针。一般来说，操作者应该以谨慎为原则，只包含那些对所涉及的断言的安全性具有非常高度信心的断言。&lt;/p&gt;
&lt;p&gt;值得注意的是，虽然通常由 SPIFFE 规范直接形式化的断言通常不容易受到与解释和含义相关的问题的影响，但它们仍然可能容易受到与真实性相关的问题的影响。但是，由于 SPIFFE 定义的断言的范围非常有限，因此在这方面的真实性问题表明了与问题相关的信任域的安全姿态的更大问题，此时操作者应该认真考虑是否应该在第一时间与这些系统交换数据。&lt;/p&gt;
&lt;h4 id=&#34;时间上的准确性&#34;&gt;时间上的准确性&lt;/h4&gt;
&lt;p&gt;SVID 在一段有限的时间内有效，主要是为了降低密钥被泄露和相关损害的可能性。虽然通常情况下，SVID 中的断言在签发时是真实的，但并不一定意味着在使用时也是真实的。&lt;/p&gt;
&lt;p&gt;某些类型的断言比其他类型更容易受到此问题的影响。服务所有者的名称、角色或组成员资格以及访问策略都是在 SVID 签发时和验证或使用时之间更有可能发生变化的示例。相反，工作负载及其运行时的自然属性（例如 SPIFFE ID 或工作负载所在的区域）通常与工作负载的生命周期绑定，因此不太可能发生变化，这使得它们不太容易受到时间上的准确性的问题影响。&lt;/p&gt;
&lt;p&gt;在决定是否应该在 SVID 中包含某个特定的断言时，考虑到这一点是很重要的。在 SVID 中作出的断言将被认为在 SVID 的生命周期内都是有效的，并且对于具有旧断言的所有 SVID 来说，将首先过期，因此在活动系统上对此断言进行更改（或撤销）将会很费时。如果对于所考虑的断言的波动性不清楚，操作者应该以谨慎为原则，并将其排除在 SVID 之外。&lt;/p&gt;
&lt;h4 id=&#34;范围和影响&#34;&gt;范围和影响&lt;/h4&gt;
&lt;p&gt;SVID 由位于其信任域中的授权机构签名。签名授权机构有责任验证其签署的 SVID 中的所有信息，而包含在 SVID 中的所有断言实际上都是由签名授权机构所做的断言。&lt;/p&gt;
&lt;p&gt;此授权机构的影响和断言所做的范围是自然有限的。一个信任域的授权机构的权限不应该对其他信任域中的实体做出断言（即其断言的范围仅限于其控制下的实体）。同样，在消费 SVID 数据时，消费者应该将其中包含的所有断言视为受到 SVID 所在信任域的限制。&lt;/p&gt;
&lt;p&gt;例如：如果信任域 A 和 B 都使用名为“role”的属性，那么信任域 A 中具有“admin”角色的实体可以使用该角色做出自己信任域中 SVID 的断言，但信任域 B 中的实体不能使用与 A 中相同的断言对其 SVID 进行断言。&lt;/p&gt;
&lt;p&gt;在这方面，SPIFFE 设计意图是将这些信任域之间的安全隔离形式化并保证在接受 SPIFFE SVID 的所有系统中得到正确执行。&lt;/p&gt;
&lt;h4 id=&#34;解释&#34;&gt;解释&lt;/h4&gt;
&lt;p&gt;通过签名 SVID 断言，签名授权机构明确其对所签名断言的含义的解释。此解释的范围由信任域的信任基础确定。&lt;/p&gt;
&lt;p&gt;此外，消费者和其他参与者也可以对断言的含义进行自己的解释。例如，可能存在一个交叉信任域的场景，其中包含了不同信任域中的实体。这些实体可能会在实体之间以不同方式解释相同的断言。&lt;/p&gt;
&lt;p&gt;操作者和开发人员在评估任何给定 SVID 断言的相对安全性时应该非常小心，特别是如果要验证的 SVID 属于不同的信任域。尽管通常情况下这种情况不会出现问题，但它也可能会导致复杂的安全问题，甚至不可知的问题。&lt;/p&gt;
&lt;h4 id=&#34;真实性&#34;&gt;真实性&lt;/h4&gt;
&lt;p&gt;就像所有数字证书和断言一样，SVID 的真实性取决于其颁发方的安全性。签名授权机构的私钥的保护是 SVID 真实性的主要保障。如果授权机构的私钥暴露或泄漏，那么可以生成无效 SVID，并可能会导致错误的授权。&lt;/p&gt;
&lt;p&gt;授权机构的私钥的安全性是信任域操作员的责任，他们应该采取必要的措施来确保私钥的安全，包括使用强大的密码学方法（如硬件安全模块）来保护私钥。此外，应定期更换私钥以降低突破的风险。&lt;/p&gt;
&lt;p&gt;授权机构的私钥的安全性也是操作员选择是否使用外部信任域授权机构的一个重要考虑因素。如果使用外部授权机构的私钥进行签名，那么授权机构的私钥的安全性不再完全由信任域操作员控制，而是由外部授权机构的授权机构控制。这可能会引入一些风险和不确定性，特别是如果外部授权机构是第三方服务或实体。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;请注意，上述文档是一个假设的 SPIFFE（面向所有人的安全生产身份框架）标准的核心规范的示例草稿。实际的 SPIFFE 规范可能会包含更多细节和具体规定，同时也可能会参考其他相关规范。在实际使用中，请始终参考最新的 SPIFFE 规范文档以确保遵守正确的标准和规定。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>获取 SPIRE</title>
      <link>https://lib.jimmysong.io/spiffe-and-spire/installation/getting-spire/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/spiffe-and-spire/installation/getting-spire/</guid>
      <description>&lt;p&gt;本页面描述了一些开始使用 SPIRE 的选项。&lt;/p&gt;
&lt;h2 id=&#34;docker-compose&#34;&gt;Docker Compose&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://spiffe.io/docs/latest/try/spire101/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 101&lt;/a&gt; 是一个在 Docker Compose 上运行的 SPIRE 入门介绍&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spiffe/spire-tutorials&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;spire-tutorials&lt;/a&gt; 存储库中提供了其他 Docker Compose 演示&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;kubernetes&#34;&gt;Kubernetes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;SPIRE 没有官方的 Helm chart、Kustomize 文件或自定义资源操作器，但&lt;a href=&#34;https://spiffe.io/docs/latest/spire/installing/getting-started-k8s/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes 快速入门&lt;/a&gt; 包括一套用于测试 SPIRE Server 和 Agent 的基本 Kubernetes YAML 文件&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spiffe/spire-tutorials&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;spire-tutorials&lt;/a&gt; 存储库中提供了其他 Kubernetes 演示&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;linux&#34;&gt;Linux&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;SPIRE GitHub &lt;a href=&#34;https://github.com/spiffe/spire/releases&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;releases&lt;/a&gt; 页面提供了每个 SPIRE 版本的下载链接和变更日志&lt;/li&gt;
&lt;li&gt;spiffe.io 的&lt;a href=&#34;https://spiffe.io/downloads/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;获取 SPIRE&lt;/a&gt; 页面提供了其他下载选项和构建 SPIRE 的说明&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://spiffe.io/docs/latest/spire/installing/getting-started-linux-macos-x/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Linux 和 MacOS X 快速入门&lt;/a&gt; 介绍了如何下载和测试 SPIRE Server 和 Agent 的简单单节点安装&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;macos&#34;&gt;MacOS&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;没有预编译的 MacOS 可执行文件可用，但&lt;a href=&#34;https://spiffe.io/docs/latest/spire/installing/getting-started-linux-macos-x/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Linux 和 MacOS X 快速入门&lt;/a&gt;* 介绍了如何下载和构建 SPIRE 以测试 SPIRE Server 和 Agent 的简单单节点安装&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>扩展 SPIRE 部署：支持的 SPIRE 拓扑结构、身份联合和规模考虑</title>
      <link>https://lib.jimmysong.io/spiffe-and-spire/architecture/scaling-spire/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/spiffe-and-spire/architecture/scaling-spire/</guid>
      <description>&lt;p&gt;扩展 SPIRE 可以通过嵌套拓扑和联合拓扑来实现。&lt;strong&gt;嵌套拓扑允许将多个 SPIRE 服务器链接在一起，以发放属于同一信任域的身份。联合拓扑用于在不同信任域之间建立信任，使工作负载能够在不同信任域中进行身份验证&lt;/strong&gt;。SPIRE 还可以与其他 SPIFFE 兼容系统和 OIDC 提供者系统进行联合，以实现安全的身份验证和通信。在部署规模时，需要考虑 SVID 和根证书的生存时间、工作负载数量和分布、JWT-SVID 的使用等因素，并注意数据存储的设计和规划。&lt;/p&gt;
&lt;p&gt;SPIRE 部署可以根据工作负载的增长来调整大小或规模。一个 SPIRE 部署由一个或多个共享复制数据存储的 SPIRE 服务器组成，或者相反，由在同一信任域中的一组 SPIRE 服务器和至少一个 SPIRE 代理（通常是一个以上）组成。&lt;/p&gt;
&lt;p&gt;部署的大小范围广泛。单个 SPIRE 服务器可以容纳多个代理和工作负载注册条目。一个规模大小的考虑是，由于涉及到管理和发放与这些条目相对应的身份所涉及的操作数量，SPIRE 服务器实例的内存和 CPU 消耗往往与部署中的工作负载注册条目数量成比例增长。单个 SPIRE 服务器实例也代表了一个单点故障。&lt;/p&gt;
&lt;p&gt;为了支持给定部署中更多的代理和工作负载（数以万计或数十万个节点），可以水平扩展 SPIRE 服务器的数量。有了多个服务器，SPIRE 服务器执行的计算工作将在所有 SPIRE 服务器实例之间分布。除了额外的容量之外，使用多个 SPIRE 服务器实例还可以消除单点故障，实现高可用性。&lt;/p&gt;
&lt;h3 id=&#34;高可用性模式下的-spire-服务器&#34;&gt;高可用性模式下的 SPIRE 服务器&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/ha_mode.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;要水平扩展 SPIRE 服务器，无论是出于高可用性还是负载分配目的，都要配置所有属于同一信任域的服务器以读写相同的共享数据存储。&lt;/p&gt;
&lt;p&gt;数据存储是 SPIRE 服务器持久保存动态配置信息的地方，例如注册条目和身份映射策略。SQLite 已捆绑到 SPIRE 服务器中，它是默认的数据存储。支持一些兼容的 SQL 数据库，以及一个用于使用 Kubernetes CRD 的 Kubernetes 插件。在水平扩展 SPIRE 服务器时，请选择符合您要求的数据存储，并配置所有 SPIRE 服务器以使用所选的数据存储。有关详细信息，请参阅 &lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_datastore_sql.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;数据存储插件配置参考&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;在高可用性模式下，每个服务器都维护自己的证书颁发机构，可以是自签名证书，也可以是从共享根证书颁发机构获取的中间证书（即在配置了上游机构时）。&lt;/p&gt;
&lt;h2 id=&#34;选择-spire-部署拓扑&#34;&gt;选择 SPIRE 部署拓扑&lt;/h2&gt;
&lt;p&gt;有三种主要的 SPIRE 部署拓扑：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单一信任域&lt;/li&gt;
&lt;li&gt;嵌套 SPIRE&lt;/li&gt;
&lt;li&gt;联合 SPIRE&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;诸如管理域边界、工作负载数量、可用性要求、云供应商数量和身份验证要求等因素将决定您环境中的适当拓扑，如下所述。&lt;/p&gt;
&lt;h3 id=&#34;单一信任域&#34;&gt;单一信任域&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/single_trust_domain.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;单一信任域最适合个体环境或在管理域内具有相似特征的环境。创建一个单一的主导信任域的主要动机是从单个证书颁发机构中发放身份，因为这会减少在不同部署中管理的 SPIRE 服务器数量。&lt;/p&gt;
&lt;p&gt;然而，当将单个 SPIRE 信任域部署以跨越地理区域、平台和云提供商环境时，在跨越地理位置或跨越云提供商边界的多个地方管理共享数据存储会带来一定的复杂性。在这些情况下，当部署扩展以覆盖多个环境时，解决在单一信任域上使用共享数据存储的问题的方法是在嵌套拓扑中配置 SPIRE 服务器。&lt;/p&gt;
&lt;h3 id=&#34;嵌套-spire&#34;&gt;嵌套 SPIRE&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/nested_spire.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;嵌套 SPIRE 允许 SPIRE 服务器被“链接”在一起，所有服务器仍然发放属于同一信任域的身份，这意味着在同一信任域中识别的所有工作负载都会获得可以与信任域的根密钥进行验证的身份文档。&lt;/p&gt;
&lt;p&gt;嵌套拓扑通过在每个下游 SPIRE 服务器与“链接”的 SPIRE 代理共存来工作。下游 SPIRE 服务器通过 Workload API 获取凭据，然后使用这些凭据直接与上游 SPIRE 服务器进行身份验证以获取中间 CA。&lt;/p&gt;
&lt;p&gt;一个有助于理解嵌套拓扑功能的心理模型是将顶级 SPIRE 服务器想象成是一个全局服务器（或一组用于高可用性的服务器），而下游 SPIRE 服务器是区域或集群级别的服务器。&lt;/p&gt;
&lt;p&gt;在此配置中，顶层 SPIRE 服务器保存根证书/密钥，而下游服务器请求中间签名证书，用作下游服务器的 X.509 签名授权机构。这提供了弹性，因为顶层可能会崩溃，中间服务器将继续运行。&lt;/p&gt;
&lt;p&gt;嵌套拓扑非常适用于多云部署。由于能够混合匹配节点证明者，下游服务器可以驻留在不同云提供商环境中，为不同云提供商环境中的工作负载和代理提供身份。&lt;/p&gt;
&lt;p&gt;作为为了实现高可用性和负载平衡而将 SPIRE 服务器水平扩展的补充，嵌套拓扑可以用作分隔故障域的约束策略。&lt;/p&gt;
&lt;h3 id=&#34;联合-spire&#34;&gt;联合 SPIRE&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/federated_spire.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;部署可能需要多个信任根：也许因为一个组织有不同的组织部门，各自有不同的管理员，或者因为它们有单独的临时和生产环境，需要偶尔进行通信。&lt;/p&gt;
&lt;p&gt;另一个用例是在组织之间实现 SPIFFE 互操作性，例如在云提供商和其客户之间。&lt;/p&gt;
&lt;p&gt;这些多信任域和互操作性用例都需要一种明确定义的、可互操作的方法，使一个信任域中的工作负载能够对另一个信任域中的工作负载进行身份验证。首先通过验证各自的束终点来建立不同信任域之间的信任，然后通过经过身份验证的端点检索外部信任域束。&lt;/p&gt;
&lt;p&gt;有关如何实现这一点的更多细节，请参阅以下 SPIFFE 规范，其中描述了这种机制：&lt;a href=&#34;https://github.com/spiffe/spiffe/blob/main/standards/SPIFFE_Trust_Domain_and_Bundle.md#5-spiffe-bundle-endpoint&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIFFE 信任域和束&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;有关配置联合 SPIRE 的教程，请参阅：&lt;a href=&#34;https://github.com/spiffe/spire-tutorials/tree/main/docker-compose/federation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;联合 SPIRE 教程&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;与外部系统的交互&#34;&gt;与外部系统的交互&lt;/h2&gt;
&lt;h3 id=&#34;与与-spiffe-兼容的系统联合&#34;&gt;与“与 SPIFFE 兼容”的系统联合&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/spiffe_compatible.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;SPIFFE 身份颁发者可以与其他暴露 SPIFFE 联合 API 实现的 SPIFFE 身份颁发者联合，使联合域中的工作负载能够安全地进行身份验证和通信。与在 SPIRE 部署之间建立联合一样，SPIFFE 联合用于在 SPIFFE 兼容系统之间启用联合，比如在一个 Istio 服务网格和另一个 Istio 服务网格之间运行的 Istio 服务网格。&lt;/p&gt;
&lt;p&gt;例如，在当前的 Istio 中，服务网格上的所有应用程序都位于同一个信任域中，因此共享一个共同的信任根。可能会有不止一个服务网格，或者在服务网格中通信到需要进行身份验证的外部服务。使用联合功能可以使得 SPIFFE 兼容的系统，比如多个 Istio 服务网格，能够为安全的跨网格和脱网通信建立信任。&lt;/p&gt;
&lt;h3 id=&#34;与-oidc-提供者系统的联合&#34;&gt;与 OIDC 提供者系统的联合&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/oidc_federation.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;SPIRE 具有一个特性，可以代表已识别的工作负载对远程系统进行编程身份验证，例如与支持 OIDC 联合的公共云提供商服务和密钥存储进行交互。例如，在亚马逊网络服务的情况下，一个经过 SPIRE 认证的工作负载可以对接 AWS S3 存储桶、AWS RDS 实例或 AWS CodePipeline 进行身份验证和通信。&lt;/p&gt;
&lt;p&gt;SPIRE OIDC 发现提供者使用 ACME 协议检索 WebPKI 证书，用于保护一个端点，该端点提供 OIDC 兼容的 JWKS 束和标准 OIDC 发现文档。然后需要配置远程 OIDC 认证服务以定位该端点并确定 WebPKI 服务。一旦完成此配置，可以设置远程系统的 IAM 策略和角色以映射到特定的 SPIFFE ID。工作负载随后将通过发送 JWT-SVID 与 OIDC 认证系统通信。然后，目标系统从预定义的 URI 获取 JWKS，该 URI 由 OIDC 发现提供者提供。目标系统使用 JWKS 文件验证 JWT-SVID，如果 JWT-SVID 中包含的 SPIFFE ID 被授权访问所请求的资源，则服务请求。然后，工作负载就能够访问外部远程服务，而无需拥有由其提供的任何凭据。&lt;/p&gt;
&lt;p&gt;有关 OIDC 发现提供者的配置参考，请参阅：&lt;a href=&#34;https://github.com/spiffe/spire/tree/main/support/oidc-discovery-provider&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OIDC 发现提供者配置参考&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;有关在 Amazon Web Services 配置 OIDC 联合的详细教程，请参阅：&lt;a href=&#34;https://spiffe.io/spire/try/oidc-federation-aws/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;配置 OIDC 到 Amazon Web Services&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;部署规模考虑&#34;&gt;部署规模考虑&lt;/h2&gt;
&lt;p&gt;在为 SPIRE 部署调整大小以实现最佳性能时，需要考虑的因素包括但不限于以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SVID 和根证书的生存时间&lt;/li&gt;
&lt;li&gt;每个节点的工作负载数量和分布&lt;/li&gt;
&lt;li&gt;大量 JWT-SVID 的使用（因为 JWT 需要根据需要进行签名，而不像 x509 那样预先存储）&lt;/li&gt;
&lt;li&gt;注册更改的频率&lt;/li&gt;
&lt;li&gt;在 SPIRE 服务器节点上运行的其他进程&lt;/li&gt;
&lt;li&gt;基础架构环境的“形状”和“大小”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;特别要注意对数据存储的设计和规划。请注意，数据存储的性能在上述列表中没有得到解决，并且可能会限制 SPIRE 的性能。由于每个代理同步（每 5 秒一次）都会进行授权检查，因此数据存储通常是性能瓶颈。在嵌套拓扑中，由于嵌套拓扑中的每个 SPIRE 服务器集群都有自己的数据存储，因此可以降低此成本。&lt;/p&gt;
&lt;p&gt;下表旨在提供关于在 SPIRE 部署中调整 SPIRE 服务器大小的参考信息。这些参考数字基于测试环境。它们仅作为数量级指南，不代表任何特定用户环境的性能保证。网络带宽和数据库查询信息未包含在内。此外，所显示的工作负载和代理数量不代表在理论上可能的 SPIRE 部署规模。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;工作负载数量&lt;/th&gt;
&lt;th&gt;10 代理&lt;/th&gt;
&lt;th&gt;100 代理&lt;/th&gt;
&lt;th&gt;1000 代理&lt;/th&gt;
&lt;th&gt;5000 代理&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;10 工作负载&lt;/td&gt;
&lt;td&gt;2 个服务器单元，1 个 CPU 核心，1GB RAM&lt;/td&gt;
&lt;td&gt;2 个服务器单元，2 个 CPU 核心，2GB RAM&lt;/td&gt;
&lt;td&gt;2 个服务器单元，4 个 CPU 核心，4GB RAM&lt;/td&gt;
&lt;td&gt;2 个服务器单元，8 个 CPU 核心，8GB RAM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;100 工作负载&lt;/td&gt;
&lt;td&gt;2 个服务器单元，2 个 CPU 核心，2GB RAM&lt;/td&gt;
&lt;td&gt;2 个服务器单元，2 个 CPU 核心，2GB RAM&lt;/td&gt;
&lt;td&gt;2 个服务器单元，8 个 CPU 核心，8GB RAM&lt;/td&gt;
&lt;td&gt;2 个服务器单元，16 个 CPU 核心，16GB RAM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1000 工作负载&lt;/td&gt;
&lt;td&gt;2 个服务器单元，16 个 CPU 核心，8GB RAM&lt;/td&gt;
&lt;td&gt;2 个服务器单元，16 个 CPU 核心，8GB RAM&lt;/td&gt;
&lt;td&gt;2 个服务器单元，16 个 CPU 核心，8GB RAM&lt;/td&gt;
&lt;td&gt;4 个服务器单元，16 个 CPU 核心，8GB RAM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10000 工作负载&lt;/td&gt;
&lt;td&gt;每个 4 个服务器单元，16 个 CPU 核心，16GB RAM&lt;/td&gt;
&lt;td&gt;每个 4 个服务器单元，16 个 CPU 核心，16GB RAM&lt;/td&gt;
&lt;td&gt;每个 4 个服务器单元，16 个 CPU 核心，16GB RAM&lt;/td&gt;
&lt;td&gt;每个 8 个服务器单元，16 个 CPU 核心，16GB RAM&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>配置 SPIRE</title>
      <link>https://lib.jimmysong.io/spiffe-and-spire/configuration/configuring/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/spiffe-and-spire/configuration/configuring/</guid>
      <description>&lt;p&gt;要根据你的应用程序需求自定义 SPIRE 服务器和 SPIRE 代理的行为，你需要编辑服务器和代理的配置文件。&lt;/p&gt;
&lt;h2 id=&#34;如何配置-spire&#34;&gt;如何配置 SPIRE&lt;/h2&gt;
&lt;p&gt;SPIRE 服务器和代理的配置文件分别为 &lt;code&gt;server.conf&lt;/code&gt; 和 &lt;code&gt;agent.conf&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;默认情况下，服务器期望配置文件位于 &lt;code&gt;conf/server/server.conf&lt;/code&gt;，但是服务器可以通过 &lt;code&gt;--config&lt;/code&gt; 标志配置为使用不同位置的配置文件。有关更多信息，请参阅 &lt;a href=&#34;https://spiffe.io/docs/latest/deploying/spire_server/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 服务器参考&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;同样，代理期望配置文件位于 &lt;code&gt;conf/agent/agent.conf&lt;/code&gt;，但是代理可以通过 &lt;code&gt;--config&lt;/code&gt; 标志配置为使用不同位置的配置文件。有关更多信息，请参阅 &lt;a href=&#34;https://spiffe.io/docs/latest/deploying/spire_agent/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 代理参考&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;配置文件在启动服务器或代理时加载一次。如果更改了服务器或代理的配置文件，则必须重新启动服务器或代理以使配置生效。&lt;/p&gt;
&lt;p&gt;在 Kubernetes 中运行 SPIRE 时，通常将配置文件存储在 &lt;code&gt;ConfigMap&lt;/code&gt; 对象中，然后将其作为文件挂载到运行代理或服务器进程的容器中。&lt;/p&gt;
&lt;p&gt;SPIRE 代理支持使用 &lt;a href=&#34;https://github.com/hashicorp/hcl&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HCL&lt;/a&gt; 或 &lt;a href=&#34;http://www.json.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JSON&lt;/a&gt; 作为配置文件结构语法。下面的示例将假定使用 HCL。&lt;/p&gt;
&lt;h2 id=&#34;配置信任域&#34;&gt;配置信任域&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;此配置适用于 SPIRE 服务器和 SPIRE 代理&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;信任域对应于 SPIFFE 身份提供者的信任根。信任域可以表示运行其自己独立的 SPIFFE 基础设施的个人、组织、环境或部门。在同一信任域中标识的所有工作负载都将获得可以与信任域的根密钥进行验证的身份文件。&lt;/p&gt;
&lt;p&gt;每个 SPIRE 服务器关联一个必须在该组织内唯一的信任域。信任域采用与 DNS 名称相同的形式（例如，&lt;code&gt;prod.acme.com&lt;/code&gt;），但不需要与任何 DNS 基础设施对应。&lt;/p&gt;
&lt;p&gt;在首次启动服务器之前，需要在 SPIRE 服务器中配置信任域。通过在配置文件的 &lt;code&gt;server&lt;/code&gt; 部分的 &lt;code&gt;trust_domain&lt;/code&gt; 参数中配置。例如，如果服务器的信任域应配置为 &lt;code&gt;prod.acme.com&lt;/code&gt;，则应设置为：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;trust_domain = &amp;#34;prod.acme.com&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;同样，代理必须通过在代理配置文件的 &lt;code&gt;agent&lt;/code&gt; 部分的 &lt;code&gt;trust_domain&lt;/code&gt; 参数中配置来为相同的信任域颁发身份。&lt;/p&gt;
&lt;p&gt;SPIRE 服务器和代理只能为单个信任域&lt;em&gt;颁发&lt;/em&gt;身份，代理配置的信任域必须与其连接的服务器的信任域匹配。&lt;/p&gt;
&lt;h2 id=&#34;配置服务器监听代理的端口&#34;&gt;配置服务器监听代理的端口&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;此配置适用于 SPIRE 服务器&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;默认情况下，SPIRE 服务器在端口 8081 上监听来自 SPIRE 代理的传入连接；要选择不同的值，请编辑 &lt;code&gt;server.conf&lt;/code&gt; 文件中的 &lt;code&gt;bind_port&lt;/code&gt; 参数。例如，要将监听端口更改为 9090：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;bind_port = &amp;#34;9090&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果从服务器的默认配置更改了此配置，则还必须在代理上更改服务端口的配置。&lt;/p&gt;
&lt;h2 id=&#34;配置节点认证&#34;&gt;配置节点认证&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;此配置适用于 SPIRE 服务器和 SPIRE 代理&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;SPIFFE 服务器通过节点认证和解析的过程来识别和验证代理。这是通过节点验证器和节点解析器插件来完成的，你需要在服务器中配置和启用它们。&lt;/p&gt;
&lt;p&gt;你选择的节点认证方法将确定你在 SPIRE 配置文件的服务器插件和代理插件部分中配置 SPIRE 使用哪些节点验证器插件。服务器上必须配置&lt;em&gt;至少一个&lt;/em&gt;节点验证器，每个代理上只能配置&lt;em&gt;一个&lt;/em&gt;节点验证器。&lt;/p&gt;
&lt;h3 id=&#34;对运行在-kubernetes-上的节点进行认证&#34;&gt;对运行在 Kubernetes 上的节点进行认证&lt;/h3&gt;
&lt;p&gt;为了向在 Kubernetes 集群中运行的工作负载发放身份，需要在每个运行负载的集群节点上部署一个 SPIRE 代理。（&lt;a href=&#34;https://spiffe.io/docs/latest/spire/installing/install-agents/#installing-spire-agents-on-kubernetes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在 Kubernetes 上安装 SPIRE 代理&lt;/a&gt;了解如何在 Kubernetes 上安装 SPIRE 代理）。&lt;/p&gt;
&lt;p&gt;可以使用 Kubernetes 的 &lt;a href=&#34;https://kubernetes.io/docs/reference/kubernetes-api/authentication-resources/token-review-v1/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Token Review API&lt;/a&gt; 对服务帐户令牌进行验证。因此，SPIRE 服务器本身不需要在 Kubernetes 上运行，并且单个 SPIRE 服务器可以支持在启用了 PSAT 认证的多个 Kubernetes 集群上运行的代理。&lt;/p&gt;
&lt;h4 id=&#34;projected-service-account-tokens&#34;&gt;Projected Service Account Tokens&lt;/h4&gt;
&lt;p&gt;在撰写本文时，预投影的服务帐户是 Kubernetes 的一个相对较新的功能，不是所有部署都支持它们。你的 Kubernetes 平台文档将告诉你是否支持此功能。如果你的 Kubernetes 部署不支持预投影的服务帐户令牌，则应启用服务帐户令牌。&lt;/p&gt;
&lt;p&gt;使用 Kubernetes 的&lt;a href=&#34;https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#service-account-token-volume-projection&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Projected Service Account Tokens&lt;/a&gt; (PSATs) 对节点进行认证允许 SPIRE 服务器验证在 Kubernetes 集群上运行的 SPIRE 代理的身份。预投影的服务帐户令牌相对于传统的 Kubernetes 服务帐户令牌提供了额外的安全保证，因此，如果 Kubernetes 集群支持，PSAT 是推荐的认证策略。&lt;/p&gt;
&lt;p&gt;要使用 PSAT 节点认证，请在&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_nodeattestor_k8s_psat.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE Server&lt;/a&gt;和&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_agent_nodeattestor_k8s_psat.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE Agent&lt;/a&gt;上配置启用 PSAT 节点认证器插件。&lt;/p&gt;
&lt;h4 id=&#34;服务帐户令牌&#34;&gt;服务帐户令牌&lt;/h4&gt;
&lt;p&gt;在 Kubernetes 上运行工作负载时，如果集群上没有 Projected Service Account Token 功能，则 SPIRE 可以使用 Service Account Tokens 在 Server 和 Agent 之间建立信任。与使用 Projected Service Account Tokens 不同，此方法要求 SPIRE Server 和 SPIRE Agent 都部署在同一个 Kubernetes 集群上。&lt;/p&gt;
&lt;p&gt;由于服务帐户令牌不包含可用于强力识别运行Agent的节点/守护程序/POD的声明，因此任何在允许的服务帐户下运行的容器都可以冒充Agent。因此，强烈建议在使用此认证方法时，Agent应在专用的服务帐户下运行。&lt;/p&gt;
&lt;p&gt;要使用 SAT 节点认证，请在&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_nodeattestor_k8s_sat.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE Server&lt;/a&gt;和&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_agent_nodeattestor_k8s_sat.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE Agent&lt;/a&gt;上配置和启用 SAT 节点认证器插件。&lt;/p&gt;
&lt;h3 id=&#34;对运行-linux-的节点进行认证&#34;&gt;对运行 Linux 的节点进行认证&lt;/h3&gt;
&lt;p&gt;SPIRE 能够对运行 Linux 的物理或虚拟机（节点）上的工作负载的身份进行认证。作为认证过程的一部分，SPIRE Server 需要建立与运行 Linux 节点上的 SPIRE Agent 的信任关系。根据节点运行的位置，SPIRE 支持各种节点认证器，这些节点认证器允许在创建注册项时使用不同的选择器来标识特定的工作负载。&lt;/p&gt;
&lt;h4 id=&#34;加入令牌&#34;&gt;加入令牌&lt;/h4&gt;
&lt;p&gt;加入令牌是一种使用单次使用的令牌来对服务器进行认证的简单方法，该令牌在服务器上生成并在启动代理时提供给代理。它适用于在 Linux 上运行的任何节点。&lt;/p&gt;
&lt;p&gt;SPIRE 服务器可以通过在&lt;code&gt;server.conf&lt;/code&gt;配置文件中启用内置的&lt;code&gt;join-token&lt;/code&gt; NodeAttestor 插件来支持加入令牌认证，如下所示：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;NodeAttestor &amp;#34;join_token&amp;#34; {
    plugin_data {
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;配置了加入令牌节点认证之后，可以使用&lt;code&gt;spire-server token generate&lt;/code&gt;命令在服务器上生成加入令牌。可以使用&lt;code&gt;-spiffeID&lt;/code&gt;标志将特定的 SPIFFE ID 与加入令牌关联起来。&lt;a href=&#34;https://spiffe.io/docs/latest/deploying/spire_server/#spire-server-token-generate&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在此处阅读更多&lt;/a&gt;有关使用此命令的更多信息。&lt;/p&gt;
&lt;p&gt;当第一次启动启用加入令牌证明的 SPIRE 代理时，可以使用 &lt;code&gt;spire-agent run&lt;/code&gt; 命令启动代理，并使用 &lt;code&gt;-joinToken&lt;/code&gt; 标志指定服务器生成的加入令牌。有关此命令的详细信息，请阅读&lt;a href=&#34;https://spiffe.io/docs/latest/deploying/spire_agent/#spire-agent-run&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;更多&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;服务器将验证加入令牌并向代理颁发 SVID（SPIFFE 身份验证信息文档）。只要代理与服务器保持连接，SVID 将自动轮换。在以后的启动中，除非 SVID 已过期且未续订，否则代理将使用该 SVID 对服务器进行身份验证。&lt;/p&gt;
&lt;p&gt;要使用加入令牌节点证明，请在&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_nodeattestor_jointoken.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 服务器&lt;/a&gt;和&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_agent_nodeattestor_jointoken.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 代理&lt;/a&gt;上配置和启用加入令牌节点证明插件。&lt;/p&gt;
&lt;p&gt;要在服务器上禁用加入令牌证明，请在启动之前从配置文件中注释或删除此部分。&lt;/p&gt;
&lt;h4 id=&#34;x509-证书&#34;&gt;X.509 证书&lt;/h4&gt;
&lt;p&gt;在许多情况下，特别是在手动配置节点的情况下（例如在数据中心），可以通过验证先前安装在节点上的现有 X.509 叶子证书来识别节点并唯一标识它。&lt;/p&gt;
&lt;p&gt;通常，这些叶子证书是从单个公共密钥和证书（在本指南中称为&lt;em&gt;根证书包&lt;/em&gt;）生成的。服务器必须配置根密钥和任何中间证书，以便能够验证特定机器呈现的叶子证书。只有找到可以通过证书链验证到服务器的证书时，节点证明才会成功，并且可以向该节点上的工作负载发布 SPIFFE ID。&lt;/p&gt;
&lt;p&gt;此外，证明者公开了&lt;code&gt;subject:cn&lt;/code&gt;选择器，该选择器将匹配满足以下条件的证书：（a）有效，如上所述，（b）其通用名称（CN）与选择器中描述的通用名称匹配。&lt;/p&gt;
&lt;p&gt;要使用 X.509 证书节点证明，请在&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_nodeattestor_x509pop.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 服务器&lt;/a&gt;和&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_agent_nodeattestor_x509pop.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 代理&lt;/a&gt;上配置和启用 x509pop 节点证明插件。&lt;/p&gt;
&lt;h4 id=&#34;ssh-证书&#34;&gt;SSH 证书&lt;/h4&gt;
&lt;p&gt;在某些环境中，每个节点都会自动配备一个有效且唯一的 SSH 证书，用于标识该节点。SPIRE 可以使用此证书来引导其身份验证。&lt;/p&gt;
&lt;p&gt;通过这种方法进行验证的节点会自动获得形式为的 SPIFFE ID：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;spiffe://&amp;lt;trust-domain&amp;gt;/spire/agent/sshpop/&amp;lt;fingerprint&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中 &lt;code&gt;&amp;lt;fingerprint&amp;gt;&lt;/code&gt; 是证书本身的哈希值。然后，可以使用此 SPIFFE ID 作为其他工作负载注册条目的基础。&lt;/p&gt;
&lt;p&gt;要使用 SSH 证书节点验证，请在 SPIRE 服务器和 SPIRE 代理上配置并启用 sshpop 节点验证插件。&lt;/p&gt;
&lt;h3 id=&#34;云供应商上的-linux-节点验证&#34;&gt;云供应商上的 Linux 节点验证&lt;/h3&gt;
&lt;p&gt;许多云供应商提供特权 API，允许在由该供应商托管的特定节点上运行的进程能够证明其所在的节点。SPIRE 可以配置为利用这些 API 进行节点验证。这对于自动化来说特别方便，因为在新实例上首次启动代理时，代理可以自动向 SPIRE 服务器证明其身份，而无需为其发行预先存在的证书或加入令牌。&lt;/p&gt;
&lt;h4 id=&#34;google-compute-engine-实例&#34;&gt;Google Compute Engine 实例&lt;/h4&gt;
&lt;p&gt;Google Compute Engine（GCE）节点验证和解析允许 SPIRE 服务器自动识别和验证在 GCP GCE 实例上运行的 SPIRE 代理。简而言之，通过以下步骤完成：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;SPIRE 代理 gcp_iit 节点验证插件检索 GCP 实例的实例标识令牌，并向 SPIRE 服务器 gcp_iit 节点验证插件标识自身。&lt;/li&gt;
&lt;li&gt;如果 &lt;code&gt;use_instance_metadata&lt;/code&gt; 配置值设置为 &lt;code&gt;true&lt;/code&gt;，SPIRE 服务器 gcp_iit 节点验证插件调用 GCP API 验证令牌的有效性。&lt;/li&gt;
&lt;li&gt;验证完成后，SPIRE 代理被视为经过验证，并分配其自己的 SPIFFE ID。&lt;/li&gt;
&lt;li&gt;最后，如果工作负载与注册条目匹配，SPIRE 会向节点上的工作负载发放 SVID。注册条目可以包括节点验证插件或解析器公开的选择器，或者将 SPIRE 代理的 SPIFFE ID 作为父级。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;要使用 GCP IIT 节点验证，请在 SPIRE 服务器和 SPIRE 代理上配置并启用 gcp_iit 节点验证插件。&lt;/p&gt;
&lt;h4 id=&#34;amazon-ec2-实例&#34;&gt;Amazon EC2 实例&lt;/h4&gt;
&lt;p&gt;EC2 节点认证和解析允许 SPIRE 服务器自动识别和验证在 AWS EC2 实例上运行的 SPIRE Agent。简而言之，通过以下方式实现：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;SPIRE Agent 的 aws_iid 节点证明插件检索 AWS 实例的实例身份文档，并向 SPIRE Server 的 aws_iid 节点证明插件进行身份验证。&lt;/li&gt;
&lt;li&gt;SPIRE Server 的 aws_iid 节点证明插件使用具有有限权限的 AWS IAM 角色调用 AWS API 来验证文档的有效性。&lt;/li&gt;
&lt;li&gt;如果配置了 aws_iid 节点解析器插件，则 SPIRE 将使用节点的已验证身份查找有关节点的其他信息。此元数据可以用作注册条目中的选择器。&lt;/li&gt;
&lt;li&gt;验证完成后，SPIRE Agent 被视为经过验证的，并被分配其自己的 SPIFFE ID。&lt;/li&gt;
&lt;li&gt;最后，如果工作负载与注册条目匹配，SPIRE 为节点上的工作负载发放 SVID。注册条目可以包含节点证明者或解析器提供的选择器，或者将 SPIRE Agent 的 SPIFFE ID 作为父级。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;有关配置 AWS EC2 节点证明者或解析器插件的更多信息，请参阅 SPIRE 服务器的相应 SPIRE 文档，其中包括 &lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_nodeattestor_aws_iid.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 服务器节点证明者&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_noderesolver_aws_iid.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 服务器节点解析器&lt;/a&gt;，以及代理上的 &lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_agent_nodeattestor_aws_iid.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE Agent 节点证明者&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&#34;azure-虚拟机&#34;&gt;Azure 虚拟机&lt;/h4&gt;
&lt;p&gt;Azure MSI 节点认证和解析允许 SPIRE 服务器自动识别和验证在 Azure VM 上运行的 SPIRE Agent。SPIRE 使用 MSI 令牌来验证代理。如果拦截，MSI 令牌必须进行范围限制以防止滥用。简而言之，通过以下方式实现：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;SPIRE Agent 的 azure_msi 节点证明插件检索 Azure VM 的 MSI 令牌，并向 SPIRE Server 的 azure_msi 节点证明插件进行身份验证。&lt;/li&gt;
&lt;li&gt;SPIRE Server 的 azure_msi 节点证明插件通过 API 调用从 Azure 检索 JSON Web Key Set (JWKS) 文档，并使用 JWKS 信息验证 MSI 令牌。&lt;/li&gt;
&lt;li&gt;SPIRE Server 的 azure_msi 节点解析器插件与 Azure 交互，获取有关代理 VM 的信息，例如订阅 ID、VM 名称、网络安全组、虚拟网络和虚拟网络子网，以构建有关代理 VM 的属性集，然后可以将其用作 Azure 节点集的节点选择器。&lt;/li&gt;
&lt;li&gt;一旦验证完成，SPIRE 代理将被视为已验证，并发放其自己的 SPIFFE ID。&lt;/li&gt;
&lt;li&gt;最后，如果工作负载与注册条目匹配，SPIRE 将向节点上的工作负载发放 SVID。注册条目可以包括节点验证器或解析器公开的选择器，或者将 SPIRE 代理的 SPIFFE ID 作为父级。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;默认情况下，代理插件分配的资源范围相对较大，它使用 Azure 资源管理器 (&lt;code&gt;https://management.azure.com&lt;/code&gt; 端点) 的资源 ID。出于安全考虑，考虑使用自定义资源 ID 来进行更精细的范围设置。&lt;/p&gt;
&lt;p&gt;如果在代理配置文件中配置自定义资源 ID，则必须在 &lt;code&gt;server.conf&lt;/code&gt; 配置文件的 &lt;code&gt;NodeAttestor&lt;/code&gt; 部分中为每个租户指定自定义资源 ID。&lt;/p&gt;
&lt;p&gt;有关配置 Azure MSI 节点验证器或解析器插件的更多信息，请参阅对应的 SPIRE 文档，包括 Azure MSI &lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_nodeattestor_azure_msi.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE Server 节点验证器&lt;/a&gt;，&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_noderesolver_azure_msi.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE Server 节点解析器&lt;/a&gt;，以及代理上的 &lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_agent_nodeattestor_azure_msi.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 代理节点验证器&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;配置工作负载验证&#34;&gt;配置工作负载验证&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;此配置适用于 SPIRE 代理&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;与节点验证器关注的是 SPIRE Server 如何在特定物理或虚拟机上识别 SPIRE 代理不同，工作负载验证关注的是 SPIRE 代理如何识别特定进程。通常，两者结合使用以识别特定的工作负载。&lt;/p&gt;
&lt;p&gt;与节点验证类似，工作负载验证通过启用相关插件来完成。不同的插件提供了不同的选择器，可在注册条目中使用这些选择器来识别特定的工作负载。与节点验证不同，对于单个工作负载，工作负载验证可以使用多种策略。例如，对于给定的 Unix 组，可能要求单个工作负载运行，并从特定的 Docker 镜像启动。&lt;/p&gt;
&lt;h3 id=&#34;为由-kubernetes-调度的工作负载进行工作负载证明&#34;&gt;为由 Kubernetes 调度的工作负载进行工作负载证明&lt;/h3&gt;
&lt;p&gt;当工作负载在 Kubernetes 中运行时，能够用 Kubernetes 构造描述它们是非常有价值的，比如与工作负载运行的 Pod 相关联的命名空间、服务账户或标签。&lt;/p&gt;
&lt;p&gt;Kubernetes 工作负载证明插件通过与本地的 Kubelet 进行交互来检索有关特定进程的 Kubernetes 特定元数据，当它调用工作负载 API 时，使用这些元数据来识别与注册条目匹配的工作负载。&lt;/p&gt;
&lt;p&gt;有关更多信息，包括暴露的选择器的详细信息，请参阅&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_agent_workloadattestor_k8s.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes 工作负载证明插件的相应 SPIRE 文档&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;为-docker-容器进行工作负载证明&#34;&gt;为 Docker 容器进行工作负载证明&lt;/h3&gt;
&lt;p&gt;当工作负载在 Docker 容器中运行时，能够用该容器的属性来描述它们是很有帮助的，比如容器启动的 Docker 镜像或特定环境变量的值。&lt;/p&gt;
&lt;p&gt;Docker 工作负载证明插件通过与本地的 Docker 守护程序进行交互来检索有关特定进程的 Docker 特定元数据，当它调用工作负载 API 时。&lt;/p&gt;
&lt;p&gt;有关更多信息，包括暴露的选择器的详细信息，请参阅&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_agent_workloadattestor_docker.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Docker 工作负载证明插件的相应 SPIRE 文档&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;为-unix-进程进行工作负载证明&#34;&gt;为 Unix 进程进行工作负载证明&lt;/h3&gt;
&lt;p&gt;当工作负载在 Unix 上运行时，能够用进程在 Unix 中的管理方式来描述它们是很有帮助的，比如它正在运行的 Unix 组的名称。&lt;/p&gt;
&lt;p&gt;Unix 工作负载证明通过检查 Unix 域套接字的调用者来确定调用 Workload API 的工作负载的内核元数据。&lt;/p&gt;
&lt;p&gt;有关更多信息，包括暴露的选择器的详细信息，请参阅&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_agent_workloadattestor_unix.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Unix 工作负载证明插件的相应 SPIRE 文档&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;配置代理和服务器数据存储位置&#34;&gt;配置代理和服务器数据存储位置&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;此配置适用于 SPIRE 服务器和 SPIRE 代理&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;agent.conf&lt;/code&gt;和&lt;code&gt;server.conf&lt;/code&gt;配置文件中的&lt;code&gt;data_dir&lt;/code&gt;选项设置了 SPIRE 运行时数据的目录。&lt;/p&gt;
&lt;p&gt;如果你为&lt;code&gt;data_dir&lt;/code&gt;指定了相对路径，即以&lt;code&gt;./&lt;/code&gt;开头的路径，则&lt;code&gt;data_dir&lt;/code&gt;将基于你执行&lt;code&gt;spire-agent&lt;/code&gt;或&lt;code&gt;spire-server&lt;/code&gt;命令时的当前工作目录进行评估。使用相对路径的&lt;code&gt;data_dir&lt;/code&gt;对于对 SPIRE 进行初始评估可能很有用，但对于生产部署，你可能希望将&lt;code&gt;data_dir&lt;/code&gt;设置为绝对路径。按照惯例，如果你已在&lt;code&gt;/opt/spire&lt;/code&gt;安装了 SPIRE，则将&lt;code&gt;data_dir&lt;/code&gt;指定为&lt;code&gt;&amp;quot;/opt/spire/data&amp;quot;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;确保你为&lt;code&gt;data_dir&lt;/code&gt;指定的路径及其所有子目录对运行 SPIRE 代理或服务器可执行文件的 Linux 用户可读取。你可能需要使用&lt;a href=&#34;http://man7.org/linux/man-pages/man1/chown.1.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;chown&lt;/a&gt;来更改这些数据目录的所有权，以便其归属于将运行可执行文件的 Linux 用户。&lt;/p&gt;
&lt;p&gt;如果你为&lt;code&gt;data_dir&lt;/code&gt;指定的路径不存在，则 SPIRE 代理或服务器可执行文件将在具有执行权限的情况下创建该路径。&lt;/p&gt;
&lt;p&gt;通常，你应该将&lt;code&gt;data_dir&lt;/code&gt;的值用作在&lt;code&gt;agent.conf&lt;/code&gt;和&lt;code&gt;server.conf&lt;/code&gt;配置文件中配置的其他数据路径的基目录。例如，如果你在&lt;code&gt;agent.conf&lt;/code&gt;中将&lt;code&gt;data_dir&lt;/code&gt;设置为&lt;code&gt;&amp;quot;/opt/spire/data&amp;quot;&lt;/code&gt;，则将&lt;code&gt;KeyManager“disk”plugin_data directory&lt;/code&gt;设置为&lt;code&gt;&amp;quot;/opt/spire/data/agent&amp;quot;&lt;/code&gt;。或者，如果你在&lt;code&gt;server.conf&lt;/code&gt;中将&lt;code&gt;data_dir&lt;/code&gt;设置为&lt;code&gt;/opt/spire/data&lt;/code&gt;，则将&lt;code&gt;connection_string&lt;/code&gt;设置为&lt;code&gt;&amp;quot;/opt/spire/data/server/datastore.sqlite3&amp;quot;&lt;/code&gt;，如果你使用 SQLite 作为 SPIRE Server 数据存储，则如下所述。&lt;/p&gt;
&lt;h2 id=&#34;配置服务器数据存储方式&#34;&gt;配置服务器数据存储方式&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;此配置适用于 SPIRE 服务器&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;数据存储是 SPIRE 服务器用于持久化动态配置的地方，例如从 SPIRE 服务器检索的注册条目和标识映射策略。默认情况下，SPIRE 使用 SQLite 捆绑并将其设置为默认的服务器数据存储方式。SPIRE 还支持其他兼容的数据存储。对于生产用途，你应该仔细考虑使用哪个数据库，特别是在将 SPIRE 部署在高可用配置时。&lt;/p&gt;
&lt;p&gt;可以通过配置默认的 SQL 数据存储插件来将 SPIRE 服务器配置为使用不同的 SQL 兼容存储后端，如下所述。有关如何配置此块的完整参考，请参阅&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_datastore_sql.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 文档&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&#34;将-sqlite-配置为-spire-数据存储&#34;&gt;将 SQLite 配置为 SPIRE 数据存储&lt;/h4&gt;
&lt;p&gt;默认情况下，SPIRE 服务器会创建并使用本地 SQLite 数据库来备份和存储配置数据。虽然对于测试来说很方便，但是在生产部署中通常不推荐使用，因为很难在多台机器上共享 SQLite 数据存储，这会使备份、HA 部署和升级变得复杂。&lt;/p&gt;
&lt;p&gt;要配置服务器使用 SQLite 数据库，请在配置文件中启用以下类似的部分：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    DataStore &amp;#34;sql&amp;#34; {
        plugin_data {
            database_type = &amp;#34;sqlite3&amp;#34;
            connection_string = &amp;#34;/opt/spire/data/server/datastore.sqlite3&amp;#34;
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;配置文件中不应该有其他（取消注释的）&lt;code&gt;DataStore&lt;/code&gt;部分。&lt;/p&gt;
&lt;p&gt;数据库将在&lt;code&gt;connection_string&lt;/code&gt;中指定的路径中创建。有关选择 SPIRE 相关数据位置的更多信息，请参见&lt;a href=&#34;https://spiffe.io/docs/latest/deploying/configuring/#configuring-where-to-store-agent-and-server-data&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;配置代理和服务器数据存储位置&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&#34;将-mysql-配置为数据存储&#34;&gt;将 MySQL 配置为数据存储&lt;/h4&gt;
&lt;p&gt;在生产环境中，建议使用专用数据库来备份和存储配置数据。尽管安装和配置 MySQL 数据库不在本指南的范围内，但值得注意的是 SPIRE 服务器需要：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于 SPIRE 服务器配置的 MySQL 服务器上的专用数据库。&lt;/li&gt;
&lt;li&gt;具有能力连接到运行 SPIRE 服务器的任何 EC2 实例，并能向该数据库中的表、列和行插入和删除的 MySQL 用户。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要配置 SPIRE 服务器使用 MySQL 数据库，请在配置文件中启用以下类似的部分：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    DataStore &amp;#34;sql&amp;#34; {
        plugin_data {
            database_type = &amp;#34;mysql&amp;#34;
            connection_string = &amp;#34;username:password@tcp(localhost:3306)/dbname?parseTime=true&amp;#34;
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在上述连接字符串中，用以下内容替换：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;username&lt;/code&gt;：要用于访问数据库的 MySQL 用户的用户名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;password&lt;/code&gt;：MySQL 用户的密码&lt;/li&gt;
&lt;li&gt;&lt;code&gt;localhost:3306&lt;/code&gt;：MySQL 服务器的 IP 地址或主机名和端口号&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dbname&lt;/code&gt;：数据库的名称&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;将-postgres-配置为数据存储&#34;&gt;将 Postgres 配置为数据存储&lt;/h4&gt;
&lt;p&gt;在生产环境中，建议使用专用数据库来备份和存储配置数据。尽管安装和配置 Postgres 数据库不在本指南的范围内，但值得注意的是 SPIRE 服务器需要：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于 SPIRE 服务器配置的 Postgres 服务器上的专用数据库。&lt;/li&gt;
&lt;li&gt;具有能力连接到运行 SPIRE 服务器的任何实例，并能向该数据库中的表、列和行插入和删除的 Postgres 用户。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要配置 SPIRE 服务器使用 Postgres 数据库，请在服务器配置文件中启用以下部分：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    DataStore &amp;#34;sql&amp;#34; {
        plugin_data {
            database_type = &amp;#34;postgres&amp;#34;
            connection_string = &amp;#34;dbname=[database_name] user=[username]
                                 password=[password] host=[hostname] port=[port]&amp;#34;
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;connection_string&lt;/code&gt; 的值采用键=值格式，但也可以使用连接 URI（参见 Postgres 文档中支持的连接字符串格式的&lt;a href=&#34;https://www.postgresql.org/docs/11/libpq-connect.html#LIBPQ-CONNSTRING&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;34.1.1. 连接字符串&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;以下是你设置的连接字符串值的摘要：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[database-name]：数据库的名称&lt;/li&gt;
&lt;li&gt;[username]：访问数据库的 Postgres 用户的用户名&lt;/li&gt;
&lt;li&gt;[password]：用户的密码&lt;/li&gt;
&lt;li&gt;[hostname]：Postgres 服务器的 IP 地址或主机名&lt;/li&gt;
&lt;li&gt;[port]：Postgres 服务器的端口号&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;配置代理和服务器上存储生成的密钥的方式&#34;&gt;配置代理和服务器上存储生成的密钥的方式&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;此配置适用于 SPIRE 服务器和 SPIRE 代理&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;SPIRE 代理和 SPIRE 服务器在正常运行过程中会生成私钥和证书。保持这些密钥和证书的完整性非常重要，以确保维护所发行的 SPIFFE 身份的完整性。&lt;/p&gt;
&lt;p&gt;目前，SPIRE 在代理和服务器上支持两种密钥管理策略。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存储于内存中。在此策略中，密钥和证书仅存储在内存中。这意味着，如果服务器或代理崩溃或重新启动，则必须重新生成密钥。对于 SPIRE 代理来说，这通常需要代理在重新启动时重新对服务器进行验证。通过启用和配置内存密钥管理器插件来管理此策略，可用于&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_keymanager_memory.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 服务器&lt;/a&gt;和/或&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_agent_keymanager_memory.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 代理&lt;/a&gt;*。&lt;/li&gt;
&lt;li&gt;存储在磁盘上。在此策略中，密钥和证书存储在指定的磁盘文件中。使用此方法的一个优点是它们在 SPIRE 服务器或代理重新启动后仍然存在。缺点是，由于密钥存储在磁盘文件中，必须采取其他预防措施，以防止恶意进程读取这些文件。通过启用和配置磁盘密钥管理器插件来管理此策略，可用于&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_keymanager_disk.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 服务器&lt;/a&gt;和/或&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_agent_keymanager_disk.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 代理&lt;/a&gt;*。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外，SPIRE 可以配置为通过第三方密钥管理器插件集成自定义后端，例如秘密存储。&lt;a href=&#34;https://spiffe.io/docs/latest/spire/developing/extending/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;扩展 SPIRE&lt;/a&gt;指南对此进行了更详细的介绍。&lt;/p&gt;
&lt;h2 id=&#34;配置应用程序将使用的信任根上游授权机构&#34;&gt;配置应用程序将使用的信任根/“上游授权机构”&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;此配置适用于 SPIRE 服务器&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;每个 SPIRE 服务器使用特定的根签名密钥，用于执行几个重要操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过 SPIRE 代理对 SPIRE 服务器建立信任，因为代理持有由该密钥签名的证书（但请注意，服务器对代理的信任是通过验证建立的）。&lt;/li&gt;
&lt;li&gt;生成发放给工作负载的 X.509 或 JWT SVID。&lt;/li&gt;
&lt;li&gt;生成用于与其他 SPIRE 服务器建立信任的 SPIFFE 信任捆绑。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应将此签名密钥视为非常敏感的，因为获取它将允许恶意行为者冒充 SPIRE 服务器并代表其发放身份。&lt;/p&gt;
&lt;p&gt;为了确保签名密钥的完整性，SPIRE 服务器可以自行对材料进行签名，使用存储在磁盘上的签名密钥，或委托签名给独立的证书颁发机构（CA），例如 AWS Secrets Manager。此行为通过&lt;code&gt;server.conf&lt;/code&gt;文件中的&lt;code&gt;UpstreamAuthority&lt;/code&gt;部分进行配置。&lt;/p&gt;
&lt;p&gt;有关完整的服务器配置参考，请参阅&lt;a href=&#34;https://spiffe.io/docs/latest/deploying/spire_server/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 服务器配置参考&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&#34;配置磁盘上的签名密钥&#34;&gt;配置磁盘上的签名密钥&lt;/h4&gt;
&lt;p&gt;SPIRE 服务器可以配置为从磁盘加载 CA 凭据，使用它们为服务器的签名机构生成中间签名证书。&lt;/p&gt;
&lt;p&gt;SPIRE 服务器附带了一个“虚拟”密钥和证书，可用于简化测试，但由于该密钥分发给所有 SPIRE 用户，因此不应将其用于除测试目的之外的任何用途。相反，应生成一个在磁盘上的签名密钥。&lt;/p&gt;
&lt;p&gt;如果已安装&lt;code&gt;openssl&lt;/code&gt;工具，则可以使用类似以下命令生成有效的根密钥和证书：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo openssl req &lt;span class=&#34;se&#34;&gt;\\\\&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       -subj &lt;span class=&#34;s2&#34;&gt;&amp;#34;/C=/ST=/L=/O=/CN=acme.com&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\\\\&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       -newkey rsa:2048 -nodes -keyout /opt/spire/conf/root.key &lt;span class=&#34;se&#34;&gt;\\\\&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       -x509 -days &lt;span class=&#34;m&#34;&gt;365&lt;/span&gt; -out /opt/spire/conf/root.crt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过启用和配置磁盘&lt;code&gt;UpstreamAuthority&lt;/code&gt;插件，可以管理此策略，用于&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_upstreamauthority_disk.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 服务器&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&#34;配置-aws-证书管理器&#34;&gt;配置 AWS 证书管理器&lt;/h4&gt;
&lt;p&gt;可以配置 SPIRE 服务器从亚马逊网络服务的证书管理器（&lt;a href=&#34;https://aws.amazon.com/certificate-manager/private-certificate-authority/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Private Certificate Authority&lt;/a&gt;）加载 CA 凭据，并使用它们生成服务器签名授权的中间签名证书。&lt;/p&gt;
&lt;p&gt;可以通过启用和配置 &lt;code&gt;aws_pca&lt;/code&gt; UpstreamAuthority 插件来管理此策略，有关详细信息，请参阅 &lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_upstreamauthority_aws_pca.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 服务器&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&#34;配置另一个-spire-安装&#34;&gt;配置另一个 SPIRE 安装&lt;/h4&gt;
&lt;p&gt;可以配置 SPIRE 服务器从另一个 SPIFFE 实现（例如 SPIRE）的 Workload API 加载 CA 凭据。这使得可以使用一种称为“嵌套 SPIRE”的技术，作为 HA 部署的补充，允许独立的 SPIRE 服务器针对单个信任域发出标识。&lt;/p&gt;
&lt;p&gt;关于嵌套 SPIRE 的完整处理超出了本指南的范围。但是，可以通过启用和配置 &lt;code&gt;spire&lt;/code&gt; UpstreamAuthority 插件来管理此策略，有关详细信息，请参阅 &lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_upstreamauthority_spire.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 服务器&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;导出用于监控的指标&#34;&gt;导出用于监控的指标&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;此配置适用于 SPIRE 服务器和 SPIRE Agent&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;要将 SPIRE 服务器或 Agent 配置为将数据输出到指标收集器，请编辑 &lt;code&gt;server.conf&lt;/code&gt; 或 &lt;code&gt;agent.conf&lt;/code&gt; 中的遥测部分。SPIRE 可以将指标导出到 &lt;a href=&#34;https://docs.datadoghq.com/developers/dogstatsd/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Datadog&lt;/a&gt; （DogStatsD 格式）、&lt;a href=&#34;https://github.com/m3db/m3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;M3&lt;/a&gt;、&lt;a href=&#34;https://prometheus.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Prometheus&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/statsd/statsd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;StatsD&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;可以同时配置多个收集器。在要将指标发送到多个收集器的情况下，DogStatsD、M3 和 StatsD 支持多个声明。&lt;/p&gt;
&lt;p&gt;如果要使用 Amazon CloudWatch 进行指标收集，请查阅 &lt;a href=&#34;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Agent-custom-metrics-statsd.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;此文档&lt;/a&gt; 以了解使用 CloudWatch 代理程序和 StatsD 检索自定义指标的方法。&lt;/p&gt;
&lt;p&gt;以下是将遥测导出到 Datadog、M3、Prometheus 和 StatsD 并禁用内存收集器的 &lt;code&gt;agent.conf&lt;/code&gt; 或 &lt;code&gt;server.conf&lt;/code&gt; 的配置块示例：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;telemetry {
        Prometheus {
                port = 9988
        }

        DogStatsd = [
            { address = &amp;#34;localhost:8125&amp;#34; },
        ]

        Statsd = [
            { address = &amp;#34;localhost:1337&amp;#34; },
            { address = &amp;#34;collector.example.org:8125&amp;#34; },
        ]

        M3 = [
            { address = &amp;#34;localhost:9000&amp;#34; env = &amp;#34;prod&amp;#34; },
        ]

        InMem {
            enabled = false
        }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;有关更多信息，请参阅 &lt;a href=&#34;https://spiffe.io/docs/latest/deploying/telemetry_config/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;遥测配置&lt;/a&gt; 指南。&lt;/p&gt;
&lt;h2 id=&#34;日志记录&#34;&gt;日志记录&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;此配置适用于 SPIRE 服务器和 SPIRE Agent&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;可以在各自的配置文件中设置 SPIRE 服务器和 SPIRE Agent 的日志文件位置和日志级别。编辑 &lt;code&gt;log_file&lt;/code&gt; 值以设置日志文件位置，编辑 &lt;code&gt;log_level&lt;/code&gt; 值以设置日志级别。此值可以是 DEBUG、INFO、WARN 或 ERROR 中的一个。&lt;/p&gt;
&lt;p&gt;默认情况下，SPIRE 日志将输出到 STDOUT。但是，可以通过在 &lt;code&gt;log_file&lt;/code&gt; 属性中指定文件路径，将 SPIRE Agent 和 Server 配置为直接将日志写入文件。&lt;/p&gt;
&lt;h2 id=&#34;下一步是什么&#34;&gt;下一步是什么？&lt;/h2&gt;
&lt;p&gt;在配置完服务器和代理后，请考虑阅读关于&lt;a href=&#34;https://spiffe.io/docs/latest/spire/using/registering/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;注册工作负载&lt;/a&gt;的指南。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用 Envoy 和 X.509-SVID</title>
      <link>https://lib.jimmysong.io/spiffe-and-spire/examples/envoy-x509/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/spiffe-and-spire/examples/envoy-x509/</guid>
      <description>&lt;p&gt;本教程在&lt;a href=&#34;https://spiffe.io/docs/latest/try/getting-started-k8s/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes 快速入门教程&lt;/a&gt;的基础上，演示了如何配置 SPIRE 以提供动态的 X.509 证书形式的服务身份，并由 Envoy 秘密发现服务（SDS）进行使用。本教程中展示了实现 X.509 SVID 身份验证所需的更改，因此你应该首先运行或至少阅读 Kubernetes 快速入门教程。&lt;/p&gt;
&lt;p&gt;为了演示 X.509 身份验证，我们创建了一个简单的场景，包含三个服务。其中一个服务是后端服务，是一个简单的 nginx 实例，用于提供静态数据。另一方面，我们运行两个&lt;code&gt;Symbank&lt;/code&gt;演示银行应用作为前端服务。&lt;code&gt;Symbank&lt;/code&gt;前端服务向 nginx 后端发送 HTTP 请求以获取用户账户详细信息。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/SPIRE_Envoy_diagram.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;如图所示，前端服务通过 Envoy 实例建立的 mTLS 连接与后端服务连接，并且 Envoy 实例会为每个工作负载执行 X.509 SVID 身份验证。&lt;/p&gt;
&lt;p&gt;在本教程中，你将学习如何：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;配置 SPIRE 以支持 SDS&lt;/li&gt;
&lt;li&gt;配置 Envoy SDS 以使用 SPIRE 提供的 X.509 证书&lt;/li&gt;
&lt;li&gt;在 SPIRE 服务器上为 Envoy 实例创建注册条目&lt;/li&gt;
&lt;li&gt;使用 SPIRE 测试成功的 X.509 身份验证&lt;/li&gt;
&lt;li&gt;可选地配置 Envoy RBAC HTTP 过滤器策略&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;先决条件&#34;&gt;先决条件&lt;/h2&gt;
&lt;p&gt;在继续之前，请先阅读以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你需要访问通过&lt;a href=&#34;https://spiffe.io/docs/latest/try/getting-started-k8s/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes 快速入门教程&lt;/a&gt;配置的 Kubernetes 环境。可选地，你可以使用下面描述的 &lt;code&gt;pre-set-env.sh&lt;/code&gt; 脚本创建 Kubernetes 环境。Kubernetes 环境必须能够将 Ingress 公开到公共互联网上。&lt;strong&gt;注意：对于本地 Kubernetes 环境（例如 Minikube），通常不适用此条件&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;本教程所需的 YAML 文件可在 &lt;a href=&#34;https://github.com/spiffe/spire-tutorials&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/spiffe/spire-tutorials&lt;/a&gt; 的 &lt;code&gt;k8s/envoy-x509&lt;/code&gt; 目录中找到。如果你尚未克隆&lt;em&gt;Kubernetes 快速入门教程&lt;/em&gt;的存储库，请现在进行克隆。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果&lt;em&gt;Kubernetes 快速入门教程&lt;/em&gt;环境不可用，你可以使用以下脚本创建该环境，并将其用作本教程的起点。从&lt;code&gt;k8s/envoy-x509&lt;/code&gt;目录中运行以下命令：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ bash scripts/pre-set-env.sh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;该脚本将创建所需的 SPIRE 服务器和 SPIRE 代理资源。&lt;/p&gt;
&lt;h3 id=&#34;外部-ip-支持&#34;&gt;外部 IP 支持&lt;/h3&gt;
&lt;p&gt;本教程需要一个可以分配外部 IP 的负载均衡器（例如&lt;a href=&#34;https://metallb.universe.tf/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;metallb&lt;/a&gt;）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.13.7/config/manifests/metallb-native.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;等待 metallb 启动&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl &lt;span class=&#34;nb&#34;&gt;wait&lt;/span&gt; --namespace metallb-system &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;                --for&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;condition&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;ready pod &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;                --selector&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;metallb &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;                --timeout&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;90s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;应用 metallb 配置&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -f metallb-config.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;envoy-sds-支持&#34;&gt;Envoy SDS 支持&lt;/h2&gt;
&lt;p&gt;SPIRE 代理原生支持 Envoy Secret Discovery Service（SDS）。SDS 通过与工作负载 API 和连接到 SDS 的 Envoy 进程使用相同的 Unix 域套接字提供服务，并对工作负载进行验证。&lt;/p&gt;
&lt;h2 id=&#34;第-1-部分运行工作负载&#34;&gt;第 1 部分：运行工作负载&lt;/h2&gt;
&lt;p&gt;现在，让我们部署本教程中将使用的工作负载。它由三个工作负载组成：如前所述，两个&lt;em&gt;Symbank&lt;/em&gt;演示应用程序的实例将充当前端服务，另一个提供静态文件的 nginx 实例将充当后端服务。&lt;/p&gt;
&lt;p&gt;为了区分两个&lt;em&gt;Symbank&lt;/em&gt;应用程序的实例，让我们将其称为&lt;em&gt;frontend&lt;/em&gt;和&lt;em&gt;frontend-2&lt;/em&gt;。前者配置为显示与用户&lt;em&gt;Jacob Marley&lt;/em&gt;相关的数据，而后者将显示用户&lt;em&gt;Alex Fergus&lt;/em&gt;的帐户详细信息。&lt;/p&gt;
&lt;h2 id=&#34;部署所有工作负载&#34;&gt;部署所有工作负载&lt;/h2&gt;
&lt;p&gt;确保当前的工作目录是 &lt;code&gt;.../spire-tutorials/k8s/envoy-x509&lt;/code&gt;，然后使用以下命令部署新的资源：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ kubectl apply -k k8s/.
configmap/backend-balance-json-data created
configmap/backend-envoy created
configmap/backend-profile-json-data created
configmap/backend-transactions-json-data created
configmap/frontend-2-envoy created
configmap/frontend-envoy created
configmap/symbank-webapp-2-config created
configmap/symbank-webapp-config created
service/backend-envoy created
service/frontend-2 created
service/frontend created
deployment.apps/backend created
deployment.apps/frontend-2 created
deployment.apps/frontend created
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;kubectl apply&lt;/code&gt; 命令将创建以下资源：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个工作负载的部署。它包含一个用于我们的服务和 Envoy Sidecar 的容器。&lt;/li&gt;
&lt;li&gt;每个工作负载的服务。用于它们之间的通信。&lt;/li&gt;
&lt;li&gt;多个 Configmap：
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;json-data&lt;/em&gt; 用于向作为后端服务运行的 Nginx 实例提供静态文件。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;envoy&lt;/em&gt; 包含每个工作负载的 Envoy 配置。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;symbank-webapp-&lt;/em&gt; 包含供每个前端服务实例使用的配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来的两个部分将重点介绍配置 Envoy 所需的设置。&lt;/p&gt;
&lt;h4 id=&#34;spire-agent-集群&#34;&gt;SPIRE Agent 集群&lt;/h4&gt;
&lt;p&gt;为了让 Envoy SDS 使用 SPIRE Agent 提供的 X.509 证书，我们配置一个集群，指向 SPIRE Agent 提供的 Unix 域套接字。后端服务的 Envoy 配置位于 &lt;code&gt;k8s/backend/config/envoy.yaml&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;clusters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;spire_agent&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;connect_timeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;25s&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;http2_protocol_options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;load_assignment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cluster_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;spire_agent&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;endpoints&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;lb_endpoints&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;endpoint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;pipe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/run/spire/sockets/agent.sock&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;tls-证书&#34;&gt;TLS 证书&lt;/h4&gt;
&lt;p&gt;要从 SPIRE 获取 TLS 证书和私钥，你需要在 TLS 上下文中设置一个 SDS 配置。TLS 证书的名称是 Envoy 充当代理的服务的 SPIFFE ID。此外，SPIRE 为每个信任域提供一个验证上下文，Envoy 使用它来验证对等证书。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;transport_socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;envoy.transport_sockets.tls&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;typed_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;@type&amp;#34;: &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;common_tls_context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tls_certificate_sds_secret_configs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;spiffe://example.org/ns/default/sa/default/backend&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;sds_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resource_api_version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;V3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;api_config_source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;api_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;GRPC&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;transport_api_version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;V3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;grpc_services&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;envoy_grpc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cluster_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;spire_agent&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;combined_validation_context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# validate the SPIFFE ID of incoming clients (optionally)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;default_validation_context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;match_typed_subject_alt_names&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;san_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;URI&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matcher&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;exact&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;spiffe://example.org/ns/default/sa/default/frontend&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;san_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;URI&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matcher&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;exact&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;spiffe://example.org/ns/default/sa/default/frontend-2&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# obtain the trust bundle from SDS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;validation_context_sds_secret_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;spiffe://example.org&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;sds_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resource_api_version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;V3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;api_config_source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;api_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;GRPC&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;transport_api_version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;V3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;grpc_services&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;envoy_grpc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cluster_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;spire_agent&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;类似的配置也适用于前端服务，以建立一个 mTLS 通信。检查名为 &lt;code&gt;backend&lt;/code&gt; 的集群在 &lt;code&gt;k8s/frontend/config/envoy.yaml&lt;/code&gt; 和 &lt;code&gt;k8s/frontend-2/config/envoy.yaml&lt;/code&gt; 中的配置。&lt;/p&gt;
&lt;h3 id=&#34;创建注册条目&#34;&gt;创建注册条目&lt;/h3&gt;
&lt;p&gt;为了获得 SPIRE 颁发的 X.509 证书，必须先注册服务。我们通过在 SPIRE Server 上为每个工作负载创建注册条目来实现这一点。让我们使用以下 Bash 脚本：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ bash create-registration-entries.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行脚本后，将显示所创建的注册条目列表。输出将显示 &lt;a href=&#34;https://spiffe.io/docs/latest/try/getting-started-k8s/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes Quickstart Tutorial&lt;/a&gt; 创建的其他注册条目。这里重要的是每个工作负载的三个新条目：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;...
Entry ID      : 0d02d63f-712e-47ad-a06e-853c8b062835
SPIFFE ID     : spiffe://example.org/ns/default/sa/default/backend
Parent ID     : spiffe://example.org/ns/spire/sa/spire-agent
TTL           : 3600
Selector      : k8s:container-name:envoy
Selector      : k8s:ns:default
Selector      : k8s:pod-label:app:backend
Selector      : k8s:sa:default

Entry ID      : 3858ec9b-f924-4f69-b812-5134aa33eaee
SPIFFE ID     : spiffe://example.org/ns/default/sa/default/frontend
Parent ID     : spiffe://example.org/ns/spire/sa/spire-agent
TTL           : 3600
Selector      : k8s:container-name:envoy
Selector      : k8s:ns:default
Selector      : k8s:pod-label:app:frontend
Selector      : k8s:sa:default

Entry ID      : 4e37f863-302a-4b3c-a942-dc2a86459f37
SPIFFE ID     : spiffe://example.org/ns/default/sa/default/frontend-2
Parent ID     : spiffe://example.org/ns/spire/sa/spire-agent
TTL           : 3600
Selector      : k8s:container-name:envoy
Selector      : k8s:ns:default
Selector      : k8s:pod-label:app:frontend-2
Selector      : k8s:sa:default
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;请注意，我们工作负载的选择器指向了 Envoy 容器：k8s:container-name:envoy。这是我们配置 Envoy 代表工作负载执行 X.509 SVID 身份验证的方式。&lt;/p&gt;
&lt;h2 id=&#34;第二部分测试连接&#34;&gt;第二部分：测试连接&lt;/h2&gt;
&lt;p&gt;现在，服务已经部署并在 SPIRE 中注册，让我们测试我们配置的授权。&lt;/p&gt;
&lt;h3 id=&#34;使用有效的-x509-svid-进行身份验证的测试&#34;&gt;使用有效的 X.509 SVID 进行身份验证的测试&lt;/h3&gt;
&lt;p&gt;第一组测试将演示如何使用有效的 X.509 SVID 显示相关数据。为此，我们将展示前端服务 (&lt;code&gt;frontend&lt;/code&gt;和&lt;code&gt;frontend-2&lt;/code&gt;) 如何通过获取每个服务的正确 IP 地址和端口与&lt;code&gt;backend&lt;/code&gt;服务进行通信。要运行这些测试，我们需要找到用于访问数据的 URL 所组成的 IP 地址和端口。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl get services
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NAME            TYPE           CLUSTER-IP    EXTERNAL-IP      PORT&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;S&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;          AGE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;backend-envoy   ClusterIP      None          &amp;lt;none&amp;gt;           9001/TCP         6m53s
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;frontend        LoadBalancer   10.8.14.117   35.222.164.221   3000:32586/TCP   6m52s
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;frontend-2      LoadBalancer   10.8.7.57     35.222.190.182   3002:32056/TCP   6m53s
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubernetes      ClusterIP      10.8.0.1      &amp;lt;none&amp;gt;           443/TCP          59m
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;frontend&lt;/code&gt;服务将在&lt;code&gt;EXTERNAL-IP&lt;/code&gt;值和端口&lt;code&gt;3000&lt;/code&gt;处可用，这是我们容器配置的端口。在上面显示的示例输出中，导航的 URL 为&lt;code&gt;http://35.222.164.221:3000&lt;/code&gt;。打开浏览器并导航到环境中显示的&lt;code&gt;frontend&lt;/code&gt;的 IP 地址，添加端口&lt;code&gt;:3000&lt;/code&gt;。页面加载完成后，你将看到用户&lt;em&gt;Jacob Marley&lt;/em&gt;的账户详细信息。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/frontend_view.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;按照相同的步骤，当你连接到&lt;code&gt;frontend-2&lt;/code&gt;服务的 URL 时（例如&lt;code&gt;http://35.222.190.182:3002&lt;/code&gt;），浏览器将显示用户&lt;em&gt;Alex Fergus&lt;/em&gt;的账户详细信息。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/frontend-2_view.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;更新-tls-配置以便只有一个前端可以访问后端&#34;&gt;更新 TLS 配置以便只有一个前端可以访问后端&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;backend&lt;/code&gt;服务的 Envoy 配置使用 TLS 配置来通过验证 TLS 连接上呈现的证书的主题备用名称 (SAN) 来过滤传入的连接。对于 SVIDs，证书的 SAN 字段设置为与服务关联的 SPIFFE ID。因此，通过在&lt;code&gt;combined_validation_context&lt;/code&gt;部分的&lt;a href=&#34;https://github.com/spiffe/spire-tutorials/blob/main/k8s/envoy-x509/k8s/backend/config/envoy.yaml#L49&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy 配置&lt;/a&gt;中删除&lt;code&gt;frontend-2&lt;/code&gt;服务的 SPIFFE ID，可以使&lt;code&gt;backend&lt;/code&gt;服务的 Envoy 配置允许仅来自&lt;code&gt;frontend&lt;/code&gt;服务的请求。更新后的配置如下所示：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;combined_validation_context:
  # validate the SPIFFE ID of incoming clients (optionally)
  default_validation_context:
    match_typed_subject_alt_names:
    - san_type: URI
      matcher:
        exact: &amp;#34;spiffe://example.org/ns/default/sa/default/frontend&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;应用-envoy-的新配置&#34;&gt;应用 Envoy 的新配置&lt;/h3&gt;
&lt;p&gt;使用文件&lt;code&gt;backend-envoy-configmap-update.yaml&lt;/code&gt;更新&lt;code&gt;backend&lt;/code&gt;工作负载的 Envoy 配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -f backend-envoy-configmap-update.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来，需要重新启动&lt;code&gt;backend&lt;/code&gt; Pod 以应用新配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl scale deployment backend --replicas&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl scale deployment backend --replicas&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在尝试再次在浏览器中查看&lt;code&gt;frontend-2&lt;/code&gt;服务之前，请等待几秒钟以使部署生效。一旦 Pod 准备就绪，请使用&lt;code&gt;frontend-2&lt;/code&gt;服务的正确 URL（例如&lt;code&gt;http://35.222.190.182:3002&lt;/code&gt;）刷新浏览器。结果，现在 Envoy 不允许请求到达&lt;code&gt;backend&lt;/code&gt;服务，并且浏览器中不显示账户详细信息。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/frontend-2_view_no_details.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;另一方面，你可以检查&lt;code&gt;frontend&lt;/code&gt;服务仍然能够从&lt;code&gt;backend&lt;/code&gt;获得响应。刷新浏览器以正确的 URL（例如&lt;code&gt;http://35.222.164.221:3000&lt;/code&gt;），并确认对&lt;em&gt;Jacob Marley&lt;/em&gt;的账户显示账户详细信息。&lt;/p&gt;
&lt;h2 id=&#34;通过基于角色的访问控制过滤器扩展场景&#34;&gt;通过基于角色的访问控制过滤器扩展场景&lt;/h2&gt;
&lt;p&gt;Envoy 提供了一种基于角色的访问控制（RBAC）HTTP 过滤器，它根据一组策略检查请求。策略由权限和主体组成，其中主体指的是请求的下游客户端身份，例如下游客户端证书的 URI SAN。因此，我们可以使用为服务分配的 SPIFFE ID 创建策略，以实现更细粒度的访问控制。&lt;/p&gt;
&lt;p&gt;“Symbank”演示应用程序使用三个不同的端点来获取有关银行账户的所有信息。&lt;code&gt;/profiles&lt;/code&gt;端点提供账户所有者的姓名和地址。另外两个端点，&lt;code&gt;/balances&lt;/code&gt;和&lt;code&gt;/transactions&lt;/code&gt;，提供账户的余额和交易信息。&lt;/p&gt;
&lt;p&gt;为了演示 Envoy 的 RBAC 过滤器，我们可以创建一个策略，允许“frontend”服务仅获取&lt;code&gt;/profiles&lt;/code&gt;端点的数据，并拒绝发送到其他端点的请求。这可以通过定义一个主体与服务的 SPIFFE ID 匹配以及只允许对&lt;code&gt;/profiles&lt;/code&gt;资源进行 GET 请求的权限来实现。&lt;/p&gt;
&lt;p&gt;可以将以下代码片段添加到&lt;code&gt;backend&lt;/code&gt;服务的 Envoy 配置中作为新的 HTTP 过滤器来测试该策略。&lt;em&gt;注意：为了使 Envoy 配置正常工作，必须在现有的&lt;code&gt;envoy.router&lt;/code&gt;过滤器之前添加此代码片段&lt;/em&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;envoy.filters.http.rbac&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;typed_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;@type&amp;#34;: &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;type.googleapis.com/envoy.extensions.filters.http.rbac.v3.RBAC&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ALLOW&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;policies&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;general-rules&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;permissions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;and_rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;:method&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;, exact_match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;GET&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;url_path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;prefix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/profiles&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;principals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;authenticated&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;principal_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;exact&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;spiffe://example.org/ns/default/sa/default/frontend&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该示例演示了如何在已由 SPIRE 获得其身份的 Envoy 实例建立了 TLS 连接时，根据请求参数执行更精细的访问控制。&lt;/p&gt;
&lt;h2 id=&#34;清理&#34;&gt;清理&lt;/h2&gt;
&lt;p&gt;完成本教程后，你可以使用以下脚本删除用于配置 Envoy 以代表工作负载执行 X.509 身份验证的所有资源。此命令将删除：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于 SPIRE - Envoy X.509 集成教程的所有资源。&lt;/li&gt;
&lt;li&gt;SPIRE 代理、SPIRE 服务器和命名空间的所有部署和配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ bash scripts/clean-env.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>SPIRE 基本概念</title>
      <link>https://lib.jimmysong.io/spiffe-and-spire/concept/spire/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/spiffe-and-spire/concept/spire/</guid>
      <description>&lt;p&gt;SPIRE 是 &lt;a href=&#34;../spiffe&#34;&gt;SPIFFE API&lt;/a&gt; 的一个生产就绪的实现，它执行节点和工作负载认证，以便根据一组预先定义的条件，安全地向工作负载发出 SVID，并验证其他工作负载的 SVID。&lt;/p&gt;
&lt;h2 id=&#34;spire-架构和组件&#34;&gt;SPIRE 架构和组件&lt;/h2&gt;
&lt;p&gt;SPIRE 部署由一个 SPIRE 服务器和一个或多个 SPIRE 代理组成。服务器充当通过代理向一组工作负载发放身份的签名机构。它还维护一个工作负载身份的注册表，以及为签发这些身份而必须验证的条件。代理在本地向工作负载公开 SPIFFE 工作负载 API，必须安装在工作负载运行的每个节点上。&lt;/p&gt;
















&lt;figure  id=&#34;figure-spire-架构图&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/spire-arch.svg&#34; alt=&#34;SPIRE 架构图&#34; loading=&#34;lazy&#34; data-zoomable width=&#34;30%&#34; /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      SPIRE 架构图
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;h2 id=&#34;服务器&#34;&gt;服务器&lt;/h2&gt;
&lt;p&gt;SPIRE 服务器负责管理和发布其配置的 SPIFFE 信任域中的所有身份。它存储注册条目（指定决定特定 SPIFFE ID 应被签发的条件的选择器）和签名密钥，使用节点证明来自动验证代理的身份，并在被验证的代理请求时为工作负载创建 SVID。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-spire-服务器&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/spire-server.svg&#34; alt=&#34;SPIRE 服务器&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      SPIRE 服务器
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;服务器的行为是通过一系列的插件决定的。SPIRE 包含几个插件，你可以建立额外的插件来扩展 SPIRE 以满足特定的使用情况。插件的类型包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;节点证明器插件&lt;/strong&gt;：与代理节点证明器一起，验证代理运行的节点的身份。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;节点解析器插件&lt;/strong&gt;：它通过验证关于节点的额外属性来扩展服务器可以用来识别节点的选择器集合。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据存储插件&lt;/strong&gt;：服务器用它来存储、查询和更新各种信息，如注册条目、哪些节点已认证、这些节点的选择器是什么。有一个内置的数据存储插件，可以使用 MySQL、SQLite3 或 PostgresSQL 数据库来存储必要的数据。默认情况下，使用 SQLite 3。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;密钥管理器插件&lt;/strong&gt;：控制服务器如何存储用于签署 X.509-SVID 和 JWT-SVID 的私钥。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;上游权威机构插件&lt;/strong&gt;：默认情况下，SPIRE 服务器充当其自身的证书授权机构。但是，你可以使用上游权威机构插件来使用来自不同 PKI 系统的不同 CA。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你可以通过配置插件和其他各种配置变量来定制服务器的行为。详见 &lt;a href=&#34;https://spiffe.io/docs/latest/deploying/spire_server/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 服务器配置参考&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;代理&#34;&gt;代理&lt;/h2&gt;
&lt;p&gt;SPIRE 代理在已识别的工作负载所运行的每个节点上运行。该代理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从服务器上请求 SVID，并将其缓存起来，直到工作负载请求其 SVID 为止。&lt;/li&gt;
&lt;li&gt;向节点上的工作负载公开 SPIFFE 工作负载 API，并证明调用它的工作负载的身份&lt;/li&gt;
&lt;li&gt;为已识别的工作负载提供其 SVID&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-spire-代理&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/spire-agent.svg&#34; alt=&#34;SPIRE 代理&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      SPIRE 代理
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;该代理的主要组成部分包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;节点证明器插件&lt;/strong&gt;：与服务器节点证明器一起，验证代理运行的节点的身份。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;工作负载证明器插件&lt;/strong&gt;：通过从节点操作系统中查询有关工作负载进程的信息，并将其与你在使用选择器注册工作负载属性时提供给服务器的信息进行比较，来验证节点上工作负载进程的身份。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;密钥管理器插件&lt;/strong&gt;：代理用来生成和使用颁发给工作负载的 X.509-SVID 的私钥。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你可以通过配置插件和其他配置变量来定制代理的行为。详见《&lt;a href=&#34;https://spiffe.io/docs/latest/deploying/spire_agent/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 代理配置参考》&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;自定义服务器和代理插件&#34;&gt;自定义服务器和代理插件&lt;/h2&gt;
&lt;p&gt;你可以为特定的平台和架构创建自定义的服务器和代理插件，而 SPIRE 并不包括这些插件。例如，你可以为一个架构创建服务器和代理节点验证器，而不是在节点验证下总结的那些。或者你可以创建一个自定义密钥管理器插件，以 SPIRE 目前不支持的方式处理私钥。因为 SPIRE 在运行时加载自定义插件，你不需要重新编译 SPIRE 来启用它们。&lt;/p&gt;
&lt;h2 id=&#34;工作负载注册&#34;&gt;工作负载注册&lt;/h2&gt;
&lt;p&gt;为了让 SPIRE 识别工作负载，你必须通过注册条目向 SPIRE 服务器注册工作负载。工作负载注册告诉 SPIRE 如何识别工作负载以及为其提供哪个 SPIFFE ID。&lt;/p&gt;
&lt;p&gt;注册条目将身份（以 SPIFFE ID 的形式）映射到一组称为选择器的属性，工作负载必须拥有这些属性才能获得特定身份。在工作负载证明期间，代理使用这些选择器值来验证工作负载的身份。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://spiffe.io/docs/latest/spire/using/registering/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 文档&lt;/a&gt;中详细介绍了工作负载注册。&lt;/p&gt;
&lt;h2 id=&#34;证明&#34;&gt;证明&lt;/h2&gt;
&lt;p&gt;SPIRE 上下文中的证明（attestation）是断言工作负载的身份。SPIRE 通过从受信任的第三方收集工作负载进程本身和运行 SPIRE 代理的节点的属性并将它们与工作负载注册时定义的一组选择器进行比较来实现这一点。&lt;/p&gt;
&lt;p&gt;用于执行证明的可信第三方 SPIRE 查询是特定于平台的。&lt;/p&gt;
&lt;p&gt;SPIRE 分两个阶段执行证明：首先是节点证明（其中验证工作负载正在运行的节点的身份），然后是工作负载证明（其中验证节点上的工作负载）。&lt;/p&gt;
&lt;p&gt;SPIRE 有一个灵活的架构，允许它根据工作负载运行的环境，使用许多不同的受信第三方进行节点和工作负载验证。你通过代理和服务器配置文件中的条目告诉 SPIRE 使用哪些受信任的第三方，并通过你在注册工作负载时指定的选择器值告诉 SPIRE 使用哪些类型的信息进行验证。&lt;/p&gt;
&lt;h3 id=&#34;节点证明&#34;&gt;节点证明&lt;/h3&gt;
&lt;p&gt;SPIRE 要求每个代理在首次连接到服务器时进行身份验证和自我验证；这个过程称为节点证明（Node Attestation）。在节点证明期间，代理和服务器一起验证运行代理的节点的身份。他们通过称为节点证明器的插件来做到这一点。所有节点证明器都向节点及其环境询问只有该节点拥有的信息片段，以证明该节点的身份。&lt;/p&gt;
&lt;p&gt;节点证明的成功后，代理收到唯一的 SPIFFE ID。然后，代理的 SPIFFE ID 充当其负责的工作负载的“父级”。&lt;/p&gt;
&lt;p&gt;节点身份证明的示例包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过云平台交付给节点的身份证明文件（例如 AWS Instance 身份证明文件）&lt;/li&gt;
&lt;li&gt;验证存储在连接到节点的硬件安全模块或可信平台模块上的私钥&lt;/li&gt;
&lt;li&gt;安装代理时通过加入令牌提供的手动验证&lt;/li&gt;
&lt;li&gt;多节点软件系统安装在节点上时提供的标识凭据（例如 Kubernetes 服务账户令牌）&lt;/li&gt;
&lt;li&gt;其他机器身份证明（例如部署的服务器证书）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;节点证明器向服务器返回一组（可选）节点选择器，用于标识特定机器（例如 Amazon 实例 ID）。由于在定义工作负载的身份时，单个机器的特定身份通常没有用处，因此 SPIRE 会查询&lt;a href=&#34;https://spiffe.io/docs/latest/spire-about/spire-concepts/#node-resolution&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;节点解析器&lt;/a&gt;（如果有）以查看可以验证被证明节点的哪些附加属性（例如，如果节点是 AWS 安全组的成员）。来自证明器和解析者的选择器集成为与代理节点的 SPIFFE ID 关联的选择器集。&lt;/p&gt;
&lt;div class=&#34;alert-note-title&#34;&gt;
    &lt;p&gt;注意&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
    节点证明不需要节点选择器，除非你&lt;a href=&#34;https://spiffe.io/docs/latest/spire/using/registering/#mapping-workloads-to-multiple-nodes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;将工作负载映射到多个节点&lt;/a&gt;。
&lt;/div&gt;

&lt;p&gt;下图说明了节点证明中的步骤。在此图中，底层平台是 AWS：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-spire-节点证明步骤&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/spire-node-attestor.svg&#34; alt=&#34;SPIRE 节点证明步骤&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      SPIRE 节点证明步骤
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 id=&#34;步骤总结节点证明&#34;&gt;步骤总结：节点证明&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;代理 AWS 节点证明器插件向 AWS 查询节点身份证明，并将该信息提供给代理。&lt;/li&gt;
&lt;li&gt;代理将此身份证明传递给服务器。服务器将此数据传递给其 AWS 节点证明器。&lt;/li&gt;
&lt;li&gt;服务器 AWS 节点证明器独立验证身份证明，或者通过调用 AWS API，使用它在步骤 2 中获得的信息。节点证明器还为代理创建一个 SPIFFE ID，并将其传递回服务器进程，以及它发现的任何节点选择器。&lt;/li&gt;
&lt;li&gt;服务器发回代理节点的 SVID。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;节点证明器&#34;&gt;节点证明器&lt;/h4&gt;
&lt;p&gt;代理和服务器通过它们各自的节点证明器询问底层平台。SPIRE 支持节点证明器在各种环境中证明节点身份，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AWS 上的 EC2 实例（使用 EC2 实例身份文档）&lt;/li&gt;
&lt;li&gt;Microsoft Azure 上的 VM（使用 Azure 托管服务标识）&lt;/li&gt;
&lt;li&gt;Google Cloud Platform 上的 Google Compute Engine 实例（使用 GCE 实例身份令牌）&lt;/li&gt;
&lt;li&gt;作为 Kubernetes 集群成员的节点（使用 Kubernetes 服务账户令牌）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于没有平台可以直接识别节点的情况，SPIRE 包括用于证明的节点证明器：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用服务器生成的加入令牌&lt;/strong&gt;—— 加入令牌（join token）是 SPIRE 服务器和代理之间的预共享密钥。服务器可以在安装后生成加入令牌，该令牌可用于在代理启动时对其进行验证。为帮助防止滥用，加入令牌在使用后立即过期。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用现有的 X.509 证书&lt;/strong&gt;—— 有关配置节点证明器的信息，请参阅 &lt;a href=&#34;https://spiffe.io/docs/latest/deploying/spire_server/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 服务器配置参考&lt;/a&gt;和 &lt;a href=&#34;https://spiffe.io/docs/latest/deploying/spire_agent/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 代理配置参考&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&#34;节点解析&#34;&gt;节点解析&lt;/h4&gt;
&lt;p&gt;一旦验证了单个节点的身份，“节点解析器”插件就会扩展一组选择器，这些选择器可用于通过验证节点的其他属性来识别节点（例如，如果节点是特定 AWS 安全组的成员） ，或具有与之关联的特定标签）。只有服务器参与节点解析。SPIRE 在证明之后直接运行一次节点解析器。&lt;/p&gt;
&lt;h4 id=&#34;节点解析器&#34;&gt;节点解析器&lt;/h4&gt;
&lt;p&gt;服务器支持以下平台的节点解析器插件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;亚马逊网络服务（AWS）&lt;/li&gt;
&lt;li&gt;微软 Azure&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;工作负载证明&#34;&gt;工作负载证明&lt;/h3&gt;
&lt;p&gt;工作负载证明提出了一个问题：“这是谁的进程？”代理通过询问本地可用的权限（例如节点的操作系统内核，或在同一节点上运行的本地 kubelet）来回答这个问题，以确定调用工作负载 API 的进程的属性。&lt;/p&gt;
&lt;p&gt;然后，当你使用选择器注册工作负载的属性时，将这些属性与提供给服务器的信息进行比较。&lt;/p&gt;
&lt;p&gt;这些类型的信息可能包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;底层操作系统如何调度进程。在基于 Unix 的系统上，这可能是用户 ID (uid)、组 ID (gid)、文件系统路径等。）&lt;/li&gt;
&lt;li&gt;进程是如何由 Kubernetes 等编排系统调度的。在这种情况下，工作负载可能由运行它的 Kubernetes 服务账户或命名空间来描述。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;虽然代理和服务器都在节点证明中发挥作用，但只有代理参与工作负载证明。&lt;/p&gt;
&lt;p&gt;下图说明了工作负载证明的步骤：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-工作负载证明&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/workload-attestation.svg&#34; alt=&#34;工作负载证明&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      工作负载证明
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 id=&#34;步骤摘要工作负载证明&#34;&gt;步骤摘要：工作负载证明&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;工作负载调用工作负载 API 以请求 SVID。在 Unix 系统上，这被暴露为 Unix 域套接字。&lt;/li&gt;
&lt;li&gt;代理询问节点的内核以识别调用者的进程 ID。然后，它调用任何已配置的工作负载证明器插件，为它们提供工作负载的进程 ID。&lt;/li&gt;
&lt;li&gt;工作负载证明者使用进程 ID 来发现有关工作负载的其他信息，并根据需要查询相邻平台特定的组件，例如 Kubernetes kubelet。通常，这些组件也与代理驻留在同一节点上。&lt;/li&gt;
&lt;li&gt;证明者将发现的信息以选择器的形式返回给代理。&lt;/li&gt;
&lt;li&gt;代理通过将发现的选择器与注册条目进行比较来确定工作负载的身份，并将正确的缓存 SVID 返回给工作负载。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;工作负载证明者&#34;&gt;工作负载证明者&lt;/h4&gt;
&lt;p&gt;SPIRE 包括适用于 Unix、Kubernetes 和 Docker 的工作负载证明器插件。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SPIRE 嵌套架构：将 SPIRE 服务器链接为同一信任域</title>
      <link>https://lib.jimmysong.io/spiffe-and-spire/architecture/nested/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/spiffe-and-spire/architecture/nested/</guid>
      <description>&lt;p&gt;嵌套 SPIRE 允许将 SPIRE 服务器“链接”在一起，并且所有 SPIRE 服务器都可以在同一信任域中发放身份，这意味着在同一信任域中标识的所有工作负载都可以使用根密钥验证其身份文档。&lt;/p&gt;
&lt;p&gt;嵌套拓扑结构通过将一个 SPIRE 代理与每个下游 SPIRE 服务器“链接”在一起来实现。下游 SPIRE 服务器通过 Workload API 获得凭证，然后直接与上游 SPIRE 服务器进行身份验证，以获取一个中间 CA。&lt;/p&gt;
&lt;p&gt;为了演示嵌套拓扑中的 SPIRE 部署，我们使用 Docker Compose 创建了一个场景，其中包括一个根 SPIRE 部署和两个嵌套的 SPIRE 部署。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/Nested_SPIRE_Diagram.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;嵌套拓扑结构非常适合多云部署。由于可以混合匹配节点验证者，下游 SPIRE 服务器可以位于不同的云提供商环境中，并为工作负载和 SPIRE 代理提供身份。&lt;/p&gt;
&lt;p&gt;在本教程中，您将学习以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在嵌套拓扑中配置 SPIRE&lt;/li&gt;
&lt;li&gt;配置 UpstreamAuthority 插件&lt;/li&gt;
&lt;li&gt;为嵌套 SPIRE 服务器创建注册条目&lt;/li&gt;
&lt;li&gt;测试在整个信任域中创建的 SVID 是否有效&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;先决条件&#34;&gt;先决条件&lt;/h2&gt;
&lt;p&gt;本教程的所需文件可以在 &lt;a href=&#34;https://github.com/spiffe/spire-tutorials&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/spiffe/spire-tutorials&lt;/a&gt; 的 &lt;code&gt;docker-compose/nested-spire&lt;/code&gt; 目录中找到。如果尚未克隆存储库，请现在进行克隆。&lt;/p&gt;
&lt;p&gt;在继续之前，请查看以下系统要求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;64 位 Linux 或 macOS 环境&lt;/li&gt;
&lt;li&gt;已安装 &lt;a href=&#34;https://docs.docker.com/get-docker/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Docker&lt;/a&gt; 和 &lt;a href=&#34;https://docs.docker.com/compose/install/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Docker Compose&lt;/a&gt;（macOS Docker Desktop 包含 Docker Compose）&lt;/li&gt;
&lt;li&gt;已安装 &lt;a href=&#34;https://golang.org/dl/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go&lt;/a&gt; 1.14.4 或更高版本&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;第一部分运行服务&#34;&gt;第一部分：运行服务&lt;/h2&gt;
&lt;p&gt;本教程的“nested-spire”主目录包含三个子目录，分别用于存放 SPIRE 部署的配置文件：&lt;code&gt;root&lt;/code&gt;、&lt;code&gt;nestedA&lt;/code&gt;和&lt;code&gt;nestedB&lt;/code&gt;。这些目录包含用于验证 Agents 在 Servers 上的身份的私钥和证书。这些私钥和证书是在场景初始化时使用 Go 应用程序创建的，其详细信息超出了本教程的范围。&lt;/p&gt;
&lt;h3 id=&#34;创建共享目录&#34;&gt;创建共享目录&lt;/h3&gt;
&lt;p&gt;首先，需要一个本地目录，在服务上进行卷挂载，以在根 SPIRE Agent 和嵌套 SPIRE Servers 之间共享工作负载 API。本教程使用&lt;code&gt;.../spire-tutorials/docker-compose/nested-spire/sharedRootSocket&lt;/code&gt;作为共享目录。&lt;/p&gt;
&lt;h3 id=&#34;配置根-spire-部署&#34;&gt;配置根 SPIRE 部署&lt;/h3&gt;
&lt;p&gt;根 SPIRE 服务器和代理的配置文件与默认的&lt;code&gt;server.conf&lt;/code&gt;和&lt;code&gt;agent.conf&lt;/code&gt;文件没有改动，但值得注意的是 SPIRE 代理定义绑定工作负载 API socket 的位置：&lt;code&gt;socket_path =&amp;quot;/opt/spire/sockets/workload_api.sock&amp;quot;&lt;/code&gt;。稍后将使用此路径来配置卷，以便与嵌套 SPIRE Servers 共享工作负载 API。&lt;/p&gt;
&lt;p&gt;我们在&lt;a href=&#34;https://github.com/spiffe/spire-tutorials/blob/main/docker-compose/nested-spire/docker-compose.yaml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;docker-compose.yaml&lt;/a&gt;文件中定义了本教程中的所有服务。在&lt;code&gt;root-agent&lt;/code&gt;服务定义中，我们将 SPIRE Agent 容器中的&lt;code&gt;/opt/spire/sockets&lt;/code&gt;目录挂载到新的本地目录&lt;code&gt;sharedRootSocket&lt;/code&gt;上。在下一节中，当定义嵌套 SPIRE Server 服务时，我们将使用此目录将&lt;code&gt;root-agent&lt;/code&gt;套接字挂载到 SPIRE Server 容器上。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;services&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Root&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;root-server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ghcr.io/spiffe/spire-server:1.5.1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hostname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;root-server&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;./root/server:/opt/spire/conf/server&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;-config&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/opt/spire/conf/server/server.conf&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;root-agent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Share the host pid namespace so this agent can attest the nested servers&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;pid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;host&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ghcr.io/spiffe/spire-agent:1.5.1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;depends_on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;root-server&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hostname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;root-agent&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Share root agent socket to be accessed by nestedA and nestedB servers&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;./sharedRootSocket:/opt/spire/sockets&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;./root/agent:/opt/spire/conf/agent&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;/var/run/:/var/run/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;-config&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/opt/spire/conf/agent/agent.conf&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;配置嵌套-a-spire-部署&#34;&gt;配置嵌套 A SPIRE 部署&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;nestedB&lt;/code&gt; SPIRE 部署需要相同的一组配置，但本文不描述这些更改，以避免重复。&lt;/p&gt;
&lt;p&gt;SPIRE Agent 和 Server 可以通过各种&lt;a href=&#34;https://spiffe.io/spire/docs/extending/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;插件&lt;/a&gt;进行扩展。&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/spire_server.md#built-in-plugins&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;UpstreamAuthority 插件&lt;/a&gt;类型允许 SPIRE Server 与现有 PKI 系统集成。UpstreamAuthority 插件可以使用从磁盘加载的 CA 进行证书签名，第三方工具如 AWS 和 Vault 等。嵌套 SPIRE 部署需要使用&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_upstreamauthority_spire.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;spire UpstreamAuthority 插件&lt;/a&gt;，该插件使用同一信任域中的上游 SPIRE Server 获取 SPIRE Server 的中间签名证书。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;*&lt;a href=&#34;https://github.com/spiffe/spire-tutorials/blob/main/docker-compose/nested-spire/nestedA/server/server.conf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;nestedA-server 的配置文件&lt;/a&gt;*包括&lt;code&gt;spire&lt;/code&gt; UpstreamAuthority 插件定义，其中&lt;code&gt;root-server&lt;/code&gt;被定义为其上游 SPIRE Server。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;na&#34;&gt;UpstreamAuthority &amp;#34;spire&amp;#34; {&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 	   &lt;span class=&#34;na&#34;&gt;plugin_data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt; 	       server_address      = &amp;#34;root-server&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt; 	       server_port         = 8081
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt; 	       workload_api_socket = &amp;#34;/opt/spire/sockets/workload_api.sock&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt; 	   }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    }&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在&lt;a href=&#34;https://github.com/spiffe/spire-tutorials/blob/main/docker-compose/nested-spire/docker-compose.yaml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;docker-compose.yaml&lt;/a&gt;文件中，&lt;code&gt;nestedA-server&lt;/code&gt;服务的 Docker Compose 定义将新的本地目录&lt;code&gt;sharedRootSocket&lt;/code&gt;作为卷进行挂载。请记住，前一节中将&lt;code&gt;root-agent&lt;/code&gt;套接字挂载在该目录上。这样，&lt;code&gt;nestedA-server&lt;/code&gt;就可以访问&lt;code&gt;root-agent&lt;/code&gt;的工作负载 API 并获取其 SVID。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;nestedA-server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Share the host pid namespace so this server can be attested by the root agent&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;pid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;host&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ghcr.io/spiffe/spire-server:1.5.1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hostname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;nestedA-server&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# label to attest nestedA-server against root-agent&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;org.example.name=nestedA&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Add root agent socket&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;./shared/rootSocket:/opt/spire/sockets&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;./nestedA/server:/opt/spire/conf/server&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;-config&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/opt/spire/conf/server/server.conf&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;创建下游注册项&#34;&gt;创建下游注册项&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;nestedA-server&lt;/code&gt;必须在&lt;code&gt;root-server&lt;/code&gt;中注册，以获取其身份，该身份将用于生成 SVID。我们通过在根 SPIRE Server 中创建一个注册项来实现为&lt;code&gt;nestedA-server&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker-compose &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -T root-server &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    /opt/spire/bin/spire-server entry create &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -parentID &lt;span class=&#34;s2&#34;&gt;&amp;#34;spiffe://example.org/spire/agent/x509pop/&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;fingerprint root/agent/agent.crt.pem&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -spiffeID &lt;span class=&#34;s2&#34;&gt;&amp;#34;spiffe://example.org/nestedA&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -selector &lt;span class=&#34;s2&#34;&gt;&amp;#34;docker:label:org.example.name:nestedA-server&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -downstream
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;parentID&lt;/code&gt;标志包含&lt;code&gt;root-agent&lt;/code&gt;的 SPIFFE ID。&lt;code&gt;root-agent&lt;/code&gt;的 SPIFFE ID 是由&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_nodeattestor_x509pop.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;x509pop Node Attestor 插件&lt;/a&gt;创建的，该插件将 SPIFFE ID 定义为&lt;code&gt;spiffe://&amp;lt;trust domain&amp;gt;/spire/agent/x509pop/&amp;lt;fingerprint&amp;gt;&lt;/code&gt;。shell 脚本中的&lt;code&gt;fingerprint()&lt;/code&gt;函数计算证书的 SHA1 指纹。另一个要注意的是&lt;code&gt;downstream&lt;/code&gt;选项。设置此选项时，表示该条目描述的是下游 SPIRE Server。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;运行场景&#34;&gt;运行场景&lt;/h3&gt;
&lt;p&gt;使用&lt;code&gt;set-env.sh&lt;/code&gt;脚本来运行构成场景的所有服务。该脚本使用之前描述的配置选项启动&lt;code&gt;root&lt;/code&gt;、&lt;code&gt;nestedA&lt;/code&gt;和&lt;code&gt;nestedB&lt;/code&gt;服务。&lt;/p&gt;
&lt;p&gt;确保当前工作目录是&lt;code&gt;.../spire-tutorials/docker-compose/nested-spire&lt;/code&gt;，然后运行以下命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;bash scripts/set-env.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;脚本完成后，在另一个终端中运行以下命令以查看所有服务的日志：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker-compose logs -f -t
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;第二部分测试部署&#34;&gt;第二部分：测试部署&lt;/h2&gt;
&lt;p&gt;现在 SPIRE 部署已准备就绪，让我们测试所配置的场景。&lt;/p&gt;
&lt;h3 id=&#34;创建工作负载注册项&#34;&gt;创建工作负载注册项&lt;/h3&gt;
&lt;p&gt;为了测试场景，我们创建两个工作负载注册项，一个用于每个嵌套 SPIRE Server（&lt;code&gt;nestedA&lt;/code&gt;和&lt;code&gt;nestedB&lt;/code&gt;）。测试的目标是演示在嵌套配置中创建的 SVID 在整个信任域中都有效，而不仅仅在生成 SVID 的 SPIRE Server 的范围内。以下命令演示了我们将用于创建这两个工作负载注册项的命令行选项，但您可以使用下面显示的&lt;code&gt;create-workload-registration-entries.sh&lt;/code&gt;脚本运行这些命令。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# nestedA部署的工作负载&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker-compose &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -T nestedA-server &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    /opt/spire/bin/spire-server entry create &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -parentID &lt;span class=&#34;s2&#34;&gt;&amp;#34;spiffe://example.org/spire/agent/x509pop/&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;fingerprint nestedA/agent/agent.crt.pem&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -spiffeID &lt;span class=&#34;s2&#34;&gt;&amp;#34;spiffe://example.org/nestedA/workload&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -selector &lt;span class=&#34;s2&#34;&gt;&amp;#34;unix:uid:1001&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# nestedB部署的工作负载&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker-compose &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -T nestedB-server &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    /opt/spire/bin/spire-server entry create &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -parentID &lt;span class=&#34;s2&#34;&gt;&amp;#34;spiffe://example.org/spire/agent/x509pop/&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;fingerprint nestedB/agent/agent.crt.pem&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -spiffeID &lt;span class=&#34;s2&#34;&gt;&amp;#34;spiffe://example.org/nestedB/workload&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -selector &lt;span class=&#34;s2&#34;&gt;&amp;#34;unix:uid:1001&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;示例再次使用&lt;code&gt;fingerprint path/to/nested-agent-cert&lt;/code&gt;的形式，以显示&lt;code&gt;-parentID&lt;/code&gt;标志指定了嵌套 SPIRE Agent 的 SPIFFE ID。最后，在两种情况下，Unix 选择器将 SPIFFE ID 分配给 uid 为 1001 的任何进程。&lt;/p&gt;
&lt;p&gt;使用以下 Bash 脚本使用刚才描述的选项创建注册条目：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;bash scripts/create-workload-registration-entries.sh
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;运行测试&#34;&gt;运行测试&lt;/h3&gt;
&lt;p&gt;一旦两个工作负载注册条目被传播，我们可以测试在嵌套配置中创建的 SVID 是否在整个信任域中有效，而不仅仅在生成 SVID 的 SPIRE Server 的范围内。&lt;/p&gt;
&lt;p&gt;该测试包括从&lt;code&gt;nestedA-agent&lt;/code&gt; SPIRE Agent 获取 JWT-SVID，并使用&lt;code&gt;nestedB-agent&lt;/code&gt;对其进行验证。在两种情况下，Docker Compose 使用 uid 1001 运行进程，以匹配在上一节中创建的工作负载注册条目。&lt;/p&gt;
&lt;p&gt;输入以下命令从&lt;code&gt;nestedA&lt;/code&gt; SPIRE Agent 获取 JWT-SVID，并从 JWT-SVID 中提取令牌：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;token&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;docker-compose &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -u &lt;span class=&#34;m&#34;&gt;1001&lt;/span&gt; -T nestedA-agent &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    /opt/spire/bin/spire-agent api fetch jwt -audience nested-test -socketPath /opt/spire/sockets/workload_api.sock &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sed -n &lt;span class=&#34;s1&#34;&gt;&amp;#39;2p&amp;#39;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行以下命令在&lt;code&gt;nestedB&lt;/code&gt; SPIRE Agent 上验证&lt;code&gt;nestedA&lt;/code&gt;的令牌：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker-compose &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -u &lt;span class=&#34;m&#34;&gt;1001&lt;/span&gt; -T nestedB-agent &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    /opt/spire/bin/spire-agent api validate jwt -audience nested-test  -svid &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;token&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      -socketPath /opt/spire/sockets/workload_api.sock
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;nestedB&lt;/code&gt; SPIRE Agent 输出如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    SVID is valid.
    SPIFFE ID : spiffe://example.org/nestedA/workload
    Claims    : {&amp;#34;aud&amp;#34;:[&amp;#34;nested-test&amp;#34;],&amp;#34;exp&amp;#34;:1595814190,&amp;#34;iat&amp;#34;:1595813890,&amp;#34;sub&amp;#34;:&amp;#34;spiffe://example.org/nestedA/workload&amp;#34;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;输出表示 JWT-SVID 是有效的。此外，尽管 SPIFFE ID 注册在&lt;code&gt;nestedA&lt;/code&gt;而不是&lt;code&gt;nestedB&lt;/code&gt;上，但该 SPIFFE ID 在&lt;code&gt;nestedB&lt;/code&gt; SPIRE Agent 上仍然有效，因为 SPIRE Agents 在嵌套 SPIRE 拓扑中处于相同的信任域。&lt;/p&gt;
&lt;p&gt;在 SPIRE 中，这是通过将每个 JWT-SVID 公共签名密钥传播到整个拓扑来实现的。在 X509-SVID 的情况下，由于 X.509 的链式语义，这很容易实现。&lt;/p&gt;
&lt;h2 id=&#34;清理&#34;&gt;清理&lt;/h2&gt;
&lt;p&gt;完成本教程后，您可以使用以下 Bash 脚本停止所有容器：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;bash scripts/clean-env.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>X.509 SPIFFE 可验证身份文档</title>
      <link>https://lib.jimmysong.io/spiffe-and-spire/standard/x509-svid/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/spiffe-and-spire/standard/x509-svid/</guid>
      <description>&lt;p&gt;SPIFFE 标准提供了一种框架的规范，能够在异构环境和组织边界中引导和发放服务的身份。它定义了一种称为 SPIFFE 可验证身份文档（SVID）的身份文档。&lt;/p&gt;
&lt;p&gt;SVID 本身并不代表一种新的文档类型。相反，我们提出了一个规范，定义了如何将 SVID 信息编码到现有文档类型中。&lt;/p&gt;
&lt;p&gt;本文档定义了一种标准，其中将 X.509 证书用作 SVID。假设读者对 X.509 有基本的了解。关于 X.509 的具体信息，请参考&lt;a href=&#34;https://tools.ietf.org/html/rfc5280&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 5280&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;
&lt;p&gt;SPIFFE 的最重要的功能之一是保护进程间通信。核心标准允许进行身份验证，但利用加密身份来构建安全的通信通道也是非常有益的。由于 TLS 被广泛采用，并且使用基于 X.509 的身份验证，将 X.509 用作 SPIFFE SVID 显然是有优势的。&lt;/p&gt;
&lt;p&gt;本规范讨论了将 SVID 信息编码到 X.509 证书中的约束条件，以及如何验证 X.509 SVID。&lt;/p&gt;
&lt;h2 id=&#34;spiffe-id&#34;&gt;SPIFFE ID&lt;/h2&gt;
&lt;p&gt;在 X.509 SVID 中，对应的 SPIFFE ID 被设置为主题备用名称扩展（SAN 扩展，参见&lt;a href=&#34;https://tools.ietf.org/html/rfc5280#section-4.2.1.6&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 5280 第 4.2.1.6 节&lt;/a&gt;）。一个 X.509 SVID 必须恰好包含一个 URI SAN，因此也只包含一个 SPIFFE ID。包含多个 SPIFFE ID 的 SVID 会引入与审计和授权逻辑相关的挑战，包含多个 URI SAN 的 SVID 会引入与 SPIFFE ID 验证相关的挑战。遇到包含多个 URI SAN 的 SVID 的验证器必须拒绝该 SVID。有关更多信息，请参见验证部分。&lt;/p&gt;
&lt;p&gt;一个 X.509 SVID 可以包含任意数量的其他 SAN 字段类型，包括 DNS SAN。&lt;/p&gt;
&lt;h2 id=&#34;层级关系&#34;&gt;层级关系&lt;/h2&gt;
&lt;p&gt;本节讨论了叶证书、根证书和中间证书之间的关系，以及对每个证书的要求。&lt;/p&gt;
&lt;h3 id=&#34;叶证书&#34;&gt;叶证书&lt;/h3&gt;
&lt;p&gt;叶证书是用于标识调用方或资源的 SVID，适用于身份验证过程。叶证书（相对于签名证书，第 3.2 节）是唯一能够用于标识资源或调用方的类型。&lt;/p&gt;
&lt;p&gt;叶证书的 SPIFFE ID 必须具有非根路径组件。如果省略了主题字段，则不需要主题字段，但如果省略了主题字段，则 URI SAN 扩展必须标记为关键扩展，根据&lt;a href=&#34;https://tools.ietf.org/html/rfc5280&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 5280 第 4.1.2.6 节&lt;/a&gt;的规定。有关区分叶证书和签名证书的 X.509 特定属性的信息，请参见第 4.1 节。&lt;/p&gt;
&lt;h3 id=&#34;签名证书&#34;&gt;签名证书&lt;/h3&gt;
&lt;p&gt;X.509 SVID 签名证书是具有在密钥用途扩展中设置&lt;code&gt;keyCertSign&lt;/code&gt;的证书。它还在基本约束扩展中将&lt;code&gt;CA&lt;/code&gt;标志设置为&lt;code&gt;true&lt;/code&gt;（参见第 4.1 节）。也就是说，它是一个 CA 证书。&lt;/p&gt;
&lt;p&gt;签名证书应该本身是一个 SVID。如果存在，签名证书的 SPIFFE ID 必须没有路径组件，并且可以位于其发行的任何叶 SVID 的信任域中。签名证书可以用于在相同或不同的信任域中发行进一步的签名证书。&lt;/p&gt;
&lt;p&gt;签名证书不能用于身份验证目的。它们只作为验证材料，并且可以像&lt;a href=&#34;https://tools.ietf.org/html/rfc5280&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 5280&lt;/a&gt;中描述的那样以典型的 X.509 方式链接在一起。请参见第 4.3 节和第 4.4 节以获取有关签名证书的 X.509 特定限制的更多信息。&lt;/p&gt;
&lt;h2 id=&#34;约束和用途&#34;&gt;约束和用途&lt;/h2&gt;
&lt;p&gt;叶证书和签名证书具有不同的 X.509 属性 - 一些用于安全目的，一些用于支持其特殊的功能。本节描述了两种类型 X.509 SVID 的约束和密钥用法配置。&lt;/p&gt;
&lt;h3 id=&#34;基本约束&#34;&gt;基本约束&lt;/h3&gt;
&lt;p&gt;基本约束 X.509 扩展标识证书是否为签名证书，以及包括该证书在内的有效证书路径的最大深度。它在&lt;a href=&#34;https://tools.ietf.org/html/rfc5280#section-4.2.1.9&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 5280 第 4.2.1.9 节&lt;/a&gt;中定义。&lt;/p&gt;
&lt;p&gt;有效的 X.509 SVID 签名证书可以设置&lt;code&gt;pathLenConstraint&lt;/code&gt;字段。签名证书必须将&lt;code&gt;cA&lt;/code&gt;字段设置为&lt;code&gt;true&lt;/code&gt;，而叶证书必须将&lt;code&gt;cA&lt;/code&gt;字段设置为&lt;code&gt;false&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;名称约束&#34;&gt;名称约束&lt;/h3&gt;
&lt;p&gt;名称约束指示了一个命名空间，其中后续证书中的所有 SPIFFE ID 必须位于其中。它们用于将受损的签名证书的影响范围限制在命名的信任域内，并在&lt;a href=&#34;https://tools.ietf.org/html/rfc5280#section-4.2.1.10&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 5280 第 4.2.1.10 节&lt;/a&gt;中定义。本节仅适用于签名证书。&lt;/p&gt;
&lt;p&gt;名称约束的类型与主题备用名称相同。由于 SVID 关心的仅是 SPIFFE ID，并且 SPIFFE ID 被定义为 SAN 类型 URI，因此我们只定义 URI 类型名称约束的语义。&lt;/p&gt;
&lt;p&gt;目前，对 URI 类型名称约束的支持相对较少。不支持它们的库将拒绝此类证书，阻止路径验证成功。虽然名称约束是 SPIFFE 希望使用的 X.509 功能，但作者认识到广泛支持的缺乏可能会给实现和/或部署带来重大痛苦。因此，X.509 SVID 签名证书可以根据实现者的意愿应用 URI 名称约束，但在此领域应谨慎使用。SPIFFE 社区正在努力在各种平台上启用对 URI 名称约束的支持，并且应该预期在未来的版本中，随着广泛支持的实现，本节中定义的要求将变得更加严格。&lt;/p&gt;
&lt;h3 id=&#34;密钥用法&#34;&gt;密钥用法&lt;/h3&gt;
&lt;p&gt;密钥用法扩展定义了证书中包含的密钥的用途。当要限制可以用于多个操作的密钥时，可以使用此用法限制。密钥用法扩展在&lt;a href=&#34;https://tools.ietf.org/html/rfc5280#section-4.2.1.3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 5280 第 4.2.1.3 节&lt;/a&gt;中定义。&lt;/p&gt;
&lt;p&gt;密钥用法扩展必须在所有 SVID 上设置，并且必须标记为关键扩展。&lt;/p&gt;
&lt;p&gt;SVID 签名证书必须设置&lt;code&gt;keyCertSign&lt;/code&gt;。它们可以设置&lt;code&gt;cRLSign&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;叶 SVID 必须设置&lt;code&gt;digitalSignature&lt;/code&gt;。它们可以设置&lt;code&gt;keyEncipherment&lt;/code&gt;和/或&lt;code&gt;keyAgreement&lt;/code&gt;；这些对于 RSA 密钥的证书来说通常只有在需要的情况下才有意义，即使在那种情况下通常也不需要。叶 SVID 不能设置&lt;code&gt;keyCertSign&lt;/code&gt;或&lt;code&gt;cRLSign&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;扩展密钥用途&#34;&gt;扩展密钥用途&lt;/h3&gt;
&lt;p&gt;该扩展指示证书中包含的密钥可以用于的一个或多个目的，除了或代替密钥用途扩展中指示的基本目的之外。它在&lt;a href=&#34;https://tools.ietf.org/html/rfc5280#section-4.2.1.2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 5280，第 4.2.1.2 节&lt;/a&gt;中定义。&lt;/p&gt;
&lt;p&gt;Leaf SVID 应包括此扩展，并且可以将其标记为关键。当包含时，字段&lt;code&gt;id-kp-serverAuth&lt;/code&gt;和&lt;code&gt;id-kp-clientAuth&lt;/code&gt;必须设置。&lt;/p&gt;
&lt;p&gt;签名证书可以包括扩展密钥用途。请注意，X.509 证书验证库中间 CA 证书中扩展密钥用途的处理方式因实现而异。有些 X.509 实现会对信任链中其下的所有证书都施加中间 CA 证书中的扩展密钥用途约束，而其他实现则不会。&lt;/p&gt;
&lt;h2 id=&#34;验证&#34;&gt;验证&lt;/h2&gt;
&lt;p&gt;本节描述了如何验证 X.509 SVID。该过程使用标准的 X.509 验证，以及一系列 SPIFFE 特定的验证步骤。&lt;/p&gt;
&lt;h3 id=&#34;路径验证&#34;&gt;路径验证&lt;/h3&gt;
&lt;p&gt;对给定 SVID 的信任验证基于标准的 X.509 路径验证，并且必须遵循&lt;a href=&#34;https://tools.ietf.org/html/rfc5280&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 5280&lt;/a&gt;的路径验证语义。&lt;/p&gt;
&lt;p&gt;证书路径验证需要提供叶子 SVID 证书和一个或多个 SVID 签名证书。用于验证的签名证书集合称为 CA 捆绑包。实体检索相关 CA 捆绑包的机制不在本文档范围内，而是在 SPIFFE 工作负载 API 规范中定义。&lt;/p&gt;
&lt;h3 id=&#34;叶子验证&#34;&gt;叶子验证&lt;/h3&gt;
&lt;p&gt;在验证资源或调用方时，需要进行超出 X.509 标准范围的验证。即，我们必须确保 1）证书是叶子证书，2）签发机构有权签发它。&lt;/p&gt;
&lt;p&gt;在验证用于身份验证目的的 X.509 SVID 时，验证器必须确保基本约束扩展中的&lt;code&gt;CA&lt;/code&gt;字段设置为&lt;code&gt;false&lt;/code&gt;，并且密钥用途扩展中未设置&lt;code&gt;keyCertSign&lt;/code&gt;和&lt;code&gt;cRLSign&lt;/code&gt;。验证器还必须确保 SPIFFE ID 的方案设置为&lt;code&gt;spiffe://&lt;/code&gt;。包含多个 URI SAN 的 SVID 必须被拒绝。&lt;/p&gt;
&lt;p&gt;随着 URI 名称约束的支持越来越广泛，本文档的未来版本可能会更新本节中设定的要求，以便更好地利用名称约束验证。&lt;/p&gt;
&lt;h2 id=&#34;在-spiffe-捆绑包中的表示&#34;&gt;在 SPIFFE 捆绑包中的表示&lt;/h2&gt;
&lt;p&gt;本节描述了如何将 X509-SVID CA 证书发布到 SPIFFE 捆绑包中，并从中使用。有关 SPIFFE 捆绑包的更多信息，请参阅 SPIFFE 信任域和捆绑包规范。&lt;/p&gt;
&lt;h3 id=&#34;发布-spiffe-捆绑包元素&#34;&gt;发布 SPIFFE 捆绑包元素&lt;/h3&gt;
&lt;p&gt;给定信任域的 X509-SVID CA 证书在 SPIFFE 捆绑包中表示为&lt;a href=&#34;https://tools.ietf.org/html/rfc7517&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 7517 兼容&lt;/a&gt;的 JWK 条目，每个 CA 证书一个条目。&lt;/p&gt;
&lt;p&gt;每个 JWK 条目的&lt;code&gt;use&lt;/code&gt;参数必须设置为&lt;code&gt;x509-svid&lt;/code&gt;。另外，每个 JWK 条目的&lt;code&gt;kid&lt;/code&gt;参数不能设置。&lt;/p&gt;
&lt;p&gt;除了&lt;a href=&#34;https://tools.ietf.org/html/rfc7517&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 7517&lt;/a&gt;要求的参数之外，表示 X509-SVID CA 证书的每个条目必须包含具有与该条目表示的基于 Base64 编码的 DER CA 证书相等的值的&lt;code&gt;x5c&lt;/code&gt;参数。该值必须包含且仅包含一个 CA 证书，并且该证书应为自签名。&lt;/p&gt;
&lt;h3 id=&#34;使用-spiffe-捆绑包&#34;&gt;使用 SPIFFE 捆绑包&lt;/h3&gt;
&lt;p&gt;从外部信任域使用 SPIFFE 捆绑包时，需要提取 X509-SVID CA 证书以供实际使用。SPIFFE 捆绑包可以包含许多不同类型的 SVID 条目，因此第一步是识别表示 X509-SVID CA 证书的条目。&lt;/p&gt;
&lt;p&gt;对于捆绑包中&lt;code&gt;use&lt;/code&gt;参数设置为&lt;code&gt;x509-svid&lt;/code&gt;的每个 JWK 条目，请检查&lt;code&gt;x5c&lt;/code&gt;参数是否设置并且至少具有一个值。如果&lt;code&gt;x5c&lt;/code&gt;未设置或为空，则必须忽略该条目。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;x5c&lt;/code&gt;参数的第一个值是该条目表示的 Base64 DER 编码的 CA 证书。如果&lt;code&gt;x5c&lt;/code&gt;参数包含多个值，则除第一个值外的所有值都必须被忽略。然后，X509-SVID CA 捆绑包是从&lt;code&gt;x509-svid&lt;/code&gt; JWK 条目中提取的 CA 证书的并集。如果捆绑包中不存在&lt;code&gt;x509-svid&lt;/code&gt; JWK 条目，则信任域不支持 X509-SVID。&lt;/p&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;
&lt;p&gt;本文档提出了 X.509 基于 SPIFFE 可验证身份文档的约定和标准。它构成了现实世界 SPIFFE 服务身份验证和 SVID 验证的基础。通过遵守 X.509 SVID 标准，可以构建一个可互操作且与平台无关的身份和身份验证系统。&lt;/p&gt;
&lt;h2 id=&#34;附录-a-x509-字段参考&#34;&gt;附录 A. X.509 字段参考&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;扩展&lt;/th&gt;
&lt;th&gt;字段&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;主题备用名称&lt;/td&gt;
&lt;td&gt;uniformResourceIdentifier&lt;/td&gt;
&lt;td&gt;此字段设置为 SPIFFE ID。仅允许一个此字段的实例。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;基本约束&lt;/td&gt;
&lt;td&gt;CA&lt;/td&gt;
&lt;td&gt;如果 SVID 是签名证书，则必须将此字段设置为 true。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;基本约束&lt;/td&gt;
&lt;td&gt;pathLenConstraint&lt;/td&gt;
&lt;td&gt;如果实现者希望执行有限的 CA 层次结构深度约束（例如，从现有私钥基础设施（PKI）继承），则可以设置此字段。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;名称约束&lt;/td&gt;
&lt;td&gt;permittedSubtrees&lt;/td&gt;
&lt;td&gt;如果实现者希望使用 URI 名称约束，则可以设置此字段。这将在本文档的未来版本中要求。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;密钥用途&lt;/td&gt;
&lt;td&gt;keyCertSign&lt;/td&gt;
&lt;td&gt;如果 SVID 是签名证书，则必须设置此字段。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;密钥用途&lt;/td&gt;
&lt;td&gt;cRLSign&lt;/td&gt;
&lt;td&gt;如果 SVID 是签名证书，则可以设置此字段。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;密钥用途&lt;/td&gt;
&lt;td&gt;keyAgreement&lt;/td&gt;
&lt;td&gt;如果 SVID 是叶子证书，则可以设置此字段。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;密钥用途&lt;/td&gt;
&lt;td&gt;keyEncipherment&lt;/td&gt;
&lt;td&gt;如果 SVID 是叶子证书，则可以设置此字段。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;密钥用途&lt;/td&gt;
&lt;td&gt;digitalSignature&lt;/td&gt;
&lt;td&gt;如果 SVID 是叶子证书，则必须设置此字段。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;扩展密钥用途&lt;/td&gt;
&lt;td&gt;id-kp-serverAuth&lt;/td&gt;
&lt;td&gt;此字段可为叶子证书或签名证书设置。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;扩展密钥用途&lt;/td&gt;
&lt;td&gt;id-kp-clientAuth&lt;/td&gt;
&lt;td&gt;此字段可为叶子证书或签名证书设置。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>安装 SPIRE 服务器</title>
      <link>https://lib.jimmysong.io/spiffe-and-spire/installation/install-server/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/spiffe-and-spire/installation/install-server/</guid>
      <description>&lt;p&gt;本文指导你如何在 Linux 和 Kubernetes 上安装 SPIRE 服务器。&lt;/p&gt;
&lt;h2 id=&#34;步骤-1获取-spire-二进制文件&#34;&gt;步骤 1：获取 SPIRE 二进制文件&lt;/h2&gt;
&lt;p&gt;预构建的 SPIRE 发行版可在 &lt;a href=&#34;https://spiffe.io/downloads/#spire-releases&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 下载页面&lt;/a&gt;找到。tarball 包含服务器和代理二进制文件。&lt;/p&gt;
&lt;p&gt;如果需要，你也可以&lt;a href=&#34;https://github.com/spiffe/spire/blob/main/CONTRIBUTING.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;从源代码构建 SPIRE&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;步骤-2安装服务器和代理&#34;&gt;步骤 2：安装服务器和代理&lt;/h2&gt;
&lt;p&gt;本入门指南描述了如何在同一节点上安装服务器和代理。在典型的生产部署中，服务器将安装在一个节点上，而一个或多个代理将安装在不同的节点上。&lt;/p&gt;
&lt;p&gt;要安装服务器和代理，请执行以下操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;从&lt;a href=&#34;https://spiffe.io/downloads/#spire-releases&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 下载页面&lt;/a&gt;获取最新的 tarball，然后使用以下命令将其解压缩到/opt/spire 目录中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;wget https://github.com/spiffe/spire/releases/download/v1.8.2/spire-1.8.2-linux-amd64-musl.tar.gz
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;tar zvxf spire-1.8.2-linux-amd64-musl.tar.gz
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo cp -r spire-1.8.2/. /opt/spire/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为了方便起见，将&lt;code&gt;spire-server&lt;/code&gt;和&lt;code&gt;spire-agent&lt;/code&gt;添加到你的 $PATH 中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ln -s /opt/spire/bin/spire-server /usr/bin/spire-server
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ln -s /opt/spire/bin/spire-agent /usr/bin/spire-agent
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;步骤-3配置服务器&#34;&gt;步骤 3：配置服务器&lt;/h2&gt;
&lt;p&gt;要在 Linux 上配置服务器，你需要：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;配置信任域&lt;/li&gt;
&lt;li&gt;配置服务器证书颁发机构（CA），可能包括配置 UpstreamAuthority 插件&lt;/li&gt;
&lt;li&gt;配置节点认证插件&lt;/li&gt;
&lt;li&gt;配置用于持久化数据的默认.data 目录&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;但是，为了简单起见，仅需完成步骤 1、2 和 3 即可快速部署演示目的。&lt;/p&gt;
&lt;p&gt;要配置步骤 1、2 和 4 中的项，请编辑服务器的配置文件，位于/opt/spire/conf/server/server.conf。&lt;/p&gt;
&lt;p&gt;有关如何配置 SPIRE 的详细信息，请参阅&lt;a href=&#34;https://spiffe.io/docs/latest/spire/using/configuring/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;配置 SPIRE&lt;/a&gt;，特别是节点认证和工作负载认证。&lt;/p&gt;
&lt;p&gt;注意，SPIRE 服务器在修改配置后必须重新启动才能生效。&lt;/p&gt;
&lt;p&gt;请参阅&lt;a href=&#34;https://spiffe.io/docs/latest/spire/installing/install-agents/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;安装 SPIRE 代理&lt;/a&gt;，了解如何安装 SPIRE 代理。&lt;/p&gt;
&lt;h1 id=&#34;如何在-kubernetes-上安装-spire-服务器&#34;&gt;如何在 Kubernetes 上安装 SPIRE 服务器&lt;/h1&gt;
&lt;p&gt;本节将逐步向你介绍在 Kubernetes 集群中运行服务器并配置工作负载容器以访问 SPIRE 的方法。&lt;/p&gt;
&lt;p&gt;你必须从包含用于配置的.yaml 文件的目录中运行所有命令。&lt;/p&gt;
&lt;h2 id=&#34;步骤-1获取所需文件&#34;&gt;步骤 1：获取所需文件&lt;/h2&gt;
&lt;p&gt;要获取所需的.yaml 文件，请克隆 &lt;a href=&#34;https://github.com/spiffe/spire-tutorials&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/spiffe/spire-tutorials&lt;/a&gt; 并从 spire-tutorials/k8s/quickstart 子目录复制.yaml 文件。&lt;/p&gt;
&lt;h2 id=&#34;步骤-2为-spire-组件配置-kubernetes-命名空间&#34;&gt;步骤 2：为 SPIRE 组件配置 Kubernetes 命名空间&lt;/h2&gt;
&lt;p&gt;按照以下步骤配置部署 SPIRE 服务器和 SPIRE 代理的 spire 命名空间。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建命名空间：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -f spire-namespace.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行以下命令，并验证输出中是否列出了&lt;em&gt;spire&lt;/em&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl get namespaces
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;步骤-3配置-spire-服务器&#34;&gt;步骤 3：配置 SPIRE 服务器&lt;/h2&gt;
&lt;p&gt;要在 Kubernetes 上配置 SPIRE 服务器，你需要：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建服务器服务帐户&lt;/li&gt;
&lt;li&gt;创建服务器捆绑包配置映射&lt;/li&gt;
&lt;li&gt;创建服务器配置映射&lt;/li&gt;
&lt;li&gt;创建服务器有状态集&lt;/li&gt;
&lt;li&gt;创建服务器服务&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;有关详细信息，请参阅以下各节。&lt;/p&gt;
&lt;h3 id=&#34;创建服务器服务帐户&#34;&gt;创建服务器服务帐户&lt;/h3&gt;
&lt;p&gt;通过应用 server-account.yaml 配置文件来配置名为 spire-server 的服务帐户：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ kubectl apply -f server-account.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过运行以下命令确认成功创建，并验证该服务帐户是否出现在以下命令的输出中：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ kubectl get serviceaccount --namespace spire
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;创建服务器捆绑包配置映射角色和-clusterrolebinding&#34;&gt;创建服务器捆绑包配置映射、角色和 ClusterRoleBinding&lt;/h3&gt;
&lt;p&gt;为了使服务器能够为代理提供证书以用于在建立连接时验证服务器的身份，服务器需要具备在 spire 命名空间中获取和修补配置映射对象的功能。&lt;/p&gt;
&lt;p&gt;在这种部署中，代理和服务器共享同一集群，SPIRE 可以配置为定期生成这些证书并将证书内容更新到配置映射中。为此，服务器需要能够在 Kubernetes RBAC 中获取和修补配置映射对象。&lt;/p&gt;
&lt;p&gt;通过应用 spire-bundle-configmap.yaml 配置文件来创建名为 spire-bundle 的配置映射：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -f spire-bundle-configmap.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过运行以下命令确认成功创建，并验证 spire-bundle 配置映射是否列在以下命令的输出中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl get configmaps --namespace spire &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep spire
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了允许服务器读取和写入此配置映射，必须创建一个 ClusterRole，授予 Kubernetes RBAC 相应的特权，并将 ClusterRoleBinding 与前一步创建的服务帐户关联。&lt;/p&gt;
&lt;p&gt;通过应用 server-cluster-role.yaml 配置文件来创建名为 spire-server-trust-role 的 ClusterRole 和相应的 ClusterRoleBinding：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -f server-cluster-role.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过运行以下命令确认成功创建，并验证 spire-server-trust-role ClusterRole 是否出现在以下命令的输出中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl get clusterroles --namespace spire &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep spire
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;创建服务器配置映射&#34;&gt;创建服务器配置映射&lt;/h3&gt;
&lt;p&gt;服务器在 Kubernetes 配置映射中进行配置，该配置映射在 &lt;code&gt;server-configmap.yaml&lt;/code&gt; 中指定了一些重要的目录，特别是 &lt;code&gt;/run/spire/data和/run/spire/config&lt;/code&gt;。这些卷在部署服务器容器时绑定。&lt;/p&gt;
&lt;p&gt;请参阅&lt;a href=&#34;https://spiffe.io/docs/latest/spire/using/configuring/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;配置 SPIRE&lt;/a&gt;部分，了解如何配置 SPIRE 服务器的详细信息，特别是节点认证和工作负载认证。&lt;/p&gt;
&lt;p&gt;注意，SPIRE 服务器在修改配置后必须重新启动才能生效。&lt;/p&gt;
&lt;p&gt;使用以下命令将服务器配置映射应用到你的集群：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -f server-configmap.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;创建服务器有状态集&#34;&gt;创建服务器有状态集&lt;/h3&gt;
&lt;p&gt;通过应用 server-statefulset.yaml 配置文件来部署服务器：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -f server-statefulset.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这将在 spire 命名空间中创建一个名为 spire-server 的有状态集，并启动一个 spire-server 的 Pod，如以下两个命令的输出所示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl get statefulset --namespace spire
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NAME           READY   AGE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;spire-server   1/1     86m
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl get pods --namespace spire
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NAME                           READY   STATUS    RESTARTS   AGE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;spire-server-0                 1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          86m
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当你部署服务器时，它会自动在 SPIRE 服务器的 GRPC 端口上配置 livenessProbe，以确保容器的可用性。&lt;/p&gt;
&lt;p&gt;服务器部署时，绑定到以下表中总结的卷：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;卷&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;挂载位置&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;spire-config&lt;/td&gt;
&lt;td&gt;引用在前一步中创建的 spire-server 配置映射&lt;/td&gt;
&lt;td&gt;/run/spire/config&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;spire-data&lt;/td&gt;
&lt;td&gt;服务器的 SQLite 数据库和密钥文件的 hostPath&lt;/td&gt;
&lt;td&gt;/run/spire/data&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;创建服务器服务&#34;&gt;创建服务器服务&lt;/h3&gt;
&lt;p&gt;通过应用 server-service.yaml 配置文件来创建服务器服务：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -f server-service.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过运行以下命令确认成功创建，并验证 spire 命名空间现在是否有一个名为 spire-server 的服务：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl get services --namespace spire
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NAME           TYPE       CLUSTER-IP      EXTERNAL-IP   PORT&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;S&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;          AGE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;spire-server   NodePort   10.107.205.29   &amp;lt;none&amp;gt;        8081:30337/TCP   88m
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>注册工作负载</title>
      <link>https://lib.jimmysong.io/spiffe-and-spire/configuration/registering/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/spiffe-and-spire/configuration/registering/</guid>
      <description>&lt;p&gt;本文将指导你在SPIRE服务器中使用SPIFFE ID注册工作负载。&lt;/p&gt;
&lt;h2 id=&#34;如何创建注册条目&#34;&gt;如何创建注册条目&lt;/h2&gt;
&lt;p&gt;注册条目包含以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SPIFFE ID&lt;/li&gt;
&lt;li&gt;一个或多个选择器集合&lt;/li&gt;
&lt;li&gt;父级ID&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;服务器将向代理发送所有有权在该节点上运行的工作负载的注册条目列表。代理缓存这些注册条目并保持其更新。&lt;/p&gt;
&lt;p&gt;在工作负载认证期间，代理会发现选择器并将其与缓存的注册条目中的选择器进行比较，以确定应该为工作负载分配哪些SVID。&lt;/p&gt;
&lt;p&gt;您可以通过在命令行中发出&lt;code&gt;spire-server entry create&lt;/code&gt;命令或直接调用Entry API来注册工作负载，具体方法请参阅 &lt;a href=&#34;https://github.com/spiffe/spire-api-sdk/blob/v1.8.2/proto/spire/api/server/entry/v1/entry.proto&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Entry API文档&lt;/a&gt;。可以使用&lt;code&gt;spire-server entry update&lt;/code&gt;命令修改现有条目。&lt;/p&gt;
&lt;p&gt;在Kubernetes上运行时，调用SPIRE服务器的常见方法是通过在运行SPIRE服务器的Pod上使用&lt;code&gt;kubectl exec&lt;/code&gt;命令。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -n spire spire-server-0 -- &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    /opt/spire/bin/spire-server entry create &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -spiffeID spiffe://example.org/ns/default/sa/default &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -parentID spiffe://example.org/ns/spire/sa/spire-agent &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -selector k8s:ns:default &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;有关&lt;code&gt;spire-server entry create&lt;/code&gt;和&lt;code&gt;spire-server entry update&lt;/code&gt;命令和选项的更多信息，请参阅 &lt;a href=&#34;https://spiffe.io/docs/latest/deploying/spire_server/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE服务器参考指南&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;如何注册工作负载&#34;&gt;如何注册工作负载&lt;/h2&gt;
&lt;p&gt;通过在SPIRE服务器中创建一个或多个注册条目来注册工作负载。要注册工作负载，需要告诉SPIRE：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;分配给在工作负载有权运行的节点上运行的代理的SPIFFE ID。&lt;/li&gt;
&lt;li&gt;运行在这些机器上的工作负载本身的属性。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;1-定义代理的spiffe-id&#34;&gt;1. 定义代理的SPIFFE ID&lt;/h3&gt;
&lt;p&gt;分配给代理的SPIFFE ID可能是作为节点认证过程的一部分自动分配的ID。例如，当代理经过AWS IID节点认证时，会自动分配形式为&lt;code&gt;spiffe://example.org/agent/aws_iid/ACCOUNT_ID/REGION/INSTANCE_ID&lt;/code&gt;的SPIFFE ID。&lt;/p&gt;
&lt;p&gt;或者，可以通过创建一个指定了选择器的&lt;a href=&#34;https://spiffe.io/docs/latest/deploying/registering/#create-registration-entry&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;注册条目&lt;/a&gt;来为一个或多个代理分配SPIFFE ID。例如，可以通过创建以下注册条目将SPIFFE ID &lt;code&gt;spiffe://acme.com/web-cluster&lt;/code&gt;分配给在标记&lt;code&gt;app&lt;/code&gt;设置为&lt;code&gt;webserver&lt;/code&gt;的一组EC2实例上运行的任何SPIRE代理：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;spire-server entry create \
    -node \
    -spiffeID spiffe://acme.com/web-cluster \
    -selector tag:app:webserver
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;选择器是SPIRE可以在发出身份之前验证的节点或工作负载的本机属性。单个注册条目可以包含节点选择器或工作负载选择器，但不能同时包含两者。请注意上述命令中的&lt;code&gt;-node&lt;/code&gt;标志，它表示此命令正在指定节点选择器。&lt;/p&gt;
&lt;p&gt;根据工作负载应用程序运行的平台或架构，提供了不同的选择器。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;平台&lt;/th&gt;
&lt;th&gt;请访问&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Kubernetes&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_nodeattestor_k8s_sat.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AWS&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_nodeattestor_aws_iid.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Azure&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_server_noderesolver_azure_msi.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;2-定义工作负载的spiffe-id&#34;&gt;2. 定义工作负载的SPIFFE ID&lt;/h3&gt;
&lt;p&gt;一旦代理或代理有一个分配的SPIFFE ID，就可以创建另一个注册条目来标识在调用该代理公开的工作负载API时的特定工作负载。&lt;/p&gt;
&lt;p&gt;例如，要创建一个注册条目，以匹配在标识为&lt;code&gt;spiffe://acme.com/web-cluster&lt;/code&gt;的代理上运行的Unix组ID 1000下运行的Linux进程，可以使用以下命令：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;spire-server entry create \
    -parentID spiffe://acme.com/web-cluster \
    -spiffeID spiffe://acme.com/webapp  \
    -selector unix:gid:1000
&lt;/code&gt;&lt;/pre&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;平台&lt;/th&gt;
&lt;th&gt;请访问&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Unix&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_agent_workloadattestor_unix.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Kubernetes&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_agent_workloadattestor_k8s.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Docker&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/doc/plugin_agent_workloadattestor_docker.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;如何列出注册条目&#34;&gt;如何列出注册条目&lt;/h2&gt;
&lt;p&gt;要列出所有现有的注册条目，请使用命令&lt;code&gt;spire-server entry show&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;要将注册条目筛选为与特定SPIFFE ID、父级SPIFFE ID或注册条目ID匹配的条目，请分别使用&lt;code&gt;-spiffeID&lt;/code&gt;、&lt;code&gt;-parentID&lt;/code&gt;、&lt;code&gt;-selector&lt;/code&gt;或&lt;code&gt;-entryID&lt;/code&gt;标志。&lt;/p&gt;
&lt;p&gt;请注意，每个注册条目都有一个唯一的注册条目ID，但是多个注册条目可以指定相同的SPIFFE ID。&lt;/p&gt;
&lt;p&gt;例如，要列出与标记&lt;code&gt;app&lt;/code&gt;设置为&lt;code&gt;webserver&lt;/code&gt;的一组EC2实例匹配的所有注册条目，请运行以下命令：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;spire-server entry show -selector tag:app:webserver
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;有关&lt;code&gt;spire-server entry show&lt;/code&gt;命令和选项的更多信息，请参阅&lt;a href=&#34;https://spiffe.io/docs/latest/deploying/spire_server/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE服务器参考指南&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;如何删除注册条目&#34;&gt;如何删除注册条目&lt;/h2&gt;
&lt;p&gt;要永久删除现有的注册条目，请使用&lt;code&gt;spire-server entry delete&lt;/code&gt;命令，并指定相关的注册条目ID。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;spire-server entry delete -entryID 92f4518e-61c9-420d-b984-074afa7c7002
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;有关&lt;code&gt;spire-server entry delete&lt;/code&gt;命令和选项的更多信息，请参阅&lt;a href=&#34;https://spiffe.io/docs/latest/deploying/spire_server/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE服务器参考指南&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;将工作负载映射到多个节点&#34;&gt;将工作负载映射到多个节点&lt;/h2&gt;
&lt;p&gt;工作负载注册条目可以有一个父级ID。这可以是特定节点的SPIFFE ID（即通过节点认证获得的代理的SPIFFE ID），也可以是节点注册条目（有时称为节点别名/集合）的SPIFFE ID。节点别名（或集合）是具有相似特征的一组节点，它们被赋予了一个共享的身份。节点注册条目具有节点选择器，要求节点至少具有这些选择器才能符合共享的身份。这意味着具有至少与节点注册条目中定义的选择器相同的任何节点都被赋予该别名（或属于该节点集）。当工作负载注册条目使用节点别名的SPIFFE ID作为父级时，具有该别名的任何节点都有权为该工作负载获取SVID&lt;/p&gt;
&lt;h2 id=&#34;接下来怎么做&#34;&gt;接下来怎么做？&lt;/h2&gt;
&lt;p&gt;一旦学会了如何创建、更新和删除注册条目，请考虑查看关于&lt;a href=&#34;https://spiffe.io/docs/latest/spire/developing/svids/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;如何使用SVID&lt;/a&gt;的指南。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用 Envoy 和 JWT-SVID 进行安全的微服务通信</title>
      <link>https://lib.jimmysong.io/spiffe-and-spire/examples/envoy-jwt/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/spiffe-and-spire/examples/envoy-jwt/</guid>
      <description>&lt;p&gt;本教程在&lt;a href=&#34;https://github.com/spiffe/spire-tutorials/blob/main/envoy-x509/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE Envoy-X.509 教程&lt;/a&gt;的基础上构建，演示如何使用 SPIRE 代替 X.509 SVID 进行工作负载的 JWT SVID 身份验证。在这个教程中展示了实现 JWT SVID 身份验证所需的更改，因此你应该首先运行或至少阅读 X.509 教程。&lt;/p&gt;
&lt;p&gt;为了说明 JWT 身份验证，我们在 Envoy X.509 教程中使用的每个服务中添加了 sidecar。每个 sidecar 都充当 Envoy 的&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/v1.25.1/intro/arch_overview/security/ext_authz_filter#arch-overview-ext-authz&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;外部授权过滤器&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/SPIRE-Envoy_JWT-SVID_diagram.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;如图所示，前端服务通过 Envoy 实例连接到后端服务，这些服务之间通过 Envoy 建立的 mTLS 连接进行通信。Envoy 通过携带的 JWT-SVID 进行身份验证的 HTTP 请求通过 mTLS 连接发送，并由 SPIRE Agent 提供和验证。&lt;/p&gt;
&lt;p&gt;在本教程中，你将学习如何：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将 Envoy JWT Auth Helper gRPC 服务添加到 Envoy X.509 教程中现有的前端和后端服务中&lt;/li&gt;
&lt;li&gt;将外部授权过滤器添加到 Envoy 配置中，将 Envoy 连接到 Envoy JWT Auth Helper&lt;/li&gt;
&lt;li&gt;在 SPIRE Server 上为 Envoy JWT Auth Helper 实例创建注册条目&lt;/li&gt;
&lt;li&gt;使用 SPIRE 测试成功的 JWT 身份验证&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;先决条件&#34;&gt;先决条件&lt;/h1&gt;
&lt;h2 id=&#34;支持外部-ip&#34;&gt;支持外部 IP&lt;/h2&gt;
&lt;p&gt;此教程需要一个可以分配外部 IP（例如&lt;a href=&#34;https://metallb.universe.tf/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;metallb&lt;/a&gt;）的负载均衡器。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.13.7/config/manifests/metallb-native.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;等待 metallb 启动：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl &lt;span class=&#34;nb&#34;&gt;wait&lt;/span&gt; --namespace metallb-system &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;                --for&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;condition&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;ready pod &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;                --selector&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;metallb &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;                --timeout&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;90s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;应用 metallb 配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -f ../envoy-x509/metallb-config.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;auth-helper-镜像&#34;&gt;Auth helper 镜像&lt;/h2&gt;
&lt;p&gt;使用&lt;a href=&#34;https://github.com/spiffe/spire-tutorials/blob/main/envoy-jwt-auth-helper&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy-jwt-auth-helper&lt;/a&gt;实现了一个外部授权过滤器，提供了一个脚本来方便地使用&lt;code&gt;kind&lt;/code&gt;或&lt;code&gt;minikube&lt;/code&gt;构建和导入。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ bash ./scripts/build-helper.sh kind
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;之前的-spire-安装&#34;&gt;之前的 SPIRE 安装&lt;/h2&gt;
&lt;p&gt;在继续之前，请查看以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你需要访问通过&lt;a href=&#34;https://github.com/spiffe/spire-tutorials/blob/main/envoy-x509/README.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE Envoy-X.509 教程&lt;/a&gt;*配置的 Kubernetes 环境。你也可以使用下面描述的&lt;code&gt;pre-set-env.sh&lt;/code&gt;脚本创建 Kubernetes 环境。&lt;/li&gt;
&lt;li&gt;本教程所需的 YAML 文件可以在 &lt;a href=&#34;https://github.com/spiffe/spire-tutorials&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/spiffe/spire-tutorials&lt;/a&gt; 的&lt;code&gt;k8s/envoy-jwt&lt;/code&gt;目录中找到。如果你尚未克隆&lt;em&gt;SPIRE Envoy-X.509 教程&lt;/em&gt;的存储库，请立即克隆它。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果 Kubernetes 的&lt;em&gt;SPIRE Envoy-X.509 教程&lt;/em&gt;环境不可用，你可以使用以下脚本创建它，并将其作为本教程的起点。从&lt;code&gt;k8s/envoy-jwt&lt;/code&gt;目录中运行以下命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ bash scripts/pre-set-env.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该脚本将创建集群中 SPIRE Server 和 SPIRE Agent 所需的所有资源，然后将为 SPIRE Envoy X.509 教程创建所有资源，这是本 SPIRE Envoy JWT 教程的基本场景。&lt;/p&gt;
&lt;h1 id=&#34;第-1-部分部署更新和新资源&#34;&gt;第 1 部分：部署更新和新资源&lt;/h1&gt;
&lt;p&gt;假设 SPIRE Envoy X.509 教程是一个起点，需要更新一些资源并创建其他资源。目标是通过 JWT SVID 对工作负载进行身份验证。Envoy 实例之间已经建立了 mTLS 连接，可以在请求头中传输 JWT SVID。因此，缺失的部分是如何获取 JWT 并将其插入请求中，以及在另一侧进行验证。本教程中应用的解决方案包括在 Envoy 上配置外部授权过滤器，该过滤器根据配置模式注入或验证 JWT SVID。关于此示例服务器的详细信息，请参见&lt;a href=&#34;https://spiffe.io/docs/latest/microservices/envoy-jwt/readme/#about-envoy-jwt-auth-helper&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;关于 Envoy JWT Auth Helper&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;关于-envoy-jwt-auth-helper&#34;&gt;关于 Envoy JWT Auth Helper&lt;/h2&gt;
&lt;p&gt;Envoy JWT Auth Helper（&lt;code&gt;auth-helper&lt;/code&gt;服务）是一个简单的 gRPC 服务，实现了 Envoy 的 External Authorization Filter。它是为本教程开发的，以演示如何注入或验证 JWT SVID。&lt;/p&gt;
&lt;p&gt;对于发送到 Envoy 转发代理的每个 HTTP 请求，Envoy JWT Auth Helper 从 SPIRE Agent 获取 JWT-SVID，并将其作为新的请求头注入，然后发送给 Envoy。另一方面，当 HTTP 请求到达反向代理时，Envoy External Authorization 模块将请求发送到 Envoy JWT Auth Helper，后者从标头中提取 JWT-SVID，然后连接到 SPIRE Agent 执行验证。验证成功后，请求将返回给 Envoy。如果验证失败，则拒绝请求。&lt;/p&gt;
&lt;p&gt;在内部，Envoy JWT Auth Helper 利用&lt;a href=&#34;https://github.com/spiffe/go-spiffe/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;go-spiffe&lt;/a&gt;库，该库公开了获取和验证 JWT SVID 所需的所有功能。以下是代码的主要部分：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 使用 SPIRE 提供的 Unix 域套接字创建配置源的选项。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;clientOptions&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;workloadapi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;WithClientOptions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workloadapi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;WithAddr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SocketPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 创建 workloadapi.JWTSource 实例以从工作负载 API 中获取最新的 JWT 批。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;jwtSource&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;workloadapi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;NewJWTSource&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Background&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;clientOptions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Fatalf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;无法创建JWTSource：%v&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;defer&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;jwtSource&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 获取将添加到请求头中的 JWT-SVID。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;jwtSVID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;jwtSource&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;FetchJWTSVID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;jwtsvid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Params&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nx&#34;&gt;Audience&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;audience&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;forbiddenResponse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;PERMISSION_DENIED&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 解析并验证令牌与 jwtSource 获取的批对比。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;jwtsvid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ParseAndValidate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;token&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;jwtSource&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;audience&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;forbiddenResponse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;PERMISSION_DENIED&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意：&lt;code&gt;workloadapi&lt;/code&gt;和&lt;code&gt;jwtsvid&lt;/code&gt;是从&lt;code&gt;go-spiffe&lt;/code&gt;库导入的。&lt;/p&gt;
&lt;h2 id=&#34;更新部署&#34;&gt;更新部署&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;auth-helper&lt;/code&gt;服务使得 Envoy 能够注入或验证携带 JWT-SVID 的身份验证头，如上所述。在这些部分中，&lt;code&gt;k8s/backend/config/envoy.yaml&lt;/code&gt;中的 YAML 文件片段说明了将 JWT 身份验证添加到在&lt;a href=&#34;https://github.com/spiffe/spire-tutorials/blob/main/envoy-x509/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE Envoy-X.509 教程&lt;/a&gt;中定义的&lt;code&gt;backend&lt;/code&gt;服务所需的更改。其他 YAML 文件也对其他两个服务（&lt;code&gt;frontend&lt;/code&gt;和&lt;code&gt;frontend-2&lt;/code&gt;）应用了相同的更改，但是本文档中不会详细描述这些更改，以避免不必要的重复。你无需手动对 YAML 文件进行这些更改。新文件已包含在&lt;code&gt;k8s/envoy-jwt/k8s&lt;/code&gt;目录中。必须将此新的&lt;code&gt;auth-helper&lt;/code&gt;服务作为 sidecar 添加，并且必须配置它与 SPIRE Agent 通信。通过挂载卷来共享 SPIRE Agent 提供的 Unix 域套接字来实现这一目标。通过新的第二个卷，可以访问使用服务配置定义的 configmap。下面是来自&lt;code&gt;containers&lt;/code&gt;部分的代码片段，描述了这些更改：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;auth-helper&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;envoy-jwt-auth-helper:latest&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;imagePullPolicy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;IfNotPresent&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;-config&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/run/envoy-jwt-auth-helper/config/envoy-jwt-auth-helper.conf&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;containerPort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;9010&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumeMounts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;envoy-jwt-auth-helper-config&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mountPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/run/envoy-jwt-auth-helper/config&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;readOnly&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;spire-agent-socket&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mountPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/run/spire/sockets&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;readOnly&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;spire-agent-socket&lt;/code&gt;卷已在部署中定义，无需再次添加。要将 configmap &lt;code&gt;envoy-jwt-auth-helper-config&lt;/code&gt;添加到&lt;code&gt;volumes&lt;/code&gt;部分，可以使用以下代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;envoy-jwt-auth-helper-config&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;configMap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;be-envoy-jwt-auth-helper-config&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;添加外部授权过滤器&#34;&gt;添加外部授权过滤器&lt;/h2&gt;
&lt;p&gt;接下来，在 Envoy 配置中需要一个外部授权过滤器，该过滤器连接到新的服务。这个新的 HTTP 过滤器调用了刚刚添加到部署中的&lt;code&gt;auth-helper&lt;/code&gt;服务：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;http_filters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;envoy.filters.http.ext_authz&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;typed_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;@type&amp;#34;: &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;transport_api_version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;V3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;grpc_service&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;envoy_grpc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cluster_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ext-authz&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;timeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;5s&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这是外部授权过滤器的相应集群配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ext-authz&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;connect_timeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;1s&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;strict_dns&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;http2_protocol_options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;load_assignment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cluster_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ext-authz&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;endpoints&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;lb_endpoints&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;endpoint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;socket_address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;127.0.0.1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;9010&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;应用新资源&#34;&gt;应用新资源&lt;/h2&gt;
&lt;p&gt;为了使新的配置生效，需要重新部署服务。让我们删除&lt;code&gt;backend&lt;/code&gt;和&lt;code&gt;frontend&lt;/code&gt;部署以便更新它们：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl delete deployment backend
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl delete deployment frontend
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;确保当前工作目录是&lt;code&gt;.../spire-tutorials/k8s/envoy-jwt&lt;/code&gt;，然后使用以下命令部署新资源：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -k k8s/.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;configmap/backend-envoy configured
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;configmap/be-envoy-jwt-auth-helper-config created
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;configmap/fe-envoy-jwt-auth-helper-config created
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;configmap/frontend-envoy configured
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;deployment.apps/backend configured
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;deployment.apps/frontend configured
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;创建注册条目&#34;&gt;创建注册条目&lt;/h2&gt;
&lt;p&gt;为了获取或验证由 SPIRE 发行的 JWT SVID，需要对&lt;code&gt;auth-helper&lt;/code&gt;实例在 SPIRE 服务器上进行身份验证。可以使用以下 Bash 脚本为每个实例创建注册条目：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ bash create-registration-entries.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;脚本运行后，将显示新的注册条目列表。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;...
Creating registration entry for the backend - auth-server...
Entry ID      : ecb140ab-50a7-4590-9fe0-d715ada67f29
SPIFFE ID     : spiffe://example.org/ns/default/sa/default/backend
Parent ID     : spiffe://example.org/ns/spire/sa/spire-agent
TTL           : 3600
Selector      : k8s:ns:default
Selector      : k8s:sa:default
Selector      : k8s:pod-label:app:backend
Selector      : k8s:container-name:auth-helper

Creating registration entry for the frontend - auth-server...
Entry ID      : 59a127fa-328c-4115-883e-5ee20b86714f
SPIFFE ID     : spiffe://example.org/ns/default/sa/default/frontend
Parent ID     : spiffe://example.org/ns/spire/sa/spire-agent
TTL           : 3600
Selector      : k8s:ns:default
Selector      : k8s:sa:default
Selector      : k8s:pod-label:app:frontend
Selector      : k8s:container-name:auth-helper
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;请注意，新服务的选择器指向&lt;code&gt;auth-helper&lt;/code&gt;容器：&lt;code&gt;k8s:container-name:auth-helper&lt;/code&gt;。这是为了对&lt;code&gt;auth-helper&lt;/code&gt;服务进行身份验证，以便它可以获取或验证配置为每个请求的身份验证标头的 JWT SVID。&lt;/p&gt;
&lt;p&gt;有意地，&lt;code&gt;frontend-2&lt;/code&gt;服务没有注册条目。稍后将添加它，以演示在请求标头中没有 JWT-SVID 时，外部授权过滤器将拒绝请求。&lt;/p&gt;
&lt;h1 id=&#34;第二部分测试连接&#34;&gt;第二部分：测试连接&lt;/h1&gt;
&lt;p&gt;既然服务已经部署并在 SPIRE 中注册，让我们来测试我们配置的授权机制。&lt;/p&gt;
&lt;h2 id=&#34;测试有效和无效的-jwt-svid&#34;&gt;测试有效和无效的 JWT-SVID&lt;/h2&gt;
&lt;p&gt;第一组测试将演示如何通过有效的 JWT-SVID 来显示关联数据，以及如何通过无效的 JWT-SVID 阻止关联数据的显示。为了运行这些测试，我们需要找到组成用于访问数据的 URL 的 IP 地址和端口。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl get services
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NAME            TYPE           CLUSTER-IP    EXTERNAL-IP      PORT&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;S&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;          AGE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;backend-envoy   ClusterIP      None            &amp;lt;none&amp;gt;           9001/TCP         10m
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;frontend        LoadBalancer   10.96.226.176   172.18.255.200   3000:32314/TCP   10m
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;frontend-2      LoadBalancer   10.96.33.198    172.18.255.201   3002:31797/TCP   10m
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubernetes      ClusterIP      10.96.0.1       &amp;lt;none&amp;gt;           443/TCP          55m
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;frontend&lt;/code&gt;服务将在&lt;code&gt;EXTERNAL-IP&lt;/code&gt;值和端口&lt;code&gt;3000&lt;/code&gt;上提供。在上面显示的示例输出中，要访问的 URL 是&lt;code&gt;http://172.18.255.200:3000&lt;/code&gt;。打开浏览器，并在你的环境中的&lt;code&gt;frontend&lt;/code&gt;的 IP 地址后面添加端口&lt;code&gt;:3000&lt;/code&gt;。页面加载完成后，你将看到用户&lt;em&gt;Jacob Marley&lt;/em&gt;的帐户详细信息。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/frontend_view.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;另一方面，当你连接到&lt;code&gt;frontend-2&lt;/code&gt;服务的 URL（例如&lt;code&gt;http://172.18.255.201:3002&lt;/code&gt;）时，浏览器只显示标题而没有任何帐户详细信息。这是因为&lt;code&gt;frontend-2&lt;/code&gt;服务没有在请求中包含 JWT 令牌。请求中缺少有效的令牌使得位于&lt;code&gt;backend&lt;/code&gt;前面的 Envoy 实例拒绝该请求。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/frontend-2_view_no_details.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;让我们来看看&lt;code&gt;auth-helper&lt;/code&gt;容器的日志，以了解幕后发生了什么。以下是与&lt;code&gt;frontend&lt;/code&gt;服务并行运行的&lt;code&gt;auth-helper&lt;/code&gt;实例的日志。在这种情况下，&lt;code&gt;auth-helper&lt;/code&gt;服务器配置为以注入模式运行。对于每个请求，它将 JWT-SVID 作为新的请求头注入并将其返回给将其转发给&lt;code&gt;backend&lt;/code&gt;的 Envoy 实例。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl logs -f --selector&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;frontend -c auth-helper
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Envoy JWT Auth Helper running in jwt_injection mode
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Starting gRPC Server at &lt;span class=&#34;m&#34;&gt;9011&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;JWT-SVID injected. Sending response with &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; new headers
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;JWT-SVID injected. Sending response with &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; new headers
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;JWT-SVID injected. Sending response with &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; new headers
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;另一方面，位于&lt;code&gt;backend&lt;/code&gt;服务前面的&lt;code&gt;auth-helper&lt;/code&gt;实例配置为以验证模式运行，因此它将检查请求标头中的 JWT-SVID。它提取令牌并对其进行验证。在这种情况下，前三个请求的令牌是有效的，然后将其发送回 Envoy 实例。这些请求来自&lt;code&gt;frontend&lt;/code&gt;服务。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl logs -f --selector&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;backend -c auth-helper
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Envoy JWT Auth Helper running in jwt_svid_validator mode
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Starting gRPC Server at &lt;span class=&#34;m&#34;&gt;9010&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Token is valid
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Token is valid
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Token is valid
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Invalid or unsupported authorization header: &lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Invalid or unsupported authorization header: &lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Invalid or unsupported authorization header: &lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当请求来自&lt;code&gt;frontend-2&lt;/code&gt;服务时（最后 3 条日志记录），&lt;code&gt;auth-helper&lt;/code&gt;无法从请求中获取 JWT-SVID 并将其拒绝。这就是为什么在&lt;code&gt;frontend-2&lt;/code&gt;服务的浏览器中不显示帐户详细信息的原因。&lt;/p&gt;
&lt;h2 id=&#34;使用有效的-jwt-svid-重新测试-frontend-2&#34;&gt;使用有效的 JWT-SVID 重新测试 frontend-2&lt;/h2&gt;
&lt;p&gt;为了使&lt;code&gt;frontend-2&lt;/code&gt;能够成功进行 JWT-SVID 身份验证，我们将更新 Kubernetes 环境，使&lt;code&gt;frontend-2&lt;/code&gt;具有与&lt;code&gt;frontend&lt;/code&gt;类似的设置。这包括为&lt;code&gt;auth-helper&lt;/code&gt;服务创建一个新的容器，为&lt;code&gt;auth-helper&lt;/code&gt;创建一个新的 configmap，以及使用外部授权过滤器更新&lt;code&gt;frontend-2-envoy&lt;/code&gt;的 configmap。让我们先删除&lt;code&gt;frontend-2&lt;/code&gt;的部署，以准备新的配置。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl delete deployment frontend-2
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;要更新&lt;code&gt;frontend-2&lt;/code&gt;的 Envoy 配置和服务部署，请使用&lt;code&gt;k8s/frontend-2/kustomization.yaml&lt;/code&gt;文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -k k8s/frontend-2/.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;configmap/fe-2-envoy-jwt-auth-helper-config created
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;configmap/frontend-2-envoy configured
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;deployment.apps/frontend-2 created
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来，通过为&lt;code&gt;auth-helper&lt;/code&gt;服务在 SPIRE Server 中创建一个新的注册条目来对其进行身份验证：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ bash k8s/frontend-2/create-registration-entry.sh
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Creating registration entry &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; the frontend-2 - auth-server...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Entry ID      : bd0acd51-0d36-42be-8999-fccdcf1f33da
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SPIFFE ID     : spiffe://example.org/ns/default/sa/default/frontend-2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Parent ID     : spiffe://example.org/ns/spire/sa/spire-agent
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;TTL           : &lt;span class=&#34;m&#34;&gt;3600&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Selector      : k8s:ns:default
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Selector      : k8s:sa:default
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Selector      : k8s:pod-label:app:frontend-2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Selector      : k8s:container-name:auth-helper
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;等待一些时间，让部署传播后再次尝试在浏览器中查看&lt;code&gt;frontend-2&lt;/code&gt;服务。一旦 Pod 准备好并且注册条目传播完毕，请使用&lt;code&gt;frontend-2&lt;/code&gt;服务的正确 URL（例如&lt;code&gt;http://35.222.190.182:3002&lt;/code&gt;）刷新浏览器。结果，现在页面显示用户&lt;em&gt;Alex Fergus&lt;/em&gt;的帐户详细信息。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/frontend-2_view.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h1 id=&#34;清理&#34;&gt;清理&lt;/h1&gt;
&lt;p&gt;完成本教程后，你可以使用以下命令删除用于配置 Envoy 代表工作负载执行 JWT SVID 身份验证的所有资源。此命令将删除：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为 SPIRE - Envoy JWT 集成教程创建的所有资源。&lt;/li&gt;
&lt;li&gt;为 SPIRE - Envoy X.509 集成教程创建的所有资源。&lt;/li&gt;
&lt;li&gt;SPIRE 代理、SPIRE 服务器和命名空间的所有部署和配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ bash scripts/clean-env.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>SPIFFE 工作负载 API</title>
      <link>https://lib.jimmysong.io/spiffe-and-spire/standard/spiffe-workload-api/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/spiffe-and-spire/standard/spiffe-workload-api/</guid>
      <description>&lt;p&gt;对于互联网工作负载而言，可移植和互操作的网络工作负载的加密身份可能是 SPIFFE 的核心用例。为了完全满足这个需求，社区必须达成一致，采用一种标准化的方式来检索、验证和与 SPIFFE 身份进行交互。本规范概述了要支持基于 SPIFFE 的身份验证系统所需的 API 签名和客户端/服务器行为。&lt;/p&gt;
&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;
&lt;p&gt;SPIFFE 工作负载 API 是一个 API，它提供了信息和服务，使工作负载或计算进程能够利用 SPIFFE 身份和基于 SPIFFE 的身份验证系统。它由 SPIFFE 工作负载端点提供，并由一些服务或“概要”组成。&lt;/p&gt;
&lt;p&gt;目前，有两个概要：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;X.509-SVID 概要&lt;/li&gt;
&lt;li&gt;JWT-SVID 概要&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这两个概要是强制性的，并且 SPIFFE 实现必须支持它们。但是，运营商可以在部署中禁用特定的概要。&lt;/p&gt;
&lt;p&gt;本规范的未来版本可能会引入其他概要或使一个或多个概要成为可选项。&lt;/p&gt;
&lt;h2 id=&#34;可扩展性&#34;&gt;可扩展性&lt;/h2&gt;
&lt;p&gt;SPIFFE 工作负载 API 不能超出本规范进行扩展。希望提供扩展功能的实现者可以通过引入新的 gRPC 服务来实现，这是根据 SPIFFE 工作负载端点规范中概述的可扩展性方法来实现的。&lt;/p&gt;
&lt;h2 id=&#34;服务定义&#34;&gt;服务定义&lt;/h2&gt;
&lt;p&gt;SPIFFE 工作负载 API 由一份协议缓冲区（版本 3）服务定义来定义。完整的定义可以在 workloadapi.proto 中找到。&lt;/p&gt;
&lt;p&gt;概要作为单个&lt;code&gt;WorkloadAPI&lt;/code&gt;服务中的一组相关的 RPC 实现。&lt;/p&gt;
&lt;h2 id=&#34;客户端和服务器行为&#34;&gt;客户端和服务器行为&lt;/h2&gt;
&lt;h3 id=&#34;身份标识调用者&#34;&gt;身份标识调用者&lt;/h3&gt;
&lt;p&gt;SPIFFE 工作负载 API 支持任意数量的本地客户端，使其能够引导任何能够访问它的进程的身份标识。通常，希望为每个进程分配身份标识，其中某些进程被授予特定的身份标识。为了做到这一点，SPIFFE 工作负载 API 实现必须能够确定调用者的身份标识。&lt;/p&gt;
&lt;p&gt;SPIFFE 工作负载端点规范规定了不直接进行客户端身份验证的要求，而是依赖于带外真实性检查。因此，SPIFFE 工作负载端点实现有责任识别调用者。然后，SPIFFE 工作负载 API 可以利用有关调用者的信息来确定要提供的适当内容。有关详细信息，请参阅 SPIFFE 工作负载端点规范中的身份验证部分。&lt;/p&gt;
&lt;h3 id=&#34;连接生命周期&#34;&gt;连接生命周期&lt;/h3&gt;
&lt;p&gt;SPIFFE 工作负载 API 的客户端应尽可能保持打开连接的状态，等待流上接收服务器的响应消息。连接可以随时由服务器或客户端终止。在这种情况下，客户端应立即建立新连接。这有助于确保工作负载保持最新的身份相关材料。SPIFFE 工作负载 API 服务器实现者可以假设此属性，如果未能及时接收到消息，则工作负载可能过时，可能会影响其可用性。&lt;/p&gt;
&lt;h3 id=&#34;流式响应&#34;&gt;流式响应&lt;/h3&gt;
&lt;p&gt;SPIFFE 工作负载 API 包括使用 gRPC 服务器端流式传输的 RPC，以促进快速传播更新，例如吊销和 CA 证书引入。这使得客户端可以循环遍历服务器响应，接受发生的更新。&lt;/p&gt;
&lt;p&gt;服务器发送的每个流式响应消息都必须包含完整的信息集，而不仅仅是发生更改的信息。这避免了在客户端和服务器实现上进行状态跟踪的复杂性，包括对反熵机制的需求。&lt;/p&gt;
&lt;p&gt;服务器响应消息的确切定时是特定于实现的，并且应由更改响应的事件（例如 SVID 旋转、CRL 更新等）来决定。从客户端接收到请求消息被视为生成响应的事件。换句话说，服务器响应流的第一个响应消息（基于连接的基础上）应尽快发送，不延迟。&lt;/p&gt;
&lt;p&gt;最后，SPIFFE 工作负载 API 服务器的实现者应小心地推送更新的响应消息。一些软件可能会在接收到新信息后自动重新加载，如果所有实例同时重新加载，可能会导致一段时间的不可用。&lt;/p&gt;
&lt;h2 id=&#34;默认值和删除的信息&#34;&gt;默认值和删除的信息&lt;/h2&gt;
&lt;p&gt;SPIFFE Workload API 响应消息是对先前发送的响应消息的完整更新。当响应消息包含设置为默认值或空值的字段时，客户端必须将这些字段的值解释为已设置为它们的默认值或空值；在接收到字段的默认值或空值之后，先前接收到的非默认值或非空值不应由客户端保留。例如，如果客户端在&lt;code&gt;federated_bundles&lt;/code&gt;字段中接收到默认值，则应舍弃先前接收到的&lt;code&gt;federated_bundles&lt;/code&gt;值。&lt;/p&gt;
&lt;p&gt;由于每个消息必须包含完整的信息集（请参阅 Stream Responses 部分），客户端应将数据的缺失解释为删除。例如，如果客户端加载了&lt;code&gt;spiffe://foo.bar&lt;/code&gt;的 bundle，并接收到不包含&lt;code&gt;spiffe://foo.bar&lt;/code&gt;的 bundle 的消息，则应卸载该 bundle。&lt;/p&gt;
&lt;h3 id=&#34;强制字段&#34;&gt;强制字段&lt;/h3&gt;
&lt;p&gt;为了执行 profile RPC，交换的消息由强制和可选字段组成。服务器在接收到具有默认值的强制字段的消息时，应使用“InvalidArgument”gRPC 状态代码进行响应（有关更多信息，请参阅 SPIFFE Workload Endpoint 规范中的错误代码部分）。当客户端接收到具有默认值的强制字段的消息时，应报告错误并丢弃该消息。&lt;/p&gt;
&lt;h3 id=&#34;联邦-bundle&#34;&gt;联邦 Bundle&lt;/h3&gt;
&lt;p&gt;在此规范中定义的各种 RPC 可以返回来自外部信任域的信任 Bundle。包含外部 Bundle 可以使工作负载在信任域之间进行通信，并且是启用联邦的主要机制。代表外部信任域的 Bundle 称为&lt;em&gt;联邦 Bundle&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;在验证客户端时，验证器会选择代表客户端所呈现的信任域的 Bundle 进行验证。同样，在验证服务器时，客户端会使用代表服务器所在的信任域的 Bundle。如果在使用的 SVID 的 SVID 中不存在匹配的 Bundle，则对等方是不受信任的。这种方法是必需的，以解决常见 X.509 库中对 SAN URI Name Constraints 的广泛支持的缺乏。&lt;/p&gt;
&lt;h2 id=&#34;x509-svid-profile&#34;&gt;X.509-SVID Profile&lt;/h2&gt;
&lt;p&gt;SPIFFE Workload API 的 X.509-SVID 配置文件提供了一组 gRPC 方法，工作负载可以使用这些方法来检索 X.509-SVIDs 及其相关的信任捆绑包。该配置文件概述了这些方法的签名，以及相关的客户端和服务器行为。&lt;/p&gt;
&lt;h3 id=&#34;配置文件定义&#34;&gt;配置文件定义&lt;/h3&gt;
&lt;p&gt;下面定义了 X.509-SVID 配置文件中的 RPC 和相关的消息。有关完整的 Workload API 服务定义，请参见 workloadapi.proto。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-protobuf&#34; data-lang=&#34;protobuf&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;service&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SpiffeWorkloadAPI&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;/////////////////////////////////////////////////////////////////////////
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// X509-SVID配置文件
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;/////////////////////////////////////////////////////////////////////////
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 获取工作负载有权访问的所有SPIFFE标识的X.509-SVID，以及与之相关的信任捆绑包和CRL。随着信息的更改，后续的消息将从服务器流式传输。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;rpc&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FetchX509SVID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;X509SVIDRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;returns&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stream&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;X509SVIDResponse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 获取信任捆绑包和CRL。对于仅需要验证SVID而不获取SVID自身的客户端非常有用。随着信息的更改，后续的消息将从服务器流式传输。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;rpc&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FetchX509Bundles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;X509BundlesRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;returns&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stream&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;X509BundlesResponse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// ... 其他配置文件的RPC ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// X509SVIDRequest消息传递请求X.509-SVID的参数。目前没有此类参数。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;X509SVIDRequest&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// X509SVIDResponse消息携带X.509-SVID和相关信息，包括用于与外部信任域联合的全局CRL集合和捆绑列表。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;X509SVIDResponse&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 必需。X509SVID消息列表，每个消息包括单个X.509-SVID、其私钥和信任域的捆绑。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;repeated&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;X509SVID&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;svids&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 可选。ASN.1 DER编码的证书吊销列表。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;repeated&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bytes&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;crl&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 可选。工作负载应该信任的外部信任域的CA证书捆绑，按照外部信任域的SPIFFE ID进行索引。捆绑包是ASN.1 DER编码的。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;federated_bundles&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// X509SVID消息携带单个SVID和所有相关信息，包括信任域的X.509捆绑包。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;X509SVID&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 必需。此条目中的SVID的SPIFFE ID
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;spiffe_id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 必需。ASN.1 DER编码的证书链。可以包括中间证书，但必须首先是叶子证书（或SVID本身）。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;bytes&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x509_svid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 必需。ASN.1 DER编码的PKCS#8私钥。必须是未加密的。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;bytes&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x509_svid_key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 必需。信任域的ASN.1 DER编码的X.509捆绑包。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;bytes&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bundle&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 可选。操作员指定的字符串，用于在返回多个SVID时为工作负载提供其使用方式的指导。例如，`internal`和`external`分别表示内部或外部使用的SVID。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hint&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// X509BundlesRequest消息传递请求X.509捆绑包的参数。目前没有这样的参数。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;X509BundlesRequest&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// X509BundlesResponse消息携带一组全局CRL和工作负载应该信任的信任域的映射的CA证书捆绑包。由SPIFFE ID的信任域键控。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;X509BundlesResponse&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 可选。ASN.1 DER编码的证书吊销列表。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;repeated&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bytes&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;crl&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 必需。工作负载应该信任的信任域的CA证书捆绑包，由SPIFFE ID的信任域键控。捆绑包是ASN.1 DER编码的。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bundles&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;profile-rpcs&#34;&gt;Profile RPCs&lt;/h3&gt;
&lt;h3 id=&#34;fetchx509svid&#34;&gt;FetchX509SVID&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;FetchX509SVID&lt;/code&gt; RPC 流式返回 X509-SVID 和信任域以及外部信任域的 X.509 捆绑包。这些捆绑包只能用于验证 X509-SVID。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;X509SVIDRequest&lt;/code&gt;请求消息当前为空，是将来扩展的占位符。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;X509SVIDResponse&lt;/code&gt;响应由一个必需的&lt;code&gt;svids&lt;/code&gt;字段组成，该字段必须包含一个或多个&lt;code&gt;X509SVID&lt;/code&gt;消息（每个授予客户端的标识一个）。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;X509SVID&lt;/code&gt;消息中的所有字段都是必需的，除了&lt;code&gt;hint&lt;/code&gt;字段。当设置&lt;code&gt;hint&lt;/code&gt;字段时（即非空），SPIFFE Workload API 服务器必须确保其值在任何给定的&lt;code&gt;X509SVIDResponse&lt;/code&gt;消息中是唯一的。如果 SPIFFE Workload API 客户端遇到具有相同设置的&lt;code&gt;hint&lt;/code&gt;值的多个&lt;code&gt;X509SVID&lt;/code&gt;消息，则应选择列表中的第一个消息。&lt;/p&gt;
&lt;p&gt;如果客户端没有权限接收任何 X509-SVID，则服务器应以“PermissionDenied”gRPC 状态代码响应（有关更多信息，请参见 SPIFFE Workload Endpoint 规范中的“错误代码”部分）。在这种情况下，客户端可以在退避后尝试重新连接到&lt;code&gt;FetchX509SVID&lt;/code&gt; RPC 的另一个调用。&lt;/p&gt;
&lt;p&gt;如流式响应所述，每个 FetchX509SVID 流返回的 X509SVIDResponse 消息都包含客户端在那个时间点上的授权 SVID 和 bundle 的完整集合。因此，如果服务器从后续响应中删除了 SVID（或全部 SVID，即返回“PermissionDenied”gRPC 状态代码），客户端应停止使用已删除的 SVID。&lt;/p&gt;
&lt;h3 id=&#34;fetchx509bundles&#34;&gt;FetchX509Bundles&lt;/h3&gt;
&lt;p&gt;FetchX509Bundles RPC 流返回服务器所在的信任域和外部信任域的 X.509 bundles。这些 bundles 只用于验证 X509-SVID。&lt;/p&gt;
&lt;p&gt;X509BundlesRequest 请求消息目前为空，是未来扩展的占位符。&lt;/p&gt;
&lt;p&gt;X509BundlesResponse 响应消息有一个强制性的 bundles 字段，必须至少包含服务器所在信任域的信任 bundle。crl 字段是可选的。&lt;/p&gt;
&lt;p&gt;如果客户端无权接收任何 X.509 bundles，那么服务器应以“PermissionDenied”gRPC 状态代码响应（有关更多信息，请参见 SPIFFE Workload Endpoint 规范中的错误代码部分）。客户端可以在退避后尝试重新连接 FetchX509Bundles RPC。&lt;/p&gt;
&lt;p&gt;如流式响应所述，每个 X509BundleResponse 响应在那个时间点上包含客户端的授权 X.509 bundles 的完整集合。因此，如果服务器从后续响应中删除了 bundles（或全部 bundles，即返回“PermissionDenied”gRPC 状态代码），客户端应停止使用已删除的 bundles。&lt;/p&gt;
&lt;h3 id=&#34;默认身份&#34;&gt;默认身份&lt;/h3&gt;
&lt;p&gt;通常情况下，工作负载不知道它应该扮演什么身份。决定何时扮演何种身份是特定于站点的问题，因此，SPIFFE 规范不涉及如何做到这一点。&lt;/p&gt;
&lt;p&gt;为了支持最广泛的用例，X.509-SVID 配置文件支持发出多个身份，并定义了默认身份。预计了解多个身份的工作负载可以自行进行决策。不了解如何利用多个身份的工作负载可以使用默认身份。默认身份是在 X509SVIDResponse 消息中返回的&lt;code&gt;svids&lt;/code&gt;列表中的第一个。协议缓冲区确保列表的顺序得到保留。&lt;/p&gt;
&lt;p&gt;了解如何使用多个身份的工作负载可以利用可选的&lt;code&gt;hint&lt;/code&gt;字段，该字段可用于消除身份的歧义，并告知工作负载应该为何目的使用哪个身份。例如，&lt;code&gt;internal&lt;/code&gt;和&lt;code&gt;external&lt;/code&gt;分别表示用于内部或外部使用的 SVID。SPIFFE Workload API 实现不应支持超过 1024 字节长度的值。&lt;code&gt;hint&lt;/code&gt;字段的确切值是操作员的选择，除此规范外并无限制。&lt;/p&gt;
&lt;p&gt;工作负载有责任处理预期提示的缺失或意外存在（例如，失败、警告等）。&lt;/p&gt;
&lt;h2 id=&#34;jwt-svid-配置文件&#34;&gt;JWT-SVID 配置文件&lt;/h2&gt;
&lt;p&gt;SPIFFE Workload API 的 JWT-SVID 配置文件提供了一组 gRPC 方法，可以用于工作负载获取 JWT-SVID 及其相关的信任包。该配置文件概述了这些方法的签名，以及相关的客户端和服务器行为。&lt;/p&gt;
&lt;h3 id=&#34;配置文件定义-1&#34;&gt;配置文件定义&lt;/h3&gt;
&lt;p&gt;JWT-SVID 配置文件的 RPC 和相关消息如下所定义。有关完整的 Workload API 服务定义，请参见 workloadapi.proto。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-protobuf&#34; data-lang=&#34;protobuf&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;service&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SpiffeWorkloadAPI&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;/////////////////////////////////////////////////////////////////////////
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// JWT-SVID配置文件
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;/////////////////////////////////////////////////////////////////////////
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 获取工作负载有权访问的所有SPIFFE标识的JWT-SVID，用于请求的受众。如果请求了可选的SPIFFE ID，则仅返回该SPIFFE ID的JWT-SVID。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;rpc&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FetchJWTSVID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;JWTSVIDRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;returns&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;JWTSVIDResponse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 获取以JWKS文档格式表示的JWT信任包，由信任域的SPIFFE ID作为键。随着这些信息的更改，后续的消息将从服务器流式传输。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;rpc&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FetchJWTBundles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;JWTBundlesRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;returns&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stream&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;JWTBundlesResponse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 根据请求的受众验证JWT-SVID。返回JWT-SVID的SPIFFE ID和JWT声明。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;rpc&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ValidateJWTSVID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ValidateJWTSVIDRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;returns&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ValidateJWTSVIDResponse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// ... 其他配置文件的RPC ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;JWTSVIDRequest&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 必填。工作负载打算进行身份验证的受众。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;repeated&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;audience&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 可选。请求的JWT-SVID的SPIFFE ID。如果未设置，则返回工作负载有权访问的所有标识的JWT-SVID。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;spiffe_id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// JWTSVIDResponse消息传递JWT-SVID。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;JWTSVIDResponse&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 必填。返回的JWT-SVID列表。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;repeated&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;JWTSVID&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;svids&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// JWTSVID消息携带JWT-SVID令牌和相关元数据。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;JWTSVID&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 必填。JWT-SVID的SPIFFE ID。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;spiffe_id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 必填。使用JWS紧凑序列化的编码JWT。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;svid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 可选。操作员指定的字符串，用于在返回多个SVID时为工作负载提供如何使用此标识的指导。例如，`internal`和`external`分别表示用于内部或外部使用的SVID。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hint&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// JWTBundlesRequest消息传递请求JWT信任包的参数。目前没有请求参数。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;JWTBundlesRequest&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// JWTBundlesReponse传递JWT信任包。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;JWTBundlesResponse&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 必填。以信任域的SPIFFE ID为键的JWK编码的JWT信任包。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bundles&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// ValidateJWTSVIDRequest消息传递JWT-SVID验证的请求参数。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ValidateJWTSVIDRequest&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 必填。验证方的受众。JWT-SVID必须包含一个包含此值的受众声明才能成功验证。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;audience&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 必填。要验证的JWT-SVID，使用JWS紧凑序列化进行编码。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;svid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// ValidateJWTSVIDReponse消息传递JWT-SVID验证结果。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ValidateJWTSVIDResponse&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 必填。验证的JWT-SVID的SPIFFE ID。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;spiffe_id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 必填。验证的JWT-SVID有效载荷中包含的声明。包括SPIFFE所需和非所需的声明。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;google.protobuf.Struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;claims&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;配置文件-rpc&#34;&gt;配置文件 RPC&lt;/h3&gt;
&lt;h3 id=&#34;获取-jwtsvid&#34;&gt;获取 JWTSVID&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;FetchJWTSVID&lt;/code&gt; RPC 允许客户端请求一个或多个特定受众的短期 JWT-SVID。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;JWTSVIDRequest&lt;/code&gt; 请求消息包含一个必填的&lt;code&gt;audience&lt;/code&gt;字段，该字段必须包含要嵌入返回的 JWT-SVID 中的受众声明的值。&lt;code&gt;spiffe_id&lt;/code&gt;字段是可选的，用于请求特定 SPIFFE ID 的 JWT-SVID。如果未指定，服务器必须返回授权给客户端的所有身份的 JWT-SVID。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;JWTSVIDResponse&lt;/code&gt; 响应消息由一个必填的&lt;code&gt;svids&lt;/code&gt;字段组成，该字段必须包含一个或多个&lt;code&gt;JWTSVID&lt;/code&gt;消息。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;JWTSVID&lt;/code&gt;消息中的所有字段都是必填的，除了&lt;code&gt;hint&lt;/code&gt;字段。当设置了&lt;code&gt;hint&lt;/code&gt;字段（即非空）时，SPIFFE Workload API 服务器必须确保其值在给定的&lt;code&gt;JWTSVIDResponse&lt;/code&gt;消息中的返回的 SVID 集合中是唯一的。如果 SPIFFE Workload API 客户端遇到具有相同&lt;code&gt;hint&lt;/code&gt;值设置的多个&lt;code&gt;JWTSVID&lt;/code&gt;消息，则应选择列表中的第一个消息。&lt;/p&gt;
&lt;p&gt;如果客户端没有授权任何身份，或者未经授权访问&lt;code&gt;spiffe_id&lt;/code&gt;字段请求的特定身份，则服务器应使用“PermissionDenied”gRPC 状态代码进行响应（有关更多信息，请参见 SPIFFE Workload 端点规范中的错误代码部分）。&lt;/p&gt;
&lt;h3 id=&#34;获取-jwt-bundles&#34;&gt;获取 JWT Bundles&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;FetchJWTBundles&lt;/code&gt; RPC 返回服务器所在的信任域和外部信任域的 JWT bundles。这些 bundles 必须仅用于认证 JWT-SVID。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;JWTBundlesRequest&lt;/code&gt;请求消息目前为空，是未来扩展的占位符。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;JWTBundlesResponse&lt;/code&gt;响应消息由一个必填的&lt;code&gt;bundles&lt;/code&gt;字段组成，该字段必须至少包含服务器所在信任域的 JWT bundle。&lt;/p&gt;
&lt;p&gt;返回的 bundles 以&lt;a href=&#34;https://tools.ietf.org/html/rfc7517&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 7517&lt;/a&gt;定义的标准 JWK Set 格式进行编码，其中包含信任域的 JWT-SVID 签名密钥。这些密钥可能仅表示 SPIFFE 信任域中的密钥子集。服务器不得在返回的 JWT bundles 中包含其他用途的密钥。&lt;/p&gt;
&lt;p&gt;如果客户端无权接收任何 JWT bundles，则服务器应使用“PermissionDenied”gRPC 状态代码进行响应（有关更多信息，请参见 SPIFFE Workload 端点规范中的错误代码部分）。客户端可以在退避后尝试重新连接到&lt;code&gt;FetchJWTBundles&lt;/code&gt; RPC 的另一个调用。&lt;/p&gt;
&lt;p&gt;如流式响应中所述，每个&lt;code&gt;JWTBundleResponse&lt;/code&gt;响应在当前时间点包含客户端的所有授权 JWT bundles 的完整集合。因此，如果服务器从后续响应中删除 bundles（或所有 bundles，即返回“PermissionDenied”gRPC 状态代码），客户端应停止使用被删除的 bundles。&lt;/p&gt;
&lt;h3 id=&#34;验证-jwtsvid&#34;&gt;验证 JWTSVID&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ValidateJWTSVID&lt;/code&gt; RPC 代表客户端验证特定受众的 JWT-SVID。此外，服务器必须根据 JWT-SVID 规范中概述的规则解析和验证 JWT-SVID。JWT-SVID 负载中嵌入的声明应在&lt;code&gt;ValidateJWTSVIDResponse&lt;/code&gt;中的&lt;code&gt;claims&lt;/code&gt;字段中提供；本规范中定义的声明是必需的，但实现可能会在将它们返回给客户端之前过滤非 SPIFFE 声明。SPIFFE 声明对于互操作性是必需的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ValidateJWTSVIDRequest&lt;/code&gt;和&lt;code&gt;ValidateJWTSVIDResponse&lt;/code&gt;消息中的所有字段都是必填的。&lt;/p&gt;
&lt;h3 id=&#34;jwt-svid-验证&#34;&gt;JWT-SVID 验证&lt;/h3&gt;
&lt;p&gt;如果客户端支持，Workload API 客户端应使用&lt;code&gt;ValidateJWTSVID&lt;/code&gt;方法进行 JWT 验证，允许 SPIFFE Workload API 代表其执行验证。这样做可以避免工作负载实现验证逻辑，从而减少出错的可能性。&lt;/p&gt;
&lt;p&gt;当与传统的 JWT 验证器进行交互时，可以使用&lt;code&gt;FetchJWTBundles&lt;/code&gt;方法获取 JWKS bundles，用于验证 JWT-SVID 的签名。例如，如果 SPIFFE Workload API 可用，但 JWT 验证软件不知道 Workload API（因此无法调用&lt;code&gt;ValidateJWTSVID&lt;/code&gt;），则实现可以单独检索每个 bundle 并将其提供给传统工作负载进行验证。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;FetchJWTBundles&lt;/code&gt;方法返回以信任域的 SPIFFE ID 为键的 bundles。在验证 JWT-SVID 时，验证器必须使用与主题的信任域对应的 bundle。如果指定信任域的 JWT bundle 不存在，则令牌是不可信的。&lt;/p&gt;
&lt;h2 id=&#34;附录-a-示例实现状态机&#34;&gt;附录 A. 示例实现状态机&lt;/h2&gt;
&lt;p&gt;为了提供清晰度，作者认为包括 SPIFFE Workload API 的客户端和服务器实现的示例状态图可能是有用的。应注意，有许多实现方式可以符合本规范，此特定实现仅供参考。&lt;/p&gt;
&lt;h3 id=&#34;服务器状态机&#34;&gt;服务器状态机&lt;/h3&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-服务器状态机&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/workload_api_server_diagram.png&#34; alt=&#34;服务器状态机&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      服务器状态机
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;SPIFFE Workload 端点侦听器正在启动。&lt;/li&gt;
&lt;li&gt;使用 SPIFFE Workload API 处理程序启动 gRPC 服务器，现在可以接受连接。&lt;/li&gt;
&lt;li&gt;正在验证传入的 FetchX509SVIDRequest。这包括检查强制性的安全头，并确保调用方可用身份。&lt;/li&gt;
&lt;li&gt;Workload API 正在向客户端发送 FetchX509SVIDResponse。&lt;/li&gt;
&lt;li&gt;Workload API 处于等待状态。从等待状态过渡需要中断或取消。中断等待状态的典型原因是响应中的信息已更新（例如，SVID 已旋转或 CRL 已更改）。&lt;/li&gt;
&lt;li&gt;对待处理的响应执行验证。确保客户端仍有权使用身份，并且请求尚未取消。&lt;/li&gt;
&lt;li&gt;服务器正在关闭流，为客户端提供正确的错误代码以表示遇到的条件。&lt;/li&gt;
&lt;li&gt;服务器遇到致命错误，必须停止。这可能发生在无法创建侦听器或 gRPC 服务器遇到致命错误的情况下。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;客户端状态机&#34;&gt;客户端状态机&lt;/h3&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-客户端状态机&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/workload_api_client_diagram.png&#34; alt=&#34;客户端状态机&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      客户端状态机
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Workload API 客户端正在拨号 SPIFFE Workload 端点。&lt;/li&gt;
&lt;li&gt;客户端正在调用 FetchX509SVID RPC 调用，向服务器发送请求。&lt;/li&gt;
&lt;li&gt;客户端正在阻塞等待从服务器接收 X509SVIDResponse 消息。&lt;/li&gt;
&lt;li&gt;客户端正在使用从服务器响应中接收的 SVIDs、CRLs 和 bundles 更新其配置。此时，它可以将接收到的信息与当前配置进行比较，确定是否需要重新加载。&lt;/li&gt;
&lt;li&gt;客户端遇到致命错误，必须退出。&lt;/li&gt;
&lt;li&gt;客户端正在执行指数回退。&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>SPIRE 联邦：验证来自不同 SPIRE 服务器的工作负载</title>
      <link>https://lib.jimmysong.io/spiffe-and-spire/architecture/federation/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/spiffe-and-spire/architecture/federation/</guid>
      <description>&lt;p&gt;本教程展示了如何对由两个不同 SPIRE 服务器识别的两个 SPIFFE 标识的工作负载进行身份验证。&lt;/p&gt;
&lt;p&gt;本文的第一部分演示了如何通过显示 SPIRE 配置文件更改和 &lt;code&gt;spire-server&lt;/code&gt; 命令来配置 SPIFFE 联邦，以设置股票报价 web 应用的前端和服务后端。本文的第二部分列出了您可以在此教程目录中包含的 Docker Compose 文件中运行的步骤，以显示场景的实际操作。&lt;/p&gt;
&lt;p&gt;在本教程中，您将学到如何：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;配置每个 SPIRE 服务器以使用 SPIFFE 身份验证和 Web PKI 身份验证公开其 SPIFFE 联邦捆绑点。&lt;/li&gt;
&lt;li&gt;配置 SPIRE 服务器以从彼此检索信任捆绑点。&lt;/li&gt;
&lt;li&gt;使用不同的信任域引导两个 SPIRE 服务器之间的联合。&lt;/li&gt;
&lt;li&gt;为工作负载创建注册条目，以便它们可以与其他信任域进行联合。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;先决条件&#34;&gt;先决条件&lt;/h2&gt;
&lt;p&gt;SPIFFE 联邦的基线组件包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运行版本为 1.5.1 的两个 SPIRE 服务器实例。&lt;/li&gt;
&lt;li&gt;运行版本为 1.5.1 的两个 SPIRE 代理。一个连接到一个 SPIRE 服务器，另一个连接到另一个 SPIRE 服务器。&lt;/li&gt;
&lt;li&gt;两个需要通过 mTLS 进行通信的工作负载，并使用工作负载 API 获取 SVID 和信任捆绑点。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;场景&#34;&gt;场景&lt;/h2&gt;
&lt;p&gt;假设我们有一个股票经纪人的 web 应用程序，它希望从股票市场 web 服务提供商那里获取股票报价并显示它们。情景如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户在浏览器中输入经纪人 web 应用的股票报价 URL。&lt;/li&gt;
&lt;li&gt;Web 应用的工作负载接收到请求并使用 mTLS 向股票市场服务发出获取报价的 HTTP 请求。&lt;/li&gt;
&lt;li&gt;股票市场服务收到请求并在响应中发送报价。&lt;/li&gt;
&lt;li&gt;Web 应用呈现使用返回的报价的股票报价页面并将其发送到浏览器。&lt;/li&gt;
&lt;li&gt;浏览器向用户显示报价。Web 应用包括一些 JavaScript 以便每隔 1 秒刷新页面，因此每秒都会执行这些步骤。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;除了上述内容，本教程的其余部分中，我们将假设以下 &lt;a href=&#34;https://spiffe.io/docs/latest/spiffe/concepts/#trust-domain&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;信任域&lt;/a&gt; 名称用于这些示例 SPIRE 安装：&lt;code&gt;broker.example&lt;/code&gt; 和 &lt;code&gt;stockmarket.example&lt;/code&gt;。请注意，信任域不需要对应实际的 DNS 域名。此外，应用程序直接访问 WorkloadAPI 以获取 SVID 和信任捆绑点，这意味着在所描述的情景中没有代理。&lt;/p&gt;
&lt;h2 id=&#34;配置-spiffe-联邦捆绑点&#34;&gt;配置 SPIFFE 联邦捆绑点&lt;/h2&gt;
&lt;p&gt;为了使联邦工作，并且因为 web 应用程序和报价服务将使用 &lt;code&gt;mTLS&lt;/code&gt;，两个 SPIRE 服务器都需要彼此的信任捆绑点。在某种程度上，这是通过在每个 SPIRE 服务器上配置所谓的联邦捆绑点来完成的，该捆绑点提供了由其他信任域中的 SPIRE 服务器使用的 API，以获取他们要与之联合的信任域的信任捆绑点。&lt;/p&gt;
&lt;p&gt;由 SPIRE 服务器公开的联邦捆绑点可以配置为使用两种身份验证方法之一：SPIFFE 身份验证或 Web PKI 身份验证。&lt;/p&gt;
&lt;h3 id=&#34;使用-spiffe-身份验证配置联邦捆绑点&#34;&gt;使用 SPIFFE 身份验证配置联邦捆绑点&lt;/h3&gt;
&lt;p&gt;要配置经纪人的 SPIRE 服务器捆绑点端点，我们在经纪人的 SPIRE 服务器配置文件中使用了 &lt;code&gt;federation&lt;/code&gt; 部分（默认为 &lt;code&gt;server.conf&lt;/code&gt;）：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; server {
     .
     .
     trust_domain = &amp;#34;broker.example&amp;#34;
     .
     .
 
     federation {
         bundle_endpoint {
             address = &amp;#34;0.0.0.0&amp;#34;
             port = 8443
         }
     }
 }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这将在运行 SPIRE 服务器的主机中的任何 IP 地址上的端口 8443 上发布联邦捆绑点。&lt;/p&gt;
&lt;p&gt;另一方面，股票市场服务提供商的 SPIRE 服务器配置类似：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;na&#34;&gt;server {&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;na&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;na&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;na&#34;&gt;trust_domain&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;stockmarket.example&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;na&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;na&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;na&#34;&gt;federation {&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;na&#34;&gt;bundle_endpoint {&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;na&#34;&gt;address&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;0.0.0.0&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;na&#34;&gt;port&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;8443&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;na&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;na&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;na&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时，两个 SPIRE 服务器都暴露了它们的联邦捆绑点以提供它们的信任捆绑点，但它们都不知道如何到达彼此的联邦捆绑点。&lt;/p&gt;
&lt;h3 id=&#34;使用-web-pki-身份验证配置联邦捆绑点&#34;&gt;使用 Web PKI 身份验证配置联邦捆绑点&lt;/h3&gt;
&lt;p&gt;我们将假设仅经纪人的 SPIRE 服务器将使用 Web PKI 身份验证来配置其联邦捆绑点。股票市场 SPIRE 服务器仍将使用 SPIFFE 身份验证。因此，股票市场 SPIRE 服务器配置与前一节中所见相同。&lt;/p&gt;
&lt;p&gt;然后，要配置经纪人的 SPIRE 服务器捆绑点端点，我们将 &lt;code&gt;federation&lt;/code&gt; 部分配置如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;na&#34;&gt;server {&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;na&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;na&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;na&#34;&gt;trust_domain&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;broker.example&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;na&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;na&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;na&#34;&gt;federation {&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;na&#34;&gt;bundle_endpoint {&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;na&#34;&gt;address&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;0.0.0.0&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;na&#34;&gt;port&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;443&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;na&#34;&gt;acme {&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                 &lt;span class=&#34;na&#34;&gt;domain_name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;broker.example&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                 &lt;span class=&#34;na&#34;&gt;email&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;some@email.com&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                 &lt;span class=&#34;na&#34;&gt;tos_accepted&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;na&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;na&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;na&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;na&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这将在任何 IP 地址上的端口 443 上发布联邦捆绑点。我们使用端口 443，因为我们演示了使用 Let&amp;rsquo;s Encrypt 作为我们的 ACME 提供商（如果您要使用其他提供商，则必须设置 &lt;code&gt;directory_url&lt;/code&gt; 可配置）。请注意，&lt;code&gt;tos_accepted&lt;/code&gt; 设置为 &lt;code&gt;true&lt;/code&gt;，这意味着我们接受了我们的 ACME 提供商的服务条款，这在使用 Let&amp;rsquo;s Encrypt 时是必要的。&lt;/p&gt;
&lt;p&gt;要使使用 Web PKI 的 SPIFFE 联邦正常工作，您必须拥有为 &lt;code&gt;domain_name&lt;/code&gt;（在我们的示例中为 &lt;code&gt;broker.example&lt;/code&gt;）指定的 DNS 域名，并且该域名必须解析到公开联邦捆绑点的 SPIRE 服务器 IP 地址。&lt;/p&gt;
&lt;h2 id=&#34;配置-spire-服务器以从彼此检索信任捆绑点&#34;&gt;配置 SPIRE 服务器以从彼此检索信任捆绑点&lt;/h2&gt;
&lt;p&gt;在配置联邦端点后，启用 SPIFFE 联邦的下一步是配置 SPIRE 服务器以查找其他信任域的信任捆绑点。在 &lt;code&gt;server.conf&lt;/code&gt; 中的 &lt;code&gt;federates_with&lt;/code&gt; 配置选项是您指定另一个信任域的端点的地方。在使用不同的身份验证方法时，该部分的配置有一些细微的差异，根据每个端点配置文件的要求。&lt;/p&gt;
&lt;h3 id=&#34;使用-spiffe-身份验证配置信任捆绑点位置https_spiffe&#34;&gt;使用 SPIFFE 身份验证配置信任捆绑点位置（https_spiffe）&lt;/h3&gt;
&lt;p&gt;如前所述，股票市场服务提供商的 SPIRE 服务器将其联邦端点监听在任何 IP 地址的端口 &lt;code&gt;8443&lt;/code&gt; 上。我们还假设 &lt;code&gt;spire-server-stock&lt;/code&gt; 是一个解析为股票市场服务的 SPIRE 服务器 IP 地址的 DNS 名称。 （这里的 Docker Compose 演示使用主机名 &lt;code&gt;spire-server-stock&lt;/code&gt;，但在典型的使用中，您会指定一个 FQDN。）然后，经纪人的 SPIRE 服务器必须配置以下 &lt;code&gt;federates_with&lt;/code&gt; 部分：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;na&#34;&gt;server {&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;na&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;na&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;na&#34;&gt;trust_domain&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;broker.example&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;na&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;na&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;na&#34;&gt;federation {&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;na&#34;&gt;bundle_endpoint {&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;na&#34;&gt;address&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;0.0.0.0&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;na&#34;&gt;port&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;8443&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;na&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;na&#34;&gt;federates_with &amp;#34;stockmarket.example&amp;#34; {&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;na&#34;&gt;bundle_endpoint_url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;https://spire-server-stock:8443&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;na&#34;&gt;bundle_endpoint_profile &amp;#34;https_spiffe&amp;#34; {&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                 &lt;span class=&#34;na&#34;&gt;endpoint_spiffe_id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;spiffe://stockmarket.example/spire/server&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;na&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;na&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;na&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;na&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在，经纪人的 SPIRE 服务器知道在哪里找到可以用于验证包含来自 &lt;code&gt;stockmarket.example&lt;/code&gt; 信任域的身份的信任捆绑点。&lt;/p&gt;
&lt;p&gt;另一方面，股票市场服务提供商的 SPIRE 服务器必须以类似的方式进行配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;na&#34;&gt;server {&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;na&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;na&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;na&#34;&gt;trust_domain&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;stockmarket.example&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;na&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;na&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;na&#34;&gt;federation {&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;na&#34;&gt;bundle_endpoint {&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;na&#34;&gt;address&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;0.0.0.0&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;na&#34;&gt;port&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;8443&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;na&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;na&#34;&gt;federates_with &amp;#34;broker.example&amp;#34; {&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;na&#34;&gt;bundle_endpoint_url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;https://spire-server-broker:8443&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;na&#34;&gt;bundle_endpoint_profile &amp;#34;https_spiffe&amp;#34; {&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                 &lt;span class=&#34;na&#34;&gt;endpoint_spiffe_id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;spiffe://broker.example/spire/server&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;na&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;na&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;na&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;na&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;请注意，指定了 &amp;ldquo;https_spiffe&amp;rdquo; 配置文件，指示了联邦捆绑点的预期 SPIFFE ID。指定 &lt;code&gt;server.conf&lt;/code&gt; 的 &lt;code&gt;federation&lt;/code&gt; 部分和 &lt;code&gt;federates_with&lt;/code&gt; 子部分是配置 SPIFFE 联邦所需的全部内容。要完成启用 SPIFFE 联邦，我们需要使用下面描述的 &lt;code&gt;spire-server&lt;/code&gt; 命令来引导信任捆绑点和注册工作负载。&lt;/p&gt;
&lt;h3 id=&#34;使用-web-pki-身份验证配置信任捆绑点位置https_web&#34;&gt;使用 Web PKI 身份验证配置信任捆绑点位置（https_web）&lt;/h3&gt;
&lt;p&gt;如前所述，在这种备选方案中，我们假设只有经纪人的 SPIRE 服务器将使用 Web PKI 身份验证来配置其联邦端点，因此经纪人服务器的 &lt;code&gt;federates_with&lt;/code&gt; 配置与前一节中所见相同。然而，股票市场服务提供商的 SPIRE 服务器需要一个不同的配置，它使用 &amp;ldquo;https_web&amp;rdquo; 配置文件而不是 &amp;ldquo;https_spiffe&amp;rdquo;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;na&#34;&gt;server {&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;na&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;na&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;na&#34;&gt;trust_domain&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;stockmarket.example&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;na&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;na&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;na&#34;&gt;federation {&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;na&#34;&gt;bundle_endpoint {&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;na&#34;&gt;address&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;0.0.0.0&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;na&#34;&gt;port&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;8443&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;na&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;na&#34;&gt;federates_with &amp;#34;broker.example&amp;#34; {&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;na&#34;&gt;bundle_endpoint_url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;https://spire-server-broker:8443&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;na&#34;&gt;bundle_endpoint_profile &amp;#34;https_web&amp;#34; {}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;na&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;na&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;na&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以注意到 &amp;ldquo;https_web&amp;rdquo; 配置文件不需要额外的配置设置。端点使用安装在操作系统中的相同公共 CA 证书进行身份验证。&lt;/p&gt;
&lt;h2 id=&#34;引导联邦&#34;&gt;引导联邦&lt;/h2&gt;
&lt;p&gt;我们已经配置了 SPIRE 服务器的联邦端点地址，但这并不足以使联邦正常工作。为了使 SPIRE 服务器能够从彼此获取信任捆绑点，它们首先需要彼此的信任捆绑点，因为它们必须对试图访问联邦端点的联合服务器的 SPIFFE 身份进行身份验证。一旦联邦被引导，就可以使用当前信任捆绑点通过联邦端点 API 获取信任捆绑点更新。&lt;/p&gt;
&lt;p&gt;引导工作是通过使用 SPIRE Server 命令 &lt;code&gt;bundle show&lt;/code&gt; 和 &lt;code&gt;bundle set&lt;/code&gt; 来完成的。&lt;/p&gt;
&lt;h3 id=&#34;获取引导信任捆绑点&#34;&gt;获取引导信任捆绑点&lt;/h3&gt;
&lt;p&gt;假设我们想要获取经纪人的 SPIRE 服务器信任捆绑点。在运行经纪人的 SPIRE 服务器的节点上运行：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;broker&amp;gt; spire-server bundle show -format spiffe &amp;gt; broker.example.bundle
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这会将信任捆绑点保存在 &lt;code&gt;broker.example.bundle&lt;/code&gt; 文件中。然后，经纪人必须将此文件的副本提供给股票市场服务人员，以便他们可以将此信任&lt;/p&gt;
&lt;p&gt;捆绑点存储在他们的 SPIRE 服务器上，并将其与 &lt;code&gt;broker.example&lt;/code&gt; 信任域关联起来。要做到这一点，股票市场服务人员必须在他们运行 SPIRE 服务器的节点上运行以下命令：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;stock-market&amp;gt; spire-server bundle set -format spiffe -id spiffe://broker.example -path /some/path/broker.example.bundle
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;此时，股票市场服务的 SPIRE 服务器可以验证具有 &lt;code&gt;broker.example&lt;/code&gt; 信任域的 SPIFFE ID 的 SVID。但是，经纪人的 SPIRE 服务器尚无法验证具有 &lt;code&gt;stockmarket.example&lt;/code&gt; 信任域的 SPIFFE ID 的 SVID。要使此成为可能，股票市场人员必须在他们运行 SPIRE 服务器的节点上运行以下命令：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;stock-market&amp;gt; spire-server bundle show -format spiffe &amp;gt; stockmarket.example.bundle
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后，股票市场人员必须将此文件的副本提供给经纪人，以便他们可以将此信任捆绑点存储在他们的 SPIRE 服务器上，并将其与 &lt;code&gt;stockmarket.example&lt;/code&gt; 信任域关联起来。要做到这一点，经纪人必须在他们运行 SPIRE 服务器的节点上运行以下命令：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;broker&amp;gt; spire-server bundle set -format spiffe -id spiffe://stockmarket.example -path /some/path/stockmarket.example.bundle
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;现在，两台 SPIRE 服务器都可以验证具有彼此信任域的 SPIFFE ID 的 SVID，因此两者可以开始从彼此的联邦端点获取信任捆绑点更新。此外，从现在起，他们可以创建用于联合的注册条目，如下一节所示。&lt;/p&gt;
&lt;p&gt;请注意，在经纪人的 SPIRE 服务器为其联邦捆绑点使用 Web PKI 身份验证时，不需要创建 &lt;code&gt;broker.example.bundle&lt;/code&gt; 文件（后来由股票市场服务导入）。&lt;/p&gt;
&lt;h2 id=&#34;为联合创建注册条目&#34;&gt;为联合创建注册条目&lt;/h2&gt;
&lt;p&gt;现在，SPIRE 服务器具有了彼此的信任捆绑点，让我们看看它们如何创建用于联合的注册条目。&lt;/p&gt;
&lt;p&gt;为简化起见，我们假设股票市场 Web 应用程序和行情服务都在运行 Linux 箱子上，一个属于股票市场组织，另一个属于经纪人。由于它们使用 SPIRE，每个 Linux 箱子上还安装了一个 SPIRE 代理。除此之外，Web 应用程序是使用 &lt;code&gt;webapp&lt;/code&gt; 用户运行的，行情服务是使用 &lt;code&gt;quotes-service&lt;/code&gt; 用户运行的。&lt;/p&gt;
&lt;p&gt;在经纪人的 SPIRE Server 节点上，经纪人必须创建一个注册条目。&lt;code&gt;-federatesWith&lt;/code&gt; 标志是必需的，以启用 SPIFFE 联邦：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;broker&amp;gt; spire-server entry create \
   -parentID &amp;lt;SPIRE 代理的 SPIFFE ID&amp;gt; \
   -spiffeID spiffe://broker.example/webapp \
   -selector unix:user:webapp \
   -federatesWith &amp;#34;spiffe://stockmarket.example&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过指定 &lt;code&gt;-federatesWith&lt;/code&gt; 标志，创建了此注册条目后，当 Web 应用程序的 SPIRE 服务器请求 SVID 时，它将从经纪人的 SPIRE 服务器获取一个具有 &lt;code&gt;spiffe://broker.example/webapp&lt;/code&gt; 身份的 SVID，并附带与 &lt;code&gt;stockmarket.example&lt;/code&gt; 信任域关联的信任捆绑点。&lt;/p&gt;
&lt;p&gt;在股票市场服务的一侧，他们必须创建一个注册条目，如下所示：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;stock-market&amp;gt; spire-server entry create \
   -parentID &amp;lt;SPIRE 代理的 SPIFFE ID&amp;gt; \
   -spiffeID spiffe://stockmarket.example/quotes-service \
   -selector unix:user:quotes-service \
   -federatesWith &amp;#34;spiffe://broker.example&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;类似地，创建了此注册条目后，当行情服务请求 SVID 时，它将获得一个具有 &lt;code&gt;spiffe://stockmarket.example/quotes-service&lt;/code&gt; 身份的 SVID，并附带与 &lt;code&gt;broker.example&lt;/code&gt; 信任域关联的信任捆绑点。&lt;/p&gt;
&lt;p&gt;以上就是全部内容。现在，所有的组件都已就绪，可以使联邦正常工作，并演示 Web 应用程序如何在具有不同信任域的身份的情况下与行情服务通信。&lt;/p&gt;
&lt;h1 id=&#34;使用-spiffe-身份验证的联邦示例&#34;&gt;使用 SPIFFE 身份验证的联邦示例&lt;/h1&gt;
&lt;p&gt;本节将解释如何使用 Docker Compose 尝试此教程中描述的 SPIFFE 身份验证场景的示例实现。&lt;/p&gt;
&lt;p&gt;尽管此处没有显示出来，但您可以对 Web PKI 身份验证部分中显示的更改进行更改以尝试 Web PKI 场景。请记住，要配置 Web PKI，&lt;code&gt;domain_name&lt;/code&gt; 指定的 FQDN 必须由您拥有，并且可以通过 DNS 通过互联网进行解析。&lt;/p&gt;
&lt;h2 id=&#34;要求&#34;&gt;要求&lt;/h2&gt;
&lt;p&gt;本教程的所需文件可以在 &lt;a href=&#34;https://github.com/spiffe/spire-tutorials&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/spiffe/spire-tutorials&lt;/a&gt; 的 &lt;code&gt;docker-compose/federation&lt;/code&gt; 目录中找到。如果您尚未克隆该存储库，请立即执行此操作。&lt;/p&gt;
&lt;p&gt;在继续之前，请查看以下系统要求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;64 位 Linux 或 macOS 环境&lt;/li&gt;
&lt;li&gt;安装了 &lt;a href=&#34;https://docs.docker.com/get-docker/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Docker&lt;/a&gt; 和 &lt;a href=&#34;https://docs.docker.com/compose/install/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Docker Compose&lt;/a&gt;（Docker Compose 包含在 macOS Docker Desktop 中）&lt;/li&gt;
&lt;li&gt;安装了 &lt;a href=&#34;https://golang.org/dl/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go&lt;/a&gt; 1.14.4 或更高版本&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;构建&#34;&gt;构建&lt;/h2&gt;
&lt;p&gt;确保当前工作目录是 &lt;code&gt;.../spire-tutorials/docker-compose/federation&lt;/code&gt;，并运行以下命令以创建 Docker Compose 所需的文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ ./build.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;运行&#34;&gt;运行&lt;/h2&gt;
&lt;p&gt;运行以下命令以启动 SPIRE 服务器和应用程序：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ docker-compose up -d
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;启动-spire-代理&#34;&gt;启动 SPIRE 代理&lt;/h2&gt;
&lt;p&gt;运行以下命&lt;/p&gt;
&lt;p&gt;令以启动 SPIRE 代理：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ ./agent.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;启动-web-应用程序&#34;&gt;启动 Web 应用程序&lt;/h2&gt;
&lt;p&gt;运行以下命令以启动 Web 应用程序：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ ./webapp.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;启动行情服务&#34;&gt;启动行情服务&lt;/h2&gt;
&lt;p&gt;运行以下命令以启动行情服务：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ ./quotes.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;测试&#34;&gt;测试&lt;/h2&gt;
&lt;p&gt;现在，您可以在浏览器中访问 &lt;code&gt;http://localhost:8080&lt;/code&gt; 来查看股票报价。&lt;/p&gt;
&lt;h2 id=&#34;清理&#34;&gt;清理&lt;/h2&gt;
&lt;p&gt;要清理所有 Docker 容器和卷，请运行以下命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ docker-compose down -v
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这将关闭并删除所有正在运行的容器，并删除由 &lt;code&gt;docker-compose up&lt;/code&gt; 创建的卷。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>安装 SPIRE 代理</title>
      <link>https://lib.jimmysong.io/spiffe-and-spire/installation/install-agent/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/spiffe-and-spire/installation/install-agent/</guid>
      <description>&lt;p&gt;本文指导你如何在 Linux 和 Kubernetes 上安装 SPIRE Agent。&lt;/p&gt;
&lt;h2 id=&#34;步骤-1获取-spire-二进制文件&#34;&gt;步骤 1：获取 SPIRE 二进制文件&lt;/h2&gt;
&lt;p&gt;可以在 &lt;a href=&#34;https://spiffe.io/downloads/#spire-releases&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 下载页面&lt;/a&gt; 找到预构建的 SPIRE 发行版。tarball 包含服务器和 Agent 二进制文件。&lt;/p&gt;
&lt;p&gt;如果愿意，也可以从源代码 &lt;a href=&#34;https://github.com/spiffe/spire/blob/v1.8.2/CONTRIBUTING.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;构建 SPIRE&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;步骤-2安装服务器和-agent&#34;&gt;步骤 2：安装服务器和 Agent&lt;/h2&gt;
&lt;p&gt;本入门指南描述了如何在同一节点上安装服务器和 Agent。在典型的生产部署中，服务器安装在一个节点上，而一个或多个 Agent 安装在不同的节点上。&lt;/p&gt;
&lt;p&gt;要安装服务器和 Agent：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;从 &lt;a href=&#34;https://spiffe.io/downloads/#spire-releases&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 下载页面&lt;/a&gt; 获取最新的 tarball，然后使用以下命令将其解压到 /opt/spire 目录中：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;wget &amp;lt;https://github.com/spiffe/spire/releases/download/v1.8.2/spire-1.8.2-linux-amd64-musl.tar.gz&amp;gt;
tar zvxf spire-1.8.2-linux-amd64-musl.tar.gz
sudo cp -r spire-1.8.2/. /opt/spire/
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为了方便起见，将 &lt;code&gt;spire-server&lt;/code&gt; 和 &lt;code&gt;spire-agent&lt;/code&gt; 添加到 $PATH 中：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo ln -s /opt/spire/bin/spire-server /usr/bin/spire-server
sudo ln -s /opt/spire/bin/spire-agent /usr/bin/spire-agent
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;步骤-3配置-agent&#34;&gt;步骤 3：配置 Agent&lt;/h2&gt;
&lt;p&gt;安装 SPIRE Agent 后，需要根据您的环境进行配置。有关如何配置 SPIRE 的详细信息，请参阅 &lt;a href=&#34;https://spiffe.io/docs/latest/spire/using/configuring/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;配置 SPIRE&lt;/a&gt;，特别是节点验证和工作负载验证。&lt;/p&gt;
&lt;p&gt;请注意，SPIRE Agent 在修改其配置后必须重新启动，以使更改生效。&lt;/p&gt;
&lt;p&gt;如果尚未安装 SPIRE Server，请参阅 &lt;a href=&#34;https://spiffe.io/docs/latest/spire/installing/install-server/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;安装 SPIRE Server&lt;/a&gt; 了解如何安装 SPIRE Server。&lt;/p&gt;
&lt;h2 id=&#34;在-kubernetes-上安装-spire-agents&#34;&gt;在 Kubernetes 上安装 SPIRE Agents&lt;/h2&gt;
&lt;p&gt;必须从包含用于配置的 .yaml 文件的目录中运行所有命令。有关详细信息，请参阅 SPIRE Server 安装指南的 &lt;a href=&#34;https://spiffe.io/docs/latest/spire/installing/install-server/#section-1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Obtain the Required Files&lt;/a&gt; 部分。&lt;/p&gt;
&lt;p&gt;要在 Kubernetes 上安装 SPIRE Agents，您需要执行以下操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建 Agent 服务账号&lt;/li&gt;
&lt;li&gt;创建 Agent 配置映射&lt;/li&gt;
&lt;li&gt;创建 Agent DaemonSet&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;有关详细信息，请参阅以下各节。&lt;/p&gt;
&lt;h3 id=&#34;步骤-1创建-agent-服务账号&#34;&gt;步骤 1：创建 Agent 服务账号&lt;/h3&gt;
&lt;p&gt;将 agent-account.yaml 配置文件应用于在 spire 命名空间中创建名为 spire-agent 的服务账号：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ kubectl apply -f agent-account.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;为了允许代理读取 kubelet API 以执行工作负载验证，必须创建一个 ClusterRole，授予 Kubernetes RBAC 适当的权限，并将 ClusterRoleBinding 关联到上一步创建的服务账号。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;通过应用 agent-cluster-role.yaml 配置文件来创建名为 spire-agent-cluster-role 的 ClusterRole 和相应的 ClusterRoleBinding：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ kubectl apply -f agent-cluster-role.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为了确认成功创建，请验证 ClusterRole 是否出现在以下命令的输出中：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ kubectl get clusterroles --namespace spire | grep spire
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;步骤-2创建-agent-配置映射&#34;&gt;步骤 2：创建 Agent 配置映射&lt;/h3&gt;
&lt;p&gt;将 agent-configmap.yaml 配置文件应用于创建代理配置映射。这将作为 &lt;code&gt;agent.conf&lt;/code&gt; 文件挂载，用于确定 SPIRE Agent 的配置。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ kubectl apply -f agent-configmap.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;agent-configmap.yaml 文件指定了许多重要的目录，特别是 /run/spire/sockets 和 /run/spire/config。这些目录在部署代理容器时绑定。&lt;/p&gt;
&lt;p&gt;请参阅 &lt;a href=&#34;https://spiffe.io/docs/latest/spire/using/configuring/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;配置 SPIRE&lt;/a&gt; 部分，详细了解如何配置 SPIRE Agent，特别是节点验证和工作负载验证。&lt;/p&gt;
&lt;p&gt;请注意，一旦修改了 SPIRE Agent 的配置，必须重新启动该 Agent 才能使更改生效。&lt;/p&gt;
&lt;h3 id=&#34;步骤-3创建-agent-daemonset&#34;&gt;步骤 3：创建 Agent DaemonSet&lt;/h3&gt;
&lt;p&gt;代理以 DaemonSet 形式部署，每个 Kubernetes 工作节点上运行一个代理。&lt;/p&gt;
&lt;p&gt;通过应用 agent-daemonset.yaml 配置来部署 SPIRE 代理。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ kubectl apply -f agent-daemonset.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这将在 spire 命名空间中创建一个名为 spire-agent 的 DaemonSet，并在 spire-server 旁边启动一个 spire-agent pod，如以下两个命令的输出所示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl get daemonset --namespace spire
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NAME          DESIRED   CURRENT   READY   UP-TO-DATE   AVAILABLE   NODE SELECTOR   AGE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;spire-agent   &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;         &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;         &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;       &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;            &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;           &amp;lt;none&amp;gt;          6m45s
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl get pods --namespace spire
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NAME                           READY   STATUS    RESTARTS   AGE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;spire-agent-88cpl              1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          6m45s
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;spire-server-0                 1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          103m
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当代理部署时，绑定以下表格中总结的卷：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;卷&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;挂载位置&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;spire-config&lt;/td&gt;
&lt;td&gt;在步骤 2 中创建的 spire-agent configmap。&lt;/td&gt;
&lt;td&gt;/run/spire/config&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;spire-sockets&lt;/td&gt;
&lt;td&gt;hostPath，将与在同一工作节点上运行的所有其他 pod 共享。它包含一个 UNIX 域套接字，用于工作负载与代理 API 通信。&lt;/td&gt;
&lt;td&gt;/run/spire/sockets&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>使用 SVID</title>
      <link>https://lib.jimmysong.io/spiffe-and-spire/configuration/svids/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/spiffe-and-spire/configuration/svids/</guid>
      <description>&lt;p&gt;本文指导你如何编写与 SPIFFE SVID 相关的代码。&lt;/p&gt;
&lt;p&gt;SPIRE 等符合 SPIFFE 的身份提供者将通过 SPIFFE Workload API 公开 SPIFFE 可验证身份文档（SVID）。工作负载可以使用从此 API 检索到的 SVID 来验证消息的来源或在两个工作负载之间建立相互 TLS 安全通道。&lt;/p&gt;
&lt;h1 id=&#34;与-workload-api-交互&#34;&gt;与 Workload API 交互&lt;/h1&gt;
&lt;p&gt;开发需要与 SPIFFE 进行交互的新工作负载的开发人员可以直接与 SPIFFE Workload API 进行交互，以便：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;检索工作负载的身份，描述为 SPIFFE ID，例如 &lt;code&gt;spiffe://prod.acme.com/billing/api&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;代表工作负载生成短期密钥和证书，具体包括：
&lt;ul&gt;
&lt;li&gt;与该 SPIFFE ID 相关联的私钥，可用于代表工作负载签署数据。&lt;/li&gt;
&lt;li&gt;对应的短期 X.509 证书 - 一种称为 X509-SVID 的证书。该证书可用于建立 TLS 或以其他方式对其他工作负载进行身份验证。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一组证书 - 称为信任捆绑包（trust bundle） - 工作负载可以使用它来验证同一信任域或联合信任域中的另一个工作负载呈现的 X.509-SVID。&lt;/li&gt;
&lt;li&gt;生成或验证代表工作负载或同一信任域或联合信任域中另一个工作负载的 JSON Web Token（JWT-SVID）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Workload API 不需要任何显式的身份验证（如密钥）。相反，SPIFFE 规范将身份验证工作留给 SPIFFE Workload API 的实现来确定。在 SPIRE 的情况下，这是通过检查 SPIRE 代理在工作负载调用 API 时收集的 Unix 内核元数据来实现的。&lt;/p&gt;
&lt;p&gt;该 API 是基于 gRPC 的 API，派生自 &lt;a href=&#34;https://github.com/spiffe/go-spiffe/blob/main/v2/proto/spiffe/workload/workload.proto&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;protobuf&lt;/a&gt;。&lt;a href=&#34;https://grpc.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC 项目&lt;/a&gt; 提供了从 protobuf 生成各种语言的客户端库的工具。&lt;/p&gt;
&lt;h2 id=&#34;在-go-中使用-svid&#34;&gt;在 Go 中使用 SVID&lt;/h2&gt;
&lt;p&gt;如果您在使用 Go 进行开发，SPIFFE 项目维护了一个 Go 客户端库，提供以下功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个命令行实用程序，用于解析和验证 X.509 证书中编码的 SPIFFE 身份，如 SPIFFE 标准中所述。&lt;/li&gt;
&lt;li&gt;一个客户端库，提供与 SPIFFE Workload API 的交互界面。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;您可以在 &lt;a href=&#34;https://github.com/spiffe/go-spiffe&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt; 上找到该库以及 GoDoc 的链接。&lt;/p&gt;
&lt;h1 id=&#34;使用-spiffe-helper-实用程序&#34;&gt;使用 SPIFFE Helper 实用程序&lt;/h1&gt;
&lt;p&gt;SPIFFE Helper 实用程序是一个通用实用程序，用于构建或与无法直接写入 Workload API 的应用程序集成时非常有用。大体上，该实用程序能够：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;获取用于验证 X.509-SVID 的 X.509-SVID、密钥和信任捆绑包（证书链），并将它们写入磁盘上的特定位置。&lt;/li&gt;
&lt;li&gt;启动一个子进程，该子进程可以使用这些密钥和证书。&lt;/li&gt;
&lt;li&gt;主动监视其过期时间，并根据需要从 Workload API 请求刷新的证书和密钥。&lt;/li&gt;
&lt;li&gt;一旦获取到更换的证书，向任何已启动的子进程发送信号。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;使用-spire-agent&#34;&gt;使用 SPIRE Agent&lt;/h1&gt;
&lt;p&gt;SPIRE Agent 二进制文件可用作作为 SPIFFE Workload API 的实现时的 SPIRE 部署的一部分，但它也可以作为 Workload API 的客户端运行，并提供一些简单的实用程序与其进行交互以检索 SPIFFE 凭据。&lt;/p&gt;
&lt;p&gt;例如，运行以下命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo -u webapp ./spire-agent api fetch x509 -socketPath /run/spire/sockets/agent.sock -write /tmp/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;将会：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;连接到 Unix 域套接字 &lt;code&gt;/run/spire/sockets/agent.sock&lt;/code&gt; 上的 Workload API（即使 SPIRE 不提供 API）。&lt;/li&gt;
&lt;li&gt;检索与该进程所运行的用户相关联的任何身份（在此示例中为 &lt;code&gt;webapp&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;将每个身份关联的 X.509-SVID、私钥写入 &lt;code&gt;/tmp/&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;将用于验证在该信任域下颁发的 X.509-SVID 的信任捆绑包（证书链）写入 &lt;code&gt;/tmp/&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;有关相关命令的完整列表，请参阅 &lt;a href=&#34;https://spiffe.io/docs/latest/deploying/spire_agent/#command-line-options&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE Agent 文档&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SPIFFE 工作负载端点</title>
      <link>https://lib.jimmysong.io/spiffe-and-spire/standard/spiffe-workload-endpoint/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/spiffe-and-spire/standard/spiffe-workload-endpoint/</guid>
      <description>&lt;p&gt;对于网络工作负载而言，可移植且互操作的加密身份可能是 SPIFFE 的核心用例之一。为了完全满足这一要求，社区必须达成一致，以标准化检索身份和在运行时使用身份相关服务的方式。&lt;/p&gt;
&lt;p&gt;SPIFFE 工作负载终端点规范通过定义一个终端点来提供 SPIFFE 可验证身份文档（SVIDs）和相关服务。具体而言，它概述了如何定位终端点以及如何服务或使用它。这个终端点所暴露的服务集合超出了本文档的范围，但有一个例外，即 SPIFFE 工作负载 API。&lt;/p&gt;
&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;
&lt;p&gt;SPIFFE 工作负载终端点是一个 API 终端点，工作负载或正在运行的计算进程可以通过它在运行时访问与身份相关的服务（如身份签发或身份验证）。这个终端点可以暴露任意数量的与身份相关的服务，但至少，符合规范的环境中运行的工作负载可以期望 SPIFFE 工作负载 API 可用。&lt;/p&gt;
&lt;p&gt;本文档详细介绍了 SPIFFE 工作负载终端点的可访问性和范围、传输协议、身份验证过程以及可扩展性/发现机制。&lt;/p&gt;
&lt;h2 id=&#34;可访问性&#34;&gt;可访问性&lt;/h2&gt;
&lt;p&gt;SPIFFE 工作负载终端点通常用作初始身份引导的机制，包括传递和管理信任根的过程。由于在早期阶段，工作负载可能对自己的身份或应该信任的对象没有任何先验知识，因此很难确保对终端点的访问安全。因此，SPIFFE 工作负载终端点应通过本地终端点公开，并且实现者不应将同一终端点实例公开给多个主机。将终端点和相关流量限制在单个主机上可以减轻与初始身份验证和签发安全相关的引导问题。更多详细信息，请参见 传输 和 身份验证 部分。&lt;/p&gt;
&lt;h2 id=&#34;传输&#34;&gt;传输&lt;/h2&gt;
&lt;p&gt;SPIFFE 工作负载终端点必须通过 gRPC 进行提供，并且符合规范的客户端必须支持 gRPC。它可以作为 Unix 域套接字（Unix Domain Socket，UDS）或 TCP 监听套接字公开。实现者应优先选择 Unix 域套接字传输，但如果 Unix 域套接字不可行或不可能，也可以支持 TCP 传输。除非底层网络允许工作负载终端点服务器根据源 IP 地址（例如通过本地主机或链路本地网络）或其他强网络级断言（例如通过 SDN 策略）对工作负载进行强身份验证，否则不得使用 TCP 传输。&lt;/p&gt;
&lt;p&gt;为了防止 &lt;a href=&#34;https://www.owasp.org/index.php/Server_Side_Request_Forgery&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;服务器端请求伪造&lt;/a&gt;（SSRF）攻击，每个客户端请求 SPIFFE 工作负载终端点时，都必须包含静态的 gRPC 元数据键 &lt;code&gt;workload.spiffe.io&lt;/code&gt;，其值为 &lt;code&gt;true&lt;/code&gt;（区分大小写）。未包含此元数据键/值的请求必须被 SPIFFE 工作负载终端点拒绝（有关详细信息，请参见 错误代码 部分）。这样可以防止攻击者利用 SSRF 漏洞访问 SPIFFE 工作负载终端点，除非该漏洞还使攻击者能够控制出站 gRPC 元数据。&lt;/p&gt;
&lt;h3 id=&#34;传输安全&#34;&gt;传输安全&lt;/h3&gt;
&lt;p&gt;尽管 gRPC 强烈推荐使用传输层安全（Transport Layer Security，TLS），但不得要求 SPIFFE 工作负载终端点。由于 SPIFFE 工作负载终端点通常传递和管理信任根，我们不能指望工作负载具有对活跃根的先进知识。因此，在早期阶段，工作负载可能无法验证所呈现身份的真实性，除非通过 Workload API 实现的特权位置。这是 SPIFFE 工作负载终端点实例不应公开给多个主机的另一个原因。有关更多信息，请参见 身份验证 部分。&lt;/p&gt;
&lt;h2 id=&#34;定位终端点&#34;&gt;定位终端点&lt;/h2&gt;
&lt;p&gt;客户端可以显式配置套接字位置，也可以使用名为 &lt;code&gt;SPIFFE_ENDPOINT_SOCKET&lt;/code&gt; 的众所周知的环境变量。如果没有显式配置，符合规范的客户端必须回退到环境变量。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SPIFFE_ENDPOINT_SOCKET&lt;/code&gt; 环境变量的值结构化为 &lt;a href=&#34;https://www.ietf.org/rfc/rfc3986.txt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 3986&lt;/a&gt; URI。方案（scheme）必须设置为 &lt;code&gt;unix&lt;/code&gt; 或 &lt;code&gt;tcp&lt;/code&gt;，分别表示终端点通过 Unix 域套接字或 TCP 监听套接字提供服务。&lt;/p&gt;
&lt;p&gt;如果方案设置为 &lt;code&gt;unix&lt;/code&gt;，则授权组件不得设置，路径组件必须设置为 SPIFFE 工作负载终端点 Unix 域套接字的绝对路径（例如 &lt;code&gt;unix:///path/to/endpoint.sock&lt;/code&gt;）。方案和路径组件是强制的，不得设置其他组件。&lt;/p&gt;
&lt;p&gt;如果方案设置为 &lt;code&gt;tcp&lt;/code&gt;，则授权的主机组件必须设置为 IP 地址，授权的端口组件必须设置为 SPIFFE 工作负载终端点 TCP 监听套接字的 TCP 端口号。方案、主机和端口组件是强制的，不得设置其他组件。例如，&lt;code&gt;tcp://127.0.0.1:8000&lt;/code&gt; 是有效的，而 &lt;code&gt;tcp://127.0.0.1:8000/foo&lt;/code&gt; 是无效的。&lt;/p&gt;
&lt;h2 id=&#34;身份验证&#34;&gt;身份验证&lt;/h2&gt;
&lt;p&gt;SPIFFE 工作负载终端点通常用作初始身份引导的机制。因此，预期工作负载没有任何可用于自身身份验证的“秘密”材料。为了适应这一非常重要的用例，SPIFFE 工作负载终端点不得要求直接对其客户端进行身份验证。&lt;/p&gt;
&lt;p&gt;实现者应该执行带外真实性检查，而不是直接的客户端身份验证。这可以包括内核检查或编排工具询问等技术。例如，可以通过检查内核套接字状态来了解调用 API 的进程是哪个。另一种方法是允许编排工具将 Unix 域套接字放入特定容器中，向 SPIFFE 工作负载终端点实现传递容器的属性/身份信息。然后可以将此信息用作身份验证机制。&lt;/p&gt;
&lt;p&gt;应注意，虽然如何实现这一点的方法是特定于实现的，但所选择的方法不得要求工作负载积极参与其中。&lt;/p&gt;
&lt;h2 id=&#34;错误代码&#34;&gt;错误代码&lt;/h2&gt;
&lt;p&gt;在与 SPIFFE Workload 端点交互时，客户端可能会遇到多种错误条件。例如，客户端请求可能省略了必需的安全头部（请参阅传输部分获取更多信息），或者 SPIFFE Workload 端点实现可能仍在初始化或无法使用。&lt;/p&gt;
&lt;p&gt;如果收到不包含必需安全头部的客户端请求，实现必须使用 gRPC 状态码 &amp;ldquo;InvalidArgument&amp;rdquo; 进行响应。如果客户端收到 &amp;ldquo;InvalidArgument&amp;rdquo; 状态码，不应重试，因为这表示客户端实现有误，不可恢复。&lt;/p&gt;
&lt;p&gt;如果 SPIFFE Workload 端点实现正在运行但不可用，例如仍在初始化或执行负载均衡，客户端将收到 gRPC 状态码 &amp;ldquo;Unavailable&amp;rdquo;。如果客户端收到这个状态码，或者无法到达 SPIFFE Workload 端点，可以使用指数退避重试。&lt;/p&gt;
&lt;p&gt;最后，如果给定调用者/客户端没有为 SPIFFE Workload 端点服务定义身份，服务应使用 gRPC 状态码 &amp;ldquo;PermissionDenied&amp;rdquo; 进行响应。如果客户端收到这个状态码，可以使用指数退避重试，因为在实现最终一致性的情况下可能会遇到此类响应。&lt;/p&gt;
&lt;p&gt;请参阅 附录 A 获取错误条件和代码的摘要。&lt;/p&gt;
&lt;h2 id=&#34;可扩展性和提供的服务&#34;&gt;可扩展性和提供的服务&lt;/h2&gt;
&lt;p&gt;SPIFFE Workload 端点可以提供多种与身份相关的服务，例如身份发放或身份验证。通过使用 gRPC/Protobuf 服务原语来公开单个服务。为了扩展 SPIFFE Workload 端点，必须引入一个新的（唯一命名的）服务。&lt;/p&gt;
&lt;p&gt;由于本规范承诺提供强大的可移植性，作者认为允许扩展现有逻辑服务与 SPIFFE 的精神相悖。如果通过向现有逻辑服务添加端点来提供附加功能，那么在从一个符合 SPIFFE 的环境移动到另一个环境时，无法保证可移植性。因此，不能直接扩展现有的 gRPC 逻辑服务，如 SPIFFE Workload API。相反，可以通过添加 SPIFFE 规范集中未描述的独立逻辑服务来增强端点。&lt;/p&gt;
&lt;p&gt;虽然所有 SPIFFE Workload 端点实现都必须公开 SPIFFE Workload API，但有时很难知道给定环境中支持哪些附加服务。因此，端点实现者应该包含对 &lt;a href=&#34;https://github.com/grpc/grpc/blob/master/doc/server-reflection.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC Server Reflection&lt;/a&gt; 的支持。如果客户端遇到不支持 gRPC Server Reflection 的端点，应假设唯一可用的服务是 SPIFFE Workload API 中定义的那些。&lt;/p&gt;
&lt;h2 id=&#34;附录-a-错误代码列表&#34;&gt;附录 A. 错误代码列表&lt;/h2&gt;
&lt;p&gt;本节列出了 SPIFFE Workload 端点实现可能返回的各种错误代码、返回条件以及如何处理它们。请参阅 错误代码 部分和 &lt;a href=&#34;https://godoc.org/google.golang.org/grpc/codes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC Code package 文档&lt;/a&gt; 以获取有关这些代码的更多信息。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;代码&lt;/th&gt;
&lt;th&gt;条件&lt;/th&gt;
&lt;th&gt;客户端行为&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;InvalidArgument&lt;/td&gt;
&lt;td&gt;客户端请求中未包含 gRPC 安全头部。请参阅 传输部分 获取更多信息。&lt;/td&gt;
&lt;td&gt;报告错误，不要重试。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Unavailable&lt;/td&gt;
&lt;td&gt;SPIFFE Workload 端点实现无法处理请求。&lt;/td&gt;
&lt;td&gt;使用指数退避重试。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PermissionDenied&lt;/td&gt;
&lt;td&gt;客户端无权执行请求的操作。根据实现的情况，这可能表示工作负载在身份或信任域被配置之前就已启动。&lt;/td&gt;
&lt;td&gt;使用指数退避重试。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>SPIFFE 信任域和 Bundle</title>
      <link>https://lib.jimmysong.io/spiffe-and-spire/standard/spiffe-trust-domain-and-bundle/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/spiffe-and-spire/standard/spiffe-trust-domain-and-bundle/</guid>
      <description>&lt;p&gt;SPIFFE 标准提供了一个规范，用于在异构环境和组织中引导和发放可互操作的服务身份。它定义了一个称为&amp;quot;信任域&amp;quot;的概念，用于划分管理和/或安全边界。信任域隔离发放机构并区分身份命名空间，但也可以松散耦合以提供联合身份。&lt;/p&gt;
&lt;p&gt;本文档描述了 SPIFFE 信任域的语义、表示方式以及它们如何耦合在一起的机制。&lt;/p&gt;
&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;
&lt;p&gt;SPIFFE 信任域表示 SPIFFE ID 有资格的基础，指示任何给定 SPIFFE ID 已经发放的领域或发放机构。它们由发放机构支持，负责管理其相应信任域中的 SPIFFE 身份发放。尽管信任域的名称由一个简单的人类可读字符串组成，但还必须表达由信任域的发放机构使用的密码密钥，以使其他人能够验证其发放的身份。这些密钥被表示为&amp;quot;SPIFFE Bundle&amp;quot;，与其所代表的信任域紧密相连。&lt;/p&gt;
&lt;p&gt;本规范定义了 SPIFFE 信任域和 SPIFFE Bundle 的性质和语义。&lt;/p&gt;
&lt;h2 id=&#34;信任域&#34;&gt;信任域&lt;/h2&gt;
&lt;p&gt;SPIFFE 信任域是由一组密码密钥支持的身份命名空间。这些密钥共同为驻留在信任域中的所有身份提供了密码锚点。&lt;/p&gt;
&lt;p&gt;信任域与支持它们的密钥之间存在一对多的关系。一个信任域可以由多个密钥和密钥类型来表示。例如，前者可以在根密钥轮换期间使用，而后者在使用多个 SVID 类型时避免多协议攻击是必要的。&lt;/p&gt;
&lt;p&gt;需要注意的是，虽然可以在多个信任域之间共享密码密钥，但我们强烈建议每个授权密钥仅在一个信任域中使用。密钥的重复使用可能会降低信任域的隔离性（例如，在演练和生产之间），并引入额外的安全挑战（例如，需要为辅助发放机构实施名称约束系统）。&lt;/p&gt;
&lt;h2 id=&#34;spiffe-bundle-spiffe-bundle&#34;&gt;SPIFFE Bundle (SPIFFE Bundle)&lt;/h2&gt;
&lt;p&gt;SPIFFE Bundle 是包含信任域的密码密钥的对象。Bundle 中的密钥被视为代表 Bundle 所代表的信任域的权威，并用于证明驻留在该信任域中的 SVIDs 的有效性。&lt;/p&gt;
&lt;p&gt;SPIFFE Bundle 设计用于在 SPIFFE 控制平面实现内部和之间使用。然而，此规范不排除直接由工作负载消费的使用。&lt;/p&gt;
&lt;p&gt;在存储或管理 SPIFFE Bundle 时，独立记录 Bundle 所代表的信任域的名称至关重要，通常通过使用&lt;code&gt;&amp;lt;trust_domain_name, bundle&amp;gt;&lt;/code&gt;元组来实现。在验证 SVID 时，验证器必须选择与 SVID 所在的信任域对应的 Bundle，因此在大多数情况下需要维护此关系。&lt;/p&gt;
&lt;p&gt;请注意，信任域 Bundle 的内容预计会随时间变化，因为它所包含的密钥进行轮换。通过发放包含新密钥的新 Bundle 并省略已撤销的密钥来添加和撤销密钥。SPIFFE 实现负责根据需要将 Bundle 内容更新分发给工作负载。确切的格式和通过哪种方法传递这些更新超出了本规范的范围。&lt;/p&gt;
&lt;h2 id=&#34;spiffe-bundle-格式&#34;&gt;SPIFFE Bundle 格式&lt;/h2&gt;
&lt;p&gt;SPIFFE Bundle 被表示为 RFC 7517 兼容的 JWK 集合。选择 JWK 的原因有两个主要原因。首先，它提供了一种灵活的格式，用于表示各种类型的密码密钥（和 X.509 等文档），从而在定义新的 SVID 格式时提供了一定程度的未来证明。其次，它得到了广泛支持和部署，主要用于域间联合，这是 SPIFFE 项目的核心目标。&lt;/p&gt;
&lt;h3 id=&#34;jwk-集合&#34;&gt;JWK 集合&lt;/h3&gt;
&lt;p&gt;本节定义了 JWK 集合的参数。未在此处定义的参数可以根据实现者的需要包含，但是 SPIFFE 实现&lt;strong&gt;不能&lt;/strong&gt;要求它们的存在以使其正常工作。&lt;/p&gt;
&lt;h3 id=&#34;序列号&#34;&gt;序列号&lt;/h3&gt;
&lt;p&gt;参数&lt;code&gt;spiffe_sequence&lt;/code&gt;&lt;strong&gt;应该&lt;/strong&gt;被设置。该序列号可以被 SPIFFE 控制平面用于许多目的，包括传播测量和更新顺序/替代。当存在时，其值&lt;strong&gt;必须&lt;/strong&gt;为单调递增的整数，并且当 bundle 的内容被更新时必须更改。&lt;/p&gt;
&lt;p&gt;值得注意的是，尽管 JSON 整数类型是可变宽度且没有定义最大限制，但许多实现可能将其解析为固定宽度类型。为了防止溢出，应该确保生成的类型至少具有 64 位的精度。&lt;/p&gt;
&lt;h3 id=&#34;刷新提示&#34;&gt;刷新提示&lt;/h3&gt;
&lt;p&gt;参数&lt;code&gt;spiffe_refresh_hint&lt;/code&gt;&lt;strong&gt;应该&lt;/strong&gt;被设置。刷新提示指示消费者应该多久检查更新。Bundle 发布者可以将刷新提示作为其密钥轮换频率的函数进行广告。值得注意的是，刷新提示还可能影响密钥撤销的传播速度。如果设置了刷新提示，其值&lt;strong&gt;必须&lt;/strong&gt;是表示建议的消费者刷新间隔的整数，以秒为单位。正如名称所示，刷新间隔只是一个提示，根据实现的不同，消费者可以更频繁或更不频繁地检查更新。&lt;/p&gt;
&lt;h3 id=&#34;密钥&#34;&gt;密钥&lt;/h3&gt;
&lt;p&gt;参数&lt;code&gt;keys&lt;/code&gt;&lt;strong&gt;必须&lt;/strong&gt;存在。其值是一个 JWK 数组。遇到未知的密钥类型或用途的客户端&lt;strong&gt;必须&lt;/strong&gt;忽略相应的 JWK 元素。请参阅 RFC 7517 的第 5 节以了解有关&lt;code&gt;keys&lt;/code&gt;参数语义的更多信息。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;keys&lt;/code&gt;参数可以包含一个空数组。发布空密钥数组的信任域表示该信任域已撤销先前发布的任何密钥。工作负载还可能遇到经处理后不产生可用密钥（即没有 JWK 通过下面描述的验证）的 bundle，并且实际上为空。这可能表明信任域已迁移到客户端不理解的新密钥类型或用途。在这两种情况下，工作负载&lt;strong&gt;必须&lt;/strong&gt;将来自信任域的所有 SVID 视为无效和不可信。&lt;/p&gt;
&lt;h3 id=&#34;jwk&#34;&gt;JWK&lt;/h3&gt;
&lt;p&gt;本节定义了作为 JWK 集合一部分包含的 JWK 元素的高级要求。JWK 元素表示单个密码密钥，用于对单个类型的 SVID 进行身份验证。虽然安全使用 JWK 的确切要求因 SVID 类型而异，但在本节中我们概述了一些顶级要求。SVID 规范必须为&lt;code&gt;use&lt;/code&gt;参数（参见下面的&lt;code&gt;Public Key Use&lt;/code&gt;节）定义适当的值，并且可以根据需要对其 JWK 元素设置进一步的要求或限制。&lt;/p&gt;
&lt;p&gt;实现者&lt;strong&gt;不应&lt;/strong&gt;包含在此处或相应的 SVID 规范中未定义的参数。&lt;/p&gt;
&lt;h3 id=&#34;密钥类型&#34;&gt;密钥类型&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;kty&lt;/code&gt; 参数必须设置，并且其行为遵循 RFC 7517 的 Section 4.1。遇到未知密钥类型的客户端必须忽略整个 JWK 元素。&lt;/p&gt;
&lt;h3 id=&#34;公钥用途&#34;&gt;公钥用途&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;use&lt;/code&gt; 参数必须设置。其值表示其具有权威性的身份文档（或 SVID）的类型。截至本文撰写时，仅支持两种 SVID 类型：&lt;code&gt;x509-svid&lt;/code&gt; 和 &lt;code&gt;jwt-svid&lt;/code&gt;。值区分大小写。有关 &lt;code&gt;use&lt;/code&gt; 值的更多信息，请参见相应的 SVID 规范。遇到缺少 &lt;code&gt;use&lt;/code&gt; 参数或未知 &lt;code&gt;use&lt;/code&gt; 值的客户端必须忽略整个 JWK 元素。&lt;/p&gt;
&lt;h2 id=&#34;安全注意事项&#34;&gt;安全注意事项&lt;/h2&gt;
&lt;p&gt;本节概述了在实施和部署 SPIFFE 控制平面时应考虑的与安全相关的注意事项。&lt;/p&gt;
&lt;h3 id=&#34;spiffe-bundle-刷新提示&#34;&gt;SPIFFE Bundle 刷新提示&lt;/h3&gt;
&lt;p&gt;SPIFFE Bundle 包括一个可选的 &lt;code&gt;refresh_hint&lt;/code&gt; 字段，用于指示消费者应尝试刷新其 Bundle 副本的频率。这个值对密钥的轮换速度有明显的影响，但它也影响了密钥的撤销速度。应该仔细选择刷新提示值。&lt;/p&gt;
&lt;p&gt;由于此字段不是必需的，因此可能会遇到没有设置 &lt;code&gt;refresh_hint&lt;/code&gt; 的 SPIFFE Bundle。在这种情况下，客户端可以通过检查 SVID 有效期来使用合适的间隔。应该认识到，省略 &lt;code&gt;refresh_hint&lt;/code&gt; 可能会影响信任域迅速撤销已被损坏密钥的能力。客户端应该默认使用相对较低（例如五分钟）的刷新间隔，以便及时获取更新的信任 Bundle。&lt;/p&gt;
&lt;h3 id=&#34;在信任域之间重用加密密钥&#34;&gt;在信任域之间重用加密密钥&lt;/h3&gt;
&lt;p&gt;本规范不鼓励在信任域之间共享加密密钥，因为这种做法会降低信任域的隔离性并引入额外的安全挑战。当一个根密钥在多个信任域之间共享时，认证和授权实现必须仔细检查标识的信任域名组件，并且信任域名组件在授权策略中必须易于表达和习惯性地表达。&lt;/p&gt;
&lt;p&gt;假设一个天真的实现导入（即完全信任）一个特定的根密钥，并且认证系统被配置为认证链到受信任根密钥的任何 SVID 的 SPIFFE 身份。如果天真的实现未配置为仅信任特定的信任域，则任何信任域中发行的标识都可以被认证（只要 SVID 链接到受信任的根密钥）。&lt;/p&gt;
&lt;p&gt;继续上述例子，其中天真的实现导入了特定的 CA 证书，假设认证未区分信任域并且接受链到受信任根密钥的任何 SVID。然后，授权系统将只授权特定的信任域。换句话说，授权策略需要明确配置以检查 SVID 的信任域名组件。这里的安全关注点是天真的授权实现可能盲目地相信认证系统已过滤掉不受信任的信任域。&lt;/p&gt;
&lt;p&gt;总之，安全性的最佳实践是在信任域和根密钥之间维持一对一的映射，以减少细微（但灾难性的）认证和授权实现错误。重新使用跨信任域的根密钥的系统应确保（a）SVID 发行系统（例如 CA）在发行 SVID 前正确实现授权检查，并且（b）依赖方（即使用 SVID 的系统）正确实现强大的认证和授权系统，能够区分多个信任域。&lt;/p&gt;
&lt;h2 id=&#34;附录-a-spiffe-bundle-示例&#34;&gt;附录 A. SPIFFE Bundle 示例&lt;/h2&gt;
&lt;p&gt;在下面的示例中，我们为名为&lt;code&gt;example.com&lt;/code&gt;的信任域配置了初始的 SPIFFE Bundle，并演示了在根密钥轮换期间如何更新 Bundle。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;example.com&lt;/code&gt;信任域的初始 X.509 CA 证书：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; Certificate #1:
     Data:
         Version: 3 (0x2)
         Serial Number:
             df:d0:ad:fd:32:9f:b8:15:76:f5:d4:b9:e3:be:b5:a7
     Signature Algorithm: sha256WithRSAEncryption
         Issuer: O = example.com
         Validity
             Not Before: Jan  1 08:00:45 2019 GMT
             Not After : Apr  1 08:00:45 2019 GMT
         Subject: O = example.com
         X509v3 extensions:
             X509v3 Key Usage: critical
                 Certificate Sign
             X509v3 Basic Constraints: critical
                 CA:TRUE
             X509v3 Subject Alternative Name:
                 URI:spiffe://example.com/
 [...]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;请注意以下事项：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;证书是自签名的（颁发者和主题相同）；&lt;/li&gt;
&lt;li&gt;证书的 CA 标志设置为 true；&lt;/li&gt;
&lt;li&gt;证书是 SVID（具有 spiffe URI SAN）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;example.com&lt;/code&gt;的相应信任 Bundle：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; Trust bundle #1 for example.com:
 {
         &amp;#34;spiffe_sequence&amp;#34;: 1,
         &amp;#34;spiffe_refresh_hint&amp;#34;: 2419200,
         &amp;#34;keys&amp;#34;: [
                 {
                         &amp;#34;kty&amp;#34;: &amp;#34;RSA&amp;#34;,
                         &amp;#34;use&amp;#34;: &amp;#34;x509-svid&amp;#34;,
                         &amp;#34;x5c&amp;#34;: [&amp;#34;&amp;lt;base64 DER encoding of Certificate #1&amp;gt;&amp;#34;],
                         &amp;#34;n&amp;#34;: &amp;#34;&amp;lt;base64urlUint-encoded value&amp;gt;&amp;#34;,
                         &amp;#34;e&amp;#34;: &amp;#34;AQAB&amp;#34;
                 }
         ]
 }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上述信任 Bundle 是第 1 个版本，如&lt;code&gt;spiffe_sequence&lt;/code&gt;字段所示，并且指示客户端应该每 2419200 秒（或 28 天）轮询更新 Bundle。请注意，&lt;code&gt;x5c&lt;/code&gt;参数包含了基于 RFC7517 Section 4.7 中所指定的 base64 编码的 DER 证书。密钥特定值（例如&lt;code&gt;n&lt;/code&gt;和&lt;code&gt;e&lt;/code&gt;）的编码方法在 RFC7518 Section 6 中有描述。&lt;/p&gt;
&lt;p&gt;为了准备&lt;code&gt;example.com&lt;/code&gt;的 CA 证书的过期，生成了一个替换证书，并将其添加到信任 Bundle：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; Certificate #2:
     Data:
         Version: 3 (0x2)
         Serial Number:
             a4:dc:5f:05:8a:a2:bf:88:9d:a4:fa:1e:9a:a5:db:74
     Signature Algorithm: sha256WithRSAEncryption
         Issuer: O = example.com
         Validity
             Not Before: Feb  15 08:00:45 2019 GMT
             Not After : Jul  1 08:00:45 2019 GMT
         Subject: O = example.com
         X509v3 extensions:
             X509v3 Key Usage: critical
                 Certificate Sign
             X509v3 Basic Constraints: critical
                 CA:TRUE
             X509v3 Subject Alternative Name:
                 URI:spiffe://example.com/
 [...]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在 2 月 15 日发布的&lt;code&gt;example.com&lt;/code&gt;的更新后的信任 Bundle：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; Trust bundle #2 for example.com:
 {
         &amp;#34;spiffe_sequence&amp;#34;: 2,
         &amp;#34;spiffe_refresh_hint&amp;#34;: 2419200,
         &amp;#34;keys&amp;#34;: [
                 {
                         &amp;#34;kty&amp;#34;: “RSA”,
                         &amp;#34;use&amp;#34;: &amp;#34;x509-svid&amp;#34;,
                         &amp;#34;x5c&amp;#34;: [&amp;#34;&amp;lt;base64 DER encoding of Certificate #1&amp;gt;&amp;#34;],
                         &amp;#34;n&amp;#34;: &amp;#34;&amp;lt;base64urlUint-encoded value&amp;gt;&amp;#34;,
                         &amp;#34;e&amp;#34;: &amp;#34;AQAB&amp;#34;
                 },
                 {
                         &amp;#34;kty&amp;#34;: “RSA”,
                         &amp;#34;use&amp;#34;: &amp;#34;x509-svid&amp;#34;,
                         &amp;#34;x5c&amp;#34;: [&amp;#34;&amp;lt;base64 DER encoding of Certificate #2&amp;gt;&amp;#34;],
                         &amp;#34;n&amp;#34;: &amp;#34;&amp;lt;base64urlUint-encoded value&amp;gt;&amp;#34;,
                         &amp;#34;e&amp;#34;: &amp;#34;AQAB&amp;#34;
                 }
         ]
 }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在 Bundle #2 中，请注意&lt;code&gt;spiffe_sequence&lt;/code&gt;参数已经增加，并添加了&lt;code&gt;example.com&lt;/code&gt;的第二个根证书。一旦发布并分发了这个新的信任 Bundle，验证器将接受由原始根证书或替换根证书签名的 SVID。通过提前发布替换证书，有效器有充分的机会刷新&lt;code&gt;example.com&lt;/code&gt;的信任 Bundle 并了解即将到期的替换证书。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SPIFFE 联邦</title>
      <link>https://lib.jimmysong.io/spiffe-and-spire/standard/spiffe-federation/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/spiffe-and-spire/standard/spiffe-federation/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;SPIFFE 规范定义了建立一个平台无关的工作负载身份框架所需的文档和接口，该框架能够在不需要实现身份转换或凭证交换逻辑的情况下连接不同域中的系统。它们定义了一个“&lt;a href=&#34;https://github.com/spiffe/spiffe/blob/master/standards/SPIFFE-ID.md#21-trust-domain&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;信任域&lt;/a&gt;”，它作为一个身份命名空间。&lt;/p&gt;
&lt;p&gt;SPIFFE 的本质是分散的。每个信任域都根据自己的授权行事，与驻留在其他信任域中的系统在管理上是隔离的。虽然信任域划定了行政和/或安全域，但核心的 SPIFFE 用例是在需要时跨越这些边界进行通信。因此，有必要定义一种机制，使实体可以被引入到外部信任域中，从而允许其验证由“其他”SPIFFE 授权机构颁发的凭证，并允许一个信任域中的工作负载安全地验证一个外部信任域中的工作负载。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/spiffe/spiffe/blob/master/standards/SPIFFE_Trust_Domain_and_Bundle.md#3-spiffe-bundles&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIFFE 包&lt;/a&gt;是一个包含验证特定信任域凭证所需的公钥材料的资源。本文档介绍了一种规范，用于安全地获取 SPIFFE 包，以便验证外部机构颁发的身份。其中包括有关如何提供 SPIFFE 包、如何检索 SPIFFE 包以及如何验证提供它们的端点的信息。&lt;/p&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;SPIFFE 联邦使得在信任域之间验证身份凭证 (SVIDs) 成为可能。具体来说，它是获取验证来自不同信任域颁发的 SVIDs 所需的 SPIFFE 包的行为，并将这些包提供给执行验证的工作负载。&lt;/p&gt;
&lt;p&gt;为了验证来自一个信任域的 SVIDs，必须拥有该信任域的包。因此，实现 SPIFFE 联邦需要在信任域之间交换 SPIFFE 包。这种交换应该定期发生，以允许信任域包的内容随时间变化。&lt;/p&gt;
&lt;p&gt;为了实现这一点，SPIFFE 联邦定义了一个“包端点”，它是一个 URL，用于为特定的信任域提供 SPIFFE 包。还定义了一组“端点配置文件”，它们指定了包端点服务器和客户端之间使用的协议和身份验证语义。最后，本文档进一步指定了包端点客户端和服务器的行为，以及联邦关系的管理和生成的包数据。&lt;/p&gt;
&lt;h2 id=&#34;目标用例&#34;&gt;目标用例&lt;/h2&gt;
&lt;p&gt;最终，SPIFFE 联邦使得工作负载能够对其他信任域中的对等方进行身份验证。这个功能对于支持各种用例至关重要，但我们希望重点关注三个核心用例。&lt;/p&gt;
&lt;p&gt;SPIFFE 信任域经常用于将同一公司或组织中不同信任级别的环境进行分割。例如，可以在暂存和生产环境之间、PCI 和非 PCI 环境之间进行分割。在这些情况下，每个域中使用的 SPIFFE 部署共享一个共同的管理机构，并且很可能由相同的实现支持。这是一个重要的区别，因为它意味着不同的部署可以就某些事情达成一致（例如命名方案），并且每个部署的安全姿态可以被其他部署了解和理解。&lt;/p&gt;
&lt;p&gt;其次，SPIFFE 联邦也被用于在不同公司或组织之间的信任域之间进行联邦。这种情况与第一种情况相似，我们正在对 SPIFFE 部署进行联邦，但由于可能存在的实现和管理差异，协调通常仅限于在此处描述的 SPIFFE 联邦协议中交换的数据。&lt;/p&gt;
&lt;p&gt;最后，SPIFFE 联邦还可以为尚未部署成熟 SPIFFE 控制平面的客户端提供用例。例如，托管产品可能希望使用客户端的 SPIFFE 身份对其客户进行身份验证，而无需内部实现或部署 SPIFFE。这可以通过允许工作负载直接获取客户端的信任域绑定来实现，以便对其调用者进行身份验证，从而避免了承诺部署完整的 SPIFFE 的需求。&lt;/p&gt;
&lt;h2 id=&#34;spiffe-bundle-端点&#34;&gt;SPIFFE Bundle 端点&lt;/h2&gt;
&lt;p&gt;SPIFFE Bundle 端点是一个资源（由 URL 表示），用于提供一个信任域的 SPIFFE Bundle 的副本。SPIFFE 控制平面可以同时暴露和使用这些端点，以便在它们之间传输 bundle，从而实现联邦。&lt;/p&gt;
&lt;p&gt;SPIFFE Bundle 端点的语义类似于 OpenID Connect 规范中定义的&lt;code&gt;jwks_uri&lt;/code&gt;机制，因为 bundle 包含了一个或多个用于在信任域内证明身份的公共加密密钥。Bundle 端点是一个 HTTPS URL，对 HTTP GET 请求做出 SPIFFE bundle 的响应。&lt;/p&gt;
&lt;h3 id=&#34;添加和删除密钥&#34;&gt;添加和删除密钥&lt;/h3&gt;
&lt;p&gt;信任域的操作者可以根据需要（例如，作为内部密钥轮换过程的一部分）引入或删除用于颁发 SVID 的密钥。在添加新密钥时，应提前发布包含密钥的更新信任捆绑包到捆绑包端点，以便外部信任域有机会检索和内部传播新捆绑包内容；建议提前时间为捆绑包的&lt;code&gt;spiffe_refresh_hint&lt;/code&gt;的 3-5 倍。至少，在使用密钥颁发 SVID 之前，新密钥必须发布到捆绑包端点。&lt;/p&gt;
&lt;p&gt;当信任域不再颁发来自这些密钥的活动有效 SVID 时，应从信任捆绑包中删除已弃用的密钥。如果在将密钥添加到捆绑包中或从捆绑包中删除密钥时不遵循这些建议，可能会导致暂时的跨域身份验证失败。&lt;/p&gt;
&lt;p&gt;更新信任捆绑包的要求不适用于仅用于内部使用的颁发 SVID 的密钥。&lt;/p&gt;
&lt;p&gt;应定期轮询捆绑包端点以获取更新，因为其内容预计会随时间&lt;a href=&#34;https://github.com/spiffe/spiffe/blob/master/standards/SPIFFE_Trust_Domain_and_Bundle.md#appendix-a-spiffe-bundle-example&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;更改&lt;/a&gt; - 常见的密钥有效期通常为几周甚至几天。客户端应以与捆绑包的&lt;code&gt;spiffe_refresh_hint&lt;/code&gt;值相等的频率轮询。如果未设置，应适用合理低的默认值 - 建议为五分钟。&lt;/p&gt;
&lt;h3 id=&#34;管理获取的-bundle&#34;&gt;管理获取的 Bundle&lt;/h3&gt;
&lt;p&gt;Bundle 终端的客户端应在每次检索到 Bundle 时存储最新的 SPIFFE Bundle。当比较两个 Trust Bundle 的新鲜度或顺序时，应使用 Trust Bundle 的序列号字段。如果 Trust Bundle 省略了序列号，操作员应将最近检索到的 Bundle 视为最新的。&lt;/p&gt;
&lt;p&gt;操作员可以随时在外部信任域中本地更新 SPIFFE Bundle。在这种情况下，本地更新的 Bundle 版本将被视为最新版本，直到被后续的刷新替换。&lt;/p&gt;
&lt;p&gt;不同信任域的 Bundle 内容不得合并为单个更大的 Bundle。这样做将使一个信任域能够在验证器的眼中伪造属于另一个信任域的身份。因此，非常重要的是确保从外部信任域接收的 Bundle 保持清晰可辨，并明确反映它们所属的信任域名称。有关更多信息，请参阅安全注意事项部分。&lt;/p&gt;
&lt;h3 id=&#34;终端地址的稳定性&#34;&gt;终端地址的稳定性&lt;/h3&gt;
&lt;p&gt;一旦外部信任域开始依赖于特定的终端 URL，将所有终端的客户端迁移到替代终端 URL 是一个复杂且容易出错的过程。因此，最安全的做法是优先选择稳定的终端 URL。&lt;/p&gt;
&lt;h2 id=&#34;spiffe-bundle-终端的提供和使用&#34;&gt;SPIFFE Bundle 终端的提供和使用&lt;/h2&gt;
&lt;p&gt;本规范定义了两种基于 HTTPS 的 SPIFFE Bundle 终端服务器支持的配置文件。其中一种依赖于使用 Web PKI 对终端进行身份验证，另一种则利用 SPIFFE 身份验证。SPIFFE Bundle 终端客户端必须同时支持这两种配置文件，而 SPIFFE Bundle 终端服务器必须至少支持其中一种。&lt;/p&gt;
&lt;p&gt;支持基于 TLS 的配置文件（例如&lt;code&gt;https_web&lt;/code&gt;或&lt;code&gt;https_spiffe&lt;/code&gt;）的 Bundle 终端服务器必须遵守&lt;a href=&#34;https://wiki.mozilla.org/Security/Server_Side_TLS#Intermediate_compatibility_.28recommended.29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mozilla 中间兼容性&lt;/a&gt;要求，除非使用配置文件另有规定。&lt;/p&gt;
&lt;h3 id=&#34;端点参数&#34;&gt;端点参数&lt;/h3&gt;
&lt;p&gt;在从 SPIFFE 捆绑端点检索捆绑之前，客户端必须配置以下三个参数：（1）SPIFFE 捆绑端点的 URL，（2）端点配置文件类型，以及（3）与捆绑端点关联的信任域名称。前两个参数指示捆绑端点的位置和如何进行身份验证。由于信任捆绑不包含信任域名称，客户端使用第三个参数将已下载的捆绑与特定的信任域名称关联起来。特定的端点配置文件（例如&lt;code&gt;https_spiffe&lt;/code&gt;，如下所述）可以定义其他强制的配置参数。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Bundle Endpoint URL:		&amp;#34;&amp;lt;https://example.com/production/bundle.json&amp;gt;&amp;#34;
Bundle Endpoint Profile:	&amp;#34;https_web&amp;#34;
Trust Domain:			&amp;#34;prod.example.com&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;图 1：用于信任域&lt;a href=&#34;http://prod.example.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;prod.example.com&lt;/a&gt;的示例 SPIFFE 捆绑端点配置。管理员通过捆绑端点配置来检索外部信任捆绑。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;当控制平面将信任捆绑分发给工作负载时，必须通信信任域名称和信任捆绑之间的关联。有关这些参数的敏感性，请参见安全注意事项部分。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/spiffe_bundle_distribution.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;em&gt;图 2：在检索到外部 SPIFFE 信任捆绑后，控制平面将信任域名称和相应的捆绑分发给内部工作负载。工作负载使用此配置来验证外部信任域中的身份。有关信任捆绑内容的详细信息，请参见&lt;a href=&#34;https://github.com/spiffe/spiffe/blob/master/standards/SPIFFE_Trust_Domain_and_Bundle.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIFFE 信任域和捆绑&lt;/a&gt; ，特别是&lt;a href=&#34;https://github.com/spiffe/spiffe/blob/master/standards/SPIFFE_Trust_Domain_and_Bundle.md#4-spiffe-bundle-format&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIFFE 捆绑格式&lt;/a&gt;和&lt;a href=&#34;https://github.com/spiffe/spiffe/blob/master/standards/SPIFFE_Trust_Domain_and_Bundle.md#appendix-a-spiffe-bundle-example&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIFFE 捆绑示例&lt;/a&gt;部分。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;本节中的要求适用于所有 SPIFFE 捆绑端点服务器和客户端。个别的 SPIFFE 捆绑端点配置文件可能会添加其他要求。&lt;/p&gt;
&lt;h3 id=&#34;端点配置文件&#34;&gt;端点配置文件&lt;/h3&gt;
&lt;p&gt;端点配置文件描述了在提供或使用捆绑端点时应使用的传输协议和身份验证方法。&lt;/p&gt;
&lt;p&gt;以下各节描述了受支持的捆绑端点配置文件。&lt;/p&gt;
&lt;h3 id=&#34;web-pkihttps_web&#34;&gt;Web PKI（&lt;code&gt;https_web&lt;/code&gt;）&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;https_web&lt;/code&gt;配置文件利用公信任的证书颁发机构提供了一种低摩擦的方式来配置 SPIFFE 联邦。当访问网页时，它的行为与大多数人熟悉的“https”URL 完全相同。在此配置文件中，捆绑点服务器使用由公共 CA 颁发的证书，无需额外的客户端配置；使用&lt;code&gt;https_web&lt;/code&gt;配置文件类型的端点使用通常安装在现代操作系统中的相同公共 CA 证书进行身份验证。&lt;/p&gt;
&lt;p&gt;有关使用公共证书颁发机构的更多信息，请参见安全注意事项部分。&lt;/p&gt;
&lt;h3 id=&#34;端点-url-要求&#34;&gt;端点 URL 要求&lt;/h3&gt;
&lt;p&gt;使用&lt;code&gt;https_web&lt;/code&gt;的捆绑点 URL 必须将方案设置为&lt;code&gt;https&lt;/code&gt;，并且在授权组件中不能包括用户信息。此规范不限制 URL 的其他组件（由&lt;a href=&#34;https://tools.ietf.org/html/rfc3986#section-3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 3986 第 3 节&lt;/a&gt;定义）。&lt;/p&gt;
&lt;p&gt;例如，URL &lt;code&gt;https://host.example.com/trust_domain&lt;/code&gt; 是 &lt;code&gt;https_web&lt;/code&gt; 配置文件类型的有效 SPIFFE 捆绑点 URL。&lt;/p&gt;
&lt;h3 id=&#34;端点参数-1&#34;&gt;端点参数&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;https_web&lt;/code&gt;配置文件在功能上不需要任何额外的参数，除了每个配置文件都需要的参数（即信任域名、配置文件类型和端点 URL）。&lt;/p&gt;
&lt;h3 id=&#34;提供-bundle-端点&#34;&gt;提供 Bundle 端点&lt;/h3&gt;
&lt;p&gt;支持&lt;code&gt;https_web&lt;/code&gt;传输类型的 SPIFFE bundle 端点服务器使用标准的 TLS 保护的 HTTP（即 HTTPS）。所使用的服务器证书应由公共证书颁发机构（根据 CA/Browser 论坛的成员名单定义）颁发，并且必须将端点的 DNS 名称或 IP 地址作为 X.509 主题备用名称（或通用名称）包含在内。&lt;/p&gt;
&lt;p&gt;作为互操作性问题，服务器不得要求对访问 bundle 端点进行客户端身份验证；这包括传输层（例如客户端证书）和 HTTP 层（例如身份验证标头）身份验证方案。&lt;/p&gt;
&lt;p&gt;在收到正确路径的 HTTP GET 请求后，bundle 端点服务器必须回复最新版本的可用 SPIFFE bundle。响应必须以 UTF-8 编码，并应在响应上设置&lt;code&gt;Content-Type&lt;/code&gt;标头为&lt;code&gt;application/json&lt;/code&gt;。此规范不限制提供 SPIFFE bundle 的路径。&lt;/p&gt;
&lt;p&gt;如果请求的 bundle 的授权机构已经更改，bundle 端点服务器可以使用 HTTP 重定向（根据&lt;a href=&#34;https://tools.ietf.org/html/rfc7231#section-6.4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 7231 第 6.4 节&lt;/a&gt;定义）进行响应。重定向的目标 URL 也必须是符合此配置文件中定义的有效的 bundle 端点 URL。服务器应使用临时重定向；重定向的支持是为了操作考虑（例如通过 CDN 提供 bundle），而不是作为永久迁移 bundle 端点 URL 的手段。有关详细信息，请参阅安全考虑事项。&lt;/p&gt;
&lt;h3 id=&#34;web-pkihttps_web-1&#34;&gt;Web PKI（&lt;code&gt;https_web&lt;/code&gt;）&lt;/h3&gt;
&lt;h3 id=&#34;提供-bundle-端点-1&#34;&gt;提供 Bundle 端点&lt;/h3&gt;
&lt;p&gt;支持&lt;code&gt;https_web&lt;/code&gt;传输类型的 SPIFFE bundle 端点服务器使用标准的 TLS 保护的 HTTP（即 HTTPS）。所使用的服务器证书应由公共证书颁发机构（根据 CA/Browser 论坛的成员名单定义）颁发，并且必须将端点的 DNS 名称或 IP 地址作为 X.509 主题备用名称（或通用名称）包含在内。&lt;/p&gt;
&lt;p&gt;作为互操作性问题，服务器不得要求对访问 bundle 端点进行客户端身份验证；这包括传输层（例如客户端证书）和 HTTP 层（例如身份验证标头）身份验证方案。&lt;/p&gt;
&lt;p&gt;在收到正确路径的 HTTP GET 请求后，bundle 端点服务器必须回复最新版本的可用 SPIFFE bundle。响应必须以 UTF-8 编码，并应在响应上设置&lt;code&gt;Content-Type&lt;/code&gt;标头为&lt;code&gt;application/json&lt;/code&gt;。此规范不限制提供 SPIFFE bundle 的路径。&lt;/p&gt;
&lt;p&gt;如果请求的 bundle 的授权机构已经更改，bundle 端点服务器可以使用 HTTP 重定向（根据&lt;a href=&#34;https://tools.ietf.org/html/rfc7231#section-6.4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 7231 第 6.4 节&lt;/a&gt;定义）进行响应。重定向的目标 URL 也必须是符合此配置文件中定义的有效的 bundle 端点 URL。服务器应使用临时重定向；重定向的支持是为了操作考虑（例如通过 CDN 提供 bundle），而不是作为永久迁移 bundle 端点 URL 的手段。有关详细信息，请参阅安全考虑事项。&lt;/p&gt;
&lt;h3 id=&#34;使用-bundle-终点&#34;&gt;使用 Bundle 终点&lt;/h3&gt;
&lt;p&gt;当与&lt;code&gt;https_web&lt;/code&gt; bundle 终点进行交互时，SPIFFE bundle 终点客户端使用标准的 TLS 保护的 HTTP（即 HTTPS）。在连接到终点时，必须根据&lt;a href=&#34;https://tools.ietf.org/html/rfc6125&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 6125&lt;/a&gt;验证服务器证书。总结该文档，服务器证书必须由本地信任的证书颁发机构签发，且必须包含与配置的终点 URL 的主机组件匹配的 X.509 主体替代名称（或公共名称）。&lt;/p&gt;
&lt;p&gt;在建立与 bundle 终点的 TLS 连接并验证呈现的服务器证书后，客户端发出终点 URL 指定的 HTTP GET 请求。响应的正文是一个 SPIFFE bundle。在检索信任 bundle 之前，客户端必须知道终点 URL 代表的信任域的名称，最好通过显式配置；有关详细信息，请参阅安全注意事项部分。&lt;/p&gt;
&lt;p&gt;如果终点服务器具有 HTTP 重定向功能（如&lt;a href=&#34;https://tools.ietf.org/html/rfc7231#section-6.4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 7231 第 6.4 节&lt;/a&gt;定义的），则 bundle 终点服务器可以响应 HTTP 重定向。如果 URL 满足有效 bundle 终点 URL 的所有要求，bundle 终点客户端应遵循重定向。连接到新 URL 时，必须应用与连接到原始 URL 相同的 TLS 注意事项。bundle 终点客户端应使用配置的终点 URL 进行每个 bundle 刷新，并不应永久存储位置以供将来获取。有关详细信息，请参阅安全注意事项。&lt;/p&gt;
&lt;h3 id=&#34;spiffe-身份验证https_spiffe&#34;&gt;SPIFFE 身份验证（&lt;code&gt;https_spiffe&lt;/code&gt;）&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;https_spiffe&lt;/code&gt;配置文件使用由 SPIFFE 信任域（而不是由公共证书颁发机构签发的证书）颁发的 X509-SVID。该配置文件允许 bundle 终点避免使用网络定位器作为服务器标识的一种形式，并且通过标准 SPIFFE 机制支持自动根 CA 轮换和吊销。&lt;/p&gt;
&lt;p&gt;除了所有配置文件所需的终点参数之外，&lt;code&gt;https_spiffe&lt;/code&gt;配置文件还需要其他终点客户端参数，如下所述。&lt;/p&gt;
&lt;h3 id=&#34;终点-url-要求&#34;&gt;终点 URL 要求&lt;/h3&gt;
&lt;p&gt;使用&lt;code&gt;https_spiffe&lt;/code&gt;的 bundle 终点 URL 的方案必须设置为&lt;code&gt;https&lt;/code&gt;，并且在授权组件中不能包含用户信息。此规范不限制 URL 的其他组件（如&lt;a href=&#34;https://tools.ietf.org/html/rfc3986#section-3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 3986 第 3 节&lt;/a&gt;定义）。&lt;/p&gt;
&lt;p&gt;例如，URL &lt;code&gt;https://host.example.com/trust_domain&lt;/code&gt; 是&lt;code&gt;https_spiffe&lt;/code&gt;配置文件类型的有效 SPIFFE bundle 终点 URL。&lt;/p&gt;
&lt;h3 id=&#34;终端参数&#34;&gt;终端参数&lt;/h3&gt;
&lt;p&gt;使用&lt;code&gt;https_spiffe&lt;/code&gt;配置文件的终端终端客户端必须配置终端终端服务器的 SPIFFE ID 以及获取终端终端服务器信任域的信任终端终端的安全方法。&lt;strong&gt;自助终端终端&lt;/strong&gt;是指终端终端服务器的 SPIFFE ID 与获取的终端终端相同信任域中。配置的终端终端终端可能是自助终端终端或非自助终端终端。&lt;/p&gt;
&lt;p&gt;如果终端是自助终端终端，则客户端需要配置一个最新的终端以启动联邦关系。客户端必须支持使用&lt;a href=&#34;https://github.com/spiffe/spiffe/blob/master/standards/SPIFFE_Trust_Domain_and_Bundle.md#4-spiffe-bundle-format&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIFFE Bundle 格式&lt;/a&gt;指定终端，并且可以支持其他格式（例如 PEM），前提是它们提供必要的根证书以验证连接。客户端依赖于此配置的终端进行第一次检索，然后存储检索到的终端以验证后续连接。有关详细信息，请参见下面的使用终端终端。&lt;/p&gt;
&lt;p&gt;如果终端不是自助终端终端，则客户端必须单独为终端服务器的信任域进行配置。可以通过以下任何方式配置终端服务器的信任域和终端终端：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;信任域的终端参数，该参数配置客户端使用终端配置文件根据本文档中所述的终端配置进行终端检索。请注意，客户端可以使用任何可用配置文件，并不限于&lt;code&gt;https_spiffe&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;未定义且超出本文档范围的获取或配置终端终端的过程，无论是自动还是静态。有关如何保护此方法的指导，请参见安全注意事项部分。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Bundle Endpoint URL:		&amp;#34;&amp;lt;https://example.com/global/bundle.json&amp;gt;&amp;#34;
Bundle Endpoint Profile:	&amp;#34;https_spiffe&amp;#34;
Trust Domain:			&amp;#34;example.com&amp;#34;
Endpoint SPIFFE ID:		&amp;#34;spiffe://example.com/spiffe-bundle-server&amp;#34;
Endpoint Trust Bundle:		{example.com bundle contents omitted}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;图 3：使用 SPIFFE 身份验证的&lt;code&gt;example.com&lt;/code&gt;信任域的 SPIFFE 捆绑点端点配置示例。在此示例中，捆绑点端点是自助的，并且配置包括捆绑点端点的 SPIFFE ID 和&lt;code&gt;example.com&lt;/code&gt;的信任捆绑，即此 SPIFFE ID 的信任域。此初始捆绑用于对捆绑点端点进行首次连接的身份验证并验证其 SVID。随后对该捆绑点端点的连接使用最新获取的副本进行身份验证。&lt;/em&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Bundle Endpoint URL:		&amp;#34;&amp;lt;https://example.com/production/bundle.json&amp;gt;&amp;#34;
Bundle Endpoint Profile:	&amp;#34;https_spiffe&amp;#34;
Trust Domain:			&amp;#34;prod.example.com&amp;#34;
Endpoint SPIFFE ID:		&amp;#34;spiffe://example.com/spiffe-bundle-server&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;图 4：使用 SPIFFE 身份验证的&lt;code&gt;prod.example.com&lt;/code&gt;信任域的 SPIFFE 捆绑点端点配置示例。在此示例中，捆绑点端点不是自助的：&lt;code&gt;prod.example.com&lt;/code&gt;的信任捆绑可通过具有 SPIFFE ID &lt;code&gt;spiffe://example.com/spiffe-bundle-server&lt;/code&gt;的&lt;code&gt;example.com&lt;/code&gt;获取。通过上述联邦示例已经获取了用于验证&lt;a href=&#34;http://example.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;example.com&lt;/a&gt;的信任捆绑。&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;提供-bundle-端点-2&#34;&gt;提供 Bundle 端点&lt;/h3&gt;
&lt;p&gt;支持&lt;code&gt;https_spiffe&lt;/code&gt;传输类型的 SPIFFE Bundle 端点服务器使用标准的 TLS 保护的 HTTP（即 HTTPS）。服务器证书必须是有效的 X509-SVID。&lt;/p&gt;
&lt;p&gt;作为互操作性的关注点，服务器不得要求客户端进行身份验证以访问 Bundle 端点；包括传输层（例如客户端证书）和 HTTP 层（例如身份验证头）的身份验证方案。&lt;/p&gt;
&lt;p&gt;在收到正确路径的 HTTP GET 请求后，Bundle 端点服务器必须响应最新版本的可用 SPIFFE Bundle。操作员可以选择确切的路径值，并将其作为 Bundle 端点 URL 的一部分显示。Bundle 端点服务器必须使用 UTF-8 编码传输 Bundle，并应在响应中设置&lt;code&gt;Content-Type&lt;/code&gt;头为&lt;code&gt;application/json&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果用于提供所请求 Bundle 的授权发生了变化，Bundle 端点服务器可以使用 HTTP 重定向（如&lt;a href=&#34;https://tools.ietf.org/html/rfc7231#section-6.4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 7231 第 6.4 节&lt;/a&gt;所定义）。重定向的目标 URL 也必须是此配置文件中定义的有效 Bundle 端点 URL，并且新目标呈现的服务器证书必须是具有与原始端点相同的 SPIFFE ID 的有效 X509-SVID。服务器应使用临时重定向；重定向的支持旨在用于运营考虑（例如通过 CDN 提供 Bundle），而不是作为永久迁移 Bundle 端点 URL 的手段。有关更多信息，请参阅安全注意事项。&lt;/p&gt;
&lt;h3 id=&#34;使用-bundle-终端点&#34;&gt;使用 Bundle 终端点&lt;/h3&gt;
&lt;p&gt;SPIFFE bundle 终端点客户端在与&lt;code&gt;https_spiffe&lt;/code&gt; bundle 终端点交互时使用标准的 TLS 保护的 HTTP（即 HTTPS）。在连接到终端点时，必须验证服务器证书是否是提供的 bundle 终端点 SPIFFE ID 的有效 X509-SVID。有关验证 X509-SVID 的信息，请参阅&lt;a href=&#34;https://github.com/spiffe/spiffe/blob/master/standards/X509-SVID.md#5-validation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIFFE X509-SVID&lt;/a&gt;规范。&lt;/p&gt;
&lt;p&gt;自服务 bundle 终端点是指 bundle 终端点服务器的 SPIFFE ID 与正在获取的 bundle 所属的信任域位于同一信任域中。在首次连接到自服务 bundle 终端点时，客户端使用操作员提供的 SPIFFE bundle（通过 bundle 终端点参数）来验证服务器证书。随后的连接必须使用最新的可用 bundle 来验证。这样可以使外部信任域旋转密钥而不中断联邦关系。&lt;/p&gt;
&lt;p&gt;非自服务 bundle 终端点是指 bundle 终端点服务器的 SPIFFE ID 不位于正在获取的 bundle 所属的信任域中。连接到非自服务终端点时，客户端使用与终端点 SPIFFE ID 的信任域对应的最新可用 SPIFFE bundle，该 bundle 可能是直接配置的，也可能是通过另一个联邦关系获取的。&lt;/p&gt;
&lt;p&gt;在与 bundle 终端点建立 TLS 连接并验证呈现的服务器证书之后，客户端发出终端点 URL 指定的 HTTP GET 请求。响应的正文是一个 SPIFFE bundle。在检索信任 bundle 之前，客户端必须知道终端点 URL 所代表的信任域的名称，最好通过显式配置来获取；有关更多信息，请参阅安全注意事项部分。&lt;/p&gt;
&lt;p&gt;终端点可以使用 HTTP 重定向进行响应（如&lt;a href=&#34;https://tools.ietf.org/html/rfc7231#section-6.4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC 7231 第 6.4 节&lt;/a&gt;所定义）。如果 URL 满足有效的 bundle 终端点 URL 的所有要求，则 bundle 终端点客户端应跟随重定向。连接到新 URL 时，必须应用与连接到原始 URL 相同的 TLS 考虑。特别是，必须呈现与最初配置的相同 SPIFFE ID 的有效 X509-SVID。bundle 终端点客户端应该对每个 bundle 刷新使用配置的终端点 URL，并且不应该永久存储用于将来获取的位置。有关更多信息，请参阅安全注意事项。&lt;/p&gt;
&lt;h2 id=&#34;关系生命周期&#34;&gt;关系生命周期&lt;/h2&gt;
&lt;p&gt;本节描述了联邦“关系”的生命周期，包括建立第一个连接、进行持续维护和终止。&lt;/p&gt;
&lt;p&gt;联邦关系是单向的。换句话说，Alice 可以与 Bob 建立关系，但反过来不行。在这种情况下，Alice 能够验证由 Bob 颁发的身份，但 Bob 不知道如何验证由 Alice 颁发的身份。&lt;/p&gt;
&lt;p&gt;为了实现相互身份验证，需要形成两个关系 - 每个方向一个。&lt;/p&gt;
&lt;h3 id=&#34;建立关系&#34;&gt;建立关系&lt;/h3&gt;
&lt;p&gt;如“终端点参数”部分所述，为正确配置联邦关系，所有 bundle 终端点客户端需要至少三个信息：外部信任域名称、其 bundle 终端点 URL 和终端点配置文件。&lt;/p&gt;
&lt;p&gt;bundle 终端点 URL 提供了可以找到外部信任域的 bundle 的地址，而配置文件告知客户端在调用它时应使用哪个协议。配置文件可能需要额外的特定于配置文件的参数。有关如何连接和验证 bundle 终端点的详细信息，请参阅相关的终端点配置文件子部分。&lt;/p&gt;
&lt;p&gt;连接成功建立并接收到 bundle 副本后，将其与其所属的信任域名称一起存储。现在，可以分发 bundle 的内容（例如 CA 证书、JWT 签名密钥等），以验证源自外部信任域的 SVID。&lt;/p&gt;
&lt;p&gt;此分发的确切方式和机制是实现细节，超出了本文档的范围。有关 SPIFFE 感知工作负载如何接收 bundle 更新的更多信息，请参阅&lt;a href=&#34;https://github.com/spiffe/spiffe/blob/master/standards/SPIFFE_Workload_API.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIFFE 工作负载 API&lt;/a&gt;规范。&lt;/p&gt;
&lt;h3 id=&#34;维护关系&#34;&gt;维护关系&lt;/h3&gt;
&lt;p&gt;SPIFFE bundle 终端点客户端应定期轮询 bundle 终端点以获取更新。检测到更新后，存储代表终端点外部信任域的存储的 bundle 将进行更新。然后，将更新的内容分发，以便验证者可以根据需要添加新的密钥并删除撤销的密钥。再次强调，将此更新分发给验证者的确切方法超出了本文档的范围。&lt;/p&gt;
&lt;p&gt;如果轮询 bundle 终端点的尝试失败，bundle 终端点客户端应在下一个轮询间隔重试，而不是立即或强制重试，因为这可能会导致 bundle 终端点服务器过载。如添加和删除密钥部分所讨论的那样，新密钥应足够提前发布，以使错过一两次轮询不会导致跨域身份验证失败。&lt;/p&gt;
&lt;h3 id=&#34;终止关系&#34;&gt;终止关系&lt;/h3&gt;
&lt;p&gt;终止联邦关系就是删除对外信任域的本地副本，停止轮询其信任域终点，并确保验证器也删除了该外部信任域的终点，不再成功验证从该终点呈现的 SVID。&lt;/p&gt;
&lt;p&gt;如果需要重新建立关系，则需要重新开始此生命周期。&lt;/p&gt;
&lt;h3 id=&#34;生命周期图&#34;&gt;生命周期图&lt;/h3&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-生命周期图&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/spiffe_federation_lifecycle.png&#34; alt=&#34;生命周期图&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      生命周期图
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;安全考虑&#34;&gt;安全考虑&lt;/h2&gt;
&lt;p&gt;本节包含与该规范相关的安全信息和观察结果。实施者和用户都应熟悉这些信息。&lt;/p&gt;
&lt;h3 id=&#34;终点参数的分发&#34;&gt;终点参数的分发&lt;/h3&gt;
&lt;p&gt;联邦关系的配置参数，包括信任域名称、终点 URL 和配置文件本身对于篡改是高度敏感的。联邦关系配置的被篡改可能会削弱或完全破坏 SPIFFE 实现所隐含的安全保证。&lt;/p&gt;
&lt;p&gt;以下是一些例子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;篡改信任域名称可以使控制相应终点束端点的一方冒充任意信任域&lt;/li&gt;
&lt;li&gt;篡改终点 URL，特别是与&lt;code&gt;https_web&lt;/code&gt;配置文件结合使用时，攻击者可以发出欺诈性密钥并冒充相应信任域中的任何身份&lt;/li&gt;
&lt;li&gt;篡改终点配置文件可以改变联邦的安全保证，例如用&lt;code&gt;https_spiffe&lt;/code&gt;替换&lt;code&gt;https_web&lt;/code&gt;。如果您的威胁模型包括 Web PKI 的妥协（请另请参阅下面的网络流量拦截部分），则这可能被认为是安全姿态的重大降级。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，控制平面管理员必须谨慎地安全源这些参数并安全地输入它们。终点束配置可以使用各种方法来获取，包括但不限于电子邮件、受 HTTPS 保护的网站、公司内部 wiki 等。无论使用的是哪种特定方法来初始分发终点配置，分发方法都需要抵御在途篡改、未经授权的静止修改以及恶意冒充。例如，电子邮件通常不具备抵御篡改或冒充（即&amp;quot;伪造&amp;quot;电子邮件）的抗性。&lt;/p&gt;
&lt;h3 id=&#34;明确定义的终结点参数&#34;&gt;明确定义的终结点参数&lt;/h3&gt;
&lt;p&gt;每个 SPIFFE 联邦关系至少配置以下参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;信任域名&lt;/li&gt;
&lt;li&gt;终结点 URL&lt;/li&gt;
&lt;li&gt;终结点配置文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;重要的是这三个参数要明确配置，不能从彼此中安全地推断出值。&lt;/p&gt;
&lt;p&gt;例如，人们可能会试图从终结点 URL 的主机部分推断出 SPIFFE 信任域名。这是危险的，因为它可能允许任何可以从特定 DNS 名称提供文件的人断言同名 SPIFFE 信任域的信任根。&lt;/p&gt;
&lt;p&gt;想象一个名为 MyPage（&lt;code&gt;mypage.example.com&lt;/code&gt;）的网络托管公司，它允许客户 Alice 在&lt;code&gt;https://mypage.example.com/alice/&amp;lt;filename&amp;gt;&lt;/code&gt;这样的 URL 上提供网络内容，并且 MyPage 还通过 SPIFFE 联邦与 SPIFFE 信任域名&lt;code&gt;mypage.example.com&lt;/code&gt;运行 API。假设 Alice 与 Bob 建立了 SPIFFE 联邦关系，Bob 也是 MyPage 的客户，Alice 选择从&lt;code&gt;https://mypage.example.com/alice/spiffe-bundle&lt;/code&gt;提供她的信任捆绑包。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-5说明-alicebob-和-mypage-之间关系的图表&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../../images/spiffe_federation_mypage_example.png&#34; alt=&#34;图 5：说明 Alice、Bob 和 MyPage 之间关系的图表。&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 5：说明 Alice、Bob 和 MyPage 之间关系的图表。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;如果 Bob 的控制平面从 URL 中隐式获取信任域名，这将允许 Alice 冒充信任域&lt;code&gt;mypage.example.com&lt;/code&gt;！还值得强调的是，SPIFFE 信任域名不一定是已注册的 DNS 名称，这通常使得这种假设本来就是错误的。在这个例子中，Alice 的信任域名只是&lt;code&gt;alice&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;终结点配置文件也不能从 URL 中安全地推断出。&lt;code&gt;https_web&lt;/code&gt;和&lt;code&gt;https_spiffe&lt;/code&gt;都使用具有相同要求的普通 HTTPS URL。没有安全的方法来区分它们。尝试使用&lt;code&gt;https_web&lt;/code&gt;并回退到&lt;code&gt;https_spiffe&lt;/code&gt;，或者反过来，是不充分的，原因与上述类似：从安全的角度来看，能够在特定的 HTTPS 终结点上托管使用 Web PKI 的文件与能够使用有效的 SPIFFE SVID 托管它是不等价的。&lt;/p&gt;
&lt;h3 id=&#34;保持-信任域名-捆绑包-的绑定&#34;&gt;保持 &lt;code&gt;&amp;lt;信任域名, 捆绑包&amp;gt;&lt;/code&gt; 的绑定&lt;/h3&gt;
&lt;p&gt;在对 SVID 进行身份验证时，验证者必须仅使用与 SPIFFE ID 所属的信任域名相对应的捆绑包。如果我们简单地将所有的捆绑包汇集起来，并且只要某个捆绑包对某个捆绑包有效，就接受一个 SVID，那么信任域之间就可以轻易地冒充对方的身份。换句话说，捆绑包是针对特定信任域的。&lt;/p&gt;
&lt;p&gt;由于捆绑包在信任域和发行捆绑包的终结点之间没有自我描述的特性，且自我发布，因此在存储和传播捆绑包时，需要将 SPIFFE 联邦关系的信任域名和捆绑包终结点之间的绑定转化为信任域名和捆绑包之间的绑定。这要求不同于传统的 Web PKI，传统的 Web PKI 使用单个根证书存储来验证所有证书，而不管实际发行验证的 CA 系统是哪个。&lt;/p&gt;
&lt;h3 id=&#34;捆绑包终结点服务器的可信性&#34;&gt;捆绑包终结点服务器的可信性&lt;/h3&gt;
&lt;p&gt;捆绑包终结点服务器的可信性和完整性对于确保捆绑包所代表的信任域的安全性至关重要。这不仅包括捆绑包终结点服务器本身，还包括其运行的平台以及对其或其平台具有管理控制权的任何实体。&lt;/p&gt;
&lt;p&gt;虽然这个事实可能看起来是不言自明的，但也有一些情况可能没有那么明显。例如，在非自服务捆绑包终结点的情况下，信任域 A 为信任域 B 提供捆绑包，信任域 B 隐式地信任信任域 A 及其管理员提供正确的捆绑包内容。类似地，如果从像 AWS S3 这样的托管平台提供捆绑包，那么代表涉及捆绑包的信任域的运营者隐式地信任 AWS 提供正确的捆绑包内容。&lt;/p&gt;
&lt;p&gt;在选择将提供 SPIFFE 捆绑包的位置时，重要的是考虑涉及的各方的可信性。&lt;/p&gt;
&lt;h3 id=&#34;捆绑包终结点的真实性&#34;&gt;捆绑包终结点的真实性&lt;/h3&gt;
&lt;p&gt;确保捆绑包终结点的真实性至关重要。这一点无法过于强调。本节探讨了确保捆绑包终结点真实性的一些考虑因素。&lt;/p&gt;
&lt;h3 id=&#34;捆绑包终结点-url-重定向&#34;&gt;捆绑包终结点 URL 重定向&lt;/h3&gt;
&lt;p&gt;URL 重定向有两种变体：临时重定向和永久重定向。该规范通过 SHOULD 指示建议服务器只发送临时重定向，并且客户端应将所有重定向视为临时重定向，即使服务器将其标记为永久重定向。&lt;/p&gt;
&lt;p&gt;如果客户端遵循永久重定向，那么永久重定向代表了终结点 URL 配置参数的带内自动重写。这会导致两个相关的安全风险。&lt;/p&gt;
&lt;p&gt;首先，信任域操作员可能会试图使用永久重定向作为迁移终结点 URL 的方法。然而，没有可靠的方法来确保所有客户端都已处理了重定向，并且没有办法确保它们将永久地遵守重定向（例如，通过重启、升级、重新部署等）。如果终结点 URL 转移所有权并且客户端继续从原始终结点 URL 获取捆绑包，那么这些客户端可能会检索到由意外所有者控制的捆绑包。这在使用基于 Web PKI 的方案（如&lt;code&gt;https_web&lt;/code&gt;）时尤其令人担忧，因为新域所有者有权获得公开受信任的与其相关的证书。因此，最安全的做法是选择具有长期稳定性的捆绑包终结点 URL。如果绝对需要 URL 迁移，最好使用首次获取捆绑包终结点配置的外带方法来处理，同时提前公布长期的迁移窗口。&lt;/p&gt;
&lt;p&gt;其次，永久重定向可能被滥用为将短暂的妥协升级为更持久的妥协的机制。由于重定向是自动的，捆绑包终结点客户端操作员可能会忽略这个重定向。&lt;/p&gt;
&lt;p&gt;临时重定向通常由 Web 主机用于操作目的：例如，允许在接收方附近的节点上提供全球稳定的 URL。禁止在 SPIFFE 联邦中使用重定向将从操作员的工具包中删除一个有用的工具。但是，临时重定向确实有安全考虑因素。并非所有的 Web 主机在其安全态势方面都是等价的，这意味着如果发生重定向，操作员可能无法获得预期的安全保证。本规范中对客户端“应该”遵循重定向的建议应该被解释为推荐的默认值：在操作价值和安全价值之间的平衡。依赖 SPIFFE 联邦捆绑包终结点的操作员可能希望禁用重定向，以避免出现意外情况。&lt;/p&gt;
&lt;h3 id=&#34;网络流量拦截&#34;&gt;网络流量拦截&lt;/h3&gt;
&lt;p&gt;虽然所有 SPIFFE 捆绑包终结点配置文件都使用的协议在很大程度上不受网络流量拦截和操纵的风险影响，但重要的是要注意，这并不一定意味着用于发放协议凭证的方案也不受影响。如果 SPIFFE 作为“零信任”解决方案的一部分部署，或者如果操作者的威胁模型中包括网络妥协，则必须特别关注用于发放捆绑包终结点服务器凭证的机制。&lt;/p&gt;
&lt;p&gt;常见的服务器凭证发放方法是通过使用挑战 - 响应机制，其中凭证请求的授权是基于请求者能够回答发送到特定网络地址或 DNS 名称的挑战。ACME 协议就是一个例子，如果希望使用公共证书颁发机构，则应考虑补偿控制措施。特别需要注意的是捆绑包终结点服务器所在的二层网络的安全性。&lt;/p&gt;
&lt;p&gt;最后，应指出，ACME 和公共证书颁发机构基础设施在历史上一直是稳定和可靠的。本节所描述的关注点是几十年的问题，然而，作为一种用于缓解对网络或 DNS 中信任的方式采用 SPIFFE 的操作者可能会发现这种行为令人惊讶。&lt;/p&gt;
&lt;h3 id=&#34;终结点参数&#34;&gt;终结点参数&lt;/h3&gt;
&lt;p&gt;破坏捆绑包终结点的一种方法是篡改终结点参数，无论是在传输中还是在终结点的客户端中以休息形式。修改其他方面真实的终结点参数可能导致降级的安全态势，甚至导致客户端与完全不同的终结点进行通信。请参阅终结点参数的分发部分以获取更多信息。&lt;/p&gt;
&lt;h3 id=&#34;使用-https_spiffe-进行信任链接&#34;&gt;使用 &lt;code&gt;https_spiffe&lt;/code&gt; 进行信任链接&lt;/h3&gt;
&lt;p&gt;在使用 SPIFFE 身份验证时，可以通过验证提供的 X509-SVID 来建立信任捆绑服务器的真实性，客户端可以通过各种方式获取到该信任捆绑。例如，信任域 A 的捆绑可以由信任域 B 中的一个端点提供，而信任域 B 的捆绑可以由信任域 C 中的一个端点提供，依此类推。&lt;/p&gt;
&lt;p&gt;通过这种方式，获取的捆绑通过链式关系与提供捆绑的信任域之间建立了信任。该链式关系最终会终止于以下几种情况之一：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过与自服务信任域的联邦关系&lt;/li&gt;
&lt;li&gt;通过与由 Web PKI 提供的捆绑端点的联邦关系&lt;/li&gt;
&lt;li&gt;在长期静态配置的信任捆绑中&lt;/li&gt;
&lt;li&gt;在本文档范围之外的某个过程中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;正如在 Bundle 端点服务器的可信性一节中所描述的那样，重要的是要理解该方案的安全性取决于链中的每个信任域能够履行其安全保证。链中信任域或捆绑端点服务器的妥协将导致“下一个”信任域的妥协。具有足够强大的网络拦截能力的攻击者可能会以某种方式升级此攻击，以导致链中后续的信任域可能被妥协。因此，通常不鼓励以这种方式形成长链。如果需要，管理员应花时间分析这些链，以确保所有参与的信任域符合其所需的标准。&lt;/p&gt;
&lt;p&gt;最后，应注意到该链中的“链接”是由各个 HTTPS 请求操作（针对链中不同的捆绑端点服务器）形成的，并且这些操作可能在不同的时间发生。SPIFFE 捆绑端点客户端应记录这些 HTTPS 请求操作，并且管理员应注意保留这些日志以备将来进行法医分析（如果有必要）。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>如何在 Istio 中集成 SPIRE</title>
      <link>https://lib.jimmysong.io/blog/istio-spire-integration/</link>
      <pubDate>Mon, 06 Jun 2022 11:00:00 +0800</pubDate>
      <guid>https://lib.jimmysong.io/blog/istio-spire-integration/</guid>
      <description>&lt;h2 id=&#34;编者的话&#34;&gt;编者的话&lt;/h2&gt;
&lt;p&gt;Istio 1.14 版本增加了对 SPIRE 集成的支持，这篇文章将指导你如何在 Istio 中集成 SPIRE。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://spiffe.io/docs/latest/spire-about/spire-concepts/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE&lt;/a&gt; 是 SPIFFE 规范的一个生产就绪的实现，它可以执行节点和工作负载证明，以便安全地将加密身份发给在异构环境中运行的工作负载。通过与 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/configuration/security/secret&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy 的 SDS API&lt;/a&gt; 集成，SPIRE 可以被配置为 Istio 工作负载的加密身份来源。Istio 可以检测到一个 UNIX 域套接字的存在，该套接字在定义的套接字路径上实现了 Envoy SDS API，允许 Envoy 直接从它那里进行通信和获取身份。&lt;/p&gt;
&lt;p&gt;这种与 SPIRE 的集成提供了灵活的认证选项，这是默认的 Istio 身份管理所不具备的，同时利用了 Istio 强大的服务管理。例如，SPIRE 的插件架构能够提供多样化的工作负载认证选项，超越 Istio 提供的 Kubernetes 命名空间和服务账户认证。SPIRE 的节点认证将认证扩展到工作负载运行的物理或虚拟硬件上。&lt;/p&gt;
&lt;p&gt;关于这种 SPIRE 与 Istio 集成的快速演示，请参阅&lt;a href=&#34;https://github.com/istio/istio/tree/release-1.14/samples/security/spire&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;通过 Envoy 的 SDS API 将 SPIRE 作为 CA 进行集成&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;请注意，这个集成需要 1.14 版本的 &lt;code&gt;istioctl&lt;/code&gt; 和数据平面。&lt;/p&gt;
&lt;p&gt;该集成与 Istio 的升级兼容。&lt;/p&gt;
&lt;h2 id=&#34;安装-spire&#34;&gt;安装 SPIRE&lt;/h2&gt;
&lt;h3 id=&#34;选项-1-快速启动&#34;&gt;选项 1: 快速启动&lt;/h3&gt;
&lt;p&gt;Istio 提供了一个基本的安装示例，以快速启动和运行 SPIRE。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -f samples/security/spire/spire-quickstart.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这将把 SPIRE 部署到你的集群中，同时还有两个额外的组件：&lt;a href=&#34;https://github.com/spiffe/spiffe-csi&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIFFE CSI 驱动&lt;/a&gt; —— 用于与整个节点的其他 pod 共享 SPIRE Agent 的 UNIX 域套接字，以及 &lt;a href=&#34;https://github.com/spiffe/spire/tree/main/support/k8s/k8s-workload-registrar&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE Kubernetes 工作负载注册器&lt;/a&gt;，这是一个在 Kubernetes 内执行自动工作负载注册的促进器。参见&lt;a href=&#34;https://istio.io/latest/docs/ops/integrations/spire/#install-istio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;安装 Istio&lt;/a&gt; 以配置 Istio 并与 SPIFFE CSI 驱动集成。&lt;/p&gt;
&lt;h3 id=&#34;选项-2配置一个自定义的-spire-安装&#34;&gt;选项 2：配置一个自定义的 SPIRE 安装&lt;/h3&gt;
&lt;p&gt;请参阅 &lt;a href=&#34;https://spiffe.io/docs/latest/try/getting-started-k8s/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 的 Kubernetes 快速入门指南&lt;/a&gt;，将 SPIRE 部署到 Kubernetes 环境中。请参阅 SPIRE &lt;a href=&#34;https://istio.io/latest/docs/ops/integrations/spire/#spire-ca-integration-prerequisites&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CA 集成先决条件&lt;/a&gt;，了解有关配置 SPIRE 以与 Istio 部署集成的更多信息。&lt;/p&gt;
&lt;h4 id=&#34;spire-ca-集成的先决条件&#34;&gt;SPIRE CA 集成的先决条件&lt;/h4&gt;
&lt;p&gt;将 SPIRE 部署与 Istio 集成，配置 SPIRE：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;访问 &lt;a href=&#34;https://spiffe.io/docs/latest/deploying/spire_agent/#agent-configuration-file&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 代理参考&lt;/a&gt;，配置 SPIRE 代理套接字路径，以匹配 Envoy SDS 定义的套接字路径。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;socket_path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/run/secrets/workload-spiffe-uds/socket&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过部署 &lt;a href=&#34;https://github.com/spiffe/spiffe-csi&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIFFE CSI 驱动&lt;/a&gt;，与节点内的 pod 共享 SPIRE 代理套接字。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;参见&lt;a href=&#34;https://istio.io/latest/docs/ops/integrations/spire/#install-istio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;安装 Istio&lt;/a&gt; 以配置 Istio 与 SPIFFE CSI 驱动集成。&lt;/p&gt;
&lt;p&gt;注意，你必须在将 Istio 安装到你的环境中之前部署 SPIRE，以便 Istio 可以检测到它是一个 CA。&lt;/p&gt;
&lt;h2 id=&#34;安装-istio&#34;&gt;安装 Istio&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://istio.io/latest/docs/setup/getting-started/#download&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;下载 Istio 1.14 + 版本&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在&lt;a href=&#34;https://istio.io/latest/docs/ops/integrations/spire/#install-spire&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;将 SPIRE 部署&lt;/a&gt;到你的环境中，并验证所有的部署都处于 &lt;code&gt;Ready&lt;/code&gt; 状态后，为 Ingress-gateway 以及 istio-proxy 安装 Istio 的定制补丁。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;l&#34;&gt;$ istioctl install --skip-confirmation -f - &amp;lt;&amp;lt;EOF&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;install.istio.io/v1alpha1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;IstioOperator&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio-system&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;profile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meshConfig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;trustDomain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;example.org&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;global&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# This is used to customize the sidecar template&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;sidecarInjectorWebhook&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;templates&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spire&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;          spec:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            containers:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            - name: istio-proxy
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;              volumeMounts:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;              - name: workload-socket
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                mountPath: /run/secrets/workload-spiffe-uds
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                readOnly: true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            volumes:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;              - name: workload-socket
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                csi:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                  driver: &amp;#34;csi.spiffe.io&amp;#34;          &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;components&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ingressGateways&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio-ingressgateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;enabled&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;istio&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ingressgateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;k8s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;overlays&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;apps/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Deployment&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio-ingressgateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;patches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;spec.template.spec.volumes.[name:workload-socket]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;workload-socket&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;csi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;driver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;csi.spiffe.io&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;spec.template.spec.containers.[name:istio-proxy].volumeMounts.[name:workload-socket]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;workload-socket&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mountPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/run/secrets/workload-spiffe-uds&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;readOnly&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;EOF&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这将与 Ingress Gateway 和将被注入工作负载 pod 的 sidecars 共享 &lt;code&gt;spiffe-csi-driver&lt;/code&gt;，允许它们访问 SPIRE Agent 的 UNIX 域套接字。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 &lt;a href=&#34;https://istio.io/latest/docs/setup/additional-setup/sidecar-injection&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;sidecar 注入&lt;/a&gt;，将 &lt;code&gt;istio-proxy&lt;/code&gt; 容器注入到网格内的 pod 中。关于如何将自定义的 &lt;code&gt;spire&lt;/code&gt; 模板应用到 &lt;code&gt;istio-proxy&lt;/code&gt; 中的信息，请参见&lt;a href=&#34;https://istio.io/latest/docs/setup/additional-setup/sidecar-injection/#custom-templates-experimental&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;自定义模板&lt;/a&gt;。这使得 CSI 驱动能够在 sidecar 上安装 UDS。&lt;/p&gt;
&lt;p&gt;检查 Ingress-gateway pod 状态。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl get pods -n istio-system
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NAME                                    READY   STATUS    RESTARTS   AGE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;istio-ingressgateway-5b45864fd4-lgrxs   0/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          17s
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;istiod-989f54d9c-sg7sn                  1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          23s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;只有在 SPIRE 服务器上为它们创建了相应的注册条目时，数据平面容器才会到达 &lt;code&gt;Ready&lt;/code&gt;。然后，Envoy 将能够从 SPIRE 获取加密身份。请参阅&lt;a href=&#34;#register-workloads&#34;&gt;注册工作负载&lt;/a&gt; ，为你的网格中的服务注册条目。&lt;/p&gt;
&lt;h2 id=&#34;register-workloads&#34;&gt;注册工作负载&lt;/h2&gt;
&lt;p&gt;本节介绍在 SPIRE 服务器中注册工作负载的可用选项。&lt;/p&gt;
&lt;h3 id=&#34;选项-1使用-spire-工作负载注册器自动登记&#34;&gt;选项 1：使用 SPIRE 工作负载注册器自动登记&lt;/h3&gt;
&lt;p&gt;通过将 &lt;a href=&#34;https://github.com/spiffe/spire/tree/main/support/k8s/k8s-workload-registrar&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE Kubernetes Workload Registrar&lt;/a&gt; 与 SPIRE 服务器一起部署，每创建一个新的 pod，就会自动注册新的条目。&lt;/p&gt;
&lt;p&gt;请参阅” &lt;a href=&#34;https://istio.io/latest/docs/ops/integrations/spire/#verifying-that-identities-were-created-for-workloads&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;验证身份是否为工作负载创建&lt;/a&gt; &amp;ldquo;，以检查已发布的身份。&lt;/p&gt;
&lt;p&gt;请注意，在&lt;a href=&#34;https://istio.io/latest/docs/ops/integrations/spire/#option-1:-quick-start&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;快速启动&lt;/a&gt;部分使用了 &lt;code&gt;SPIRE工作负载注册器&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;选项-2手动注册&#34;&gt;选项 2：手动注册&lt;/h3&gt;
&lt;p&gt;为了提高工作负载证明的安全稳健性，SPIRE 能够根据不同的参数，针对一组选择器的值进行验证。如果你按照&lt;a href=&#34;https://istio.io/latest/docs/ops/integrations/spire/#option-1:-quick-start&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;快速启动&lt;/a&gt;安装 &lt;code&gt;SPIRE&lt;/code&gt;，则跳过这些步骤，因为它使用自动注册。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;为 Ingress Gateway 生成一个条目，其中有一组选择器，如 pod 名称和 pod UID：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ &lt;span class=&#34;nv&#34;&gt;INGRESS_POD&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;kubectl get pod -l &lt;span class=&#34;nv&#34;&gt;istio&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;ingressgateway -n istio-system -o &lt;span class=&#34;nv&#34;&gt;jsonpath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;{.items[0].metadata.name}&amp;#34;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ &lt;span class=&#34;nv&#34;&gt;INGRESS_POD_UID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;kubectl get pods -n istio-system &lt;span class=&#34;nv&#34;&gt;$INGRESS_POD&lt;/span&gt; -o &lt;span class=&#34;nv&#34;&gt;jsonpath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;{.metadata.uid}&amp;#39;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获取 spire-server pod：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ &lt;span class=&#34;nv&#34;&gt;SPIRE_SERVER_POD&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;kubectl get pod -l &lt;span class=&#34;nv&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;spire-server -n spire -o &lt;span class=&#34;nv&#34;&gt;jsonpath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;{.items[0].metadata.name}&amp;#34;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为节点上运行的 SPIRE 代理注册一个条目。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;l&#34;&gt;$ kubectl exec -n spire $SPIRE_SERVER_POD -- \&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/opt/spire/bin/spire-server entry create \&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;-&lt;span class=&#34;l&#34;&gt;spiffeID spiffe://example.org/ns/spire/sa/spire-agent \&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;-&lt;span class=&#34;l&#34;&gt;selector k8s_psat:cluster:demo-cluster \&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;-&lt;span class=&#34;l&#34;&gt;selector k8s_psat:agent_ns:spire \&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;-&lt;span class=&#34;l&#34;&gt;selector k8s_psat:agent_sa:spire-agent \&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;-&lt;span class=&#34;l&#34;&gt;node -socketPath /run/spire/sockets/server.sock&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Entry ID         &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;d38c88d0-7d7a-4957-933c-361a0a3b039c&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;SPIFFE ID        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;spiffe://example.org/ns/spire/sa/spire-agent&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Parent ID        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;spiffe://example.org/spire/server&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Revision         &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;TTL              &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Selector         &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;k8s_psat:agent_ns:spire&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Selector         &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;k8s_psat:agent_sa:spire-agent&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Selector         &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;k8s_psat:cluster:demo-cluster&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为 Ingress-gateway pod 注册一个条目。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -n spire &lt;span class=&#34;nv&#34;&gt;$SPIRE_SERVER_POD&lt;/span&gt; -- &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;/opt/spire/bin/spire-server entry create &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -spiffeID spiffe://example.org/ns/istio-system/sa/istio-ingressgateway-service-account &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -parentID spiffe://example.org/ns/spire/sa/spire-agent &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -selector k8s:sa:istio-ingressgateway-service-account &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -selector k8s:ns:istio-system &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -selector k8s:pod-uid:&lt;span class=&#34;nv&#34;&gt;$INGRESS_POD_UID&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -dns &lt;span class=&#34;nv&#34;&gt;$INGRESS_POD&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -dns istio-ingressgateway.istio-system.svc &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -socketPath /run/spire/sockets/server.sock
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Entry ID         : 6f2fe370-5261-4361-ac36-10aae8d91ff7
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SPIFFE ID        : spiffe://example.org/ns/istio-system/sa/istio-ingressgateway-service-account
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Parent ID        : spiffe://example.org/ns/spire/sa/spire-agent
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Revision         : &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;TTL              : default
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Selector         : k8s:ns:istio-system
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Selector         : k8s:pod-uid:63c2bbf5-a8b1-4b1f-ad64-f62ad2a69807
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Selector         : k8s:sa:istio-ingressgateway-service-account
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;DNS name         : istio-ingressgateway.istio-system.svc
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;DNS name         : istio-ingressgateway-5b45864fd4-lgrxs
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;部署一个工作负载的例子。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ istioctl kube-inject --filename @samples/security/spire/sleep-spire.yaml &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; kubectl apply -f -
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;请注意，工作负载将需要 SPIFFE CSI 驱动卷来访问 SPIRE 代理套接字。要做到这一点，你可以利用&lt;a href=&#34;https://istio.io/latest/docs/ops/integrations/spire/#install-istio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;安装 Istio&lt;/a&gt; 部分的 &lt;code&gt;spire &lt;/code&gt;pod 注释模板，或将 CSI 卷添加到工作负载的部署规范中。这两种方法在下面的示例片段中都有强调。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;apps/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Deployment&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;sleep&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;replicas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;sleep&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;sleep&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Injects custom sidecar template&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;annotations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;inject.istio.io/templates&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;sidecar,spire&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;terminationGracePeriodSeconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;serviceAccountName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;sleep&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;containers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;sleep&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;curlimages/curl&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/bin/sleep&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;3650d&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;imagePullPolicy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;IfNotPresent&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumeMounts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;tmp&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mountPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/tmp&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;securityContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;runAsUser&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;tmp&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;emptyDir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# CSI volume&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;workload-socket&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;csi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;driver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;csi.spiffe.io&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获取 pod 信息。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ &lt;span class=&#34;nv&#34;&gt;SLEEP_POD&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;kubectl get pod -l &lt;span class=&#34;nv&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;sleep -o &lt;span class=&#34;nv&#34;&gt;jsonpath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;{.items[0].metadata.name}&amp;#34;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ &lt;span class=&#34;nv&#34;&gt;SLEEP_POD_UID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;kubectl get pods &lt;span class=&#34;nv&#34;&gt;$SLEEP_POD&lt;/span&gt; -o &lt;span class=&#34;nv&#34;&gt;jsonpath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;{.metadata.uid}&amp;#39;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注册工作负载。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -n spire spire-server-0 -- &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;/opt/spire/bin/spire-server entry create &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -spiffeID spiffe://example.org/ns/default/sa/sleep &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -parentID spiffe://example.org/ns/spire/sa/spire-agent &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -selector k8s:ns:default &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -selector k8s:pod-uid:&lt;span class=&#34;nv&#34;&gt;$SLEEP_POD_UID&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -dns &lt;span class=&#34;nv&#34;&gt;$SLEEP_POD&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -socketPath /run/spire/sockets/server.sock
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;工作负载的 SPIFFE ID 必须遵循 Istio SPIFFE ID 模式：&lt;code&gt;spiffe://&amp;lt;trust.domain&amp;gt;/ns/&amp;lt;namespace&amp;gt;/sa/&amp;lt;service-account&amp;gt;。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;请参阅 &lt;a href=&#34;https://spiffe.io/docs/latest/deploying/registering/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE 关于注册工作负载的帮助&lt;/a&gt;，了解如何为工作负载创建新条目，并使用多个选择器加强验证标准，使其得到验证。&lt;/p&gt;
&lt;h2 id=&#34;验证是否为工作负载创建了身份&#34;&gt;验证是否为工作负载创建了身份&lt;/h2&gt;
&lt;p&gt;使用下面的命令来确认为工作负载创建了身份：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -i -t &lt;span class=&#34;nv&#34;&gt;$SPIRE_SERVER_POD&lt;/span&gt; -n spire -c spire-server -- /bin/sh -c &lt;span class=&#34;s2&#34;&gt;&amp;#34;bin/spire-server entry show -socketPath /run/spire/sockets/server.sock&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Found &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; entries
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Entry ID         : c8dfccdc-9762-4762-80d3-5434e5388ae7
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SPIFFE ID        : spiffe://example.org/ns/istio-system/sa/istio-ingressgateway-service-account
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Parent ID        : spiffe://example.org/ns/spire/sa/spire-agent
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Revision         : &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;TTL              : default
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Selector         : k8s:ns:istio-system
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Selector         : k8s:pod-uid:88b71387-4641-4d9c-9a89-989c88f7509d
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Selector         : k8s:sa:istio-ingressgateway-service-account
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;DNS name         : istio-ingressgateway-5b45864fd4-lgrxs
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Entry ID         : af7b53dc-4cc9-40d3-aaeb-08abbddd8e54
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SPIFFE ID        : spiffe://example.org/ns/default/sa/sleep
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Parent ID        : spiffe://example.org/ns/spire/sa/spire-agent
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Revision         : &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;TTL              : default
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Selector         : k8s:ns:default
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Selector         : k8s:pod-uid:ee490447-e502-46bd-8532-5a746b0871d6
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;DNS name         : sleep-5f4d47c948-njvpk
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Entry ID         : f0544fd7-1945-4bd1-88dc-0a5513fdae1c
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SPIFFE ID        : spiffe://example.org/ns/spire/sa/spire-agent
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Parent ID        : spiffe://example.org/spire/server
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Revision         : &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;TTL              : default
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Selector         : k8s_psat:agent_ns:spire
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Selector         : k8s_psat:agent_sa:spire-agent
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Selector         : k8s_psat:cluster:demo-cluster
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;检查 Ingress-gateway pod 状态。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl get pods -n istio-system
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NAME                                    READY   STATUS    RESTARTS   AGE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;istio-ingressgateway-5b45864fd4-lgrxs   1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          60s
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;istiod-989f54d9c-sg7sn                  1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          45s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在为 Ingress-gateway pod 注册条目后，Envoy 会收到由 SPIRE 签发的身份，并将其用于所有 TLS 和 mTLS 通信。&lt;/p&gt;
&lt;h3 id=&#34;检查工作负载身份是否是由-spire-签发的&#34;&gt;检查工作负载身份是否是由 SPIRE 签发的&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;使用 &lt;code&gt;istioctl proxy-config secret&lt;/code&gt; 命令检索 sleep 的 SVID 身份文件。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ istioctl proxy-config secret &lt;span class=&#34;nv&#34;&gt;$SLEEP_POD&lt;/span&gt; -o json &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; jq -r &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.dynamicActiveSecrets[0].secret.tlsCertificate.certificateChain.inlineBytes&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; base64 --decode &amp;gt; chain.pem
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;检查证书并核实 SPIRE 是发行人。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ openssl x509 -in chain.pem -text &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep SPIRE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Subject: &lt;span class=&#34;nv&#34;&gt;C&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; US, &lt;span class=&#34;nv&#34;&gt;O&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; SPIRE, &lt;span class=&#34;nv&#34;&gt;CN&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; sleep-5f4d47c948-njvpk
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;spiffe-联邦&#34;&gt;SPIFFE 联邦&lt;/h2&gt;
&lt;p&gt;SPIRE 服务器能够对来自不同信任域的 SPIFFE 身份进行认证。这被称为 SPIFFE 联邦。&lt;/p&gt;
&lt;p&gt;SPIRE Agent 可以被配置为通过 Envoy SDS API 向 Envoy 推送联合身份包，允许 Envoy 使用&lt;a href=&#34;https://spiffe.io/docs/latest/microservices/envoy/#validation-context&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;验证上下文&lt;/a&gt;来验证对等的证书并信任来自另一个信任域的工作负载。为了使 Istio 能够通过 SPIRE 集成来联合 SPIFFE 身份，请查阅 &lt;a href=&#34;https://github.com/spiffe/spire/blob/main/doc/spire_agent.md#sds-configuration&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIRE Agent SDS 配置&lt;/a&gt;，并为你的 SPIRE Agent 配置文件设置以下 SDS 配置值。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;配置&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;描述&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;资源名称&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;default_svid_name&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;TLS 证书资源名称，用于 Envoy SDS 的默认 X509-SVID。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;default&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;default_bundle_name&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;用于 Envoy SDS 的默认 X.509 捆绑包的验证上下文资源名称。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;null&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;default_all_bundles_name&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;所有使用 Envoy SDS 的捆绑包（包括联合包）所使用的验证上下文资源名称。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;ROOTCA&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;这让 Envoy 可以直接从 SPIRE 获得联合捆绑包。&lt;/p&gt;
&lt;h3 id=&#34;创建联合注册条目&#34;&gt;创建联合注册条目&lt;/h3&gt;
&lt;p&gt;如果使用 SPIRE Kubernetes 工作负载注册器，通过向服务部署规范添加 pod 注释 &lt;code&gt;spiffe.io/federatesWith&lt;/code&gt;，指定你希望 pod 与之联合的信任域，为工作负载创建联合条目：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;podAnnotations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spiffe.io/federatesWith&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;trust.domain&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;关于手动注册，请参见&lt;a href=&#34;https://spiffe.io/docs/latest/architecture/federation/readme/#create-registration-entries-for-federation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;为联邦创建注册条目&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;清理-spire&#34;&gt;清理 SPIRE&lt;/h2&gt;
&lt;p&gt;如果你使用 Istio 提供的快速启动 SPIRE 部署来安装 SPIRE，使用以下命令来删除这些 Kubernetes 资源：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl delete CustomResourceDefinition spiffeids.spiffeid.spiffe.io
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl delete -n spire serviceaccount spire-agent
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl delete -n spire configmap spire-agent
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl delete -n spire deployment spire-agent
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl delete csidriver csi.spiffe.io
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl delete -n spire configmap spire-server
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl delete -n spire service spire-server
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl delete -n spire serviceaccount spire-server
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl delete -n spire statefulset spire-server
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl delete clusterrole spire-server-trust-role spire-agent-cluster-role
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl delete clusterrolebinding spire-server-trust-role-binding spire-agent-cluster-role-binding
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl delete namespace spire
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>
